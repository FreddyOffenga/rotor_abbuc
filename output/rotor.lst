mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; ROTOR
     2 				; F#READY, 2023-07-15
     3
     4 				; version 11
     5 				; Fixed bug score update when edge detected, cleaned up edge detection logic
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players red and blue move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; DONE
    16 				; - test routine for magnitude and step calculations
    17 				; - moved calculations to right routines, renames and improvements
    18 				; - TEST step speed, edge detection
    19 				; - fixed nasty bug, overlapping labels in zp :(
    20 				; - fixed magnitude table (basic prog)
    21 				; - fixed dx,dy by not adding 1 pixel
    22 				; - fixed bug where M1PF was not used to detect edge (only M0PF)
    23 				; - fixed bug in menu display, corrected menu DLI length
    24 				; - fixed driver auto detect for paddles, stick, driving
    25 				; - always reset game/score from menu start
    26 				; - allow players to move even in menu (without ball)
    27 				; - end game at X points (11 points)
    28 				; - double speed for now (should be a better way to select ball velocity)
    29 				; - add sound when player1/2 hits ball
    30 				; - removed include dda_line_lib, inlined and custom for this game
    31
    32 				; TODO
    33 				; - add backdrop image
    34 				; - add music by IvoP
    35 				; - add sound when ball hits edge
    36 				; - add support for driving controllers
    37 				; - break part of outer circle when ball hits
    38 				; - allow ball to go outside circle
    39 				; - add computer player(s)
    40
    41 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    42
    43 				; must be in decimal format, so $11 is 11
    44 = 0011			MAX_SCORE   = $11
    45
    46 = 1000			pm_area     = $1000
    47 = 1180			msl_area    = pm_area+$180
    48 = 1200			p0_area     = pm_area+$200
    49 = 1280			p1_area     = pm_area+$280
    50 = 1300			p2_area     = pm_area+$300
    51 = 1380			p3_area     = pm_area+$380
    52
    53 				; $1400 .. $1500 is overwritten, bug?
    54
    55 				; outer tables 256 for 360 degrees
    56 = 1600			outer_x_256     = $1600
    57 = 1700			outer_y_256     = $1700
    58
    59 = 1800			screen_y_lo     = $1800
    60 = 1900			screen_y_hi     = $1900
    61
    62 = 0140			WIDTH           = 320
    63 = 00C0			HEIGHT          = 192
    64
    65 = 0028			SCREEN_WIDTH    = 40
    66
    67 = 0030			outer_x_margin  = 48 ;47-32
    68 = 0040			inner_x_margin  = 64
    69
    70 = 00A0			circle_center_x = WIDTH/2
    71 = 0060			circle_center_y = HEIGHT/2
    72
    73 = 0006			ball_top_margin     = 6
    74 = 0045			ball_left_margin    = 64+5
    75
    76 				; pm upper margin
    77 = 0001			upper_margin    = 1
    78 = 0020			left_margin     = 32
    79
    80 = 0080			table_x_ptr     = $80
    81 = 0082			table_y_ptr     = $82
    82
    83 = 0084			shape_ptr       = $84
    84
    85 = 0086			tmp_screen      = $86
    86
    87 = 0088			course_x        = $88
    88
    89 = 008A			tmp_font        = $8a
    90
    91 = 008C			mode_menu       = $8c
    92
    93 				; player vars must be in sequence for zp,x indexing
    94
    95 = 0090			p1_shape        = $90
    96 = 0091			p2_shape        = $91
    97
    98 = 0094			player1_x       = $94
    99 = 0095			player2_x       = $95
   100
   101 = 0098			player1_y       = $98
   102 = 0099			player2_y       = $99
   103
   104 = 009C			p1_angle        = $9c
   105 = 009D			p2_angle        = $9d
   106
   107 = 00A0			mp_collision    = $a0
   108 = 00A1			in_collision    = $a1
   109 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   110 = 00A3			edge_delay      = $a3
   111 = 00A4			bat_collision_delay = $a4
   112
   113 				; ball vars
   114 = 00A6			ball_current_x      = $a6
   115 = 00A7			ball_current_y      = $a7
   116 = 00AA			ball_angle_start    = $aa
   117 = 00AB			ball_angle_end      = $ab
   118 = 00AC			ball_speed          = $ac
   119
   120 = 00B0			tmp_angle1          = $b0
   121 = 00B1			tmp_angle2          = $b1
   122 = 00B2			add_to_angle        = $b2
   123 = 00B3			angle_diff_bat      = $b3
   124 = 00B4			tmp_angle_direction = $b4
   125 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   126 = 00B6			game_restart        = $b6
   127 = 00B7			tmp_angle_diff      = $b7
   128 = 00B8			magnitude           = $b8       ; word
   129
   130 				; $c0 - $cf used for drivers
   131
   132 = 00E0			DDA_ZERO_PAGE = $e0
   133
   134 = 00E0			_divisor    = $e0   ; word
   135 = 00E2			_dividend   = $e2   ; word
   136 = 00E4			_remainder  = $e4   ; word
   137 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   138
   139 = 00E6			tmp_x1      = $e6   ; byte
   140 = 00E7			tmp_y1      = $e7   ; byte
   141 = 00E8			tmp_x2      = $e8   ; byte
   142 = 00E9			tmp_y2      = $e9   ; byte
   143
   144 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   145 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   146
   147 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   148 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   149
   150 = 00F2			tmp_dx      = $f2  ; byte
   151 = 00F3			tmp_dy      = $f3  ; byte
   152
   153 = 00F6			_multiplicand   = $f6   ; word
   154 = 00F8			_multiplier     = $f8   ; byte
   155
   156 				; direction:
   157 				; 0 : x1<x2 or y1<y2 = add
   158 				; 1 ; x1>=y2 or y1>=y2 = subtract
   159
   160 = 00FA			dir_x       = $fa  ; byte
   161 = 00FB			dir_y       = $fb  ; byte
   162
   163 = 00FC			line_end_x  = $fc  ; byte
   164 = 00FD			line_end_y  = $fd  ; byte
   165
   166 				            org $2000
   167
   168 				            icl 'lib/drivers.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 				; $c0 - $cf used for drivers
     5 = 00C0			driver_tmp      = $c0   ; and $c1
     6 = 00C2			driver_mode     = $c2
     7
     8 = 00E5			paddle_vals = 229
     9 = 011F			paddle_add  = 287       ; 65536 / 229
    10
    11 				            .align $100
    12 				paddle_to_256
    13 = 2000			            .ds $100
    14
    15 				; paddle initial value
    16 				prev_paddle_value
    17 = 2100			            .ds 1
    18
    19 				driver_init
    20 FFFF> 2101-2A8F> A9 00	            lda #0  ; stick
    21 2103 85 C2		            sta driver_mode
    22
    23 2105 AD 70 02		            lda PADDL0
    24 2108 8D 00 21		            sta prev_paddle_value
    25
    26 210B A9 00		            lda #0
    27 210D 85 9C		            sta p1_angle
    28 210F A9 80		            lda #128
    29 2111 85 9D		            sta p2_angle
    30
    31 				; init paddle table
    32
    33 2113 A9 00		            lda #0
    34 2115 85 C0		            sta driver_tmp
    35 2117 85 C1		            sta driver_tmp+1
    36 				            
    37 2119 A2 00		            ldx #0
    38 211B			store_pv
    39 211B A5 C1		            lda driver_tmp+1
    40 211D 9D 00 20		            sta paddle_to_256,x
    41 				            
    42 2120 A5 C0		            lda driver_tmp
    43 2122 18			            clc
    44 2123 69 1F		            adc #<paddle_add
    45 2125 85 C0		            sta driver_tmp
    46 2127 A5 C1		            lda driver_tmp+1
    47 2129 69 01		            adc #>paddle_add
    48 212B 85 C1		            sta driver_tmp+1
    49 212D E8			            inx
    50 212E E0 E5		            cpx #paddle_vals
    51 2130 D0 E9		            bne store_pv
    52 2132 60			            rts
    53
    54 				; stick detect by using left/right
    55 				; paddle by connecting/rotate
    56 				; driving controller by rotate
    57
    58 				; return A = driver mode
    59 				; 0 = stick detected
    60 				; 1 = paddle detected
    61 				; 2 = driving detected
    62
    63 2133			driver_detect
    64 2133 AD 70 02		            lda PADDL0
    65 2136 C9 E4		            cmp #228
    66 2138 D0 07		            bne paddle_detect
    67 213A AD 71 02		            lda PADDL1
    68 213D C9 E4		            cmp #228
    69 213F F0 05		            beq no_paddle_detect
    70 2141			paddle_detect
    71 2141 A9 01		            lda #1
    72 2143 85 C2		            sta driver_mode
    73 2145 60			            rts
    74
    75 2146			no_paddle_detect
    76 2146 AD 78 02		            lda STICK0
    77 2149 C9 0C		            cmp #12
    78 214B D0 05		            bne no_driving_detect
    79 214D A9 02		            lda #2
    80 214F 85 C2		            sta driver_mode
    81 2151 60			            rts
    82
    83 2152			no_driving_detect
    84 2152 C9 07		            cmp #7      ; paddle button also gives this
    85 2154 F0 04		            beq stick_detect    
    86 2156 C9 0B		            cmp #11     ; paddle button also gives this
    87 2158 D0 05		            bne no_stick_detect
    88 215A			stick_detect
    89 215A A9 00		            lda #0
    90 215C 85 C2		            sta driver_mode
    91 215E 60			            rts
    92
    93 215F			no_stick_detect
    94 				; default is the last value
    95 215F A5 C2		            lda driver_mode
    96 2161 60			            rts
    97
    98 				; move player 1/2
    99 				; right - clockwise, left = anti-clockwise
   100
   101 				; X = 0, player 1
   102 				; X = 1, player 2
   103
   104 				; A = driver mode:
   105 				; 0 : stick
   106 				; 1 : paddle
   107 				; 2 : driving
   108 				; 3 : computer
   109
   110 2162			main_driver            
   111 2162 A4 C2		            ldy driver_mode
   112 2164 B9 73 21		            lda driver_lo,y
   113 2167 8D 71 21		            sta driver_ptr
   114 216A B9 77 21		            lda driver_hi,y
   115 216D 8D 72 21		            sta driver_ptr+1
   116
   117 = 2171			driver_ptr = *+1
   118 2170 4C FF FF		            jmp $ffff  
   119
   120 2173			driver_lo
   121 2173 7B			            dta <driver_stick
   122 2174 BF			            dta <driver_paddle
   123 2175 7B			            dta <driver_stick
   124 2176 7B			            dta <driver_stick
   125
   126 2177			driver_hi
   127 2177 21			            dta >driver_stick
   128 2178 21			            dta >driver_paddle
   129 2179 21			            dta >driver_stick
   130 217A 21			            dta >driver_stick
   131
   132 				; joystick driver
   133
   134 217B			driver_stick
   135 217B BD 78 02		            lda STICK0,x
   136 217E C9 0F		            cmp #15
   137 2180 F0 21		            beq move_done
   138 2182 C9 0B		            cmp #11
   139 2184 D0 0E		            bne no_left
   140
   141 2186 D6 9C		            dec p1_angle,x
   142 				            ;dec p1_angle,x
   143 2188 BD 84 02		            lda STRIG0,x
   144 218B D0 04		            bne no_fast
   145 218D D6 9C		            dec p1_angle,x
   146 218F D6 9C		            dec p1_angle,x
   147 2191			no_fast
   148 				            
   149 2191 4C A3 21		            jmp move_done
   150 2194 C9 07		no_left     cmp #7
   151 2196 D0 0B		            bne move_done
   152
   153 2198 F6 9C		            inc p1_angle,x
   154 				            ;inc p1_angle,x
   155 219A BD 84 02		            lda STRIG0,x
   156 219D D0 04		            bne no_fast_right
   157 219F F6 9C		            inc p1_angle,x
   158 21A1 F6 9C		            inc p1_angle,x
   159 21A3			no_fast_right
   160 21A3			move_done
   161 21A3 60			            rts
   162
   163 				; X=port number to check (paddle uses only port 1)
   164 				; check fire button (paddle uses left/right stick as fire button)
   165 				; A=0 not pressed, 1=pressed
   166
   167 21A4			is_fire_button
   168 21A4 A5 C2		            lda driver_mode
   169 21A6 C9 01		            cmp #1
   170 21A8 F0 04		            beq check_paddle_fire
   171 				            
   172 21AA BD 84 02		            lda STRIG0,x
   173 21AD 60			            rts
   174 21AE			check_paddle_fire
   175
   176 21AE AD 78 02		            lda STICK0
   177 21B1 C9 07		            cmp #7
   178 21B3 F0 07		            beq paddle_fire
   179 21B5 C9 0B		            cmp #11
   180 21B7 F0 03		            beq paddle_fire
   181 21B9 A9 00		            lda #0
   182 21BB 60			            rts
   183 21BC			paddle_fire
   184 21BC A9 01		            lda #1
   185 21BE 60			            rts
   186
   187 				; paddle driver
   188 				            
   189 21BF			driver_paddle            
   190 21BF BD 70 02		            lda PADDL0,x
   191 21C2 A8			            tay
   192 21C3 B9 00 20		            lda paddle_to_256,y
   193 21C6 5D CC 21		            eor paddle_offsets,x
   194 21C9 95 9C		            sta p1_angle,x
   195 21CB 60			            rts
   196
   197 21CC			paddle_offsets
   198 21CC 00 80		            dta 0,128
   169 				            
   170 21CE			main         
   171 21CE A9 00		            lda #0
   172 				            ;sta SDMCTL
   173 21D0 85 B6		            sta game_restart
   174
   175 21D2 20 01 21		            jsr driver_init
   176
   177 21D5 20 99 27		            jsr make_shape_index
   178 				 
   179 21D8 20 C9 27		            jsr make_outer_256
   180
   181 21DB A9 00		            lda #<display_list
   182 21DD 8D 30 02		            sta SDLSTL
   183 21E0 A9 3C		            lda #>display_list
   184 21E2 8D 31 02		            sta SDLSTH
   185
   186 21E5 A9 2E		            lda #%00101110  ; enable P/M DMA
   187 21E7 8D 2F 02		            sta SDMCTL
   188
   189 				;            lda #<menu_dl
   190 				;            sta SDLSTL
   191 				;            lda #>menu_dl
   192 				;            sta SDLSTH
   193 				            
   194 21EA 20 50 23		            jsr make_screen_y_tab
   195
   196 21ED 20 9B 23		            jsr clear_screen
   197
   198 21F0 20 39 28		            jsr reset_score
   199 21F3 20 07 28		            jsr show_score_p1
   200 21F6 20 20 28		            jsr show_score_p2
   201
   202 				; debugging, can be removed later            
   203 				            ;jsr plot_inner
   204 				                       
   205 21F9 20 24 2A		            jsr init_sprites
   206 21FC 20 50 2A		            jsr init_colors
   207
   208 				; init. game vars
   209 21FF A2 00		            ldx #INIT_LEVEL_INDEX
   210 2201 8E 6C 2A		            stx current_level_index
   211 2204 20 71 2A		            jsr set_level_ball_speed
   212
   213 				; todo remove the test routines later
   214 				;            jmp test_ball_movements             
   215
   216 2207 20 55 27		            jsr plot_outer
   217
   218 220A A9 01		            lda #1
   219 220C 85 8C		            sta mode_menu           ; start with menu
   220
   221 				; start vbi
   222 				            
   223 220E A9 C1		            lda #<dli_menu
   224 2210 8D 00 02		            sta VDSLST
   225 2213 A9 22		            lda #>dli_menu
   226 2215 8D 01 02		            sta VDSLST+1
   227 				            
   228 2218 A9 C0		            lda #$c0
   229 221A 8D 0E D4		            sta NMIEN
   230 				            
   231 221D A9 07		            lda #7          ; sets VVBLKI
   232 221F A0 25		            ldy #<vbi
   233 2221 A2 24		            ldx #>vbi
   234 2223 20 5C E4		            jsr $e45c       ; SETVBV
   235
   236 				; we're just sitting here while VBI does all the work :)
   237 2226 4C 26 22		loop        jmp loop
   238
   239 				; test ball movement(s) from start angle to end angle
   240
   241 				; todo draw lines
   242 				; x,y from
   243 				; outer_x_256
   244 				; outer_y_256
   245
   246 				; later
   247 				; get magnitude             
   248 				; magnitudes_lo
   249 				; magnitudes_hi
   250
   251 2229			test_ball_movements
   252 				;            jsr plot_angle_dots
   253
   254 2229 A9 80		            lda #$80
   255 222B 85 AA		            sta ball_angle_start
   256 222D A0 81		            ldy #$81
   257
   258 222F			plot_line_loop
   259 222F 84 AB		            sty ball_angle_end
   260 2231 98			            tya
   261 2232 48			            pha
   262
   263 2233 A5 AA		            lda ball_angle_start
   264 2235 A8			            tay
   265 2236 20 91 22		            jsr plot_angle
   266
   267 2239 A6 AA		            ldx ball_angle_start
   268 223B 20 16 26		            jsr outer_angle_to_start_position
   269
   270 223E A5 AB		            lda ball_angle_end
   271 2240 A8			            tay
   272 2241 20 91 22		            jsr plot_angle
   273 				            
   274 2244 A6 AB		            ldx ball_angle_end
   275 2246 20 8E 26		            jsr angle_to_end_position
   276 				                                    
   277 2249 20 1E 29		            jsr init_current_xy
   278
   279 				; do steps and plot
   280
   281 224C A9 01		            lda #1
   282 224E 8D FB 02		            sta draw_color  
   283
   284 2251 A2 00		            ldx #0
   285 2253			plot_some            
   286 2253 8A			            txa
   287 2254 48			            pha
   288 				            
   289 2255 20 8B 29		            jsr move_current_xy
   290 2258 D0 17		            bne detect_end_line
   291
   292 225A A5 EB		            lda current_x+1
   293 225C 18			            clc
   294 225D 69 30		            adc #outer_x_margin
   295 225F 85 55		            sta x_position
   296 2261 A9 00		            lda #0
   297 2263 85 56		            sta x_position+1
   298 				            
   299 2265 A5 ED		            lda current_y+1
   300 2267 85 54		            sta y_position
   301 2269 20 D4 23		            jsr plot_dot 
   302 				            
   303 226C 68			            pla
   304 226D AA			            tax
   305 				            
   306 226E E8			            inx
   307 226F D0 E2		            bne plot_some
   308
   309 2271			detect_end_line
   310 2271 68			            pla
   311 2272 AA			            tax
   312
   313 				; next line
   314 2273 68			            pla
   315 2274 18			            clc
   316 2275 69 01		            adc #$01
   317 2277 A8			            tay
   318 2278 C9 80		            cmp #$80
   319
   320 227A D0 B3		            bne plot_line_loop
   321
   322 227C			test_loop
   323 227C 4C 7C 22		            jmp test_loop
   324
   325 				; plot dots for all 0..255 angles
   326
   327 227F			plot_angle_dots
   328 227F A9 01		            lda #1
   329 2281 8D FB 02		            sta draw_color
   330
   331 2284 A0 00		            ldy #0
   332
   333 2286			plot_256_dots            
   334 2286 98			            tya
   335 2287 48			            pha
   336
   337 2288 20 91 22		            jsr plot_angle
   338
   339 228B 68			            pla
   340 228C A8			            tay
   341 228D C8			            iny
   342 228E D0 F6		            bne plot_256_dots
   343 				                     
   344 2290 60			            rts
   345
   346 2291			plot_angle
   347 2291 B9 00 16		            lda outer_x_256,y
   348 2294 18			            clc
   349 2295 69 30		            adc #outer_x_margin
   350 2297 85 55		            sta x_position            
   351 2299 A9 00		            lda #0
   352 229B 69 00		            adc #0
   353 229D 85 56		            sta x_position+1
   354
   355 229F B9 00 17		            lda outer_y_256,y            
   356 22A2 85 54		            sta y_position
   357
   358 22A4 20 D4 23		            jsr plot_dot            
   359 				            
   360 22A7 60			            rts
   361
   362 				;------------------------
   363 				; 8bit * 8bit = 16bit multiply
   364 				; By White Flame
   365 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   366 				; uses extra zp var _multiplicand+1
   367
   368 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   369 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   370
   371 				; In this version, both inputs must be unsigned
   372 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   373
   374 22A8			_multi8
   375 22A8 A9 00		            lda #$00
   376 22AA A8			            tay
   377 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   378 22AB F0 0D		            beq _enter_loop
   379 22AD			_do_add
   380 22AD 18			            clc
   381 22AE 65 F6		            adc _multiplicand
   382 22B0 AA			            tax
   383
   384 22B1 98			            tya
   385 22B2 65 F7		            adc _multiplicand+1
   386 22B4 A8			            tay
   387 22B5 8A			            txa
   388 22B6			_mul_loop
   389 22B6 06 F6		            asl _multiplicand
   390 22B8 26 F7		            rol _multiplicand+1
   391 22BA			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   392 22BA 46 F8		            lsr _multiplier
   393 22BC B0 EF		            bcs _do_add
   394 22BE D0 F6		            bne _mul_loop
   395 22C0 60			            rts
   396
   397 22C1			dli_menu
   398 22C1 48			            pha
   399 22C2 8A			            txa
   400 22C3 48			            pha
   401 				            
   402 22C4 A9 00		            lda #0
   403 22C6 8D 0A D4		            sta WSYNC
   404 22C9 8D 1A D0		            sta COLBK
   405 22CC A9 0E		            lda #$0e
   406 22CE 8D 0A D4		            sta WSYNC
   407 22D1 8D 1A D0		            sta COLBK
   408 22D4 A9 0A		            lda #$0a
   409 22D6 8D 0A D4		            sta WSYNC
   410 22D9 8D 1A D0		            sta COLBK
   411 22DC A9 00		            lda #0
   412 22DE 8D 0A D4		            sta WSYNC
   413 22E1 8D 1A D0		            sta COLBK
   414
   415 22E4 A2 00		            ldx #0
   416 22E6			color_it            
   417 22E6 BD 18 23		            lda menu_colpf0,x
   418 22E9 8D 0A D4		            sta WSYNC
   419 22EC 8D 16 D0		            sta COLPF0
   420 22EF E8			            inx
   421 22F0 E0 38		            cpx #56
   422 22F2 D0 F2		            bne color_it
   423
   424 22F4 A9 00		            lda #0
   425 22F6 8D 0A D4		            sta WSYNC
   426 22F9 8D 1A D0		            sta COLBK
   427 22FC A9 0A		            lda #$0a
   428 22FE 8D 0A D4		            sta WSYNC
   429 2301 8D 1A D0		            sta COLBK
   430 2304 A9 0E		            lda #$0e
   431 2306 8D 0A D4		            sta WSYNC
   432 2309 8D 1A D0		            sta COLBK
   433 230C A9 00		            lda #0
   434 230E 8D 0A D4		            sta WSYNC
   435 2311 8D 1A D0		            sta COLBK
   436 				            
   437 2314 68			            pla
   438 2315 AA			            tax
   439 2316 68			            pla
   440 2317 40			            rti
   441
   442 2318			menu_colpf0
   443 2318 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   444 2320 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   445 2328 00 00 00 00		            dta 0,0,0,0
   446 232C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   447 2334 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   448 233C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   449 2344 00 00 00 00		            dta 0,0,0,0
   450 2348 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   451
   452 				; make pointers from y-position to screen memory
   453 				; screen memory is 3 blocks
   454 				; screen_mem1 : 102 lines, 4080 bytes
   455 				; screen_mem2 : 102 lines, 4080 bytes
   456 				; screen_mem3 :  20 lines,  800 bytes
   457
   458 2350			make_screen_y_tab
   459 2350 A9 00		            lda #<screen_mem1
   460 2352 85 86		            sta tmp_screen
   461 2354 A9 90		            lda #>screen_mem1
   462 2356 85 87		            sta tmp_screen+1
   463
   464 2358 A2 00		            ldx #0
   465 235A			fill_y_tab1
   466 235A 20 83 23		            jsr store_y_line
   467 235D E8			            inx
   468 235E E0 66		            cpx #102
   469 2360 D0 F8		            bne fill_y_tab1
   470
   471 				; x = 102
   472 2362 A9 00		            lda #<screen_mem2
   473 2364 85 86		            sta tmp_screen
   474 2366 A9 A0		            lda #>screen_mem2
   475 2368 85 87		            sta tmp_screen+1
   476
   477 236A			fill_y_tab2
   478 236A 20 83 23		            jsr store_y_line
   479 236D E8			            inx
   480 236E E0 CC		            cpx #204
   481 2370 D0 F8		            bne fill_y_tab2
   482
   483 2372 A9 00		            lda #<screen_mem3
   484 2374 85 86		            sta tmp_screen
   485 2376 A9 B0		            lda #>screen_mem3
   486 2378 85 87		            sta tmp_screen+1
   487
   488 				; x = 204
   489 237A			fill_y_tab3
   490 237A 20 83 23		            jsr store_y_line
   491 237D E8			            inx
   492 237E E0 E0		            cpx #224
   493 2380 D0 F8		            bne fill_y_tab3
   494 2382 60			            rts
   495
   496 2383			store_y_line
   497 2383 A5 86		            lda tmp_screen
   498 2385 9D 00 18		            sta screen_y_lo,x
   499 2388 A5 87		            lda tmp_screen+1
   500 238A 9D 00 19		            sta screen_y_hi,x
   501 				            
   502 238D A5 86		            lda tmp_screen
   503 238F 18			            clc
   504 2390 69 28		            adc #SCREEN_WIDTH
   505 2392 85 86		            sta tmp_screen
   506 2394 A5 87		            lda tmp_screen+1
   507 2396 69 00		            adc #0
   508 2398 85 87		            sta tmp_screen+1
   509 239A 60			            rts
   510
   511 				; @todo invert backdrop image, now we have to do it here :P
   512 239B			clear_screen
   513 239B A9 00		            lda #<screen_mem1
   514 239D 85 86		            sta tmp_screen
   515 239F A9 90		            lda #>screen_mem1
   516 23A1 85 87		            sta tmp_screen+1
   517 				            
   518 23A3 A2 10		            ldx #16     ; 16 pages = 4K
   519 23A5 20 C3 23		            jsr wipe_x_pages
   520 				           
   521 23A8 A9 00		            lda #<screen_mem2
   522 23AA 85 86		            sta tmp_screen
   523 23AC A9 A0		            lda #>screen_mem2
   524 23AE 85 87		            sta tmp_screen+1
   525 				            
   526 23B0 A2 10		            ldx #16     ; 16 pages = 4K
   527 23B2 20 C3 23		            jsr wipe_x_pages
   528
   529 23B5 A9 00		            lda #<screen_mem3
   530 23B7 85 86		            sta tmp_screen
   531 23B9 A9 B0		            lda #>screen_mem3
   532 23BB 85 87		            sta tmp_screen+1
   533 				            
   534 23BD A2 04		            ldx #4     ; 4 pages = 1K
   535 23BF 20 C3 23		            jsr wipe_x_pages
   536 23C2 60			            rts
   537
   538 				; wipe x pages, starting from tmp_screen
   539
   540 23C3			wipe_x_pages
   541 23C3 A0 00		            ldy #0
   542 23C5			wipe_page
   543 23C5 B1 86		            lda (tmp_screen),y
   544 23C7 49 FF		            eor #$ff
   545 23C9 91 86		            sta (tmp_screen),y
   546 23CB C8			            iny
   547 23CC D0 F7		            bne wipe_page 
   548
   549 23CE E6 87		            inc tmp_screen+1
   550 23D0 CA			            dex
   551 23D1 D0 F2		            bne wipe_page
   552 23D3 60			            rts
   553
   554 23D4			plot_dot
   555 23D4 A6 54		            ldx y_position
   556 23D6 BD 00 18		            lda screen_y_lo,x
   557 23D9 85 86		            sta tmp_screen
   558 23DB BD 00 19		            lda screen_y_hi,x
   559 23DE 85 87		            sta tmp_screen+1
   560 				            
   561 23E0 A5 55		            lda x_position
   562 23E2 4A			            lsr
   563 23E3 4A			            lsr
   564 23E4 4A			            lsr
   565 23E5 85 88		            sta course_x
   566
   567 23E7 A5 56		            lda x_position+1
   568 23E9 F0 07		            beq x_below_256
   569 				; x >= 256, add 256/8
   570 23EB A5 88		            lda course_x
   571 23ED 18			            clc
   572 23EE 69 20		            adc #32
   573 23F0 85 88		            sta course_x
   574 				                        
   575 23F2			x_below_256
   576 23F2 A5 55		            lda x_position
   577 23F4 29 07		            and #%00000111
   578 23F6 AA			            tax
   579
   580 23F7 A4 88		            ldy course_x            
   581 23F9 B1 86		            lda (tmp_screen),y
   582 23FB 1D 0D 24		            ora pixel_mask,x
   583 23FE 91 86		            sta (tmp_screen),y
   584 2400 60			            rts   
   585
   586 2401			turn_color_ball
   587 2401 A6 B5		            ldx player_turn
   588 2403 BD 0A 24		            lda color_turn,x
   589 2406 8D C7 02		            sta COLOR3
   590 2409 60			            rts
   591 				            
   592 240A 00 26 76		color_turn  dta 0,$26,$76                           
   593
   594 240D			pixel_mask
   595 240D 80 40 20 10		            dta $80,$40,$20,$10
   596 2411 08 04 02 01		            dta $08,$04,$02,$01
   597
   598 2415			outer_collision_colors
   599 2415 06 00 00 00		            dta $06,$00,$00,$00
   600 2419 0E 00 00 00		            dta $0e,$00,$00,$00
   601 241D 00 00 00 00		            dta $00,$00,$00,$00
   602 2421 00 00 00 00		            dta $00,$00,$00,$00
   603
   604 				; A, X, Y are already saved by the OS
   605 2425			vbi                 
   606 2425 A9 2E		            lda #%00101110  ; enable P/M DMA
   607 2427 8D 2F 02		            sta SDMCTL
   608 242A A9 00		            lda #0
   609 242C 85 4D		            sta 77      ; attract off
   610 242E A9 44		            lda #>rotor_font
   611 2430 8D F4 02		            sta 756
   612
   613 				; menu switching thingy
   614
   615 2433 AD 1F D0		            lda CONSOL
   616 2436 C9 03		            cmp #3
   617 2438 D0 09		            bne no_option_pressed
   618
   619 243A			go_menu_mode            
   620 243A 20 99 26		            jsr wipe_ball
   621 				            
   622 243D A9 01		            lda #1
   623 243F 85 8C		            sta mode_menu
   624 2441 D0 0F		            bne check_mode_menu
   625
   626 2443			no_option_pressed
   627 2443 C9 06		            cmp #6
   628 2445 D0 0B		            bne check_mode_menu
   629 				            
   630 				; reset game
   631
   632 2447			reset_game
   633 2447 20 99 26		            jsr wipe_ball
   634 				            
   635 244A A9 01		            lda #1
   636 244C 85 B6		            sta game_restart
   637
   638 244E A9 00		            lda #0
   639 2450 85 8C		            sta mode_menu
   640
   641 2452			check_mode_menu
   642 2452 A5 8C		            lda mode_menu
   643 2454 F0 51		            beq main_game_vbi
   644
   645 				; within menu vbi
   646 				            
   647 2456 AD 1F D0		            lda CONSOL
   648 2459 C9 05		            cmp #5          ; select
   649 245B D0 18		            bne no_level_select
   650 				            
   651 245D AD 6B 2A		            lda previous_consol
   652 2460 C9 05		            cmp #5
   653 2462 F0 14		            beq wait_depressed
   654 				            
   655 2464 20 80 2A		            jsr increase_level
   656 2467 AE 6C 2A		            ldx current_level_index
   657 246A 20 71 2A		            jsr set_level_ball_speed            
   658
   659 246D A9 05		            lda #5
   660 246F 8D 6B 2A		            sta previous_consol
   661 2472 4C 78 24		            jmp wait_depressed
   662
   663 2475			no_level_select
   664 2475 8D 6B 2A		            sta previous_consol
   665
   666 2478			wait_depressed        
   667 2478 A9 00		            lda #<menu_dl
   668 247A 8D 30 02		            sta SDLSTL
   669 247D A9 40		            lda #>menu_dl
   670 247F 8D 31 02		            sta SDLSTH
   671
   672 				; detect/show controller type (used for both players)
   673 2482 20 8E 24		            jsr detect_show_driver
   674
   675 2485 20 9F 25		            jsr handle_player1
   676 2488 20 B8 25		            jsr handle_player2
   677
   678 248B 4C 48 25		            jmp exit_vbi
   679
   680 				; X = port/driver to detect
   681 248E			detect_show_driver
   682 248E 20 33 21		            jsr driver_detect
   683 2491 A8			            tay
   684 2492 B9 98 41		            lda driver_text_lo,y
   685 2495 85 86		            sta tmp_screen
   686 2497 B9 9C 41		            lda driver_text_hi,y
   687 249A 85 87		            sta tmp_screen+1
   688
   689 249C A0 07		            ldy #7
   690 249E			show_driv
   691 249E B1 86		            lda (tmp_screen),y
   692 24A0 99 1E 41		            sta driver_screen,y
   693 24A3 88			            dey
   694 24A4 10 F8		            bpl show_driv
   695 24A6 60			            rts
   696
   697 				; main game vbi
   698 24A7			main_game_vbi
   699 24A7 A5 B6		            lda game_restart
   700 24A9 F0 2F		            beq no_restart
   701 				            
   702 24AB A9 00		            lda #0
   703 24AD 85 B6		            sta game_restart
   704 				            
   705 24AF 20 4B 25		            jsr sound_off
   706 				            
   707 24B2 20 39 28		            jsr reset_score
   708 24B5 20 07 28		            jsr show_score_p1
   709 24B8 20 20 28		            jsr show_score_p2
   710
   711 				; restart game code
   712 				            ; initial state of players            
   713 				;            jsr handle_player1
   714 				;            jsr handle_player2
   715
   716 24BB A6 9C		            ldx p1_angle
   717 24BD 86 AA		            stx ball_angle_start
   718 24BF 20 F2 25		            jsr ball_to_start_position
   719 24C2 20 01 26		            jsr prepare_ball_end_position
   720
   721 24C5 A9 00		            lda #0
   722 24C7 85 A0		            sta mp_collision
   723 24C9 85 A1		            sta in_collision
   724 24CB 85 A3		            sta edge_delay
   725 24CD 8D 1E D0		            sta HITCLR
   726
   727 24D0 A9 02		            lda #2
   728 24D2 85 B5		            sta player_turn         ; blue's turn
   729
   730 24D4 20 01 24		            jsr turn_color_ball
   731 24D7 4C 48 25		            jmp exit_vbi            
   732
   733 24DA			no_restart
   734 24DA A9 00		            lda #<display_list
   735 24DC 8D 30 02		            sta SDLSTL
   736 24DF A9 3C		            lda #>display_list
   737 24E1 8D 31 02		            sta SDLSTH
   738
   739 24E4 AD 08 D0		            lda M0PL
   740 24E7 85 A0		            sta mp_collision
   741 24E9 AD 09 D0		            lda M1PL
   742 24EC 05 A0		            ora mp_collision
   743 24EE 85 A0		            sta mp_collision
   744 				 
   745 24F0 A9 26		            lda #$26
   746 24F2 8D 18 D0		            sta $d018
   747
   748 24F5 20 9F 25		            jsr handle_player1
   749
   750 24F8 20 B8 25		            jsr handle_player2
   751
   752 				; handle ball
   753
   754 24FB 20 99 26		            jsr wipe_ball         
   755
   756 				; Check ball collision with bat
   757
   758 24FE A5 A4		            lda bat_collision_delay
   759 2500 F0 05		            beq check_allowed
   760 2502 C6 A4		            dec bat_collision_delay
   761 2504 4C 21 25		            jmp move_one
   762
   763 2507			check_allowed
   764 2507 A5 A0		            lda mp_collision
   765 2509 F0 0F		            beq reset_in_collision
   766
   767 250B A5 A1		            lda in_collision
   768 250D D0 12		            bne no_first_hit
   769
   770 250F E6 A1		            inc in_collision            
   771 2511 20 2E 26		            jsr bounce_bat_ball 
   772 				            
   773 2514 20 5A 25		            jsr sound_bat          
   774 				            
   775 2517 4C 21 25		            jmp move_one
   776 				            
   777 251A			reset_in_collision
   778 251A A9 00		            lda #0
   779 251C 85 A1		            sta in_collision   
   780 251E 20 4B 25		            jsr sound_off         
   781
   782 2521			move_one
   783 2521			no_first_hit
   784 2521 20 8B 29		            jsr move_current_xy
   785 2524 F0 0F		            beq still_moving
   786 2526			do_reset
   787 2526 A5 AB		            lda ball_angle_end
   788 2528 85 AA		            sta ball_angle_start
   789
   790 252A 20 25 26		            jsr ball_current_to_start_position
   791 252D 20 01 26		            jsr prepare_ball_end_position
   792
   793 2530 20 6B 25		            jsr update_score
   794 2533 D0 13		            bne exit_vbi        ; end game
   795 2535			still_moving
   796 2535 A5 EB		            lda current_x+1
   797 2537 85 A6		            sta ball_current_x
   798 2539 A5 ED		            lda current_y+1
   799 253B 85 A7		            sta ball_current_y
   800
   801 253D 20 AE 26		            jsr show_ball
   802
   803 2540 A9 00		            lda #0
   804 2542 8D 18 D0		            sta $d018           
   805
   806 				; anything in A to clear collisions
   807 2545 8D 1E D0		            sta HITCLR
   808
   809 2548			exit_vbi
   810 2548 4C 62 E4		            jmp $e462
   811
   812 254B			sound_off
   813 254B A9 00		            lda #0
   814 254D 8D 01 D2		            sta AUDC1
   815 2550 8D 03 D2		            sta AUDC2
   816 2553 8D 05 D2		            sta AUDC3
   817 2556 8D 05 D2		            sta AUDC3
   818 2559 60			            rts
   819
   820 255A			sound_bat
   821 255A A5 B5		            lda player_turn
   822 255C 0A			            asl
   823 255D 0A			            asl
   824 255E 69 40		            adc #$40
   825 2560 E5 B3		            sbc angle_diff_bat
   826 2562 8D 00 D2		            sta AUDF1
   827 2565 A9 A6		            lda #$a6
   828 2567 8D 01 D2		            sta AUDC1
   829 256A 60			            rts
   830
   831 				; Update score
   832 				; Score > max score, then exit A = 1, otherwise A = 0
   833
   834 256B			update_score
   835 256B A5 B5		            lda player_turn
   836 256D C9 01		            cmp #1
   837 256F D0 12		            bne was_player2_turn
   838 				; was player 1 turn, so player 2 gets a point
   839 2571 20 4E 28		            jsr inc_score_p2
   840 2574 20 20 28		            jsr show_score_p2
   841
   842 2577 AD 15 3D		            lda score_p2
   843 257A C9 11		            cmp #MAX_SCORE
   844 257C D0 17		            bne reset_edge_delay
   845
   846 257E A9 01		            lda #1
   847 2580 85 8C		            sta mode_menu
   848 2582 60			            rts
   849
   850 2583			was_player2_turn
   851 2583 20 42 28		            jsr inc_score_p1
   852 2586 20 07 28		            jsr show_score_p1
   853
   854 2589 AD 14 3D		            lda score_p1
   855 258C C9 11		            cmp #MAX_SCORE
   856 258E D0 05		            bne reset_edge_delay
   857
   858 2590 A9 01		            lda #1
   859 2592 85 8C		            sta mode_menu
   860 2594 60			            rts
   861
   862 2595			reset_edge_delay
   863 2595 A9 0A		            lda #10
   864 2597 85 A3		            sta edge_delay
   865
   866 2599			no_edge
   867
   868 2599 A9 00		            lda #0      ; no end game
   869 				; anything in A to clear collisions
   870 259B 8D 1E D0		            sta HITCLR
   871 259E 60			            rts
   872
   873 				; player 1
   874 				; - wipe shape at previous y-position
   875 				; - move player using controller
   876 				; - set sprite positions
   877
   878 259F			handle_player1
   879 259F 20 06 27		            jsr wipe_p1         ; wipe previous shape player 1
   880
   881 25A2 A2 00		            ldx #0              ; player 1
   882 25A4 20 D1 25		            jsr move_player
   883 				            
   884 25A7 20 D2 26		            jsr show_p1
   885
   886 25AA A5 94		            lda player1_x
   887 25AC 18			            clc
   888 25AD 69 20		            adc #left_margin
   889 25AF 8D 00 D0		            sta HPOSP0
   890 25B2 69 08		            adc #8
   891 25B4 8D 01 D0		            sta HPOSP1
   892 25B7 60			            rts
   893
   894 				; player 2
   895 				; - wipe shape at previous y-position
   896 				; - move player using controller
   897 				; - set sprite positions
   898
   899 25B8			handle_player2
   900 25B8 20 1B 27		            jsr wipe_p2         ; wipe previous shape player 2
   901
   902 25BB A2 01		            ldx #1              ; player 2
   903 25BD 20 D1 25		            jsr move_player
   904 				                        
   905 25C0 20 EC 26		            jsr show_p2
   906
   907 25C3 A5 95		            lda player2_x
   908 25C5 18			            clc
   909 25C6 69 20		            adc #left_margin
   910 25C8 8D 02 D0		            sta HPOSP2
   911 25CB 69 08		            adc #8
   912 25CD 8D 03 D0		            sta HPOSP3
   913 25D0 60			            rts
   914
   915 				; move player 1/2
   916 				; right - clockwise, left = anti-clockwise
   917
   918 				; X = 0, player 1
   919 				; X = 1, player 2
   920
   921 				; Y = driver mode:
   922 				; 0 : stick
   923 				; 1 : paddle
   924 				; 2 : driving
   925 				; 3 : computer
   926 				            
   927 25D1			move_player
   928 25D1 20 62 21		            jsr main_driver
   929
   930 25D4 B5 9C		            lda p1_angle,x
   931 25D6 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   932 25D8 49 40		            eor #64                     ; perpendicular to the circle angle
   933 25DA 95 90		            sta p1_shape,x
   934
   935 25DC B4 9C		            ldy p1_angle,x
   936 25DE B9 00 2B		            lda inner_x_tab,y
   937 25E1 4A			            lsr
   938 25E2 69 20		            adc #inner_x_margin/2
   939 25E4 95 94		            sta player1_x,x
   940 25E6 B9 00 2C		            lda inner_y_tab,y
   941 25E9 4A			            lsr
   942 25EA 95 98		            sta player1_y,x
   943
   944 25EC B4 90		            ldy p1_shape,x
   945 25EE 20 BE 27		            jsr shape_to_ptr
   946
   947 25F1 60			            rts
   948
   949 				; Set ball at start position
   950 				; - start angle current player
   951 				; - start position by inner table
   952 				; - collision delay set?
   953
   954 				; Set ball current position to start position
   955 				; input:
   956 				; X = angle of start position
   957 				; output:
   958 				; ball position: (ball_current_x, ball_current_y)
   959 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   960 25F2			ball_to_start_position
   961 25F2 BD 00 2B		            lda inner_x_tab,x
   962 25F5 85 A6		            sta ball_current_x
   963 25F7 85 E6		            sta tmp_x1
   964 25F9 BD 00 2C		            lda inner_y_tab,x
   965 25FC 85 A7		            sta ball_current_y
   966 25FE 85 E7		            sta tmp_y1
   967 2600 60			            rts
   968
   969 				; Prepare ball end position
   970 				; - end angle current player
   971 				; - end position by outer table
   972 				; - calculate step size x,y
   973
   974 				; Input:
   975 				; - ball_angle_start
   976 				; - ball speed
   977 				; Output:
   978 				; - ball_andle_end
   979 				; - ball start position (tmp_x1, tmp_y1)
   980 				; - ball end position (tmp_x2, tmp_y2)
   981 				; - step size (step_x, step_y) for ball movement
   982 2601			prepare_ball_end_position
   983 2601 A5 AA		            lda ball_angle_start
   984 2603 49 80		            eor #128        ; other side
   985 2605 85 AB		            sta ball_angle_end
   986 2607 AA			            tax
   987 2608 20 8E 26		            jsr angle_to_end_position
   988 				                        
   989 260B 20 1E 29		            jsr init_current_xy
   990 				            
   991 				; move current a little bit            
   992 260E 20 8B 29		            jsr move_current_xy
   993 				; ignore end indicator, since we only just started
   994
   995
   996 2611 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   997 2613 85 A4		            sta bat_collision_delay
   998 2615 60			            rts
   999
  1000 				; x = angle 0..255
  1001 2616			outer_angle_to_start_position
  1002 2616 BD 00 16		            lda outer_x_256,x
  1003 2619 85 A6		            sta ball_current_x
  1004 261B 85 E6		            sta tmp_x1
  1005 261D BD 00 17		            lda outer_y_256,x
  1006 2620 85 A7		            sta ball_current_y
  1007 2622 85 E7		            sta tmp_y1
  1008 2624 60			            rts
  1009
  1010 2625			ball_current_to_start_position
  1011 2625 A5 A6		            lda ball_current_x
  1012 2627 85 E6		            sta tmp_x1
  1013 2629 A5 A7		            lda ball_current_y
  1014 262B 85 E7		            sta tmp_y1
  1015 262D 60			            rts
  1016
  1017 				; Ball collides with bat
  1018 				; - start ball angle = end ball angle
  1019 				; - calculate diff between bat and ball end angle
  1020 				; - calculate new end angle
  1021 				; - Set ball at start position
  1022 				; - Prepare ball end position
  1023
  1024 262E			bounce_bat_ball
  1025 				; set new start of ball
  1026 				; @todo check ball angles
  1027 				; set new ball start angle (= previous end angle)
  1028 262E A5 AB		            lda ball_angle_end
  1029 2630 85 AA		            sta ball_angle_start
  1030 				            
  1031 				; alternative?
  1032 				            ;ldx ball_angle_start
  1033 				            ;jsr ball_to_start_position          
  1034 2632 20 25 26		            jsr ball_current_to_start_position
  1035
  1036 				; which player hit the ball?
  1037 2635 A9 01		            lda #1
  1038 2637 85 A2		            sta player_nr_hit
  1039 2639 A5 A0		            lda mp_collision
  1040 263B 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
  1041 263D D0 04		            bne p1_hit
  1042 263F A9 02		            lda #2
  1043 2641 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
  1044 2643			p1_hit            
  1045
  1046 				; who's turn is it and who bounced the ball?
  1047
  1048 2643 A5 B5		            lda player_turn
  1049 2645 25 A2		            and player_nr_hit
  1050 2647 F0 06		            beq no_switch_turn
  1051
  1052 2649 A5 B5		            lda player_turn
  1053 264B 49 03		            eor #3              ; 1 => 2, 2 => 1
  1054 264D 85 B5		            sta player_turn 
  1055
  1056 264F			no_switch_turn
  1057 264F 20 01 24		            jsr turn_color_ball
  1058 				            
  1059 2652 A6 A2		            ldx player_nr_hit
  1060 2654 CA			            dex                     ; index 0,1 (player = 1,2)
  1061 2655 B5 9C		            lda p1_angle,x
  1062
  1063 				; Calculate diff between bat angle position and new ball start position
  1064 2657 85 B0		            sta tmp_angle1
  1065
  1066 2659 A5 AA		            lda ball_angle_start
  1067 265B 85 B1		            sta tmp_angle2
  1068
  1069 265D 20 5A 28		            jsr calc_angle_diff
  1070
  1071 2660 0A			            asl
  1072 2661 0A			            asl
  1073 2662 0A			            asl
  1074 2663 85 B3		            sta angle_diff_bat
  1075
  1076 2665 A5 B0		            lda tmp_angle1
  1077 2667 18			            clc
  1078 2668 65 B2		            adc add_to_angle
  1079 266A 49 80		            eor #128            ; other side
  1080 266C 85 B0		            sta tmp_angle1
  1081 				            
  1082 266E A5 B4		            lda tmp_angle_direction
  1083 2670 D0 0A		            bne diff_clockwise
  1084 				; diff counter clockwise
  1085 2672 A5 B0		            lda tmp_angle1
  1086 2674 18			            clc
  1087 2675 65 B3		            adc angle_diff_bat
  1088 2677 85 B0		            sta tmp_angle1
  1089 2679 4C 83 26		            jmp calc_done            
  1090
  1091 267C			diff_clockwise
  1092 267C A5 B0		            lda tmp_angle1
  1093 267E 38			            sec
  1094 267F E5 B3		            sbc angle_diff_bat
  1095 2681 85 B0		            sta tmp_angle1
  1096 				            
  1097 				; calculation done            
  1098 2683			calc_done
  1099 2683 A5 B0		            lda tmp_angle1
  1100 2685 85 AB		            sta ball_angle_end
  1101 2687 AA			            tax
  1102 2688 20 8E 26		            jsr angle_to_end_position
  1103 				                        
  1104 268B 4C 1E 29		            jmp init_current_xy
  1105
  1106 				; x = angle 0..255
  1107 268E			angle_to_end_position
  1108 268E BD 00 16		            lda outer_x_256,x
  1109 2691 85 E8		            sta tmp_x2
  1110 2693 BD 00 17		            lda outer_y_256,x
  1111 2696 85 E9		            sta tmp_y2
  1112 2698 60			            rts
  1113
  1114 2699			wipe_ball
  1115 2699 A5 A7		            lda ball_current_y
  1116 269B 4A			            lsr
  1117 269C 69 06		            adc #ball_top_margin
  1118 269E AA			            tax                 ; x = real y position on screen
  1119 269F A9 00		            lda #0
  1120 26A1 9D 80 11		            sta msl_area,x
  1121 26A4 9D 81 11		            sta msl_area+1,x
  1122 26A7 9D 82 11		            sta msl_area+2,x
  1123 26AA 9D 83 11		            sta msl_area+3,x
  1124 26AD 60			            rts
  1125
  1126 26AE			show_ball
  1127 26AE A5 A7		            lda ball_current_y
  1128 26B0 4A			            lsr
  1129 26B1 69 06		            adc #ball_top_margin
  1130 26B3 AA			            tax                 ; x = real y position on screen
  1131
  1132 26B4 A9 02		            lda #%00000010
  1133 26B6 9D 80 11		            sta msl_area,x
  1134 26B9 9D 83 11		            sta msl_area+3,x
  1135 26BC A9 07		            lda #%00000111
  1136 26BE 9D 81 11		            sta msl_area+1,x
  1137 26C1 9D 82 11		            sta msl_area+2,x
  1138 				            
  1139 26C4 A5 A6		            lda ball_current_x
  1140 26C6 4A			            lsr
  1141 26C7 69 45		            adc #ball_left_margin
  1142 26C9 8D 05 D0		            sta HPOSM1
  1143 26CC 69 02		            adc #2
  1144 26CE 8D 04 D0		            sta HPOSM0
  1145 				                        
  1146 26D1 60			            rts
  1147 				            
  1148 26D2			show_p1
  1149 26D2 A5 98		            lda player1_y
  1150 26D4 18			            clc
  1151 26D5 69 01		            adc #upper_margin
  1152 26D7 AA			            tax
  1153
  1154 26D8 A0 00		            ldy #0
  1155 26DA			show_shape1
  1156 26DA B1 84		            lda (shape_ptr),y
  1157 26DC 9D 00 12		            sta p0_area,x 
  1158 26DF C8			            iny
  1159 26E0 B1 84		            lda (shape_ptr),y
  1160 26E2 9D 80 12		            sta p1_area,x
  1161 26E5 E8			            inx
  1162 26E6 C8			            iny
  1163 26E7 C0 20		            cpy #32
  1164 26E9 D0 EF		            bne show_shape1
  1165 26EB 60			            rts
  1166
  1167 26EC			show_p2
  1168 26EC A5 99		            lda player2_y
  1169 26EE 18			            clc
  1170 26EF 69 01		            adc #upper_margin
  1171 26F1 AA			            tax
  1172
  1173 26F2 A0 00		            ldy #0
  1174 26F4			show_shape2
  1175 26F4 B1 84		            lda (shape_ptr),y
  1176 26F6 9D 00 13		            sta p2_area,x 
  1177 26F9 C8			            iny
  1178 26FA B1 84		            lda (shape_ptr),y
  1179 26FC 9D 80 13		            sta p3_area,x
  1180 26FF E8			            inx
  1181 2700 C8			            iny
  1182 2701 C0 20		            cpy #32
  1183 2703 D0 EF		            bne show_shape2
  1184 2705 60			            rts
  1185
  1186 2706			wipe_p1
  1187 2706 A5 98		            lda player1_y
  1188 2708 18			            clc
  1189 2709 69 01		            adc #upper_margin
  1190 270B AA			            tax
  1191 				            
  1192 270C A0 10		            ldy #16
  1193 270E A9 00		            lda #0
  1194 2710			wipe_it1            
  1195 2710 9D 00 12		            sta p0_area,x 
  1196 2713 9D 80 12		            sta p1_area,x
  1197 2716 E8			            inx
  1198 2717 88			            dey
  1199 2718 D0 F6		            bne wipe_it1 
  1200 271A 60			            rts
  1201
  1202 271B			wipe_p2
  1203 271B A5 99		            lda player2_y
  1204 271D 18			            clc
  1205 271E 69 01		            adc #upper_margin
  1206 2720 AA			            tax
  1207 				            
  1208 2721 A0 10		            ldy #16
  1209 2723 A9 00		            lda #0
  1210 2725			wipe_it2            
  1211 2725 9D 00 13		            sta p2_area,x 
  1212 2728 9D 80 13		            sta p3_area,x
  1213 272B E8			            inx
  1214 272C 88			            dey
  1215 272D D0 F6		            bne wipe_it2 
  1216 272F 60			            rts
  1217
  1218 2730			plot_inner
  1219 2730 A9 01		            lda #1
  1220 2732 8D FB 02		            sta draw_color
  1221
  1222 2735 A2 00		            ldx #0
  1223 2737			plot_in
  1224 2737 8A			            txa
  1225 2738 48			            pha
  1226
  1227 2739 BD 00 2B		            lda inner_x_tab,x                      
  1228 273C 18			            clc
  1229 273D 69 30		            adc #outer_x_margin
  1230 273F 85 55		            sta x_position
  1231 2741 A9 00		            lda #0
  1232 2743 69 00		            adc #0
  1233 2745 85 56		            sta x_position+1
  1234 				            
  1235 2747 BD 00 2C		            lda inner_y_tab,x
  1236 274A 85 54		            sta y_position
  1237 				            
  1238 274C 20 D4 23		            jsr plot_dot
  1239 				;            jsr plot_pixel
  1240
  1241 274F 68			            pla
  1242 2750 AA			            tax
  1243 2751 E8			            inx
  1244 2752 D0 E3		            bne plot_in 
  1245 				            
  1246 2754 60			            rts
  1247 				            
  1248 2755			plot_outer
  1249 2755 A9 01		            lda #1
  1250 2757 8D FB 02		            sta draw_color
  1251
  1252 275A A9 00		            lda #<outer_x_tab
  1253 275C 85 80		            sta table_x_ptr
  1254 275E A9 30		            lda #>outer_x_tab
  1255 2760 85 81		            sta table_x_ptr+1
  1256
  1257 2762 A9 00		            lda #<outer_y_tab
  1258 2764 85 82		            sta table_y_ptr
  1259 2766 A9 34		            lda #>outer_y_tab
  1260 2768 85 83		            sta table_y_ptr+1
  1261
  1262 276A			plot_out
  1263 276A A0 00		            ldy #0
  1264
  1265 276C B1 80		            lda (table_x_ptr),y
  1266 276E 18			            clc
  1267 276F 69 30		            adc #outer_x_margin
  1268 2771 85 55		            sta x_position
  1269 2773 A9 00		            lda #0
  1270 2775 69 00		            adc #0
  1271 2777 85 56		            sta x_position+1
  1272 				            
  1273 2779 B1 82		            lda (table_y_ptr),y
  1274 277B 85 54		            sta y_position
  1275 				 
  1276 277D 20 D4 23		            jsr plot_dot            
  1277 				;            jsr plot_pixel
  1278
  1279 2780 E6 80		            inc table_x_ptr
  1280 2782 D0 02		            bne no_xt
  1281 2784 E6 81		            inc table_x_ptr+1
  1282 2786			no_xt
  1283 				            
  1284 2786 E6 82		            inc table_y_ptr
  1285 2788 D0 02		            bne no_yt
  1286 278A E6 83		            inc table_y_ptr+1
  1287 278C			no_yt            
  1288
  1289 278C A5 80		            lda table_x_ptr
  1290 278E C9 00		            cmp #<(outer_x_tab+1024)
  1291 2790 D0 D8		            bne plot_out
  1292 2792 A5 81		            lda table_x_ptr+1
  1293 2794 C9 34		            cmp #>(outer_x_tab+1024)
  1294 2796 D0 D2		            bne plot_out
  1295 				            
  1296 2798 60			            rts
  1297
  1298 2799			make_shape_index
  1299 2799 A9 00		            lda #<pm_shapes
  1300 279B 85 84		            sta shape_ptr
  1301 279D A9 50		            lda #>pm_shapes
  1302 279F 85 85		            sta shape_ptr+1
  1303 				            
  1304 27A1 A2 00		            ldx #0
  1305 27A3			fill_pm_tab
  1306 27A3 A5 84		            lda shape_ptr
  1307 27A5 9D 00 60		            sta pm_shape_lo,x
  1308 27A8 A5 85		            lda shape_ptr+1
  1309 27AA 9D 80 60		            sta pm_shape_hi,x
  1310 				            
  1311 27AD A5 84		            lda shape_ptr
  1312 27AF 18			            clc
  1313 27B0 69 20		            adc #32
  1314 27B2 85 84		            sta shape_ptr
  1315 27B4 A5 85		            lda shape_ptr+1
  1316 27B6 69 00		            adc #0
  1317 27B8 85 85		            sta shape_ptr+1
  1318 				            
  1319 27BA E8			            inx
  1320 27BB 10 E6		            bpl fill_pm_tab
  1321 				            
  1322 27BD 60			            rts
  1323 				            
  1324 				; there are 128 shapes, each 32 bytes
  1325
  1326 				; y = shape index
  1327 27BE			shape_to_ptr
  1328 27BE B9 00 60		            lda pm_shape_lo,y
  1329 27C1 85 84		            sta shape_ptr
  1330 27C3 B9 80 60		            lda pm_shape_hi,y
  1331 27C6 85 85		            sta shape_ptr+1
  1332
  1333 27C8 60			            rts
  1334
  1335 				; turn 1024 tables into 256 bytes for ball edge lookup
  1336 27C9			make_outer_256
  1337 27C9 A0 00		            ldy #0
  1338 27CB A2 00		            ldx #0
  1339 27CD			conv_256
  1340 27CD BD 00 30		            lda outer_x_tab,x
  1341 27D0 99 00 16		            sta outer_x_256,y
  1342 27D3 BD 00 31		            lda outer_x_tab+$100,x
  1343 27D6 99 40 16		            sta outer_x_256+64,y
  1344 27D9 BD 00 32		            lda outer_x_tab+$200,x
  1345 27DC 99 80 16		            sta outer_x_256+128,y
  1346 27DF BD 00 33		            lda outer_x_tab+$300,x
  1347 27E2 99 C0 16		            sta outer_x_256+192,y
  1348 				            
  1349 27E5 BD 00 34		            lda outer_y_tab,x
  1350 27E8 99 00 17		            sta outer_y_256,y
  1351 27EB BD 00 35		            lda outer_y_tab+$100,x
  1352 27EE 99 40 17		            sta outer_y_256+64,y
  1353 27F1 BD 00 36		            lda outer_y_tab+$200,x
  1354 27F4 99 80 17		            sta outer_y_256+128,y
  1355 27F7 BD 00 37		            lda outer_y_tab+$300,x
  1356 27FA 99 C0 17		            sta outer_y_256+192,y
  1357
  1358 27FD E8			            inx
  1359 27FE E8			            inx
  1360 27FF E8			            inx
  1361 2800 E8			            inx
  1362 2801 C8			            iny
  1363 2802 C0 40		            cpy #64
  1364 2804 D0 C7		            bne conv_256            
  1365 2806 60			            rts
  1366
  1367 2807			show_score_p1
  1368 2807 AD 14 3D		            lda score_p1
  1369 280A 4A			            lsr
  1370 280B 4A			            lsr
  1371 280C 4A			            lsr
  1372 280D 4A			            lsr
  1373 280E F0 02		            beq do_space1
  1374 2810 09 10		            ora #16
  1375 2812			do_space1
  1376 2812 8D F1 3C		            sta score_chars_p1
  1377 2815 AD 14 3D		            lda score_p1
  1378 2818 29 0F		            and #15
  1379 281A 09 10		            ora #16
  1380 281C 8D F2 3C		            sta score_chars_p1+1
  1381 281F 60			            rts
  1382
  1383 2820			show_score_p2
  1384 2820 AD 15 3D		            lda score_p2
  1385 2823 4A			            lsr
  1386 2824 4A			            lsr
  1387 2825 4A			            lsr
  1388 2826 4A			            lsr
  1389 2827 F0 02		            beq do_space2
  1390 2829 09 10		            ora #16
  1391 282B			do_space2
  1392 282B 8D 12 3D		            sta score_chars_p2
  1393 282E AD 15 3D		            lda score_p2
  1394 2831 29 0F		            and #15
  1395 2833 09 10		            ora #16
  1396 2835 8D 13 3D		            sta score_chars_p2+1
  1397 2838 60			            rts
  1398 				                        
  1399 2839			reset_score
  1400 2839 A9 00		            lda #0
  1401 283B 8D 14 3D		            sta score_p1
  1402 283E 8D 15 3D		            sta score_p2
  1403 2841 60			            rts            
  1404 				         
  1405 2842			inc_score_p1
  1406 2842 F8			            sed
  1407 2843 AD 14 3D		            lda score_p1
  1408 2846 18			            clc
  1409 2847 69 01		            adc #1
  1410 2849 8D 14 3D		            sta score_p1    
  1411 284C D8			            cld
  1412 284D 60			            rts
  1413
  1414 284E			inc_score_p2
  1415 284E F8			            sed
  1416 284F AD 15 3D		            lda score_p2
  1417 2852 18			            clc
  1418 2853 69 01		            adc #1
  1419 2855 8D 15 3D		            sta score_p2
  1420 2858 D8			            cld
  1421 2859 60			            rts
  1422
  1423 				; calculate the difference between angle1 and angle2
  1424
  1425 				; input:
  1426 				; tmp_angle1 (0..255)
  1427 				; tmp_angle2 (0..255)
  1428
  1429 				; output:
  1430 				; tmp_angle_diff, A: difference between angle1 and angle2
  1431 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1432
  1433 285A			calc_angle_diff
  1434 285A A9 00		            lda #0
  1435 285C 85 B2		            sta add_to_angle
  1436 285E 85 B4		            sta tmp_angle_direction
  1437
  1438 				; make sure we can compare angles, otherwise add $40 to angles
  1439 2860 A5 B0		            lda tmp_angle1
  1440 2862 C9 C0		            cmp #$c0
  1441 2864 B0 06		            bcs too_large
  1442 2866 A5 B1		            lda tmp_angle2
  1443 2868 C9 C0		            cmp #$c0
  1444 286A 90 12		            bcc not_too_large
  1445 286C			too_large
  1446 286C A5 B0		            lda tmp_angle1
  1447 286E 38			            sec
  1448 286F E9 40		            sbc #$40
  1449 2871 85 B0		            sta tmp_angle1
  1450 				            
  1451 2873 A5 B1		            lda tmp_angle2
  1452 2875 38			            sec
  1453 2876 E9 40		            sbc #$40
  1454 2878 85 B1		            sta tmp_angle2
  1455 				            
  1456 287A A9 40		            lda #$40
  1457 287C 85 B2		            sta add_to_angle
  1458
  1459 287E			not_too_large
  1460 287E A5 B1		            lda tmp_angle2
  1461 2880 C5 B0		            cmp tmp_angle1
  1462 2882 90 0A		            bcc angle2_smaller_angle1
  1463 				; ball >= play
  1464 2884 38			            sec
  1465 2885 E5 B0		            sbc tmp_angle1
  1466 2887 85 B7		            sta tmp_angle_diff
  1467 				            
  1468 2889 E6 B4		            inc tmp_angle_direction
  1469 288B 4C 95 28		            jmp diff_calculated
  1470 				                        
  1471 288E			angle2_smaller_angle1
  1472 288E A5 B0		            lda tmp_angle1
  1473 2890 38			            sec
  1474 2891 E5 B1		            sbc tmp_angle2
  1475 2893 85 B7		            sta tmp_angle_diff
  1476
  1477 2895			diff_calculated
  1478 2895 A5 B7		            lda tmp_angle_diff           
  1479 2897 60			            rts
  1480
  1481 				; X = angle
  1482 				; lookup magnitude of angle 0 to angle X
  1483 2898			angle_to_magnitude
  1484 2898 BD 00 38		            lda magnitudes_lo,x
  1485 289B 85 B8		            sta magnitude
  1486 289D BD 00 39		            lda magnitudes_hi,x
  1487 28A0 85 B9		            sta magnitude+1
  1488 28A2 60			            rts
  1489
  1490 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1491 28A3			calc_abs_tmp_dx
  1492 28A3 A5 E8		            lda tmp_x2
  1493 28A5 38			            sec
  1494 28A6 E5 E6		            sbc tmp_x1
  1495 28A8 B0 05		            bcs x2_le
  1496 28AA 49 FF		            eor #255
  1497 28AC 18			            clc
  1498 28AD 69 01		            adc #1
  1499 28AF 85 F2		x2_le       sta tmp_dx
  1500
  1501 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1502 28B1			calc_abs_tmp_dy
  1503 28B1 A5 E9		            lda tmp_y2
  1504 28B3 38			            sec
  1505 28B4 E5 E7		            sbc tmp_y1
  1506 28B6 B0 05		            bcs y2_le
  1507 28B8 49 FF		            eor #255
  1508 28BA 18			            clc
  1509 28BB 69 01		            adc #1
  1510 28BD 85 F3		y2_le       sta tmp_dy
  1511 28BF 60			            rts
  1512 				            
  1513 28C0			calc_dx_div_magnitude
  1514 28C0 A9 00		            lda #0
  1515 28C2 85 E2		            sta _dividend
  1516 28C4 A5 F2		            lda tmp_dx
  1517 				            ;clc
  1518 				            ;adc #1      ; 0..0 = 1 pixel
  1519 28C6 85 E3		            sta _dividend+1
  1520
  1521 28C8 A5 B9		            lda magnitude+1
  1522 28CA 85 E0		            sta _divisor
  1523 28CC A9 00		            lda #0
  1524 28CE 85 E1		            sta _divisor+1
  1525 				            
  1526 28D0 20 F8 28		            jsr _div16
  1527
  1528 				; todo multiply result with velocity            
  1529 28D3 A5 E2		            lda _result
  1530 28D5 85 EE		            sta step_x
  1531 28D7 A5 E3		            lda _result+1
  1532 28D9 85 EF		            sta step_x+1
  1533 				            
  1534 28DB 60			            rts
  1535 				            
  1536 28DC			calc_dy_div_magnitude
  1537 28DC A9 00		            lda #0
  1538 28DE 85 E2		            sta _dividend
  1539 28E0 A5 F3		            lda tmp_dy
  1540 				            ;clc
  1541 				            ;adc #1      ; 0..0 = 1 pixel
  1542 28E2 85 E3		            sta _dividend+1
  1543 				            
  1544 28E4 A5 B9		            lda magnitude+1
  1545 28E6 85 E0		            sta _divisor
  1546 28E8 A9 00		            lda #0
  1547 28EA 85 E1		            sta _divisor+1
  1548
  1549 28EC 20 F8 28		            jsr _div16
  1550 				            
  1551 				; todo multiply result with velocity
  1552 28EF A5 E2		            lda _result
  1553 28F1 85 F0		            sta step_y
  1554 28F3 A5 E3		            lda _result+1
  1555 28F5 85 F1		            sta step_y+1
  1556 				            
  1557 28F7 60			            rts
  1558
  1559 				; divide 16bit
  1560 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1561
  1562 				; _result = _dividend / divisor
  1563
  1564 28F8 A9 00		_div16      lda #0          ;preset remainder to 0
  1565 28FA 85 E4		            sta _remainder
  1566 28FC 85 E5		            sta _remainder+1
  1567 28FE A2 10		            ldx #16         ;repeat for each bit: ...
  1568
  1569 2900 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1570 2902 26 E3		            rol _dividend+1  
  1571 2904 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1572 2906 26 E5		            rol _remainder+1
  1573 2908 A5 E4		            lda _remainder
  1574 290A 38			            sec
  1575 290B E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1576 290D A8			            tay         ;lb result -> Y, for we may need it later
  1577 290E A5 E5		            lda _remainder+1
  1578 2910 E5 E1		            sbc _divisor+1
  1579 2912 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1580
  1581 2914 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1582 2916 84 E4		            sty _remainder   
  1583 2918 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1584
  1585 291A CA			_div_skip   dex
  1586 291B D0 E3		            bne _div_loop 
  1587 291D 60			            rts
  1588
  1589 				; Calculations for step size
  1590
  1591 				; not optimised for speed or size
  1592 				; step should be set according to the angle
  1593
  1594 				; move in straight line (x1,y1) to (x2,y2)
  1595
  1596 				; 1. set start/end of line
  1597 				; set (tmp_x1, tmp_y1)
  1598 				; set (tmp_x2, tmp_y2)
  1599
  1600 				; 2. init. current_x, current_y
  1601 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1602 				; @todo
  1603 				; - calculates step sizes for x,y
  1604 				; - calculated directions for x,y
  1605 				;            jsr init_current_xy
  1606
  1607 				; 4. use current_x, current_y to plot or set a position
  1608 				;            lda current_x+1
  1609 				;            sta x_position
  1610 				;            lda current_y+1
  1611 				;            sta y_position
  1612 				;            jsr plot_pixel
  1613
  1614 				; 5. move current_x, current_y to next position on line
  1615 				; A=0 still moving
  1616 				;           move_current_xy
  1617
  1618 291E			init_current_xy
  1619 291E A9 7F		            lda #$7f      ; was 128 for half pixel
  1620 2920 85 EA		            sta current_x
  1621 2922 85 EC		            sta current_y
  1622
  1623 2924 A5 E6		            lda tmp_x1
  1624 2926 85 EB		            sta current_x+1
  1625 				            
  1626 2928 A5 E7		            lda tmp_y1
  1627 292A 85 ED		            sta current_y+1
  1628
  1629 				; dx = abs(tmp_x1 - tmp_x2)
  1630 292C 20 A3 28		            jsr calc_abs_tmp_dx
  1631
  1632 				; dy = abs(tmp_y1 - tmp_y2)
  1633 292F 20 B1 28		            jsr calc_abs_tmp_dy
  1634
  1635 				; set directions
  1636 2932 A5 E6		            lda tmp_x1
  1637 2934 C5 E8		            cmp tmp_x2
  1638 2936 90 04		            bcc x1_smaller_x2
  1639 				; x1 >= x2
  1640 2938 A9 01		            lda #1
  1641 293A D0 02		            bne set_dir_x
  1642 293C			x1_smaller_x2
  1643 293C A9 00		            lda #0
  1644 293E			set_dir_x
  1645 293E 85 FA		            sta dir_x
  1646 				            
  1647 2940 A5 E7		            lda tmp_y1
  1648 2942 C5 E9		            cmp tmp_y2
  1649 2944 90 04		            bcc y1_smaller_y2
  1650 				; y1 >= y2
  1651 2946 A9 01		            lda #1
  1652 2948 D0 02		            bne set_dir_y
  1653 294A			y1_smaller_y2
  1654 294A A9 00		            lda #0
  1655 294C			set_dir_y
  1656 294C 85 FB		            sta dir_y
  1657
  1658 				; Calculate diff between start angle and end angle
  1659
  1660 294E A5 AA		            lda ball_angle_start
  1661 2950 85 B0		            sta tmp_angle1
  1662 2952 A5 AB		            lda ball_angle_end
  1663 2954 85 B1		            sta tmp_angle2
  1664 				            
  1665 2956 20 5A 28		            jsr calc_angle_diff
  1666 				            
  1667 				            ;lda tmp_angle_diff
  1668 				            ;lda tmp_angle_direction
  1669
  1670 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1671 2959 A6 B7		            ldx tmp_angle_diff
  1672 295B 20 98 28		            jsr angle_to_magnitude
  1673 				            
  1674 				            ;lda magnitude       ; lo
  1675 				            ;lda magnitude+1
  1676 				            
  1677 				            ;lda tmp_dx
  1678 				            ;lda tmp_dy
  1679 				            
  1680 295E 20 C0 28		            jsr calc_dx_div_magnitude
  1681 2961 20 DC 28		            jsr calc_dy_div_magnitude
  1682 				            
  1683 				; Calculate step size by ball speed
  1684 				            
  1685 				; step_x = step_x * speed
  1686 				            
  1687 2964 A5 EE		            lda step_x
  1688 2966 85 F6		            sta _multiplicand
  1689 2968 A5 EF		            lda step_x+1
  1690 296A 85 F7		            sta _multiplicand+1
  1691 296C A5 AC		            lda ball_speed
  1692 296E 85 F8		            sta _multiplier
  1693
  1694 2970 20 A8 22		            jsr _multi8
  1695 				;result in .A (low byte, also in .X) and .Y (high byte)
  1696 2973 85 EE		            sta step_x
  1697 2975 84 EF		            sty step_x+1
  1698 2977			skip_step_x_hi
  1699 				            
  1700 				; step_y = step_y * speed
  1701
  1702 2977 A5 F0		            lda step_y
  1703 2979 85 F6		            sta _multiplicand
  1704 297B A5 F1		            lda step_y+1
  1705 297D 85 F7		            sta _multiplicand+1
  1706 297F A5 AC		            lda ball_speed
  1707 2981 85 F8		            sta _multiplier
  1708
  1709 2983 20 A8 22		            jsr _multi8
  1710 				;result in .A (low byte, also in .X) and .Y (high byte)
  1711 2986 85 F0		            sta step_y
  1712 2988 84 F1		            sty step_y+1
  1713 298A			skip_step_y_hi
  1714
  1715 298A 60			            rts
  1716
  1717 				; Move ball position 
  1718 				; Add one step, until end reached
  1719 				; Input:
  1720 				; - step size (step_x, step_y)
  1721 				; - current ball position (current_x, current_y)
  1722 				; - end position (tmp_x2, tmp_y2)
  1723 				; Output:
  1724 				; A (0 = still moving, 1 = end reached)
  1725 298B			move_current_xy
  1726 298B A9 00		            lda #0
  1727 298D 85 FC		            sta line_end_x
  1728 298F 85 FD		            sta line_end_y
  1729
  1730 				; sets line end indicators here
  1731 2991 20 AE 29		            jsr move_current_x
  1732 2994 20 EE 29		            jsr move_current_y
  1733
  1734 2997 A5 FC		            lda line_end_x
  1735 2999 25 FD		            and line_end_y
  1736 299B F0 10		            beq no_end_reached
  1737 				            
  1738 				; set current to (x2,y2)
  1739 299D A5 E8		            lda tmp_x2
  1740 299F 85 EB		            sta current_x+1
  1741 29A1 A5 E9		            lda tmp_y2
  1742 29A3 85 ED		            sta current_y+1
  1743 				            
  1744 29A5 A9 00		            lda #0
  1745 29A7 85 EA		            sta current_x
  1746 29A9 85 EC		            sta current_y
  1747 				            
  1748 29AB A9 01		            lda #1 ; end reached
  1749 				            
  1750 29AD			no_end_reached  ; A = 0
  1751 29AD 60			            rts
  1752
  1753 29AE			move_current_x
  1754 29AE A5 FA		            lda dir_x
  1755 29B0 D0 18		            bne move_current_left
  1756
  1757 				; move right, add
  1758 29B2 A5 EA		            lda current_x
  1759 29B4 18			            clc
  1760 29B5 65 EE		            adc step_x
  1761 29B7 85 EA		            sta current_x
  1762 29B9 A5 EB		            lda current_x+1
  1763 29BB 65 EF		            adc step_x+1
  1764 29BD 85 EB		            sta current_x+1
  1765
  1766 29BF A5 EB		            lda current_x+1
  1767 29C1 C5 E8		            cmp tmp_x2
  1768 29C3 90 04		            bcc no_line_end
  1769 29C5			exact_end_x
  1770 29C5 A9 01		            lda #1
  1771 29C7 85 FC		            sta line_end_x 
  1772 29C9			no_line_end
  1773 29C9 60			            rts
  1774 				            
  1775 29CA			move_current_left
  1776 29CA A5 EA		            lda current_x
  1777 29CC 38			            sec
  1778 29CD E5 EE		            sbc step_x
  1779 29CF 90 01		            bcc clear_skip
  1780 29D1 EA			            nop
  1781 29D2			clear_skip
  1782 29D2 85 EA		            sta current_x
  1783 29D4 A5 EB		            lda current_x+1
  1784 29D6 E5 EF		            sbc step_x+1
  1785 29D8 85 EB		            sta current_x+1
  1786 29DA 90 0B		            bcc below_zero
  1787 				                        
  1788 29DC A5 E8		            lda tmp_x2
  1789 29DE C5 EB		            cmp current_x+1
  1790 29E0 90 E7		            bcc no_line_end
  1791 29E2 A9 01		            lda #1
  1792 29E4 85 FC		            sta line_end_x            
  1793 29E6 60			            rts
  1794 29E7			below_zero            
  1795 29E7 A9 01		            lda #1
  1796 29E9 85 FC		            sta line_end_x
  1797 29EB 85 FD		            sta line_end_y
  1798 29ED 60			            rts
  1799 29EE			move_current_y
  1800 29EE A5 FB		            lda dir_y
  1801 29F0 D0 18		            bne move_current_up
  1802
  1803 				; move down, add
  1804 29F2 A5 EC		            lda current_y
  1805 29F4 18			            clc
  1806 29F5 65 F0		            adc step_y
  1807 29F7 85 EC		            sta current_y
  1808 29F9 A5 ED		            lda current_y+1
  1809 29FB 65 F1		            adc step_y+1
  1810 29FD 85 ED		            sta current_y+1
  1811 				            
  1812 29FF A5 ED		            lda current_y+1
  1813 2A01 C5 E9		            cmp tmp_y2
  1814 2A03 90 C4		            bcc no_line_end
  1815 2A05			exact_end_y
  1816 2A05 A9 01		            lda #1
  1817 2A07 85 FD		            sta line_end_y
  1818 2A09 60			            rts
  1819
  1820 2A0A			move_current_up
  1821 2A0A A5 EC		            lda current_y
  1822 2A0C 38			            sec
  1823 2A0D E5 F0		            sbc step_y
  1824 2A0F 85 EC		            sta current_y
  1825 2A11 A5 ED		            lda current_y+1
  1826 2A13 E5 F1		            sbc step_y+1
  1827 2A15 90 D0		            bcc below_zero
  1828 2A17 85 ED		            sta current_y+1
  1829 				            
  1830 2A19 A5 E9		            lda tmp_y2
  1831 2A1B C5 ED		            cmp current_y+1
  1832 2A1D 90 AA		            bcc no_line_end
  1833 2A1F A9 01		            lda #1
  1834 2A21 85 FD		            sta line_end_y
  1835 2A23 60			            rts                            
  1836 				            
  1837 2A24			init_sprites
  1838 2A24 A2 00		            ldx #0
  1839 2A26 8A			            txa
  1840 2A27			set_p
  1841 2A27 9D 00 12		            sta p0_area,x
  1842 2A2A 9D 80 12		            sta p1_area,x
  1843 2A2D 9D 00 13		            sta p2_area,x
  1844 2A30 9D 80 13		            sta p3_area,x
  1845 2A33 E8			            inx
  1846 2A34 10 F1		            bpl set_p               
  1847
  1848 2A36 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1849 2A38 8D 6F 02		            sta GPRIOR
  1850 				    
  1851 2A3B A9 10		            lda #>pm_area
  1852 2A3D 8D 07 D4		            sta PMBASE
  1853 				    
  1854 2A40 A9 03		            lda #3          ; P/M both on
  1855 2A42 8D 1D D0		            sta GRACTL
  1856 				    
  1857 2A45 A9 90		            lda #$90
  1858 2A47 8D 02 D0		            sta HPOSP2
  1859 2A4A A9 A0		            lda #$A0
  1860 2A4C 8D 03 D0		            sta HPOSP3  
  1861 2A4F 60			            rts            
  1862
  1863 2A50			init_colors
  1864 2A50 A9 2A		            lda #$2a
  1865 2A52 8D C0 02		            sta PCOLR0
  1866 2A55 8D C1 02		            sta PCOLR1
  1867 				            
  1868 2A58 A9 7A		            lda #$7a
  1869 2A5A 8D C2 02		            sta PCOLR2
  1870 2A5D 8D C3 02		            sta PCOLR3
  1871 				            
  1872 				            ;lda #$34
  1873 				            ;sta COLOR0
  1874 2A60 A9 00		            lda #0
  1875 2A62 8D C6 02		            sta COLOR2
  1876 2A65 A9 08		            lda #8
  1877 2A67 8D C5 02		            sta COLOR1
  1878 2A6A 60			            rts
  1879
  1880 2A6B			previous_consol
  1881 2A6B 00			            dta 0
  1882
  1883 2A6C			current_level_index
  1884 2A6C 00			            dta 0
  1885 = 0004			NR_OF_LEVELS = 4
  1886 = 0000			INIT_LEVEL_INDEX = 0
  1887 2A6D			level_speeds
  1888 2A6D 02 04 06 08		            dta 2,4,6,8
  1889 				            
  1890 				; X = level (0..NR_OF_LEVELS)
  1891 2A71			set_level_ball_speed
  1892 2A71 BD 6D 2A		            lda level_speeds,x
  1893 2A74 85 AC		            sta ball_speed
  1894 2A76 8A			            txa
  1895 2A77 18			            clc
  1896 2A78 69 01		            adc #1
  1897 2A7A 09 10		            ora #16
  1898 2A7C 8D 48 41		            sta level_char
  1899 2A7F 60			            rts
  1900 				            
  1901 2A80			increase_level
  1902 2A80 EE 6C 2A		            inc current_level_index
  1903 2A83 AD 6C 2A		            lda current_level_index
  1904 2A86 C9 04		            cmp #NR_OF_LEVELS
  1905 2A88 D0 05		            bne ok_level
  1906 2A8A A9 00		            lda #INIT_LEVEL_INDEX
  1907 2A8C 8D 6C 2A		            sta current_level_index
  1908 2A8F			ok_level           
  1909 2A8F 60			            rts
  1910 				            
  1911 2A90			            .align $100
  1912 2B00			inner_x_tab
  1913 = 2C00			inner_y_tab = *+$100
  1914 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1915 				      
  1916 2D00			            .align $400            
  1917 				; outer circle 1024 plot points on 360 degrees
  1918 3000			outer_x_tab
  1919 = 3400			outer_y_tab = *+1024
  1920 3000-39FF> 70 70 71 72 +             ins 'data\out224.dat'
  1921 				           
  1922 3800			            .align $400
  1923 				; table of magnitudes (length) between angle 0 and 0..255
  1924 				; fixed point 8.8 : hi.lo
  1925 3800			magnitudes_lo
  1926 = 3900			magnitudes_hi = *+256
  1927 3800 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1928
  1929 3A00			            .align $400
  1930 3C00			display_list
  1931 3C00-3D15> 42		            dta $42
  1932 3C01 EC 3C		            dta a(score_line)
  1933
  1934 				; 102 x 40 = 4080 bytes            
  1935 3C03 4F			            dta $4f
  1936 3C04			dl_screen_ptr1
  1937 3C04 00 90		            dta a(screen_mem1)
  1938 3C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1939 3C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1940 3C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1941 3C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1942
  1943 3C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1944 3C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1945 3C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1946 3C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1947
  1948 3C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1949 3C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1950 3C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1951 3C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1952
  1953 3C65 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1954
  1955
  1956 				; 102 x 40 = 4080 bytes
  1957 3C6B 4F			            dta $4f
  1958 3C6C			dl_screen_ptr2
  1959 3C6C 00 A0		            dta a(screen_mem2)
  1960 3C6E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1961 3C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1962 3C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1963 3C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1964
  1965 3C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1966 3C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1967 3C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1968 3CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1969
  1970 3CAD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1971 3CB5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1972 3CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1973 3CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1974
  1975 3CCD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1976
  1977 				; 20 x 40 = 800
  1978 3CD3 4F			            dta $4f
  1979 3CD4 00 B0		            dta a(screen_mem3)       
  1980 3CD6 0F 0F 0F		            dta $0f,$0f,$0f
  1981 3CD9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1982 3CE1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1983 				            
  1984 3CE9 41			            dta $41
  1985 3CEA 00 3C		            dta a(display_list)
  1986
  1987 3CEC			score_line  
  1988 3CEC 00 32 25 24 00	            dta d' RED '
  1989 3CF1			score_chars_p1
  1990 3CF1 0D 0D 00		            dta d'-- '
  1991
  1992 3CF4 00 00 00 00 00 00 +             dta d'          '
  1993 3CFE 00 00 00 00 00 00 +             dta d'          '
  1994
  1995 3D08 00 00 00 00 00 22 +             dta d'     BLUE '
  1996 3D12			score_chars_p2
  1997 3D12 0D 0D		            dta d'--'
  1998
  1999 3D14 00			score_p1    dta 0
  2000 3D15 00			score_p2    dta 0
  2001
  2002 3D16			            .align $400
  2003 				            
  2004 4000			menu_dl
  2005 4000-40B6> 42		            dta $42
  2006 4001 EC 3C		            dta a(score_line)
  2007 				            
  2008 4003 4F			            dta $4f
  2009 4004 00 90		            dta a(screen_mem1)
  2010 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2011 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2012 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2013 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2014
  2015 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2016 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2017 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2018 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2019
  2020 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2021 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  2022
  2023 				; 64 scanlines
  2024 4055 30			            dta $30
  2025 4056 47			            dta $47
  2026 4057 00 41		            dta a(menu_screen)
  2027 4059 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  2028
  2029 				; 60 lines
  2030 4060 4F			            dta $4f
  2031 4061 90 A6		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2032 4063 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2033 406A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2034 4072 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2035 407A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2036
  2037 4082 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2038 408A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2039 4092 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2040 409A 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2041
  2042 				; 20 lines            
  2043 409E 4F			            dta $4f
  2044 409F 00 B0		            dta a(screen_mem3)
  2045 40A1 0F 0F 0F		            dta $0f,$0f,$0f            
  2046 40A4 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2047 40AC 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  2048 				           
  2049 40B4 41			            dta $41
  2050 				            
  2051 40B5 00 40		            dta a(menu_dl)
  2052
  2053 40B7			            .align $100
  2054 4100			menu_screen
  2055 4100-419F> 00 00 00 00 +             dta d'     R O T O R      '
  2056
  2057 4114 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2058 411E			driver_screen
  2059 411E 00 00 00 00 00 00 +             dta d'            '
  2060 412A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  2061 413C 00 00 00 00 00 00 +             dta d'      LEVEL '
  2062 4148			level_char            
  2063 4148 11 00 00 00 00 00 +             dta d'1       '
  2064 4150 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  2065 4178			stick_text
  2066 4178 33 34 29 23 2B 00 +             dta d'STICK   '
  2067 4180			paddle_text
  2068 4180 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2069 4188			driving_text
  2070 4188 24 32 29 36 29 2E +             dta d'DRIVING '
  2071 4190			computer_text
  2072 4190 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2073
  2074 4198			driver_text_lo
  2075 4198 78			            dta <stick_text
  2076 4199 80			            dta <paddle_text
  2077 419A 88			            dta <driving_text
  2078 419B 90			            dta <computer_text
  2079 				            
  2080 419C			driver_text_hi
  2081 419C 41			            dta >stick_text
  2082 419D 41			            dta >paddle_text
  2083 419E 41			            dta >driving_text
  2084 419F 41			            dta >computer_text
  2085
  2086 41A0			            .align $400
  2087 4400			rotor_font
  2088 4400-47FF> 00 00 00 00 +             ins 'font\rotor.fnt'
  2089
  2090 4800			            .align $1000
  2091
  2092 				; 128 x 32 bytes shapes            
  2093 5000			pm_shapes
  2094 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2095
  2096 6000			pm_shape_lo
  2097 = 6080			pm_shape_hi = *+128
  2098
  2099 = 9000			screen_mem1 = $9000     ; 4K
  2100 6000			            org screen_mem1
  2101 9000-9FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2102 				            
  2103 = A000			screen_mem2 = $a000     ; 4K
  2104 9FF0			            org screen_mem2
  2105 A000-AFEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2106 				                        
  2107 = B000			screen_mem3 = $b000     ; 1K
  2108 AFF0			            org screen_mem3
  2109 B000-B31F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2110
  2111 02E0-02E1> CE 21		            run main
