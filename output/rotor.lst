mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.6
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - add color (pm?) in header for player ONE/TWO
    17 				; - try fix bat priority, now RED is always in front
    18
    19 				; Optional for a later version:
    20 				; - add computer player(s)
    21 				; - add support for driving controllers
    22
    23 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    24
    25 				; color scheme
    26 = 0050			BASE_COLOR_P1   = $50   ; purple
    27 = 00B0			BASE_COLOR_P2   = $b0   ; green
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 1000			pm_area     = $1000
    33 = 1180			msl_area    = pm_area+$180
    34 = 1200			p0_area     = pm_area+$200
    35 = 1280			p1_area     = pm_area+$280
    36 = 1300			p2_area     = pm_area+$300
    37 = 1380			p3_area     = pm_area+$380
    38
    39 				; $1400 .. $1500 is overwritten, bug?
    40
    41 				; outer tables 256 for 360 degrees
    42 = 1600			outer_x_256     = $1600
    43 = 1700			outer_y_256     = $1700
    44
    45 = 1800			screen_y_lo     = $1800
    46 = 1900			screen_y_hi     = $1900
    47
    48 = 0140			WIDTH           = 320
    49 = 00C0			HEIGHT          = 192
    50
    51 = 0028			SCREEN_WIDTH    = 40
    52
    53 = 0030			outer_x_margin  = 48 ;47-32
    54 = 0040			inner_x_margin  = 64
    55
    56 = 00A0			circle_center_x = WIDTH/2
    57 = 0060			circle_center_y = HEIGHT/2
    58
    59 = 0006			ball_top_margin     = 6
    60 = 0045			ball_left_margin    = 64+5
    61
    62 				; pm upper margin
    63 = 0001			upper_margin    = 1
    64 = 0020			left_margin     = 32
    65
    66 = 0080			music_toggle    = $80
    67
    68 = 0084			shape_ptr       = $84
    69 = 0086			tmp_screen      = $86
    70
    71 = 008C			mode_menu       = $8c
    72
    73 = 008D			volume_hit_bat  = $8d
    74 = 008E			volume_hit_edge = $8e
    75
    76 				; player vars must be in sequence for zp,x indexing
    77
    78 = 0090			p1_shape        = $90
    79 = 0091			p2_shape        = $91
    80
    81 = 0094			player1_x       = $94
    82 = 0095			player2_x       = $95
    83
    84 = 0098			player1_y       = $98
    85 = 0099			player2_y       = $99
    86
    87 = 009C			p1_angle        = $9c
    88 = 009D			p2_angle        = $9d
    89
    90 = 00A0			mp_collision    = $a0
    91 = 00A1			in_collision    = $a1
    92 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    93 = 00A3			edge_delay      = $a3
    94 = 00A4			bat_collision_delay = $a4
    95
    96 				; ball vars
    97 = 00A6			ball_current_x      = $a6
    98 = 00A7			ball_current_y      = $a7
    99 = 00AA			ball_angle_start    = $aa
   100 = 00AB			ball_angle_end      = $ab
   101 = 00AC			ball_speed          = $ac
   102
   103 = 00B0			tmp_angle1          = $b0
   104 = 00B1			tmp_angle2          = $b1
   105 = 00B2			add_to_angle        = $b2
   106 = 00B3			angle_diff_bat      = $b3
   107 = 00B4			tmp_angle_direction = $b4
   108 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   109 = 00B6			game_restart        = $b6
   110 = 00B7			tmp_angle_diff      = $b7
   111 = 00B8			magnitude           = $b8       ; word
   112
   113 				; $c0 - $df free for music
   114
   115 = 00E0			_divisor    = $e0   ; word
   116 = 00E2			_dividend   = $e2   ; word
   117 = 00E4			_remainder  = $e4   ; word
   118 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   119
   120 = 00E6			tmp_x1      = $e6   ; byte
   121 = 00E7			tmp_y1      = $e7   ; byte
   122 = 00E8			tmp_x2      = $e8   ; byte
   123 = 00E9			tmp_y2      = $e9   ; byte
   124
   125 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   126 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   127
   128 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   129 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   130
   131 = 00F2			tmp_dx      = $f2  ; byte
   132 = 00F3			tmp_dy      = $f3  ; byte
   133
   134 = 00F6			_multiplicand   = $f6   ; word
   135 = 00F8			_multiplier     = $f8   ; byte
   136
   137 				; direction:
   138 				; 0 : x1<x2 or y1<y2 = add
   139 				; 1 ; x1>=y2 or y1>=y2 = subtract
   140
   141 = 00FA			dir_x       = $fa  ; byte
   142 = 00FB			dir_y       = $fb  ; byte
   143
   144 = 00FC			line_end_x  = $fc  ; byte
   145 = 00FD			line_end_y  = $fd  ; byte
   146
   147 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $2000
    17 2000			rotor_font
    18 2000-23FF> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 2400			            org $610
    21 0610			intro_main
    22 0610-0725> A9 58		            lda #<dl_intro
    23 0612 8D 30 02		            sta $230
    24 0615 A9 06		            lda #>dl_intro
    25 0617 8D 31 02		            sta $231
    26
    27 061A A9 20		            lda #>rotor_font
    28 061C 8D F4 02		            sta 756
    29
    30 061F A9 00		            lda #0
    31 0621 8D C6 02		            sta 710
    32
    33 0624 A9 22		            lda #34
    34 0626 8D 2F 02		            sta 559
    35
    36 				; reset clock
    37 0629 A9 00		            lda #0
    38 062B 85 14		            sta 20
    39 062D 85 13		            sta 19
    40 				            
    41 062F 60			            rts
    42
    43 0630			footer_intro
    44 0630 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    45
    46 0658			dl_intro
    47 0658 70 70 70		            dta $70,$70,$70
    48
    49 065B 4F			            dta $4f
    50 065C 10 A0		            dta a(intro_image)
    51 065E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 0665 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 066D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54 0675 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    55
    56 067D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 0685 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 068D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 0695 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60
    61 069D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 06A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 06AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 06B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65
    66 06BD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    67
    68 06C3 4F			            dta $4f
    69 06C4 00 B0		            dta a(intro_image+$ff0)
    70 06C6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 06CD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 06D5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73 06DD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    74
    75 06E5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 06ED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 06F5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 06FD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79
    80 0705 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81 070D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    82 0715 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 071D 0F 0F		            dta $0f,$0f
    84 				            
    85 071F 20			            dta $20
    86 0720 42			            dta $42
    87 0721 30 06		            dta a(footer_intro)
    88
    89 0723 41			            dta $41
    90 0724 58 06		            dta a(dl_intro)
    91 				            
    92 0726			            org $a010
    93 A010			intro_image
    94 A010-BE0F> 42 08 11 29 +             ins 'gfx\intro\intro_v4_gr8_inverted.gr8'
    95
    96 02E2-02E3> 10 06		            ini intro_main
   148
   149 BE10			            org $2400            
   150
   151 2400			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2400			driver_tmp      .ds 2
     5 = 2402			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 2403			            .align $100
    11 2500			paddle_to_256
    12 = 2500			            .ds $100
    13
    14 				; paddle initial value
    15 2600			prev_paddle_value
    16 = 2600			            .ds 1
    17
    18 2601			driver_init
    19 2601-2EDC> A9 00		            lda #0  ; stick
    20 2603 8D 02 24		            sta driver_mode
    21
    22 2606 AD 70 02		            lda PADDL0
    23 2609 8D 00 26		            sta prev_paddle_value
    24
    25 260C A9 00		            lda #0
    26 260E 85 9C		            sta p1_angle
    27 2610 A9 80		            lda #128
    28 2612 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2614 A9 00		            lda #0
    33 2616 8D 00 24		            sta driver_tmp
    34 2619 8D 01 24		            sta driver_tmp+1
    35 				            
    36 261C A2 00		            ldx #0
    37 261E			store_pv
    38 261E AD 01 24		            lda driver_tmp+1
    39 2621 9D 00 25		            sta paddle_to_256,x
    40 				            
    41 2624 AD 00 24		            lda driver_tmp
    42 2627 18			            clc
    43 2628 69 1F		            adc #<paddle_add
    44 262A 8D 00 24		            sta driver_tmp
    45 262D AD 01 24		            lda driver_tmp+1
    46 2630 69 01		            adc #>paddle_add
    47 2632 8D 01 24		            sta driver_tmp+1
    48 2635 E8			            inx
    49 2636 E0 E5		            cpx #paddle_vals
    50 2638 D0 E4		            bne store_pv
    51 263A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 263B			driver_detect
    63 263B AD 70 02		            lda PADDL0
    64 263E C9 E4		            cmp #228
    65 2640 D0 07		            bne paddle_detect
    66 2642 AD 71 02		            lda PADDL1
    67 2645 C9 E4		            cmp #228
    68 2647 F0 06		            beq no_paddle_detect
    69 2649			paddle_detect
    70 2649 A9 01		            lda #1
    71 264B 8D 02 24		            sta driver_mode
    72 264E 60			            rts
    73
    74 264F			no_paddle_detect
    75 264F AD 78 02		            lda STICK0
    76 2652 C9 0C		            cmp #12
    77 2654 D0 06		            bne no_driving_detect
    78 2656 A9 02		            lda #2
    79 2658 8D 02 24		            sta driver_mode
    80 265B 60			            rts
    81
    82 265C			no_driving_detect
    83 265C C9 07		            cmp #7      ; paddle button also gives this
    84 265E F0 04		            beq stick_detect    
    85 2660 C9 0B		            cmp #11     ; paddle button also gives this
    86 2662 D0 06		            bne no_stick_detect
    87 2664			stick_detect
    88 2664 A9 00		            lda #0
    89 2666 8D 02 24		            sta driver_mode
    90 2669 60			            rts
    91
    92 266A			no_stick_detect
    93 				; default is the last value
    94 266A AD 02 24		            lda driver_mode
    95 266D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 266E			main_driver            
   110 266E AC 02 24		            ldy driver_mode
   111 2671 B9 80 26		            lda driver_lo,y
   112 2674 8D 7E 26		            sta driver_ptr
   113 2677 B9 84 26		            lda driver_hi,y
   114 267A 8D 7F 26		            sta driver_ptr+1
   115
   116 = 267E			driver_ptr = *+1
   117 267D 4C FF FF		            jmp $ffff  
   118
   119 2680			driver_lo
   120 2680 88			            dta <driver_stick
   121 2681 CD			            dta <driver_paddle
   122 2682 88			            dta <driver_stick
   123 2683 88			            dta <driver_stick
   124
   125 2684			driver_hi
   126 2684 26			            dta >driver_stick
   127 2685 26			            dta >driver_paddle
   128 2686 26			            dta >driver_stick
   129 2687 26			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2688			driver_stick
   134 2688 BD 78 02		            lda STICK0,x
   135 268B C9 0F		            cmp #15
   136 268D F0 21		            beq move_done
   137 268F C9 0B		            cmp #11
   138 2691 D0 0E		            bne no_left
   139
   140 2693 D6 9C		            dec p1_angle,x
   141 2695 BD 84 02		            lda STRIG0,x
   142 2698 D0 04		            bne no_fast
   143 269A D6 9C		            dec p1_angle,x
   144 269C D6 9C		            dec p1_angle,x
   145 269E			no_fast
   146 				            
   147 269E 4C B0 26		            jmp move_done
   148 26A1 C9 07		no_left     cmp #7
   149 26A3 D0 0B		            bne move_done
   150
   151 26A5 F6 9C		            inc p1_angle,x
   152 26A7 BD 84 02		            lda STRIG0,x
   153 26AA D0 04		            bne no_fast_right
   154 26AC F6 9C		            inc p1_angle,x
   155 26AE F6 9C		            inc p1_angle,x
   156 26B0			no_fast_right
   157 26B0			move_done
   158 26B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 26B1			is_fire_button
   165 26B1 AD 02 24		            lda driver_mode
   166 26B4 C9 01		            cmp #1
   167 26B6 F0 04		            beq check_paddle_fire
   168 				            
   169 26B8 BD 84 02		            lda STRIG0,x
   170 26BB 60			            rts
   171
   172 26BC			check_paddle_fire
   173 26BC AD 78 02		            lda STICK0
   174 26BF C9 07		            cmp #7
   175 26C1 F0 07		            beq paddle_fire
   176 26C3 C9 0B		            cmp #11
   177 26C5 F0 03		            beq paddle_fire
   178 26C7 A9 00		            lda #0
   179 26C9 60			            rts
   180 26CA			paddle_fire
   181 26CA A9 01		            lda #1
   182 26CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 26CD			driver_paddle            
   187 26CD BD 70 02		            lda PADDL0,x
   188 26D0 A8			            tay
   189 26D1 B9 00 25		            lda paddle_to_256,y
   190 26D4 5D DA 26		            eor paddle_offsets,x
   191 26D7 95 9C		            sta p1_angle,x
   192 26D9 60			            rts
   193
   194 26DA			paddle_offsets
   195 26DA 00 00		            dta 0,0
   152 26DC			main
   153 26DC A9 FF		            lda #255
   154 26DE 8D FC 02		            sta 764
   155
   156 				; for fast loaders, wait 10 seconds or continue with spacebar
   157 26E1			wait_a_sec
   158 26E1 AD FC 02		            lda 764
   159 26E4 C9 FF		            cmp #255
   160 26E6 D0 06		            bne any_key_pressed
   161
   162 26E8 A5 13		            lda 19
   163 26EA C9 02		            cmp #2
   164 26EC 90 F3		            bcc wait_a_sec
   165
   166 26EE			any_key_pressed
   167 26EE A9 FF		            lda #255
   168 26F0 8D FC 02		            sta 764
   169
   170 				; start the game!
   171 				 
   172 26F3 A9 00		            lda #0
   173 26F5 8D 2F 02		            sta SDMCTL
   174 26F8 85 B6		            sta game_restart
   175
   176 26FA A9 80		            lda #128
   177 26FC 85 8D		            sta volume_hit_bat
   178 26FE 85 8E		            sta volume_hit_edge
   179 2700 85 80		            sta music_toggle        ; 128 = on, 0 = off
   180
   181 2702 A9 01		            lda #1
   182 2704 8D 44 02		            sta 580 ; coldstart
   183
   184 2707 20 01 26		            jsr driver_init
   185
   186 270A 20 E6 2B		            jsr make_shape_index
   187 				 
   188 270D 20 16 2C		            jsr make_outer_256
   189 				            
   190 2710 20 F7 27		            jsr make_screen_y_tab
   191
   192 2713 20 42 28		            jsr invert_backdrop
   193
   194 2716 20 86 2C		            jsr reset_score
   195 2719 20 54 2C		            jsr show_score_p1
   196 271C 20 6D 2C		            jsr show_score_p2
   197 				                       
   198 271F 20 71 2E		            jsr init_sprites
   199 2722 20 9D 2E		            jsr init_colors
   200
   201 				; init. game vars
   202 2725 A2 00		            ldx #INIT_LEVEL_INDEX
   203 2727 8E B9 2E		            stx current_level_index
   204 272A 20 BE 2E		            jsr set_level_ball_speed
   205
   206 272D A9 01		            lda #1
   207 272F 85 8C		            sta mode_menu           ; start with menu
   208
   209 				; start vbi
   210 				            
   211 2731 A9 68		            lda #<dli_menu
   212 2733 8D 00 02		            sta VDSLST
   213 2736 A9 27		            lda #>dli_menu
   214 2738 8D 01 02		            sta VDSLST+1
   215
   216 273B 20 70 5E		            jsr music_init
   217
   218 				;            lda #0
   219 				;            sta $d208
   220 				            
   221 273E A9 C0		            lda #$c0
   222 2740 8D 0E D4		            sta NMIEN
   223 				            
   224 2743 A9 07		            lda #7          ; sets VVBLKI
   225 2745 A0 87		            ldy #<vbi
   226 2747 A2 28		            ldx #>vbi
   227 2749 20 5C E4		            jsr $e45c       ; SETVBV
   228
   229 				; we're just sitting here while VBI does all the work :)
   230 274C 4C 4C 27		loop        jmp loop
   231
   232 				;------------------------
   233 				; 8bit * 8bit = 16bit multiply
   234 				; By White Flame
   235 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   236 				; uses extra zp var _multiplicand+1
   237
   238 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   239 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   240
   241 				; In this version, both inputs must be unsigned
   242 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   243
   244 274F			_multi8
   245 274F A9 00		            lda #$00
   246 2751 A8			            tay
   247 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   248 2752 F0 0D		            beq _enter_loop
   249 2754			_do_add
   250 2754 18			            clc
   251 2755 65 F6		            adc _multiplicand
   252 2757 AA			            tax
   253
   254 2758 98			            tya
   255 2759 65 F7		            adc _multiplicand+1
   256 275B A8			            tay
   257 275C 8A			            txa
   258 275D			_mul_loop
   259 275D 06 F6		            asl _multiplicand
   260 275F 26 F7		            rol _multiplicand+1
   261 2761			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   262 2761 46 F8		            lsr _multiplier
   263 2763 B0 EF		            bcs _do_add
   264 2765 D0 F6		            bne _mul_loop
   265 2767 60			            rts
   266
   267 2768			dli_menu
   268 2768 48			            pha
   269 2769 8A			            txa
   270 276A 48			            pha
   271 				            
   272 276B A9 00		            lda #0
   273 276D 8D 0A D4		            sta WSYNC
   274 2770 8D 1A D0		            sta COLBK
   275 2773 A9 0E		            lda #$0e
   276 2775 8D 0A D4		            sta WSYNC
   277 2778 8D 1A D0		            sta COLBK
   278 277B A9 0A		            lda #$0a
   279 277D 8D 0A D4		            sta WSYNC
   280 2780 8D 1A D0		            sta COLBK
   281 2783 A9 00		            lda #0
   282 2785 8D 0A D4		            sta WSYNC
   283 2788 8D 1A D0		            sta COLBK
   284
   285 278B A2 00		            ldx #0
   286 278D			color_it            
   287 278D BD BF 27		            lda menu_colpf0,x
   288 2790 8D 0A D4		            sta WSYNC
   289 2793 8D 16 D0		            sta COLPF0
   290 2796 E8			            inx
   291 2797 E0 38		            cpx #56
   292 2799 D0 F2		            bne color_it
   293
   294 279B A9 00		            lda #0
   295 279D 8D 0A D4		            sta WSYNC
   296 27A0 8D 1A D0		            sta COLBK
   297 27A3 A9 0A		            lda #$0a
   298 27A5 8D 0A D4		            sta WSYNC
   299 27A8 8D 1A D0		            sta COLBK
   300 27AB A9 0E		            lda #$0e
   301 27AD 8D 0A D4		            sta WSYNC
   302 27B0 8D 1A D0		            sta COLBK
   303 27B3 A9 00		            lda #0
   304 27B5 8D 0A D4		            sta WSYNC
   305 27B8 8D 1A D0		            sta COLBK
   306 				            
   307 27BB 68			            pla
   308 27BC AA			            tax
   309 27BD 68			            pla
   310 27BE 40			            rti
   311
   312 27BF			menu_colpf0
   313 27BF 00 00		            dta 0,0
   314 27C1 58			            dta BASE_COLOR_P1+8
   315 27C2 58			            dta BASE_COLOR_P1+8
   316 27C3 5A			            dta BASE_COLOR_P1+10
   317 27C4 5A			            dta BASE_COLOR_P1+10
   318 27C5 5C			            dta BASE_COLOR_P1+12
   319 27C6 5C			            dta BASE_COLOR_P1+12
   320
   321 27C7 BC			            dta BASE_COLOR_P2+12
   322 27C8 BC			            dta BASE_COLOR_P2+12
   323 27C9 BA			            dta BASE_COLOR_P2+10
   324 27CA BA			            dta BASE_COLOR_P2+10
   325 27CB B8			            dta BASE_COLOR_P2+8
   326 27CC B8			            dta BASE_COLOR_P2+8
   327 27CD 00 00		            dta 0,0
   328
   329 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   330 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   331 27CF 00 00 00 00		            dta 0,0,0,0
   332 27D3 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   333 27DB 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   334 27E3 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   335 27EB 00 00 00 00		            dta 0,0,0,0
   336 27EF 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   337
   338 				; make pointers from y-position to screen memory
   339 				; screen memory is 3 blocks
   340 				; screen_mem1 : 102 lines, 4080 bytes
   341 				; screen_mem2 : 102 lines, 4080 bytes
   342 				; screen_mem3 :  20 lines,  800 bytes
   343
   344 27F7			make_screen_y_tab
   345 27F7 A9 00		            lda #<screen_mem1
   346 27F9 85 86		            sta tmp_screen
   347 27FB A9 70		            lda #>screen_mem1
   348 27FD 85 87		            sta tmp_screen+1
   349
   350 27FF A2 00		            ldx #0
   351 2801			fill_y_tab1
   352 2801 20 2A 28		            jsr store_y_line
   353 2804 E8			            inx
   354 2805 E0 66		            cpx #102
   355 2807 D0 F8		            bne fill_y_tab1
   356
   357 				; x = 102
   358 2809 A9 00		            lda #<screen_mem2
   359 280B 85 86		            sta tmp_screen
   360 280D A9 80		            lda #>screen_mem2
   361 280F 85 87		            sta tmp_screen+1
   362
   363 2811			fill_y_tab2
   364 2811 20 2A 28		            jsr store_y_line
   365 2814 E8			            inx
   366 2815 E0 CC		            cpx #204
   367 2817 D0 F8		            bne fill_y_tab2
   368
   369 2819 A9 00		            lda #<screen_mem3
   370 281B 85 86		            sta tmp_screen
   371 281D A9 90		            lda #>screen_mem3
   372 281F 85 87		            sta tmp_screen+1
   373
   374 				; x = 204
   375 2821			fill_y_tab3
   376 2821 20 2A 28		            jsr store_y_line
   377 2824 E8			            inx
   378 2825 E0 E0		            cpx #224
   379 2827 D0 F8		            bne fill_y_tab3
   380 2829 60			            rts
   381
   382 282A			store_y_line
   383 282A A5 86		            lda tmp_screen
   384 282C 9D 00 18		            sta screen_y_lo,x
   385 282F A5 87		            lda tmp_screen+1
   386 2831 9D 00 19		            sta screen_y_hi,x
   387 				            
   388 2834 A5 86		            lda tmp_screen
   389 2836 18			            clc
   390 2837 69 28		            adc #SCREEN_WIDTH
   391 2839 85 86		            sta tmp_screen
   392 283B A5 87		            lda tmp_screen+1
   393 283D 69 00		            adc #0
   394 283F 85 87		            sta tmp_screen+1
   395 2841 60			            rts
   396
   397 				; @todo invert backdrop image
   398 				; now we have to do it here :P
   399 2842			invert_backdrop
   400 2842 A9 00		            lda #<screen_mem1
   401 2844 85 86		            sta tmp_screen
   402 2846 A9 70		            lda #>screen_mem1
   403 2848 85 87		            sta tmp_screen+1
   404 				            
   405 284A A2 10		            ldx #16     ; 16 pages = 4K
   406 284C 20 6A 28		            jsr do_x_pages
   407 				           
   408 284F A9 00		            lda #<screen_mem2
   409 2851 85 86		            sta tmp_screen
   410 2853 A9 80		            lda #>screen_mem2
   411 2855 85 87		            sta tmp_screen+1
   412 				            
   413 2857 A2 10		            ldx #16     ; 16 pages = 4K
   414 2859 20 6A 28		            jsr do_x_pages
   415
   416 285C A9 00		            lda #<screen_mem3
   417 285E 85 86		            sta tmp_screen
   418 2860 A9 90		            lda #>screen_mem3
   419 2862 85 87		            sta tmp_screen+1
   420 				            
   421 2864 A2 04		            ldx #4     ; 4 pages = 1K
   422 2866 20 6A 28		            jsr do_x_pages
   423 2869 60			            rts
   424
   425 				; invert x pages, starting from tmp_screen
   426
   427 286A			do_x_pages
   428 286A A0 00		            ldy #0
   429 286C			do_page
   430 286C B1 86		            lda (tmp_screen),y
   431 286E 49 FF		            eor #$ff
   432 2870 91 86		            sta (tmp_screen),y
   433 2872 C8			            iny
   434 2873 D0 F7		            bne do_page 
   435
   436 2875 E6 87		            inc tmp_screen+1
   437 2877 CA			            dex
   438 2878 D0 F2		            bne do_page
   439 287A 60			            rts
   440
   441 287B			turn_color_ball
   442 287B A6 B5		            ldx player_turn
   443 287D BD 84 28		            lda color_turn,x
   444 2880 8D C7 02		            sta COLOR3
   445 2883 60			            rts
   446 				            
   447 2884 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   448
   449 				; A, X, Y are already saved by the OS
   450 2887			vbi                 
   451 2887 20 DE 5E		            jsr copy_shadow
   452
   453 288A A5 80		            lda music_toggle
   454 288C F0 03		            beq skip_music
   455 288E 20 99 5E		            jsr play_song
   456 2891			skip_music
   457 2891 20 E8 29		            jsr play_sound_bat
   458 2894 20 06 2A		            jsr play_sound_edge            
   459
   460 				; toggle music on/off with spacebar
   461 2897 AD FC 02		            lda 764
   462 289A C9 21		            cmp #$21
   463 289C D0 12		            bne no_spacebar
   464 289E A5 80		            lda music_toggle
   465 28A0 49 80		            eor #128
   466 28A2 85 80		            sta music_toggle
   467 28A4 D0 03		            bne music_turned_on
   468 28A6 20 62 5F		            jsr music_off
   469
   470 28A9			music_turned_on
   471 28A9 A9 FF		            lda #255
   472 28AB 8D FC 02		            sta 764
   473 28AE D0 E1		            bne skip_music
   474
   475 28B0			no_spacebar
   476
   477
   478 28B0 A9 2E		            lda #%00101110  ; enable P/M DMA
   479 28B2 8D 2F 02		            sta SDMCTL
   480 28B5 A9 00		            lda #0
   481 28B7 85 4D		            sta 77      ; attract off
   482 28B9 A9 20		            lda #>rotor_font
   483 28BB 8D F4 02		            sta 756
   484
   485 				; menu switching thingy
   486
   487 28BE AD 1F D0		            lda CONSOL
   488 28C1 C9 03		            cmp #3
   489 28C3 D0 0C		            bne no_option_pressed
   490
   491 28C5			go_menu_mode            
   492 28C5 20 FC 5E		            jsr music_normal_volume
   493 				            
   494 28C8 20 4F 2B		            jsr wipe_ball
   495 				            
   496 28CB A9 01		            lda #1
   497 28CD 85 8C		            sta mode_menu
   498 28CF D0 12		            bne check_mode_menu
   499
   500 28D1			no_option_pressed
   501 28D1 C9 06		            cmp #6
   502 28D3 D0 0E		            bne check_mode_menu
   503 				            
   504 				; reset game
   505
   506 28D5			reset_game
   507 28D5 20 07 5F		            jsr music_low_volume
   508
   509 28D8 20 4F 2B		            jsr wipe_ball
   510 				            
   511 28DB A9 01		            lda #1
   512 28DD 85 B6		            sta game_restart
   513
   514 28DF A9 00		            lda #0
   515 28E1 85 8C		            sta mode_menu
   516
   517 28E3			check_mode_menu
   518 28E3 A5 8C		            lda mode_menu
   519 28E5 F0 51		            beq main_game_vbi
   520
   521 				; within menu vbi
   522 				            
   523 28E7 AD 1F D0		            lda CONSOL
   524 28EA C9 05		            cmp #5          ; select
   525 28EC D0 18		            bne no_level_select
   526 				            
   527 28EE AD B8 2E		            lda previous_consol
   528 28F1 C9 05		            cmp #5
   529 28F3 F0 14		            beq wait_depressed
   530 				            
   531 28F5 20 CD 2E		            jsr increase_level
   532 28F8 AE B9 2E		            ldx current_level_index
   533 28FB 20 BE 2E		            jsr set_level_ball_speed            
   534
   535 28FE A9 05		            lda #5
   536 2900 8D B8 2E		            sta previous_consol
   537 2903 4C 09 29		            jmp wait_depressed
   538
   539 2906			no_level_select
   540 2906 8D B8 2E		            sta previous_consol
   541
   542 2909			wait_depressed        
   543 2909 A9 16		            lda #<menu_dl
   544 290B 8D 30 02		            sta SDLSTL
   545 290E A9 41		            lda #>menu_dl
   546 2910 8D 31 02		            sta SDLSTH
   547
   548 				; detect/show controller type (used for both players)
   549 2913 20 1F 29		            jsr detect_show_driver
   550
   551 2916 20 55 2A		            jsr handle_player1
   552 2919 20 6E 2A		            jsr handle_player2
   553
   554 291C 4C DA 29		            jmp exit_vbi
   555
   556 				; X = port/driver to detect
   557 291F			detect_show_driver
   558 291F 20 3B 26		            jsr driver_detect
   559 2922 A8			            tay
   560 2923 B9 98 42		            lda driver_text_lo,y
   561 2926 85 86		            sta tmp_screen
   562 2928 B9 9C 42		            lda driver_text_hi,y
   563 292B 85 87		            sta tmp_screen+1
   564
   565 292D A0 07		            ldy #7
   566 292F			show_driv
   567 292F B1 86		            lda (tmp_screen),y
   568 2931 99 1E 42		            sta driver_screen,y
   569 2934 88			            dey
   570 2935 10 F8		            bpl show_driv
   571 2937 60			            rts
   572
   573 				; main game vbi
   574 2938			main_game_vbi
   575 2938 A5 B6		            lda game_restart
   576 293A F0 2C		            beq no_restart
   577
   578 				; restart game
   579 				            
   580 293C A9 00		            lda #0
   581 293E 85 B6		            sta game_restart
   582 				            
   583 2940 20 86 2C		            jsr reset_score
   584 2943 20 54 2C		            jsr show_score_p1
   585 2946 20 6D 2C		            jsr show_score_p2
   586
   587 2949 A6 9C		            ldx p1_angle
   588 294B 86 AA		            stx ball_angle_start
   589 294D 20 A8 2A		            jsr ball_to_start_position
   590 2950 20 B7 2A		            jsr prepare_ball_end_position
   591
   592 2953 A9 00		            lda #0
   593 2955 85 A0		            sta mp_collision
   594 2957 85 A1		            sta in_collision
   595 2959 85 A3		            sta edge_delay
   596 295B 8D 1E D0		            sta HITCLR
   597
   598 295E A9 02		            lda #2
   599 2960 85 B5		            sta player_turn
   600
   601 2962 20 7B 28		            jsr turn_color_ball
   602 2965 4C DA 29		            jmp exit_vbi            
   603
   604 2968			no_restart
   605 2968 A9 00		            lda #<display_list
   606 296A 8D 30 02		            sta SDLSTL
   607 296D A9 40		            lda #>display_list
   608 296F 8D 31 02		            sta SDLSTH
   609
   610 2972 AD 08 D0		            lda M0PL
   611 2975 85 A0		            sta mp_collision
   612 2977 AD 09 D0		            lda M1PL
   613 297A 05 A0		            ora mp_collision
   614 297C 85 A0		            sta mp_collision
   615 				 
   616 297E 20 55 2A		            jsr handle_player1
   617 2981 20 6E 2A		            jsr handle_player2
   618
   619 				; handle ball
   620
   621 2984 20 4F 2B		            jsr wipe_ball         
   622
   623 				; Check ball collision with bat
   624
   625 2987 A5 A4		            lda bat_collision_delay
   626 2989 F0 05		            beq check_allowed
   627 298B C6 A4		            dec bat_collision_delay
   628 298D 4C A7 29		            jmp move_one
   629
   630 2990			check_allowed
   631 2990 A5 A0		            lda mp_collision
   632 2992 F0 0F		            beq reset_in_collision
   633
   634 2994 A5 A1		            lda in_collision
   635 2996 D0 0F		            bne no_first_hit
   636
   637 2998 E6 A1		            inc in_collision            
   638 299A 20 E4 2A		            jsr bounce_bat_ball 
   639 				            
   640 299D 20 E3 29		            jsr start_sound_bat          
   641 				            
   642 29A0 4C A7 29		            jmp move_one
   643 				            
   644 29A3			reset_in_collision
   645 29A3 A9 00		            lda #0
   646 29A5 85 A1		            sta in_collision        
   647
   648 29A7			move_one
   649 29A7			no_first_hit
   650 29A7 20 D8 2D		            jsr move_current_xy
   651 29AA F0 1B		            beq still_moving
   652
   653 				; edge detected
   654
   655 29AC 20 01 2A		            jsr start_sound_edge
   656
   657 29AF A5 AB		            lda ball_angle_end
   658 29B1 85 AA		            sta ball_angle_start
   659
   660 29B3 20 DB 2A		            jsr ball_current_to_start_position
   661 29B6 20 B7 2A		            jsr prepare_ball_end_position
   662
   663 29B9 20 21 2A		            jsr update_score
   664 29BC D0 1F		            bne game_ends
   665
   666 				; switch turns
   667 29BE A5 B5		            lda player_turn
   668 29C0 49 03		            eor #3              ; 1 => 2, 2 => 1
   669 29C2 85 B5		            sta player_turn
   670 29C4 20 7B 28		            jsr turn_color_ball
   671
   672 29C7			still_moving
   673 29C7 A5 EB		            lda current_x+1
   674 29C9 85 A6		            sta ball_current_x
   675 29CB A5 ED		            lda current_y+1
   676 29CD 85 A7		            sta ball_current_y
   677
   678 29CF 20 64 2B		            jsr show_ball
   679
   680 29D2 A9 00		            lda #0
   681 29D4 8D 18 D0		            sta $d018           
   682
   683 				; anything in A to clear collisions
   684 29D7 8D 1E D0		            sta HITCLR
   685
   686 29DA			exit_vbi
   687 29DA 4C 62 E4		            jmp $e462
   688
   689 29DD			game_ends
   690 29DD 20 FC 5E		            jsr music_normal_volume
   691 29E0 4C 62 E4		            jmp $e462            
   692
   693 29E3			start_sound_bat
   694 29E3 A9 0A		            lda #10
   695 29E5 85 8D		            sta volume_hit_bat
   696 29E7 60			            rts
   697 				            
   698 29E8			play_sound_bat
   699 29E8 A5 8D		            lda volume_hit_bat
   700 29EA 30 14		            bmi silenced_bat
   701
   702 29EC A5 B5		            lda player_turn
   703 29EE 0A			            asl
   704 29EF 0A			            asl
   705 29F0 69 30		            adc #$30
   706 29F2 E5 B3		            sbc angle_diff_bat
   707 29F4 8D 75 5F		            sta SHADOW+4    ; $d204
   708 29F7 A5 8D		            lda volume_hit_bat
   709 29F9 09 A0		            ora #$a0
   710 29FB 8D 76 5F		            sta SHADOW+5    ; $d205
   711 29FE C6 8D		            dec volume_hit_bat
   712 2A00			silenced_bat
   713 2A00 60			            rts
   714
   715 2A01			start_sound_edge
   716 2A01 A9 04		            lda #4
   717 2A03 85 8E		            sta volume_hit_edge
   718 2A05 60			            rts
   719
   720 2A06			play_sound_edge
   721 2A06 A5 8E		            lda volume_hit_edge
   722 2A08 30 16		            bmi silenced_edge
   723 2A0A D0 06		            bne no_silenced_edge
   724 2A0C 8D 76 5F		            sta SHADOW+5    ; $d205
   725 2A0F C6 8E		            dec volume_hit_edge
   726 2A11 60			            rts            
   727
   728 2A12			no_silenced_edge
   729 2A12 A9 08		            lda #$08
   730 2A14 8D 75 5F		            sta SHADOW+4    ; $d204
   731 2A17 A5 8E		            lda volume_hit_edge
   732 2A19 09 26		            ora #$26
   733 2A1B 8D 76 5F		            sta SHADOW+5    ; $d205
   734 2A1E C6 8E		            dec volume_hit_edge
   735 2A20			silenced_edge
   736 2A20 60			            rts
   737
   738 				; Update score
   739 				; Score > max score, then exit A = 1, otherwise A = 0
   740
   741 2A21			update_score
   742 2A21 A5 B5		            lda player_turn
   743 2A23 C9 01		            cmp #1
   744 2A25 D0 12		            bne was_player2_turn
   745 				; was player 1 turn, so player 2 gets a point
   746 2A27 20 9B 2C		            jsr inc_score_p2
   747 2A2A 20 6D 2C		            jsr show_score_p2
   748
   749 2A2D AD 15 41		            lda score_p2
   750 2A30 C9 11		            cmp #MAX_SCORE
   751 2A32 D0 17		            bne reset_edge_delay
   752
   753 2A34 A9 01		            lda #1
   754 2A36 85 8C		            sta mode_menu
   755 2A38 60			            rts
   756
   757 2A39			was_player2_turn
   758 2A39 20 8F 2C		            jsr inc_score_p1
   759 2A3C 20 54 2C		            jsr show_score_p1
   760
   761 2A3F AD 14 41		            lda score_p1
   762 2A42 C9 11		            cmp #MAX_SCORE
   763 2A44 D0 05		            bne reset_edge_delay
   764
   765 2A46 A9 01		            lda #1
   766 2A48 85 8C		            sta mode_menu
   767 2A4A 60			            rts
   768
   769 2A4B			reset_edge_delay
   770 2A4B A9 0A		            lda #10
   771 2A4D 85 A3		            sta edge_delay
   772
   773 2A4F			no_edge
   774
   775 2A4F A9 00		            lda #0      ; no end game
   776 				; anything in A to clear collisions
   777 2A51 8D 1E D0		            sta HITCLR
   778 2A54 60			            rts
   779
   780 				; player 1
   781 				; - wipe shape at previous y-position
   782 				; - move player using controller
   783 				; - set sprite positions
   784
   785 2A55			handle_player1
   786 2A55 20 BC 2B		            jsr wipe_p1         ; wipe previous shape player 1
   787
   788 2A58 A2 00		            ldx #0              ; player 1
   789 2A5A 20 87 2A		            jsr move_player
   790 				            
   791 2A5D 20 88 2B		            jsr show_p1
   792
   793 2A60 A5 94		            lda player1_x
   794 2A62 18			            clc
   795 2A63 69 20		            adc #left_margin
   796 2A65 8D 00 D0		            sta HPOSP0
   797 2A68 69 08		            adc #8
   798 2A6A 8D 01 D0		            sta HPOSP1
   799 2A6D 60			            rts
   800
   801 				; player 2
   802 				; - wipe shape at previous y-position
   803 				; - move player using controller
   804 				; - set sprite positions
   805
   806 2A6E			handle_player2
   807 2A6E 20 D1 2B		            jsr wipe_p2         ; wipe previous shape player 2
   808
   809 2A71 A2 01		            ldx #1              ; player 2
   810 2A73 20 87 2A		            jsr move_player
   811 				                        
   812 2A76 20 A2 2B		            jsr show_p2
   813
   814 2A79 A5 95		            lda player2_x
   815 2A7B 18			            clc
   816 2A7C 69 20		            adc #left_margin
   817 2A7E 8D 02 D0		            sta HPOSP2
   818 2A81 69 08		            adc #8
   819 2A83 8D 03 D0		            sta HPOSP3
   820 2A86 60			            rts
   821
   822 				; move player 1/2
   823 				; right - clockwise, left = anti-clockwise
   824
   825 				; X = 0, player 1
   826 				; X = 1, player 2
   827
   828 				; Y = driver mode:
   829 				; 0 : stick
   830 				; 1 : paddle
   831 				; 2 : driving
   832 				; 3 : computer
   833 				            
   834 2A87			move_player
   835 2A87 20 6E 26		            jsr main_driver
   836
   837 2A8A B5 9C		            lda p1_angle,x
   838 2A8C 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   839 2A8E 49 40		            eor #64                     ; perpendicular to the circle angle
   840 2A90 95 90		            sta p1_shape,x
   841
   842 2A92 B4 9C		            ldy p1_angle,x
   843 2A94 B9 00 2F		            lda inner_x_tab,y
   844 2A97 4A			            lsr
   845 2A98 69 20		            adc #inner_x_margin/2
   846 2A9A 95 94		            sta player1_x,x
   847 2A9C B9 00 30		            lda inner_y_tab,y
   848 2A9F 4A			            lsr
   849 2AA0 95 98		            sta player1_y,x
   850
   851 2AA2 B4 90		            ldy p1_shape,x
   852 2AA4 20 0B 2C		            jsr shape_to_ptr
   853
   854 2AA7 60			            rts
   855
   856 				; Set ball at start position
   857 				; - start angle current player
   858 				; - start position by inner table
   859 				; - collision delay set?
   860
   861 				; Set ball current position to start position
   862 				; input:
   863 				; X = angle of start position
   864 				; output:
   865 				; ball position: (ball_current_x, ball_current_y)
   866 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   867 2AA8			ball_to_start_position
   868 2AA8 BD 00 2F		            lda inner_x_tab,x
   869 2AAB 85 A6		            sta ball_current_x
   870 2AAD 85 E6		            sta tmp_x1
   871 2AAF BD 00 30		            lda inner_y_tab,x
   872 2AB2 85 A7		            sta ball_current_y
   873 2AB4 85 E7		            sta tmp_y1
   874 2AB6 60			            rts
   875
   876 				; Prepare ball end position
   877 				; - end angle current player
   878 				; - end position by outer table
   879 				; - calculate step size x,y
   880
   881 				; Input:
   882 				; - ball_angle_start
   883 				; - ball speed
   884 				; Output:
   885 				; - ball_andle_end
   886 				; - ball start position (tmp_x1, tmp_y1)
   887 				; - ball end position (tmp_x2, tmp_y2)
   888 				; - step size (step_x, step_y) for ball movement
   889 2AB7			prepare_ball_end_position
   890 2AB7 A5 AA		            lda ball_angle_start
   891 2AB9 49 80		            eor #128        ; other side
   892 2ABB 85 AB		            sta ball_angle_end
   893 2ABD AA			            tax
   894 2ABE 20 44 2B		            jsr angle_to_end_position
   895 				                        
   896 2AC1 20 6B 2D		            jsr init_current_xy
   897 				            
   898 				; move current a little bit            
   899 2AC4 20 D8 2D		            jsr move_current_xy
   900 				; ignore end indicator, since we only just started
   901
   902
   903 2AC7 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   904 2AC9 85 A4		            sta bat_collision_delay
   905 2ACB 60			            rts
   906
   907 				; x = angle 0..255
   908 2ACC			outer_angle_to_start_position
   909 2ACC BD 00 16		            lda outer_x_256,x
   910 2ACF 85 A6		            sta ball_current_x
   911 2AD1 85 E6		            sta tmp_x1
   912 2AD3 BD 00 17		            lda outer_y_256,x
   913 2AD6 85 A7		            sta ball_current_y
   914 2AD8 85 E7		            sta tmp_y1
   915 2ADA 60			            rts
   916
   917 2ADB			ball_current_to_start_position
   918 2ADB A5 A6		            lda ball_current_x
   919 2ADD 85 E6		            sta tmp_x1
   920 2ADF A5 A7		            lda ball_current_y
   921 2AE1 85 E7		            sta tmp_y1
   922 2AE3 60			            rts
   923
   924 				; Ball collides with bat
   925 				; - start ball angle = end ball angle
   926 				; - calculate diff between bat and ball end angle
   927 				; - calculate new end angle
   928 				; - Set ball at start position
   929 				; - Prepare ball end position
   930
   931 2AE4			bounce_bat_ball
   932 				; set new start of ball
   933 				; @todo check ball angles
   934 				; set new ball start angle (= previous end angle)
   935 2AE4 A5 AB		            lda ball_angle_end
   936 2AE6 85 AA		            sta ball_angle_start
   937 				            
   938 				; alternative?
   939 				            ;ldx ball_angle_start
   940 				            ;jsr ball_to_start_position          
   941 2AE8 20 DB 2A		            jsr ball_current_to_start_position
   942
   943 				; which player hit the ball?
   944 2AEB A9 01		            lda #1
   945 2AED 85 A2		            sta player_nr_hit
   946 2AEF A5 A0		            lda mp_collision
   947 2AF1 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   948 2AF3 D0 04		            bne p1_hit
   949 2AF5 A9 02		            lda #2
   950 2AF7 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   951 2AF9			p1_hit            
   952
   953 				; who's turn is it and who bounced the ball?
   954
   955 2AF9 A5 B5		            lda player_turn
   956 2AFB 25 A2		            and player_nr_hit
   957 2AFD F0 06		            beq no_switch_turn
   958
   959 2AFF A5 B5		            lda player_turn
   960 2B01 49 03		            eor #3              ; 1 => 2, 2 => 1
   961 2B03 85 B5		            sta player_turn 
   962
   963 2B05			no_switch_turn
   964 2B05 20 7B 28		            jsr turn_color_ball
   965 				            
   966 2B08 A6 A2		            ldx player_nr_hit
   967 2B0A CA			            dex                     ; index 0,1 (player = 1,2)
   968 2B0B B5 9C		            lda p1_angle,x
   969
   970 				; Calculate diff between bat angle position and new ball start position
   971 2B0D 85 B0		            sta tmp_angle1
   972
   973 2B0F A5 AA		            lda ball_angle_start
   974 2B11 85 B1		            sta tmp_angle2
   975
   976 2B13 20 A7 2C		            jsr calc_angle_diff
   977
   978 2B16 0A			            asl
   979 2B17 0A			            asl
   980 2B18 0A			            asl
   981 2B19 85 B3		            sta angle_diff_bat
   982
   983 2B1B A5 B0		            lda tmp_angle1
   984 2B1D 18			            clc
   985 2B1E 65 B2		            adc add_to_angle
   986 2B20 49 80		            eor #128            ; other side
   987 2B22 85 B0		            sta tmp_angle1
   988 				            
   989 2B24 A5 B4		            lda tmp_angle_direction
   990 2B26 D0 0A		            bne diff_clockwise
   991 				; diff counter clockwise
   992 2B28 A5 B0		            lda tmp_angle1
   993 2B2A 18			            clc
   994 2B2B 65 B3		            adc angle_diff_bat
   995 2B2D 85 B0		            sta tmp_angle1
   996 2B2F 4C 39 2B		            jmp calc_done            
   997
   998 2B32			diff_clockwise
   999 2B32 A5 B0		            lda tmp_angle1
  1000 2B34 38			            sec
  1001 2B35 E5 B3		            sbc angle_diff_bat
  1002 2B37 85 B0		            sta tmp_angle1
  1003 				            
  1004 				; calculation done            
  1005 2B39			calc_done
  1006 2B39 A5 B0		            lda tmp_angle1
  1007 2B3B 85 AB		            sta ball_angle_end
  1008 2B3D AA			            tax
  1009 2B3E 20 44 2B		            jsr angle_to_end_position
  1010 				                        
  1011 2B41 4C 6B 2D		            jmp init_current_xy
  1012
  1013 				; x = angle 0..255
  1014 2B44			angle_to_end_position
  1015 2B44 BD 00 16		            lda outer_x_256,x
  1016 2B47 85 E8		            sta tmp_x2
  1017 2B49 BD 00 17		            lda outer_y_256,x
  1018 2B4C 85 E9		            sta tmp_y2
  1019 2B4E 60			            rts
  1020
  1021 2B4F			wipe_ball
  1022 2B4F A5 A7		            lda ball_current_y
  1023 2B51 4A			            lsr
  1024 2B52 69 06		            adc #ball_top_margin
  1025 2B54 AA			            tax                 ; x = real y position on screen
  1026 2B55 A9 00		            lda #0
  1027 2B57 9D 80 11		            sta msl_area,x
  1028 2B5A 9D 81 11		            sta msl_area+1,x
  1029 2B5D 9D 82 11		            sta msl_area+2,x
  1030 2B60 9D 83 11		            sta msl_area+3,x
  1031 2B63 60			            rts
  1032
  1033 2B64			show_ball
  1034 2B64 A5 A7		            lda ball_current_y
  1035 2B66 4A			            lsr
  1036 2B67 69 06		            adc #ball_top_margin
  1037 2B69 AA			            tax                 ; x = real y position on screen
  1038
  1039 2B6A A9 02		            lda #%00000010
  1040 2B6C 9D 80 11		            sta msl_area,x
  1041 2B6F 9D 83 11		            sta msl_area+3,x
  1042 2B72 A9 07		            lda #%00000111
  1043 2B74 9D 81 11		            sta msl_area+1,x
  1044 2B77 9D 82 11		            sta msl_area+2,x
  1045 				            
  1046 2B7A A5 A6		            lda ball_current_x
  1047 2B7C 4A			            lsr
  1048 2B7D 69 45		            adc #ball_left_margin
  1049 2B7F 8D 05 D0		            sta HPOSM1
  1050 2B82 69 02		            adc #2
  1051 2B84 8D 04 D0		            sta HPOSM0
  1052 				                        
  1053 2B87 60			            rts
  1054 				            
  1055 2B88			show_p1
  1056 2B88 A5 98		            lda player1_y
  1057 2B8A 18			            clc
  1058 2B8B 69 01		            adc #upper_margin
  1059 2B8D AA			            tax
  1060
  1061 2B8E A0 00		            ldy #0
  1062 2B90			show_shape1
  1063 2B90 B1 84		            lda (shape_ptr),y
  1064 2B92 9D 00 12		            sta p0_area,x 
  1065 2B95 C8			            iny
  1066 2B96 B1 84		            lda (shape_ptr),y
  1067 2B98 9D 80 12		            sta p1_area,x
  1068 2B9B E8			            inx
  1069 2B9C C8			            iny
  1070 2B9D C0 20		            cpy #32
  1071 2B9F D0 EF		            bne show_shape1
  1072 2BA1 60			            rts
  1073
  1074 2BA2			show_p2
  1075 2BA2 A5 99		            lda player2_y
  1076 2BA4 18			            clc
  1077 2BA5 69 01		            adc #upper_margin
  1078 2BA7 AA			            tax
  1079
  1080 2BA8 A0 00		            ldy #0
  1081 2BAA			show_shape2
  1082 2BAA B1 84		            lda (shape_ptr),y
  1083 2BAC 9D 00 13		            sta p2_area,x 
  1084 2BAF C8			            iny
  1085 2BB0 B1 84		            lda (shape_ptr),y
  1086 2BB2 9D 80 13		            sta p3_area,x
  1087 2BB5 E8			            inx
  1088 2BB6 C8			            iny
  1089 2BB7 C0 20		            cpy #32
  1090 2BB9 D0 EF		            bne show_shape2
  1091 2BBB 60			            rts
  1092
  1093 2BBC			wipe_p1
  1094 2BBC A5 98		            lda player1_y
  1095 2BBE 18			            clc
  1096 2BBF 69 01		            adc #upper_margin
  1097 2BC1 AA			            tax
  1098 				            
  1099 2BC2 A0 10		            ldy #16
  1100 2BC4 A9 00		            lda #0
  1101 2BC6			wipe_it1            
  1102 2BC6 9D 00 12		            sta p0_area,x 
  1103 2BC9 9D 80 12		            sta p1_area,x
  1104 2BCC E8			            inx
  1105 2BCD 88			            dey
  1106 2BCE D0 F6		            bne wipe_it1 
  1107 2BD0 60			            rts
  1108
  1109 2BD1			wipe_p2
  1110 2BD1 A5 99		            lda player2_y
  1111 2BD3 18			            clc
  1112 2BD4 69 01		            adc #upper_margin
  1113 2BD6 AA			            tax
  1114 				            
  1115 2BD7 A0 10		            ldy #16
  1116 2BD9 A9 00		            lda #0
  1117 2BDB			wipe_it2            
  1118 2BDB 9D 00 13		            sta p2_area,x 
  1119 2BDE 9D 80 13		            sta p3_area,x
  1120 2BE1 E8			            inx
  1121 2BE2 88			            dey
  1122 2BE3 D0 F6		            bne wipe_it2 
  1123 2BE5 60			            rts
  1124
  1125 2BE6			make_shape_index
  1126 2BE6 A9 00		            lda #<pm_shapes
  1127 2BE8 85 84		            sta shape_ptr
  1128 2BEA A9 60		            lda #>pm_shapes
  1129 2BEC 85 85		            sta shape_ptr+1
  1130 				            
  1131 2BEE A2 00		            ldx #0
  1132 2BF0			fill_pm_tab
  1133 2BF0 A5 84		            lda shape_ptr
  1134 2BF2 9D 00 43		            sta pm_shape_lo,x
  1135 2BF5 A5 85		            lda shape_ptr+1
  1136 2BF7 9D 80 43		            sta pm_shape_hi,x
  1137 				            
  1138 2BFA A5 84		            lda shape_ptr
  1139 2BFC 18			            clc
  1140 2BFD 69 20		            adc #32
  1141 2BFF 85 84		            sta shape_ptr
  1142 2C01 A5 85		            lda shape_ptr+1
  1143 2C03 69 00		            adc #0
  1144 2C05 85 85		            sta shape_ptr+1
  1145 				            
  1146 2C07 E8			            inx
  1147 2C08 10 E6		            bpl fill_pm_tab
  1148 				            
  1149 2C0A 60			            rts
  1150 				            
  1151 				; there are 128 shapes, each 32 bytes
  1152
  1153 				; y = shape index
  1154 2C0B			shape_to_ptr
  1155 2C0B B9 00 43		            lda pm_shape_lo,y
  1156 2C0E 85 84		            sta shape_ptr
  1157 2C10 B9 80 43		            lda pm_shape_hi,y
  1158 2C13 85 85		            sta shape_ptr+1
  1159
  1160 2C15 60			            rts
  1161
  1162 				; turn 1024 tables into 256 bytes for ball edge lookup
  1163 2C16			make_outer_256
  1164 2C16 A0 00		            ldy #0
  1165 2C18 A2 00		            ldx #0
  1166 2C1A			conv_256
  1167 2C1A BD 00 34		            lda outer_x_tab,x
  1168 2C1D 99 00 16		            sta outer_x_256,y
  1169 2C20 BD 00 35		            lda outer_x_tab+$100,x
  1170 2C23 99 40 16		            sta outer_x_256+64,y
  1171 2C26 BD 00 36		            lda outer_x_tab+$200,x
  1172 2C29 99 80 16		            sta outer_x_256+128,y
  1173 2C2C BD 00 37		            lda outer_x_tab+$300,x
  1174 2C2F 99 C0 16		            sta outer_x_256+192,y
  1175 				            
  1176 2C32 BD 00 38		            lda outer_y_tab,x
  1177 2C35 99 00 17		            sta outer_y_256,y
  1178 2C38 BD 00 39		            lda outer_y_tab+$100,x
  1179 2C3B 99 40 17		            sta outer_y_256+64,y
  1180 2C3E BD 00 3A		            lda outer_y_tab+$200,x
  1181 2C41 99 80 17		            sta outer_y_256+128,y
  1182 2C44 BD 00 3B		            lda outer_y_tab+$300,x
  1183 2C47 99 C0 17		            sta outer_y_256+192,y
  1184
  1185 2C4A E8			            inx
  1186 2C4B E8			            inx
  1187 2C4C E8			            inx
  1188 2C4D E8			            inx
  1189 2C4E C8			            iny
  1190 2C4F C0 40		            cpy #64
  1191 2C51 D0 C7		            bne conv_256            
  1192 2C53 60			            rts
  1193
  1194 2C54			show_score_p1
  1195 2C54 AD 14 41		            lda score_p1
  1196 2C57 4A			            lsr
  1197 2C58 4A			            lsr
  1198 2C59 4A			            lsr
  1199 2C5A 4A			            lsr
  1200 2C5B F0 02		            beq do_space1
  1201 2C5D 09 10		            ora #16
  1202 2C5F			do_space1
  1203 2C5F 8D F1 40		            sta score_chars_p1
  1204 2C62 AD 14 41		            lda score_p1
  1205 2C65 29 0F		            and #15
  1206 2C67 09 10		            ora #16
  1207 2C69 8D F2 40		            sta score_chars_p1+1
  1208 2C6C 60			            rts
  1209
  1210 2C6D			show_score_p2
  1211 2C6D AD 15 41		            lda score_p2
  1212 2C70 4A			            lsr
  1213 2C71 4A			            lsr
  1214 2C72 4A			            lsr
  1215 2C73 4A			            lsr
  1216 2C74 F0 02		            beq do_space2
  1217 2C76 09 10		            ora #16
  1218 2C78			do_space2
  1219 2C78 8D 11 41		            sta score_chars_p2
  1220 2C7B AD 15 41		            lda score_p2
  1221 2C7E 29 0F		            and #15
  1222 2C80 09 10		            ora #16
  1223 2C82 8D 12 41		            sta score_chars_p2+1
  1224 2C85 60			            rts
  1225 				                        
  1226 2C86			reset_score
  1227 2C86 A9 00		            lda #0
  1228 2C88 8D 14 41		            sta score_p1
  1229 2C8B 8D 15 41		            sta score_p2
  1230 2C8E 60			            rts            
  1231 				         
  1232 2C8F			inc_score_p1
  1233 2C8F F8			            sed
  1234 2C90 AD 14 41		            lda score_p1
  1235 2C93 18			            clc
  1236 2C94 69 01		            adc #1
  1237 2C96 8D 14 41		            sta score_p1    
  1238 2C99 D8			            cld
  1239 2C9A 60			            rts
  1240
  1241 2C9B			inc_score_p2
  1242 2C9B F8			            sed
  1243 2C9C AD 15 41		            lda score_p2
  1244 2C9F 18			            clc
  1245 2CA0 69 01		            adc #1
  1246 2CA2 8D 15 41		            sta score_p2
  1247 2CA5 D8			            cld
  1248 2CA6 60			            rts
  1249
  1250 				; calculate the difference between angle1 and angle2
  1251
  1252 				; input:
  1253 				; tmp_angle1 (0..255)
  1254 				; tmp_angle2 (0..255)
  1255
  1256 				; output:
  1257 				; tmp_angle_diff, A: difference between angle1 and angle2
  1258 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1259
  1260 2CA7			calc_angle_diff
  1261 2CA7 A9 00		            lda #0
  1262 2CA9 85 B2		            sta add_to_angle
  1263 2CAB 85 B4		            sta tmp_angle_direction
  1264
  1265 				; make sure we can compare angles, otherwise add $40 to angles
  1266 2CAD A5 B0		            lda tmp_angle1
  1267 2CAF C9 C0		            cmp #$c0
  1268 2CB1 B0 06		            bcs too_large
  1269 2CB3 A5 B1		            lda tmp_angle2
  1270 2CB5 C9 C0		            cmp #$c0
  1271 2CB7 90 12		            bcc not_too_large
  1272 2CB9			too_large
  1273 2CB9 A5 B0		            lda tmp_angle1
  1274 2CBB 38			            sec
  1275 2CBC E9 40		            sbc #$40
  1276 2CBE 85 B0		            sta tmp_angle1
  1277 				            
  1278 2CC0 A5 B1		            lda tmp_angle2
  1279 2CC2 38			            sec
  1280 2CC3 E9 40		            sbc #$40
  1281 2CC5 85 B1		            sta tmp_angle2
  1282 				            
  1283 2CC7 A9 40		            lda #$40
  1284 2CC9 85 B2		            sta add_to_angle
  1285
  1286 2CCB			not_too_large
  1287 2CCB A5 B1		            lda tmp_angle2
  1288 2CCD C5 B0		            cmp tmp_angle1
  1289 2CCF 90 0A		            bcc angle2_smaller_angle1
  1290 				; ball >= play
  1291 2CD1 38			            sec
  1292 2CD2 E5 B0		            sbc tmp_angle1
  1293 2CD4 85 B7		            sta tmp_angle_diff
  1294 				            
  1295 2CD6 E6 B4		            inc tmp_angle_direction
  1296 2CD8 4C E2 2C		            jmp diff_calculated
  1297 				                        
  1298 2CDB			angle2_smaller_angle1
  1299 2CDB A5 B0		            lda tmp_angle1
  1300 2CDD 38			            sec
  1301 2CDE E5 B1		            sbc tmp_angle2
  1302 2CE0 85 B7		            sta tmp_angle_diff
  1303
  1304 2CE2			diff_calculated
  1305 2CE2 A5 B7		            lda tmp_angle_diff           
  1306 2CE4 60			            rts
  1307
  1308 				; X = angle
  1309 				; lookup magnitude of angle 0 to angle X
  1310 2CE5			angle_to_magnitude
  1311 2CE5 BD 00 3C		            lda magnitudes_lo,x
  1312 2CE8 85 B8		            sta magnitude
  1313 2CEA BD 00 3D		            lda magnitudes_hi,x
  1314 2CED 85 B9		            sta magnitude+1
  1315 2CEF 60			            rts
  1316
  1317 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1318 2CF0			calc_abs_tmp_dx
  1319 2CF0 A5 E8		            lda tmp_x2
  1320 2CF2 38			            sec
  1321 2CF3 E5 E6		            sbc tmp_x1
  1322 2CF5 B0 05		            bcs x2_le
  1323 2CF7 49 FF		            eor #255
  1324 2CF9 18			            clc
  1325 2CFA 69 01		            adc #1
  1326 2CFC 85 F2		x2_le       sta tmp_dx
  1327
  1328 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1329 2CFE			calc_abs_tmp_dy
  1330 2CFE A5 E9		            lda tmp_y2
  1331 2D00 38			            sec
  1332 2D01 E5 E7		            sbc tmp_y1
  1333 2D03 B0 05		            bcs y2_le
  1334 2D05 49 FF		            eor #255
  1335 2D07 18			            clc
  1336 2D08 69 01		            adc #1
  1337 2D0A 85 F3		y2_le       sta tmp_dy
  1338 2D0C 60			            rts
  1339 				            
  1340 2D0D			calc_dx_div_magnitude
  1341 2D0D A9 00		            lda #0
  1342 2D0F 85 E2		            sta _dividend
  1343 2D11 A5 F2		            lda tmp_dx
  1344 2D13 85 E3		            sta _dividend+1
  1345
  1346 2D15 A5 B9		            lda magnitude+1
  1347 2D17 85 E0		            sta _divisor
  1348 2D19 A9 00		            lda #0
  1349 2D1B 85 E1		            sta _divisor+1
  1350 				            
  1351 2D1D 20 45 2D		            jsr _div16
  1352
  1353 				; todo multiply result with velocity            
  1354 2D20 A5 E2		            lda _result
  1355 2D22 85 EE		            sta step_x
  1356 2D24 A5 E3		            lda _result+1
  1357 2D26 85 EF		            sta step_x+1
  1358 				            
  1359 2D28 60			            rts
  1360 				            
  1361 2D29			calc_dy_div_magnitude
  1362 2D29 A9 00		            lda #0
  1363 2D2B 85 E2		            sta _dividend
  1364 2D2D A5 F3		            lda tmp_dy
  1365 2D2F 85 E3		            sta _dividend+1
  1366 				            
  1367 2D31 A5 B9		            lda magnitude+1
  1368 2D33 85 E0		            sta _divisor
  1369 2D35 A9 00		            lda #0
  1370 2D37 85 E1		            sta _divisor+1
  1371
  1372 2D39 20 45 2D		            jsr _div16
  1373 				            
  1374 				; todo multiply result with velocity
  1375 2D3C A5 E2		            lda _result
  1376 2D3E 85 F0		            sta step_y
  1377 2D40 A5 E3		            lda _result+1
  1378 2D42 85 F1		            sta step_y+1
  1379 				            
  1380 2D44 60			            rts
  1381
  1382 				; divide 16bit
  1383 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1384
  1385 				; _result = _dividend / divisor
  1386
  1387 2D45 A9 00		_div16      lda #0          ;preset remainder to 0
  1388 2D47 85 E4		            sta _remainder
  1389 2D49 85 E5		            sta _remainder+1
  1390 2D4B A2 10		            ldx #16         ;repeat for each bit: ...
  1391
  1392 2D4D 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1393 2D4F 26 E3		            rol _dividend+1  
  1394 2D51 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1395 2D53 26 E5		            rol _remainder+1
  1396 2D55 A5 E4		            lda _remainder
  1397 2D57 38			            sec
  1398 2D58 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1399 2D5A A8			            tay         ;lb result -> Y, for we may need it later
  1400 2D5B A5 E5		            lda _remainder+1
  1401 2D5D E5 E1		            sbc _divisor+1
  1402 2D5F 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1403
  1404 2D61 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1405 2D63 84 E4		            sty _remainder   
  1406 2D65 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1407
  1408 2D67 CA			_div_skip   dex
  1409 2D68 D0 E3		            bne _div_loop 
  1410 2D6A 60			            rts
  1411
  1412 				; Calculations for step size
  1413
  1414 				; not optimised for speed or size
  1415 				; step should be set according to the angle
  1416
  1417 				; move in straight line (x1,y1) to (x2,y2)
  1418
  1419 				; 1. set start/end of line
  1420 				; set (tmp_x1, tmp_y1)
  1421 				; set (tmp_x2, tmp_y2)
  1422
  1423 				; 2. init. current_x, current_y
  1424 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1425 				; - calculates step sizes for x,y
  1426 				; - calculated directions for x,y
  1427 				;            jsr init_current_xy
  1428
  1429 				; 3. use current_x, current_y to plot or set a position
  1430 				;            lda current_x+1
  1431 				;            sta x_position
  1432 				;            lda current_y+1
  1433 				;            sta y_position
  1434 				;            jsr plot_pixel
  1435
  1436 				; 4. move current_x, current_y to next position on line
  1437 				; A=0 still moving
  1438 				;           move_current_xy
  1439
  1440 2D6B			init_current_xy
  1441 2D6B A9 7F		            lda #$7f      ; was 128 for half pixel
  1442 2D6D 85 EA		            sta current_x
  1443 2D6F 85 EC		            sta current_y
  1444
  1445 2D71 A5 E6		            lda tmp_x1
  1446 2D73 85 EB		            sta current_x+1
  1447 				            
  1448 2D75 A5 E7		            lda tmp_y1
  1449 2D77 85 ED		            sta current_y+1
  1450
  1451 				; dx = abs(tmp_x1 - tmp_x2)
  1452 2D79 20 F0 2C		            jsr calc_abs_tmp_dx
  1453
  1454 				; dy = abs(tmp_y1 - tmp_y2)
  1455 2D7C 20 FE 2C		            jsr calc_abs_tmp_dy
  1456
  1457 				; set directions
  1458 2D7F A5 E6		            lda tmp_x1
  1459 2D81 C5 E8		            cmp tmp_x2
  1460 2D83 90 04		            bcc x1_smaller_x2
  1461 				; x1 >= x2
  1462 2D85 A9 01		            lda #1
  1463 2D87 D0 02		            bne set_dir_x
  1464 2D89			x1_smaller_x2
  1465 2D89 A9 00		            lda #0
  1466 2D8B			set_dir_x
  1467 2D8B 85 FA		            sta dir_x
  1468 				            
  1469 2D8D A5 E7		            lda tmp_y1
  1470 2D8F C5 E9		            cmp tmp_y2
  1471 2D91 90 04		            bcc y1_smaller_y2
  1472 				; y1 >= y2
  1473 2D93 A9 01		            lda #1
  1474 2D95 D0 02		            bne set_dir_y
  1475 2D97			y1_smaller_y2
  1476 2D97 A9 00		            lda #0
  1477 2D99			set_dir_y
  1478 2D99 85 FB		            sta dir_y
  1479
  1480 				; Calculate diff between start angle and end angle
  1481
  1482 2D9B A5 AA		            lda ball_angle_start
  1483 2D9D 85 B0		            sta tmp_angle1
  1484 2D9F A5 AB		            lda ball_angle_end
  1485 2DA1 85 B1		            sta tmp_angle2
  1486 				            
  1487 2DA3 20 A7 2C		            jsr calc_angle_diff
  1488
  1489 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1490 2DA6 A6 B7		            ldx tmp_angle_diff
  1491 2DA8 20 E5 2C		            jsr angle_to_magnitude
  1492 				            
  1493 2DAB 20 0D 2D		            jsr calc_dx_div_magnitude
  1494 2DAE 20 29 2D		            jsr calc_dy_div_magnitude
  1495 				            
  1496 				; Calculate step size by ball speed
  1497 				            
  1498 				; step_x = step_x * speed
  1499 				            
  1500 2DB1 A5 EE		            lda step_x
  1501 2DB3 85 F6		            sta _multiplicand
  1502 2DB5 A5 EF		            lda step_x+1
  1503 2DB7 85 F7		            sta _multiplicand+1
  1504 2DB9 A5 AC		            lda ball_speed
  1505 2DBB 85 F8		            sta _multiplier
  1506
  1507 2DBD 20 4F 27		            jsr _multi8
  1508 				;result in .A (low byte, also in .X) and .Y (high byte)
  1509 2DC0 85 EE		            sta step_x
  1510 2DC2 84 EF		            sty step_x+1
  1511 2DC4			skip_step_x_hi
  1512 				            
  1513 				; step_y = step_y * speed
  1514
  1515 2DC4 A5 F0		            lda step_y
  1516 2DC6 85 F6		            sta _multiplicand
  1517 2DC8 A5 F1		            lda step_y+1
  1518 2DCA 85 F7		            sta _multiplicand+1
  1519 2DCC A5 AC		            lda ball_speed
  1520 2DCE 85 F8		            sta _multiplier
  1521
  1522 2DD0 20 4F 27		            jsr _multi8
  1523 				;result in .A (low byte, also in .X) and .Y (high byte)
  1524 2DD3 85 F0		            sta step_y
  1525 2DD5 84 F1		            sty step_y+1
  1526 2DD7			skip_step_y_hi
  1527
  1528 2DD7 60			            rts
  1529
  1530 				; Move ball position 
  1531 				; Add one step, until end reached
  1532 				; Input:
  1533 				; - step size (step_x, step_y)
  1534 				; - current ball position (current_x, current_y)
  1535 				; - end position (tmp_x2, tmp_y2)
  1536 				; Output:
  1537 				; A (0 = still moving, 1 = end reached)
  1538 2DD8			move_current_xy
  1539 2DD8 A9 00		            lda #0
  1540 2DDA 85 FC		            sta line_end_x
  1541 2DDC 85 FD		            sta line_end_y
  1542
  1543 				; sets line end indicators here
  1544 2DDE 20 FB 2D		            jsr move_current_x
  1545 2DE1 20 3B 2E		            jsr move_current_y
  1546
  1547 2DE4 A5 FC		            lda line_end_x
  1548 2DE6 25 FD		            and line_end_y
  1549 2DE8 F0 10		            beq no_end_reached
  1550 				            
  1551 				; set current to (x2,y2)
  1552 2DEA A5 E8		            lda tmp_x2
  1553 2DEC 85 EB		            sta current_x+1
  1554 2DEE A5 E9		            lda tmp_y2
  1555 2DF0 85 ED		            sta current_y+1
  1556 				            
  1557 2DF2 A9 00		            lda #0
  1558 2DF4 85 EA		            sta current_x
  1559 2DF6 85 EC		            sta current_y
  1560 				            
  1561 2DF8 A9 01		            lda #1 ; end reached
  1562 				            
  1563 2DFA			no_end_reached  ; A = 0
  1564 2DFA 60			            rts
  1565
  1566 2DFB			move_current_x
  1567 2DFB A5 FA		            lda dir_x
  1568 2DFD D0 18		            bne move_current_left
  1569
  1570 				; move right, add
  1571 2DFF A5 EA		            lda current_x
  1572 2E01 18			            clc
  1573 2E02 65 EE		            adc step_x
  1574 2E04 85 EA		            sta current_x
  1575 2E06 A5 EB		            lda current_x+1
  1576 2E08 65 EF		            adc step_x+1
  1577 2E0A 85 EB		            sta current_x+1
  1578
  1579 2E0C A5 EB		            lda current_x+1
  1580 2E0E C5 E8		            cmp tmp_x2
  1581 2E10 90 04		            bcc no_line_end
  1582 2E12			exact_end_x
  1583 2E12 A9 01		            lda #1
  1584 2E14 85 FC		            sta line_end_x 
  1585 2E16			no_line_end
  1586 2E16 60			            rts
  1587 				            
  1588 2E17			move_current_left
  1589 2E17 A5 EA		            lda current_x
  1590 2E19 38			            sec
  1591 2E1A E5 EE		            sbc step_x
  1592 2E1C 90 01		            bcc clear_skip
  1593 2E1E EA			            nop
  1594 2E1F			clear_skip
  1595 2E1F 85 EA		            sta current_x
  1596 2E21 A5 EB		            lda current_x+1
  1597 2E23 E5 EF		            sbc step_x+1
  1598 2E25 85 EB		            sta current_x+1
  1599 2E27 90 0B		            bcc below_zero
  1600 				                        
  1601 2E29 A5 E8		            lda tmp_x2
  1602 2E2B C5 EB		            cmp current_x+1
  1603 2E2D 90 E7		            bcc no_line_end
  1604 2E2F A9 01		            lda #1
  1605 2E31 85 FC		            sta line_end_x            
  1606 2E33 60			            rts
  1607 2E34			below_zero            
  1608 2E34 A9 01		            lda #1
  1609 2E36 85 FC		            sta line_end_x
  1610 2E38 85 FD		            sta line_end_y
  1611 2E3A 60			            rts
  1612 2E3B			move_current_y
  1613 2E3B A5 FB		            lda dir_y
  1614 2E3D D0 18		            bne move_current_up
  1615
  1616 				; move down, add
  1617 2E3F A5 EC		            lda current_y
  1618 2E41 18			            clc
  1619 2E42 65 F0		            adc step_y
  1620 2E44 85 EC		            sta current_y
  1621 2E46 A5 ED		            lda current_y+1
  1622 2E48 65 F1		            adc step_y+1
  1623 2E4A 85 ED		            sta current_y+1
  1624 				            
  1625 2E4C A5 ED		            lda current_y+1
  1626 2E4E C5 E9		            cmp tmp_y2
  1627 2E50 90 C4		            bcc no_line_end
  1628 2E52			exact_end_y
  1629 2E52 A9 01		            lda #1
  1630 2E54 85 FD		            sta line_end_y
  1631 2E56 60			            rts
  1632
  1633 2E57			move_current_up
  1634 2E57 A5 EC		            lda current_y
  1635 2E59 38			            sec
  1636 2E5A E5 F0		            sbc step_y
  1637 2E5C 85 EC		            sta current_y
  1638 2E5E A5 ED		            lda current_y+1
  1639 2E60 E5 F1		            sbc step_y+1
  1640 2E62 90 D0		            bcc below_zero
  1641 2E64 85 ED		            sta current_y+1
  1642 				            
  1643 2E66 A5 E9		            lda tmp_y2
  1644 2E68 C5 ED		            cmp current_y+1
  1645 2E6A 90 AA		            bcc no_line_end
  1646 2E6C A9 01		            lda #1
  1647 2E6E 85 FD		            sta line_end_y
  1648 2E70 60			            rts                            
  1649 				            
  1650 2E71			init_sprites
  1651 2E71 A2 00		            ldx #0
  1652 2E73 8A			            txa
  1653 2E74			set_p
  1654 2E74 9D 00 12		            sta p0_area,x
  1655 2E77 9D 80 12		            sta p1_area,x
  1656 2E7A 9D 00 13		            sta p2_area,x
  1657 2E7D 9D 80 13		            sta p3_area,x
  1658 2E80 E8			            inx
  1659 2E81 10 F1		            bpl set_p               
  1660
  1661 2E83 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1662 2E85 8D 6F 02		            sta GPRIOR
  1663 				    
  1664 2E88 A9 10		            lda #>pm_area
  1665 2E8A 8D 07 D4		            sta PMBASE
  1666 				    
  1667 2E8D A9 03		            lda #3          ; P/M both on
  1668 2E8F 8D 1D D0		            sta GRACTL
  1669 				    
  1670 2E92 A9 90		            lda #$90
  1671 2E94 8D 02 D0		            sta HPOSP2
  1672 2E97 A9 A0		            lda #$A0
  1673 2E99 8D 03 D0		            sta HPOSP3  
  1674 2E9C 60			            rts            
  1675
  1676 2E9D			init_colors
  1677 2E9D A9 5A		            lda #BASE_COLOR_P1+10
  1678 2E9F 8D C0 02		            sta PCOLR0
  1679 2EA2 8D C1 02		            sta PCOLR1
  1680
  1681 2EA5 A9 BA		            lda #BASE_COLOR_P2+10
  1682 2EA7 8D C2 02		            sta PCOLR2
  1683 2EAA 8D C3 02		            sta PCOLR3
  1684 				            
  1685 2EAD A9 00		            lda #0
  1686 2EAF 8D C6 02		            sta COLOR2
  1687 2EB2 A9 08		            lda #8
  1688 2EB4 8D C5 02		            sta COLOR1
  1689 2EB7 60			            rts
  1690
  1691 2EB8			previous_consol
  1692 2EB8 00			            dta 0
  1693
  1694 2EB9			current_level_index
  1695 2EB9 00			            dta 0
  1696 = 0004			NR_OF_LEVELS = 4
  1697 = 0000			INIT_LEVEL_INDEX = 0
  1698 2EBA			level_speeds
  1699 2EBA 02 04 06 08		            dta 2,4,6,8
  1700 				            
  1701 				; X = level (0..NR_OF_LEVELS)
  1702 2EBE			set_level_ball_speed
  1703 2EBE BD BA 2E		            lda level_speeds,x
  1704 2EC1 85 AC		            sta ball_speed
  1705 2EC3 8A			            txa
  1706 2EC4 18			            clc
  1707 2EC5 69 01		            adc #1
  1708 2EC7 09 10		            ora #16
  1709 2EC9 8D 48 42		            sta level_char
  1710 2ECC 60			            rts
  1711 				            
  1712 2ECD			increase_level
  1713 2ECD EE B9 2E		            inc current_level_index
  1714 2ED0 AD B9 2E		            lda current_level_index
  1715 2ED3 C9 04		            cmp #NR_OF_LEVELS
  1716 2ED5 D0 05		            bne ok_level
  1717 2ED7 A9 00		            lda #INIT_LEVEL_INDEX
  1718 2ED9 8D B9 2E		            sta current_level_index
  1719 2EDC			ok_level           
  1720 2EDC 60			            rts
  1721 				            
  1722 2EDD			            .align $100
  1723 2F00			inner_x_tab
  1724 = 3000			inner_y_tab = *+$100
  1725 2F00-30FF> 70 72 75 77 +             ins 'data\in210.dat'
  1726 				      
  1727 3100			            .align $400            
  1728 				; outer circle 1024 plot points on 360 degrees
  1729 3400			outer_x_tab
  1730 = 3800			outer_y_tab = *+1024
  1731 3400-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1732 				           
  1733 3C00			            .align $400
  1734 				; table of magnitudes (length) between angle 0 and 0..255
  1735 				; fixed point 8.8 : hi.lo
  1736 3C00			magnitudes_lo
  1737 = 3D00			magnitudes_hi = *+256
  1738 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1739
  1740 3E00			            .align $400
  1741 4000			display_list
  1742 4000-41CC> 42		            dta $42
  1743 4001 EC 40		            dta a(score_line)
  1744
  1745 				; 102 x 40 = 4080 bytes            
  1746 4003 4F			            dta $4f
  1747 4004			dl_screen_ptr1
  1748 4004 00 70		            dta a(screen_mem1)
  1749 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1750 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1751 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1752 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1753
  1754 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1755 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1756 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1757 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1758
  1759 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1760 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1761 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1762 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1763
  1764 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1765
  1766 				; 102 x 40 = 4080 bytes
  1767 406B 4F			            dta $4f
  1768 406C			dl_screen_ptr2
  1769 406C 00 80		            dta a(screen_mem2)
  1770 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1771 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1772 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1773 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1774
  1775 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1776 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1777 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1778 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1779
  1780 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1781 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1782 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1783 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1784
  1785 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1786
  1787 				; 20 x 40 = 800
  1788 40D3 4F			            dta $4f
  1789 40D4 00 90		            dta a(screen_mem3)       
  1790 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1791 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1792 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1793 				            
  1794 40E9 41			            dta $41
  1795 40EA 00 40		            dta a(display_list)
  1796
  1797 40EC			score_line  
  1798 40EC 00 2F 2E 25 00	            dta d' ONE '
  1799 40F1			score_chars_p1
  1800 40F1 0D 0D 00		            dta d'-- '
  1801
  1802 40F4 00 00 00 00 00 00 +             dta d'          '
  1803 40FE 00 00 00 00 00 00 +             dta d'          '
  1804
  1805 4108 00 00 00 00 00 34 +             dta d'     TWO '
  1806 4111			score_chars_p2
  1807 4111 0D 0D 00		            dta d'-- '
  1808
  1809 4114 00			score_p1    dta 0
  1810 4115 00			score_p2    dta 0
  1811
  1812 				            ;.align $400
  1813 				            
  1814 4116			menu_dl
  1815 4116 42			            dta $42
  1816 4117 EC 40		            dta a(score_line)
  1817 				            
  1818 4119 4F			            dta $4f
  1819 411A 00 70		            dta a(screen_mem1)
  1820 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1821 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1822 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1823 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1824
  1825 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1826 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1827 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1828 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1829
  1830 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1831 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1832
  1833 				; 64 scanlines
  1834 416B 30			            dta $30
  1835 416C 47			            dta $47
  1836 416D 00 42		            dta a(menu_screen)
  1837 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1838
  1839 				; 60 lines
  1840 4176 4F			            dta $4f
  1841 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1842 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1843 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1844 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1845 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1846
  1847 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1848 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1849 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1850 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1851
  1852 				; 20 lines            
  1853 41B4 4F			            dta $4f
  1854 41B5 00 90		            dta a(screen_mem3)
  1855 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1856 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1857 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1858 				           
  1859 41CA 41			            dta $41
  1860 41CB 16 41		            dta a(menu_dl)
  1861
  1862 41CD			            .align $100
  1863 4200			menu_screen
  1864 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1865
  1866 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1867 421E			driver_screen
  1868 421E 00 00 00 00 00 00 +             dta d'            '
  1869 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1870 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1871 4248			level_char            
  1872 4248 11 00 00 00 00 00 +             dta d'1       '
  1873 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1874 4278			stick_text
  1875 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1876 4280			paddle_text
  1877 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1878 4288			driving_text
  1879 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1880 4290			computer_text
  1881 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1882
  1883 4298			driver_text_lo
  1884 4298 78			            dta <stick_text
  1885 4299 80			            dta <paddle_text
  1886 429A 88			            dta <driving_text
  1887 429B 90			            dta <computer_text
  1888 				            
  1889 429C			driver_text_hi
  1890 429C 42			            dta >stick_text
  1891 429D 42			            dta >paddle_text
  1892 429E 42			            dta >driving_text
  1893 429F 42			            dta >computer_text
  1894
  1895 42A0			            .align $100
  1896 = 4300			pm_shape_lo .ds 128
  1897 = 4380			pm_shape_hi .ds 128
  1898
  1899 4400			            .align $100
  1900 4400			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 4400			buffers
    44 = 4400			    .ds 256 * 9
    45
    46 4D00			intro_data
    47 4D00-5F79> 01 01 A1 34 +         ins     'intro.lz16'
    48 4FD8			intro_end
    49
    50 4FD8			loop_data
    51 4FD8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 5DD9			loop_end
    53
    54 5DD9			.proc get_byte
    55 5DD9 AD 34 12		    lda $1234
    56 5DDC EE DA 5D		    inc song_ptr
    57 5DDF D0 03		    bne skip
    58 5DE1 EE DB 5D		    inc song_ptr+1
    59 5DE4			skip
    60 5DE4 60			    rts
    61 				.endp
    62 = 5DDA			song_ptr = get_byte + 1
    63
    64 5DE5			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 5DE5			.proc play_first_frame
    70
    71 5DE5 20 D9 5D		    jsr get_byte                    ; IVO START move init here
    72 5DE8 8D 24 5E		    sta play_frame.init_chn_bits
    73 5DEB A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 5DED 85 D6		    sta bit_data
    75 5DEF A9 44		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 5DF1 8D 04 5E		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 5DF4 A2 08		    ldx #8
    80 5DF6 A0 00		    ldy #0
    81 5DF8 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 5DFA			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 5DFA 20 D9 5D		    jsr get_byte
    85 5DFD 9D 71 5F		    sta SHADOW, x
    86 5E00 94 C0		    sty chn_copy, x
    87 5E02			cbuf
    88 5E02 8D FF 44		    sta buffers + 255
    89 5E05 EE 04 5E		    inc cbuf + 2
    90 5E08 CA			    dex
    91 5E09 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 5E0B 84 D2		    sty bptr
    95 5E0D 84 D4		    sty cur_pos
    96 5E0F 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 5E10			.proc wait_frame
   103
   104 5E10 A5 14		    lda 20
   105 5E12			delay
   106 5E12 C5 14		    cmp 20
   107 5E14 F0 FC		    beq delay
   108 5E16 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 5E17			.proc play_frame
   115 5E17 A5 D7		    lda newsong
   116 5E19 F0 02		    beq continue
   117 5E1B D0 C8		    bne play_first_frame
   118
   119 5E1D			continue
   120 5E1D A4 D4		    ldy cur_pos                 ; IVO
   121
   122 5E1F A9 44		    lda #>buffers
   123 5E21 85 D3		    sta bptr+1
   124
   125 = 5E24			init_chn_bits=*+1
   126 5E23 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 5E25 85 D5		    sta chn_bits
   128 5E27 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 5E29			chn_loop:
   132 5E29 46 D5		    lsr chn_bits
   133 5E2B B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 5E2D B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 5E2F D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 5E31 46 D6		    lsr bit_data       ; Get next bit
   140 5E33 D0 06		    bne got_bit
   141 5E35 20 D9 5D		    jsr get_byte       ; Not enough bits, refill!
   142 5E38 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 5E39 85 D6		    sta bit_data       ;
   144 5E3B			got_bit:
   145 5E3B 20 D9 5D		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 5E3E B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 5E40 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 5E42 20 D9 5D		    jsr get_byte
   151 5E45 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 5E47			do_copy_byte:
   155 5E47 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 5E49 F6 C9		    inc chn_pos, x
   157 5E4B B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 5E4D B1 D2		    lda (bptr), y
   161
   162 5E4F			store:
   163 5E4F A4 D4		    ldy cur_pos
   164 5E51 9D 71 5F		    sta SHADOW, x        ; Store to output and buffer
   165 5E54 91 D2		    sta (bptr), y
   166
   167 5E56			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 5E56 E6 D3		    inc bptr+1
   170
   171 5E58 CA			    dex
   172 5E59 10 CE		    bpl chn_loop        ; Next channel
   173
   174 5E5B E6 D4		    inc cur_pos
   175 5E5D 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 5E5E			.proc check_end_song
   182 5E5E AD DB 5D		    lda song_ptr + 1
   183 = 5E62			song_end_high=*+1
   184 5E61 C9 00		    cmp #>0
   185 5E63 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 5E65 AD DA 5D		    lda song_ptr
   187 = 5E69			song_end_low=*+1
   188 5E68 C9 00		    cmp #<0
   189 5E6A D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 5E6C 38			    sec                     ; IVO....
   192 5E6D 60			    rts
   193 5E6E			not_equal
   194 5E6E 18			    clc
   195 5E6F 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 5E70			.proc music_init
   201 5E70 20 12 5F		    jsr detect_2nd_pokey
   202 5E73 20 4B 5F		    jsr clear_echo
   203
   204 5E76 A9 8C 8D D1 5E A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 5E80 A9 D8		    lda #<intro_end
   209 5E82 8D 69 5E		    sta check_end_song.song_end_low
   210 5E85 A9 4F		    lda #>intro_end
   211 5E87 8D 62 5E		    sta check_end_song.song_end_high
   212 5E8A A9 00		    lda #<(intro_data)
   213 5E8C 8D DA 5D		    sta song_ptr
   214 5E8F A9 4D		    lda #>(intro_data)
   215 5E91 8D DB 5D		    sta song_ptr+1
   216 5E94 A9 01		    lda #1
   217 5E96 85 D7		    sta newsong
   218 5E98 60			    rts
   219 				.endp
   220
   221 5E99			.proc play_song
   222 5E99			playloop
   223 5E99 20 17 5E		    jsr play_frame      ; generates tick two and beyond
   224 5E9C 20 C1 5E		    jsr adjust_volume
   225
   226 5E9F 20 5E 5E		    jsr check_end_song
   227 5EA2 90 03		    bcc no_end_song
   228 5EA4 20 A8 5E		    jsr restart_music
   229 5EA7			no_end_song
   230 5EA7 60			    rts
   231 				.endp
   232
   233 5EA8			.proc restart_music
   234 5EA8 A9 D9		    lda #<loop_end
   235 5EAA 8D 69 5E		    sta check_end_song.song_end_low
   236 5EAD A9 5D		    lda #>loop_end
   237 5EAF 8D 62 5E		    sta check_end_song.song_end_high
   238 5EB2 A9 D8		    lda #<(loop_data)
   239 5EB4 8D DA 5D		    sta song_ptr
   240 5EB7 A9 4F		    lda #>(loop_data)
   241 5EB9 8D DB 5D		    sta song_ptr+1
   242 5EBC A9 01		    lda #1
   243 5EBE 85 D7		    sta newsong
   244 5EC0 60			    rts
   245 				.endp
   246
   247 5EC1			.proc adjust_volume
   248 5EC1 A0 06		    ldy #6
   249 5EC3			adjust
   250 5EC3 B9 72 5F		    lda SHADOW+1,y
   251 5EC6 AA			    tax
   252 5EC7 29 F0		    and #$f0
   253 5EC9 99 72 5F		    sta SHADOW+1,y
   254 5ECC 8A			    txa
   255 5ECD 29 0F		    and #$0f
   256 5ECF AA			    tax
   257 = 5ED1			volume=*+1
   258 5ED0 BD 34 12		    lda $1234,x
   259 5ED3 19 72 5F		    ora SHADOW+1,y
   260 5ED6 99 72 5F		    sta SHADOW+1,y
   261 5ED9 88			    dey
   262 5EDA 88			    dey
   263 5EDB 10 E6		    bpl adjust
   264 				    
   265 5EDD 60			    rts
   266 				.endp
   267
   268 5EDE			.proc copy_shadow
   269 5EDE A2 08		    ldx #8
   270 5EE0			copy
   271 5EE0 BD 71 5F		    lda SHADOW,x
   272 5EE3 9D 00 D2		    sta POKEY,x
   273 5EE6 CA			    dex
   274 5EE7 10 F7		    bpl copy
   275
   276 5EE9 A5 D8		    lda stereo_pokey
   277 5EEB F0 0E		    beq end_copy
   278
   279 5EED A2 08		    ldx #8
   280 5EEF			copy2
   281 5EEF BD 83 5F		    lda ECHO,x
   282 5EF2 9D 10 D2		    sta POKEY+$10,x
   283 5EF5 CA			    dex
   284 5EF6 10 F7		    bpl copy2
   285
   286 5EF8 20 56 5F		    jsr shift_echo
   287
   288 5EFB			end_copy
   289 5EFB 60			    rts
   290 				.endp
   291
   292 5EFC			.proc music_normal_volume
   293 5EFC A9 8C 8D D1 5E A9 +     mwa #normal_volume adjust_volume.volume
   294 5F06 60			    rts
   295 				.endp
   296
   297 5F07			.proc music_low_volume
   298 5F07 A9 AC 8D D1 5E A9 +     mwa #quarter_volume adjust_volume.volume
   299 5F11 60			    rts
   300 				.endp
   301
   302 5F12			.proc detect_2nd_pokey
   303 5F12 20 10 5E		    jsr wait_frame
   304
   305 5F15 A9 00 8D 32 02	    mva #0 SSKCTL
   306 5F1A A9 00 8D 0F D2	    mva #0 SKCTL
   307 5F1F A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 5F24 20 10 5E		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 5F27 A9 03 8D 32 02	    mva #3 SSKCTL
   314 5F2C A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 5F31 20 10 5E		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 5F34 AD 1A D2		    lda RANDOM+$10
   322 5F37 CD 1A D2		    cmp RANDOM+$10
   323 5F3A F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 5F3C			detected_mono
   326 5F3C A9 00 85 D8		    mva #0 stereo_pokey
   327 5F40 60			    rts
   328
   329 5F41			detected_stereo
   330 5F41 A9 01 85 D8		    mva #1 stereo_pokey
   331 5F45 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 5F4A 60			    rts
   333 				.endp
   334
   335 5F4B			.proc clear_echo
   336 5F4B A0 11		    ldy #(endecho-echobuffer)-1
   337 5F4D			clear_echo_loop
   338 5F4D A9 00 99 7A 5F	    mva #0 echobuffer,y
   339 5F52 88 10 F8		    dey:bpl clear_echo_loop
   340 5F55 60			    rts
   341 				.endp
   342
   343 5F56			.proc shift_echo
   344 5F56 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 5F58			shift_loop
   346 5F58 B9 71 5F 99 7A 5F	    mva SHADOW,y SHADOW+9,y
   347 5F5E 88 10 F7		    dey:bpl shift_loop
   348 5F61 60			    rts
   349 				.endp
   350
   351 5F62			.proc music_off
   352 5F62 A9 00		    lda #0
   353 5F64 8D 72 5F		    sta shadow+1
   354 5F67 8D 74 5F		    sta shadow+3
   355 5F6A 8D 76 5F		    sta shadow+5
   356 5F6D 8D 78 5F		    sta shadow+7
   357 5F70 60			    rts
   358 				.endp
   359
   360 5F71			SHADOW              ; shadow pokey
   361 5F71 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 5F7A			echobuffer
   370 = 5F7A			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 5F83			ECHO
   373 = 5F83			    .ds 9
   374 5F8C			endecho
   375
   376 5F8C			normal_volume
   377 5F8C-5FBD> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 5F9C			half_volume
   379 5F9C 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 5FAC			quarter_volume
   381 5FAC 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
  1901
  1902 				; 4 KB
  1903 				; 128 x 32 bytes shapes
  1904 5FBE			            .align $1000
  1905 6000			pm_shapes
  1906 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1907
  1908 				; 9 KB for backdrop image
  1909 7000			            .align $1000
  1910 = 7000			screen_mem1 = * ; 4K
  1911 				;            org screen_mem1
  1912 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1913
  1914 7FF0			            .align $1000
  1915 = 8000			screen_mem2 = * ; 4K
  1916 				;            org screen_mem2
  1917 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1918
  1919 8FF0			            .align $1000
  1920 = 9000			screen_mem3 = * ; 1K
  1921 				;            org screen_mem3
  1922 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1923
  1924 02E0-02E1> DC 26		            run main
