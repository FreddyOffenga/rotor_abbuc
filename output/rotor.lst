mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-06
     4 				; Version 2.4.5
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for Atari mouse
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				; TODO
    19 				; - new score system; ball hit = point?
    20
    21 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D300			PORTA       = $d300
   104
   105 = D407			PMBASE      = $d407
   106 = D40A			WSYNC       = $d40a
   107 = D40E			NMIEN       = $d40e
    22
    23 				; color scheme
    24 = 0050			BASE_COLOR_P1   = $50   ; purple
    25 = 00B0			BASE_COLOR_P2   = $b0   ; green
    26
    27 = 000E			HEADER_FG_COLOR = 14
    28 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    29 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    30
    31 				; must be in decimal format, so $11 is 11
    32 = 0011			MAX_SCORE   = $11
    33
    34 = 0C00			pm_area     = $0c00
    35 = 0D80			msl_area    = pm_area+$180
    36 = 0E00			p0_area     = pm_area+$200
    37 = 0E80			p1_area     = pm_area+$280
    38 = 0F00			p2_area     = pm_area+$300
    39 = 0F80			p3_area     = pm_area+$380
    40
    41 				; outer tables 256 for 360 degrees
    42 = 1000			outer_x_256     = $1000
    43 = 1100			outer_y_256     = $1100
    44
    45 = 1200			screen_y_lo     = $1200
    46 = 1300			screen_y_hi     = $1300
    47
    48 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    49 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    50
    51 = 0140			WIDTH           = 320
    52 = 00C0			HEIGHT          = 192
    53
    54 = 0028			SCREEN_WIDTH    = 40
    55
    56 = 0030			outer_x_margin  = 48 ;47-32
    57 = 0040			inner_x_margin  = 64
    58
    59 = 00A0			circle_center_x = WIDTH/2
    60 = 0060			circle_center_y = HEIGHT/2
    61
    62 = 0006			ball_top_margin     = 6
    63 = 0045			ball_left_margin    = 64+5
    64
    65 				; pm upper margin
    66 = 0001			upper_margin    = 1
    67 = 0020			left_margin     = 32
    68
    69 = 0080			music_toggle    = $80
    70
    71 = 0081			shadow_HPOSP0   = $81
    72 = 0082			shadow_HPOSP1   = $82
    73
    74 = 0083			winner_color    = $83
    75
    76 = 0084			shape_ptr       = $84
    77 = 0086			tmp_screen      = $86
    78
    79 = 0088			stick_slow_speed = $88
    80 = 0089			stick_fast_speed = $89
    81
    82 = 008A			player_mode     = $8a
    83 = 0000			MODE_2_PLAYER   = 0
    84 = 0001			MODE_1_PLAYER   = 1
    85 = 0002			MODE_DEMO       = 2
    86 = 0003			NR_OF_PLAYER_MODES = 3
    87 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    88
    89 = 008C			game_state      = $8c
    90 = 0000			STATE_IN_GAME   = 0
    91 = 0001			STATE_IN_MENU   = 1
    92 = 0002			STATE_IN_END    = 2
    93
    94 = 008D			volume_hit_bat  = $8d
    95 = 008E			volume_hit_edge = $8e
    96
    97 = 008F			end_screen_delay = $8f
    98
    99 				; player vars must be in sequence for zp,x indexing
   100
   101 = 0090			p1_shape        = $90
   102 = 0091			p2_shape        = $91
   103
   104 = 0094			player1_x       = $94
   105 = 0095			player2_x       = $95
   106
   107 = 0098			player1_y       = $98
   108 = 0099			player2_y       = $99
   109
   110 = 009C			p1_angle        = $9c
   111 = 009D			p2_angle        = $9d
   112
   113 = 00A0			mp_collision    = $a0
   114 = 00A1			in_collision    = $a1
   115 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   116 = 00A3			edge_delay      = $a3
   117 = 00A4			bat_collision_delay = $a4
   118
   119 				; ball vars
   120 = 00A6			ball_current_x      = $a6
   121 = 00A7			ball_current_y      = $a7
   122 = 00AA			ball_angle_start    = $aa
   123 = 00AB			ball_angle_end      = $ab
   124 = 00AC			ball_speed          = $ac
   125
   126 = 00AD			edge_collision      = $ad
   127 = 00AE			edge_hit_count      = $ae
   128
   129 = 00B0			tmp_angle1          = $b0
   130 = 00B1			tmp_angle2          = $b1
   131 = 00B2			add_to_angle        = $b2
   132 = 00B3			angle_diff_bat      = $b3
   133 = 00B4			tmp_angle_direction = $b4
   134 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   135 = 00B6			game_restart        = $b6
   136 = 00B7			tmp_angle_diff      = $b7
   137 = 00B8			magnitude           = $b8       ; word
   138
   139 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   140 = 00BA			cpu1_angle_end      = cpu_angle_end
   141 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   142
   143 				; $c0 - $df free for music
   144
   145 = 00E0			_divisor    = $e0   ; word
   146 = 00E2			_dividend   = $e2   ; word
   147 = 00E4			_remainder  = $e4   ; word
   148 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   149
   150 = 00E6			tmp_x1      = $e6   ; byte
   151 = 00E7			tmp_y1      = $e7   ; byte
   152 = 00E8			tmp_x2      = $e8   ; byte
   153 = 00E9			tmp_y2      = $e9   ; byte
   154
   155 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   156 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   157
   158 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   159 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   160
   161 = 00F2			tmp_dx      = $f2  ; byte
   162 = 00F3			tmp_dy      = $f3  ; byte
   163
   164 = 00F6			_multiplicand   = $f6   ; word
   165 = 00F8			_multiplier     = $f8   ; byte
   166
   167 				; direction:
   168 				; 0 : x1<x2 or y1<y2 = add
   169 				; 1 ; x1>=y2 or y1>=y2 = subtract
   170
   171 = 00FA			dir_x       = $fa  ; byte
   172 = 00FB			dir_y       = $fb  ; byte
   173
   174 = 00FC			line_end_x  = $fc  ; byte
   175 = 00FD			line_end_y  = $fd  ; byte
   176
   177 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   178
   179 				; real data is loaded at $2000 ($1700+$900)
   180 BE10			            org $1700
   181 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   182
   183 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous mouse value (player 1,2)
    19 3401			prev_mouse_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-3FBF> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_mouse_value
    27 340B 8D 02 34		            sta prev_mouse_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 3443			reset_driver_mode
    61 3443 A9 00		            lda #0
    62 3445 8D BE 32		            sta driver_mode     ; reset driver mode
    63 3448 60			            rts
    64
    65 				; stick detect by using left/right
    66 				; paddle by connecting/rotate
    67 				; mouse controller by movement
    68
    69 				; return A = driver mode
    70 				; 0 = stick detected
    71 				; 1 = paddle detected
    72 				; 2 = mouse detected
    73
    74 3449			driver_detect
    75 3449 AD 70 02		            lda PADDL0
    76 344C C9 E4		            cmp #228
    77 344E D0 07		            bne paddle_detect
    78 3450 AD 71 02		            lda PADDL1
    79 3453 C9 E4		            cmp #228
    80 3455 F0 06		            beq no_paddle_detect
    81 3457			paddle_detect
    82 3457 A9 01		            lda #1
    83 3459 8D BE 32		            sta driver_mode
    84 345C 60			            rts
    85
    86 345D			no_paddle_detect
    87 345D AD BE 32		            lda driver_mode
    88 3460 C9 02		            cmp #2
    89 3462 F0 0C		            beq keep_mouse
    90 3464 AD 78 02		            lda STICK0
    91 3467 C9 0C		            cmp #12
    92 3469 D0 06		            bne no_mouse_detect
    93 346B A9 02		            lda #2
    94 346D 8D BE 32		            sta driver_mode
    95 3470			keep_mouse
    96 3470 60			            rts
    97
    98 3471			no_mouse_detect
    99 3471 C9 07		            cmp #7      ; paddle button also gives this
   100 3473 F0 04		            beq stick_detect    
   101 3475 C9 0B		            cmp #11     ; paddle button also gives this
   102 3477 D0 06		            bne no_stick_detect
   103 3479			stick_detect
   104 3479 A9 00		            lda #0
   105 347B 8D BE 32		            sta driver_mode
   106 347E 60			            rts
   107
   108 347F			no_stick_detect
   109 				; default is the last value
   110 347F AD BE 32		            lda driver_mode
   111 3482 60			            rts
   112
   113 				; move player 1/2
   114 				; right - clockwise, left = anti-clockwise
   115
   116 				; X = 0, player 1
   117 				; X = 1, player 2
   118
   119 				; A = driver mode:
   120 				; 0 : stick
   121 				; 1 : paddle
   122 				; 2 : mouse
   123 				; 3 : computer
   124
   125 3483			main_driver
   126 3483 AC BE 32		            ldy driver_mode
   127 3486 B9 95 34		            lda driver_lo,y
   128 3489 8D 93 34		            sta driver_ptr
   129 348C B9 99 34		            lda driver_hi,y
   130 348F 8D 94 34		            sta driver_ptr+1
   131
   132 = 3493			driver_ptr = *+1
   133 3492 4C FF FF		            jmp $ffff  
   134
   135 3495			driver_lo
   136 3495 9D			            dta <driver_stick
   137 3496 0B			            dta <driver_paddle
   138 3497 18			            dta <driver_mouse
   139 3498 9D			            dta <driver_stick
   140
   141 3499			driver_hi
   142 3499 34			            dta >driver_stick
   143 349A 35			            dta >driver_paddle
   144 349B 35			            dta >driver_mouse
   145 349C 34			            dta >driver_stick
   146
   147 				; joystick driver
   148
   149 349D			driver_stick
   150 349D BD 78 02		            lda STICK0,x
   151 34A0 C9 0F		            cmp #15
   152 34A2 F0 31		            beq move_done
   153 34A4 C9 0B		            cmp #11
   154 34A6 D0 16		            bne no_left
   155
   156 34A8 B5 9C		            lda p1_angle,x
   157 34AA 38			            sec
   158 34AB E5 88		            sbc stick_slow_speed
   159 34AD 95 9C		            sta p1_angle,x
   160
   161 34AF BD 84 02		            lda STRIG0,x
   162 34B2 D0 07		            bne no_fast
   163
   164 34B4 B5 9C		            lda p1_angle,x
   165 34B6 38			            sec
   166 34B7 E5 89		            sbc stick_fast_speed
   167 34B9 95 9C		            sta p1_angle,x
   168 34BB			no_fast
   169 				            
   170 34BB 4C D5 34		            jmp move_done
   171 34BE C9 07		no_left     cmp #7
   172 34C0 D0 13		            bne move_done
   173
   174 34C2 B5 9C		            lda p1_angle,x
   175 34C4 18			            clc
   176 34C5 65 88		            adc stick_slow_speed
   177 34C7 95 9C		            sta p1_angle,x
   178
   179 34C9 BD 84 02		            lda STRIG0,x
   180 34CC D0 07		            bne no_fast_right
   181
   182 34CE B5 9C		            lda p1_angle,x
   183 34D0 18			            clc
   184 34D1 65 89		            adc stick_fast_speed
   185 34D3 95 9C		            sta p1_angle,x
   186 34D5			no_fast_right
   187 34D5			move_done
   188 34D5 60			            rts
   189
   190 				; check if player1 button is pressed
   191 				; A=0 not pressed, 1=pressed
   192
   193 34D6			is_player1_button_pressed
   194 34D6 AD BE 32		            lda driver_mode
   195 34D9 C9 01		            cmp #1
   196 34DB F0 07		            beq check_player1_paddle_fire
   197
   198 34DD AD 84 02		            lda STRIG0
   199 34E0 F0 1C		            beq fire_pressed
   200 34E2 D0 24		            bne fire_not_pressed
   201
   202 34E4			check_player1_paddle_fire
   203 34E4 AD 78 02		            lda STICK0
   204 34E7 C9 0B		            cmp #11
   205 34E9 F0 13		            beq fire_pressed
   206 34EB D0 1B		            bne fire_not_pressed
   207
   208 				; X=port number to check (paddle uses only port 1)
   209 				; check fire button (paddle uses left/right stick as fire button)
   210 				; A=0 not pressed, 1=pressed
   211
   212 34ED			is_both_buttons
   213 34ED AD BE 32		            lda driver_mode
   214 34F0 C9 01		            cmp #1
   215 34F2 F0 0D		            beq check_paddle_fire
   216
   217 34F4 AD 84 02		            lda STRIG0
   218 34F7 D0 0F		            bne fire_not_pressed
   219 34F9 AD 85 02		            lda STRIG1
   220 34FC D0 0A		            bne fire_not_pressed
   221
   222 34FE			fire_pressed
   223 34FE A9 01		            lda #1
   224 3500 60			            rts
   225
   226 3501			check_paddle_fire
   227 3501 AD 78 02		            lda STICK0
   228 3504 C9 03		            cmp #3
   229 3506 F0 F6		            beq fire_pressed
   230
   231 3508			fire_not_pressed
   232 3508 A9 00		            lda #0
   233 350A 60			            rts
   234
   235 				; paddle driver
   236 				            
   237 350B			driver_paddle            
   238 350B BD 70 02		            lda PADDL0,x
   239 350E A8			            tay
   240 350F B9 00 33		            lda paddle_to_256,y
   241 3512 5D 4F 35		            eor paddle_offsets,x
   242 3515 95 9C		            sta p1_angle,x
   243 3517 60			            rts
   244
   245 				; mouse driver (Atari ST compatible)
   246
   247 3518			driver_mouse
   248 3518 60			            rts
   249 				;            lda STICK0,x
   250 				;            eor #15
   251 				;            jmp driver_mouse_main
   252
   253 3519			driver_mouse_fast_p1
   254 3519 AD 00 D3		            lda PORTA
   255 351C A2 00		            ldx #0
   256 351E 4C 2A 35		            jmp driver_mouse_main
   257
   258 3521			driver_mouse_fast_p2
   259 3521 AD 00 D3		            lda PORTA
   260 3524 4A			            lsr
   261 3525 4A			            lsr
   262 3526 4A			            lsr
   263 3527 4A			            lsr
   264 3528 A2 01		            ldx #1
   265 				; have to call this many times per frame for each player
   266 352A			driver_mouse_main
   267 352A 29 03		            and #%00000011
   268 352C 48			            pha
   269 352D 1D 01 34		            ora prev_mouse_value,x
   270 3530 A8			            tay
   271 3531 68			            pla
   272 3532 0A			            asl
   273 3533 0A			            asl
   274 3534 9D 01 34		            sta prev_mouse_value,x  ; store previous bits at 0000AA00 position for next time
   275
   276 3537 B9 3F 35		            lda mouse_transitions,y
   277 353A 75 9C		            adc p1_angle,x
   278 353C 95 9C		            sta p1_angle,x
   279 353E 60			            rts
   280
   281 				; nibble coded transitions for mouse
   282 				; 15,13,12,14 = anti-clockwise
   283 				; 15,14,12,13 = clockwise
   284 				; only lowest 2 bits change, so we need 16 values for all transitions
   285
   286 				; index is the combined value of nibble AABB
   287 				; where AA is previous bits and BB current bits
   288 353F			mouse_transitions
   289 353F 00			            dta 0   ; 00 -> 00 (12 -> 12)
   290 3540 02			            dta 2   ; 00 -> 01 (12 -> 13)
   291 3541 FE			            dta 254 ; 00 -> 10 (12 -> 14)
   292 3542 00			            dta 0   ; 00 -> 11 (12 -> 15)
   293 3543 FE			            dta 254 ; 01 -> 00 (13 -> 12)
   294 3544 00			            dta 0   ; 01 -> 01 (13 -> 13)
   295 3545 00			            dta 0   ; 01 -> 10 (13 -> 14)
   296 3546 02			            dta 2   ; 01 -> 11 (13 -> 15)
   297 3547 02			            dta 2   ; 10 -> 00 (14 -> 12)
   298 3548 00			            dta 0   ; 10 -> 01 (14 -> 13)
   299 3549 00			            dta 0   ; 10 -> 10 (14 -> 14)
   300 354A FE			            dta 254 ; 10 -> 11 (14 -> 15)
   301 354B 00			            dta 0   ; 11 -> 00 (15 -> 12)
   302 354C FE			            dta 254 ; 11 -> 01 (15 -> 13)
   303 354D 02			            dta 2   ; 11 -> 10 (15 -> 14)
   304 354E 00			            dta 0   ; 11 -> 11 (15 -> 15)
   305
   306 354F			paddle_offsets
   307 354F 00 00		            dta 0,0
   184
   185 3551			reset_pressed
   186 3551 20 00 9C		            jsr intro_main
   187
   188 3554			main
   189 3554 A9 FF		            lda #255
   190 3556 8D FC 02		            sta 764
   191
   192 				; for fast loaders, wait 10 seconds or continue with spacebar
   193 3559			wait_a_sec
   194 3559 AD FC 02		            lda 764
   195 355C C9 FF		            cmp #255
   196 355E D0 06		            bne any_key_pressed
   197
   198 3560 A5 13		            lda 19
   199 3562 C9 02		            cmp #2
   200 3564 90 F3		            bcc wait_a_sec
   201
   202 3566			any_key_pressed
   203 3566 A9 FF		            lda #255
   204 3568 8D FC 02		            sta 764
   205
   206 				; start the game!
   207 				 
   208 356B A9 00		            lda #0
   209 356D 8D 2F 02		            sta SDMCTL
   210 3570 85 B6		            sta game_restart
   211 3572 85 8F		            sta end_screen_delay
   212 3574 85 83		            sta winner_color
   213
   214 3576 A9 80		            lda #128
   215 3578 85 8D		            sta volume_hit_bat
   216 357A 85 8E		            sta volume_hit_edge
   217 357C 85 80		            sta music_toggle        ; 128 = on, 0 = off
   218
   219 357E A9 01		            lda #1
   220 3580 8D 44 02		            sta 580 ; coldstart
   221
   222 				;            lda #1
   223 				;            sta 9   ; boot
   224
   225 				;            lda #<reset_pressed
   226 				;            sta $0a
   227 				;            lda #>reset_pressed
   228 				;            sta $0b
   229
   230 3583 20 03 34		            jsr driver_init
   231
   232 3586 20 8E 3C		            jsr make_shape_index
   233
   234 3589 20 BE 3C		            jsr make_outer_256
   235
   236 358C 20 D0 36		            jsr make_screen_y_tab
   237
   238 358F 20 1B 37		            jsr invert_backdrop
   239 3592 A9 60		            lda #$60
   240 3594 8D 1B 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   241
   242 3597 20 2E 3D		            jsr reset_score
   243 359A 20 FC 3C		            jsr show_score_p1
   244 359D 20 15 3D		            jsr show_score_p2
   245
   246 35A0 20 19 3F		            jsr init_sprites
   247 35A3 20 45 3F		            jsr init_colors
   248
   249 				; init. game vars
   250 35A6 A2 00		            ldx #INIT_LEVEL_INDEX
   251 35A8 8E 65 3F		            stx current_level_index
   252 35AB 20 7B 3F		            jsr set_level_ball_speed
   253
   254 35AE A9 00		            lda #INIT_PLAYER_MODE
   255 35B0 85 8A		            sta player_mode
   256 35B2 20 B1 3F		            jsr show_player_mode
   257
   258 35B5 A9 01		            lda #STATE_IN_MENU
   259 35B7 85 8C		            sta game_state           ; start with menu
   260
   261 35B9 20 6E 31		            jsr music_init
   262
   263 35BC 20 60 37		            jsr show_menu_options
   264
   265 35BF 20 6A 38		            jsr reset_autostart_demo
   266
   267 35C2 A9 00		            lda #<display_list
   268 35C4 8D 30 02		            sta SDLSTL
   269 35C7 A9 50		            lda #>display_list
   270 35C9 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 35CC A9 C0		            lda #$c0
   275 35CE 8D 0E D4		            sta NMIEN
   276
   277 35D1 A9 07		            lda #7          ; sets VVBLKI
   278 35D3 A0 B2		            ldy #<vbi
   279 35D5 A2 37		            ldx #>vbi
   280 35D7 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 35DA			wait_mouse
   283 35DA AD BE 32		            lda driver_mode
   284 35DD C9 02		            cmp #2
   285 35DF D0 F9		            bne wait_mouse
   286
   287 35E1 A5 8A		            lda player_mode
   288 35E3 C9 01		            cmp #MODE_1_PLAYER
   289 35E5 F0 03		            beq single_driver
   290 35E7 20 21 35		            jsr driver_mouse_fast_p2
   291 35EA			single_driver
   292 35EA 20 19 35		            jsr driver_mouse_fast_p1
   293
   294 35ED 4C DA 35		            jmp wait_mouse
   295
   296 				;------------------------
   297 				; 8bit * 8bit = 16bit multiply
   298 				; By White Flame
   299 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   300 				; uses extra zp var _multiplicand+1
   301
   302 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   303 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   304
   305 				; In this version, both inputs must be unsigned
   306 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   307
   308 35F0			_multi8
   309 35F0 A9 00		            lda #$00
   310 35F2 A8			            tay
   311 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   312 35F3 F0 0D		            beq _enter_loop
   313 35F5			_do_add
   314 35F5 18			            clc
   315 35F6 65 F6		            adc _multiplicand
   316 35F8 AA			            tax
   317
   318 35F9 98			            tya
   319 35FA 65 F7		            adc _multiplicand+1
   320 35FC A8			            tay
   321 35FD 8A			            txa
   322 35FE			_mul_loop
   323 35FE 06 F6		            asl _multiplicand
   324 3600 26 F7		            rol _multiplicand+1
   325 3602			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   326 3602 46 F8		            lsr _multiplier
   327 3604 B0 EF		            bcs _do_add
   328 3606 D0 F6		            bne _mul_loop
   329 3608 60			            rts
   330
   331 				; reset PM0/1 to playfield settings
   332 3609			dli_header
   333 3609 48			            pha
   334
   335 360A A9 08		            lda #8
   336 360C 8D 17 D0		            sta COLPF1
   337
   338 360F A5 81		            lda shadow_HPOSP0
   339 3611 8D 00 D0		            sta HPOSP0
   340 3614 A5 82		            lda shadow_HPOSP1
   341 3616 8D 01 D0		            sta HPOSP1
   342
   343 3619 A9 00		            lda #0
   344 361B 8D 08 D0		            sta SIZEP0
   345 361E 8D 09 D0		            sta SIZEP1
   346
   347 3621 A9 5A		            lda #BASE_COLOR_P1+10
   348 3623 8D 12 D0		            sta COLPM0
   349 3626 A9 BA		            lda #BASE_COLOR_P2+10
   350 3628 8D 13 D0		            sta COLPM1
   351
   352 362B A9 37		            lda #<dli_menu
   353 362D 8D 00 02		            sta VDSLST
   354 3630 A9 36		            lda #>dli_menu
   355 3632 8D 01 02		            sta VDSLST+1
   356
   357 3635 68			            pla
   358 3636 40			            rti
   359
   360 3637			dli_menu
   361 3637 48			            pha
   362 3638 8A			            txa
   363 3639 48			            pha
   364
   365 363A A9 0E		            lda #$0e
   366 363C 8D 0A D4		            sta WSYNC
   367 363F 8D 1A D0		            sta COLBK
   368 3642 A9 0A		            lda #$0a
   369 3644 8D 0A D4		            sta WSYNC
   370 3647 8D 1A D0		            sta COLBK
   371 364A A9 00		            lda #0
   372 364C 8D 0A D4		            sta WSYNC
   373 364F 8D 1A D0		            sta COLBK
   374
   375 3652 A2 00		            ldx #0
   376 3654			color_it1
   377 3654 BD 98 36		            lda menu_colpf2,x
   378 3657 8D 0A D4		            sta WSYNC
   379 365A 8D 18 D0		            sta COLPF2
   380 365D E8			            inx
   381 365E E0 12		            cpx #18
   382 3660 D0 F2		            bne color_it1
   383
   384 3662 A2 00		            ldx #0
   385 3664			color_it2
   386 3664 BD AA 36		            lda menu_colpf0,x
   387 3667 05 83		            ora winner_color
   388 3669 8D 0A D4		            sta WSYNC
   389 366C 8D 16 D0		            sta COLPF0
   390 366F E8			            inx
   391 3670 E0 26		            cpx #38
   392 3672 D0 F0		            bne color_it2
   393
   394 3674 A9 00		            lda #0
   395 3676 8D 0A D4		            sta WSYNC
   396 3679 8D 1A D0		            sta COLBK
   397 367C A9 0A		            lda #$0a
   398 367E 8D 0A D4		            sta WSYNC
   399 3681 8D 1A D0		            sta COLBK
   400 3684 A9 0E		            lda #$0e
   401 3686 8D 0A D4		            sta WSYNC
   402 3689 8D 1A D0		            sta COLBK
   403 368C A9 00		            lda #0
   404 368E 8D 0A D4		            sta WSYNC
   405 3691 8D 1A D0		            sta COLBK
   406 				            
   407 3694 68			            pla
   408 3695 AA			            tax
   409 3696 68			            pla
   410 3697 40			            rti
   411
   412 3698			menu_colpf2
   413 3698 50			            dta BASE_COLOR_P1
   414 3699 50			            dta BASE_COLOR_P1
   415 369A 50			            dta BASE_COLOR_P1
   416 369B 50			            dta BASE_COLOR_P1
   417 369C 50			            dta BASE_COLOR_P1
   418 369D 50			            dta BASE_COLOR_P1
   419 369E 50			            dta BASE_COLOR_P1
   420 369F 50			            dta BASE_COLOR_P1
   421
   422 36A0 B0			            dta BASE_COLOR_P2
   423 36A1 B0			            dta BASE_COLOR_P2
   424 36A2 B0			            dta BASE_COLOR_P2
   425 36A3 B0			            dta BASE_COLOR_P2
   426 36A4 B0			            dta BASE_COLOR_P2
   427 36A5 B0			            dta BASE_COLOR_P2
   428 36A6 B0			            dta BASE_COLOR_P2
   429 36A7 B0			            dta BASE_COLOR_P2
   430
   431 36A8 00 00		            dta 0,0
   432
   433 36AA			menu_colpf0
   434 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   435 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   436 36AA 00 00		            dta 0,0
   437 36AC 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   438 36B4 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   439 36BC 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   440 36C4 00 00 00 00		            dta 0,0,0,0
   441 36C8 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   442
   443 				; make pointers from y-position to screen memory
   444 				; screen memory is 3 blocks
   445 				; screen_mem1 : 102 lines, 4080 bytes
   446 				; screen_mem2 : 102 lines, 4080 bytes
   447 				; screen_mem3 :  20 lines,  800 bytes
   448
   449 36D0			make_screen_y_tab
   450 36D0 A9 00		            lda #<screen_mem1
   451 36D2 85 86		            sta tmp_screen
   452 36D4 A9 70		            lda #>screen_mem1
   453 36D6 85 87		            sta tmp_screen+1
   454
   455 36D8 A2 00		            ldx #0
   456 36DA			fill_y_tab1
   457 36DA 20 03 37		            jsr store_y_line
   458 36DD E8			            inx
   459 36DE E0 66		            cpx #102
   460 36E0 D0 F8		            bne fill_y_tab1
   461
   462 				; x = 102
   463 36E2 A9 00		            lda #<screen_mem2
   464 36E4 85 86		            sta tmp_screen
   465 36E6 A9 80		            lda #>screen_mem2
   466 36E8 85 87		            sta tmp_screen+1
   467
   468 36EA			fill_y_tab2
   469 36EA 20 03 37		            jsr store_y_line
   470 36ED E8			            inx
   471 36EE E0 CC		            cpx #204
   472 36F0 D0 F8		            bne fill_y_tab2
   473
   474 36F2 A9 00		            lda #<screen_mem3
   475 36F4 85 86		            sta tmp_screen
   476 36F6 A9 90		            lda #>screen_mem3
   477 36F8 85 87		            sta tmp_screen+1
   478
   479 				; x = 204
   480 36FA			fill_y_tab3
   481 36FA 20 03 37		            jsr store_y_line
   482 36FD E8			            inx
   483 36FE E0 E0		            cpx #224
   484 3700 D0 F8		            bne fill_y_tab3
   485 3702 60			            rts
   486
   487 3703			store_y_line
   488 3703 A5 86		            lda tmp_screen
   489 3705 9D 00 12		            sta screen_y_lo,x
   490 3708 A5 87		            lda tmp_screen+1
   491 370A 9D 00 13		            sta screen_y_hi,x
   492 				            
   493 370D A5 86		            lda tmp_screen
   494 370F 18			            clc
   495 3710 69 28		            adc #SCREEN_WIDTH
   496 3712 85 86		            sta tmp_screen
   497 3714 A5 87		            lda tmp_screen+1
   498 3716 69 00		            adc #0
   499 3718 85 87		            sta tmp_screen+1
   500 371A 60			            rts
   501
   502 				; @todo invert backdrop image
   503 				; now we have to do it here :P
   504 371B			invert_backdrop
   505 371B A9 00		            lda #<screen_mem1
   506 371D 85 86		            sta tmp_screen
   507 371F A9 70		            lda #>screen_mem1
   508 3721 85 87		            sta tmp_screen+1
   509 				            
   510 3723 A2 10		            ldx #16     ; 16 pages = 4K
   511 3725 20 43 37		            jsr do_x_pages
   512 				           
   513 3728 A9 00		            lda #<screen_mem2
   514 372A 85 86		            sta tmp_screen
   515 372C A9 80		            lda #>screen_mem2
   516 372E 85 87		            sta tmp_screen+1
   517 				            
   518 3730 A2 10		            ldx #16     ; 16 pages = 4K
   519 3732 20 43 37		            jsr do_x_pages
   520
   521 3735 A9 00		            lda #<screen_mem3
   522 3737 85 86		            sta tmp_screen
   523 3739 A9 90		            lda #>screen_mem3
   524 373B 85 87		            sta tmp_screen+1
   525 				            
   526 373D A2 04		            ldx #4     ; 4 pages = 1K
   527 373F 20 43 37		            jsr do_x_pages
   528 3742 60			            rts
   529
   530 				; invert x pages, starting from tmp_screen
   531
   532 3743			do_x_pages
   533 3743 A0 00		            ldy #0
   534 3745			do_page
   535 3745 B1 86		            lda (tmp_screen),y
   536 3747 49 FF		            eor #$ff
   537 3749 91 86		            sta (tmp_screen),y
   538 374B C8			            iny
   539 374C D0 F7		            bne do_page 
   540
   541 374E E6 87		            inc tmp_screen+1
   542 3750 CA			            dex
   543 3751 D0 F2		            bne do_page
   544 3753 60			            rts
   545
   546 3754			turn_color_ball
   547 3754 A6 B5		            ldx player_turn
   548 3756 BD 5D 37		            lda color_turn,x
   549 3759 8D C7 02		            sta COLOR3
   550 375C 60			            rts
   551 				            
   552 375D 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   553
   554 3760			show_menu_options
   555 3760 A9 50		            lda #<controller_text
   556 3762 8D F6 50		            sta menu_line1_ptr
   557 3765 A9 52		            lda #>controller_text
   558 3767 8D F7 50		            sta menu_line1_ptr+1
   559
   560 376A 20 B1 3F		            jsr show_player_mode
   561
   562 376D A9 9F		            lda #<level_text
   563 376F 8D FC 50		            sta menu_line3_ptr
   564 3772 A9 52		            lda #>level_text
   565 3774 8D FD 50		            sta menu_line3_ptr+1
   566
   567 3777 A9 00		            lda #0
   568 3779 85 83		            sta winner_color
   569 377B 60			            rts
   570
   571 377C			show_end_screen
   572 377C A9 FB		            lda #<empty_text
   573 377E 8D F6 50		            sta menu_line1_ptr
   574 3781 8D FC 50		            sta menu_line3_ptr
   575 3784 A9 52		            lda #>empty_text
   576 3786 8D F7 50		            sta menu_line1_ptr+1
   577 3789 8D FD 50		            sta menu_line3_ptr+1
   578
   579 378C AD 2E 51		            lda score_p1
   580 378F CD 2F 51		            cmp score_p2
   581 3792 90 0F		            bcc player_2_wins
   582
   583 3794 A9 0F		            lda #<winner_one_text
   584 3796 8D F9 50		            sta menu_line2_ptr
   585 3799 A9 53		            lda #>winner_one_text
   586 379B 8D FA 50		            sta menu_line2_ptr+1
   587
   588 379E A9 50		            lda #BASE_COLOR_P1
   589 37A0 85 83		            sta winner_color
   590 37A2 60			            rts
   591
   592 37A3			player_2_wins
   593 37A3 A9 23		            lda #<winner_two_text
   594 37A5 8D F9 50		            sta menu_line2_ptr
   595 37A8 A9 53		            lda #>winner_two_text
   596 37AA 8D FA 50		            sta menu_line2_ptr+1
   597
   598 37AD A9 B0		            lda #BASE_COLOR_P2
   599 37AF 85 83		            sta winner_color
   600
   601 37B1 60			            rts
   602
   603 				; A, X, Y are already saved by the OS
   604 37B2			vbi
   605 37B2 20 DC 31		            jsr copy_shadow
   606
   607 37B5 A5 80		            lda music_toggle
   608 37B7 F0 03		            beq skip_music
   609 37B9 20 97 31		            jsr play_song
   610 37BC			skip_music
   611
   612 				; toggle music on/off with spacebar
   613 37BC AD FC 02		            lda 764
   614 37BF C9 21		            cmp #$21
   615 37C1 D0 10		            bne no_spacebar
   616 37C3 A5 80		            lda music_toggle
   617 37C5 49 80		            eor #128
   618 37C7 85 80		            sta music_toggle
   619 37C9 D0 03		            bne music_turned_on
   620 37CB 20 60 32		            jsr music_off
   621
   622 37CE			music_turned_on
   623 37CE A9 FF		            lda #255
   624 37D0 8D FC 02		            sta 764
   625
   626 37D3			no_spacebar
   627 37D3 20 12 3A		            jsr play_sound_bat
   628 37D6 20 30 3A		            jsr play_sound_edge
   629
   630 37D9 A9 09		            lda #<dli_header
   631 37DB 8D 00 02		            sta VDSLST
   632 37DE A9 36		            lda #>dli_header
   633 37E0 8D 01 02		            sta VDSLST+1
   634
   635 37E3 A9 2E		            lda #%00101110  ; enable P/M DMA
   636 37E5 8D 2F 02		            sta SDMCTL
   637 37E8 A9 00		            lda #0
   638 37EA 85 4D		            sta 77      ; attract off
   639 37EC A9 98		            lda #>rotor_font
   640 37EE 8D F4 02		            sta 756
   641
   642 37F1 A9 30		            lda #$30
   643 37F3 8D 00 D0		            sta HPOSP0
   644 37F6 A9 B0		            lda #$b0
   645 37F8 8D 01 D0		            sta HPOSP1
   646
   647 				; menu switching thingy
   648
   649 37FB AD 1F D0		            lda CONSOL
   650 37FE C9 03		            cmp #3  ; option button
   651 3800 D0 1E		            bne no_option_pressed
   652 3802 A5 8C		            lda game_state
   653 3804 C9 01		            cmp #STATE_IN_MENU
   654 3806 F0 35		            beq check_game_state
   655
   656 				; prevent menu option directly after leaving in-game state
   657 3808 A9 03		            lda #3
   658 380A 8D 64 3F		            sta previous_consol
   659
   660 380D			go_menu_mode
   661 380D 20 DF 3B		            jsr wipe_ball
   662
   663 3810 20 FA 31		            jsr music_normal_volume
   664
   665 3813 20 60 37		            jsr show_menu_options
   666
   667 3816 20 43 34		            jsr reset_driver_mode
   668
   669 3819 A9 01		            lda #STATE_IN_MENU
   670 381B 85 8C		            sta game_state
   671 381D 4C 3D 38		            jmp check_game_state
   672
   673 3820			no_option_pressed
   674 3820 C9 06		            cmp #6  ; start pressed
   675 3822 F0 05		            beq reset_game
   676
   677 				; check autostart state
   678
   679 3824 AD 67 38		            lda autostart_demo
   680 3827 F0 14		            beq check_game_state
   681
   682 				; reset game
   683
   684 3829			reset_game
   685 3829 20 05 32		            jsr music_low_volume
   686
   687 382C 20 DF 3B		            jsr wipe_ball
   688
   689 382F 20 D3 3A		            jsr reset_cpu_angle_end
   690
   691 3832 A9 01		            lda #1
   692 3834 85 B6		            sta game_restart
   693
   694 3836 20 6A 38		            jsr reset_autostart_demo
   695
   696 3839 A9 00		            lda #STATE_IN_GAME
   697 383B 85 8C		            sta game_state
   698
   699 383D			check_game_state
   700 383D A5 8C		            lda game_state
   701 383F D0 03		            bne no_main_game_state
   702 3841 4C 10 39		            jmp main_game_vbi
   703
   704 3844			no_main_game_state
   705 3844 C9 02		            cmp #STATE_IN_END
   706 3846 D0 4C		            bne menu_vbi
   707
   708 				; end screen vbi
   709 3848 A5 8F		            lda end_screen_delay
   710 384A D0 13		            bne stay_in_end_screen
   711
   712 384C 20 A6 31		            jsr restart_music
   713 384F 20 FA 31		            jsr music_normal_volume
   714
   715 				; here we show the menu again
   716 3852 20 60 37		            jsr show_menu_options
   717
   718 3855 20 43 34		            jsr reset_driver_mode
   719
   720 3858 A9 01		            lda #STATE_IN_MENU
   721 385A 85 8C		            sta game_state
   722 385C 4C 94 38		            jmp menu_vbi
   723
   724 385F			stay_in_end_screen
   725 385F 20 F4 39		            jsr play_sound_end_game
   726 3862 C6 8F		            dec end_screen_delay
   727 3864 4C DC 38		            jmp wait_depressed
   728
   729 				; demo autostart
   730
   731 3867 00			autostart_demo  dta 0
   732 3868 00 00		autostart_timer dta 0,0
   733
   734 386A			reset_autostart_demo
   735 386A A9 00		            lda #0
   736 386C 8D 67 38		            sta autostart_demo      ; do not start again
   737 386F 8D 68 38		            sta autostart_timer
   738 3872 A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   739 3874 8D 69 38		            sta autostart_timer+1
   740 3877 60			            rts
   741
   742 3878			handle_autostart_timer
   743 3878 AD 68 38		            lda autostart_timer
   744 387B 0D 69 38		            ora autostart_timer+1
   745 387E F0 13		            beq idle_timer
   746 3880 CE 68 38		            dec autostart_timer
   747 3883 D0 0E		            bne running_timer
   748 3885 CE 69 38		            dec autostart_timer+1
   749 3888 D0 09		            bne running_timer
   750
   751 				; timer reached zero
   752 388A A9 01		            lda #1
   753 388C 8D 67 38		            sta autostart_demo
   754 388F A9 02		            lda #2
   755 3891 85 8A		            sta player_mode
   756
   757 3893			running_timer
   758 3893			idle_timer
   759 3893 60			            rts
   760
   761 				; within menu vbi
   762
   763 3894			menu_vbi
   764 3894 20 78 38		            jsr handle_autostart_timer
   765
   766 3897 A5 8A		            lda player_mode
   767 3899 F0 07		            beq check_human_buttons
   768
   769 389B 20 D6 34		            jsr is_player1_button_pressed
   770 389E D0 89		            bne reset_game
   771 38A0 F0 05		            beq check_consol_buttons
   772
   773 38A2			check_human_buttons
   774 38A2 20 ED 34		            jsr is_both_buttons
   775 38A5 D0 82		            bne reset_game
   776
   777 38A7			check_consol_buttons
   778 38A7 AD 1F D0		            lda CONSOL
   779 38AA C9 05		            cmp #5          ; select
   780 38AC D0 18		            bne no_level_select
   781 				            
   782 38AE AD 64 3F		            lda previous_consol
   783 38B1 C9 05		            cmp #5
   784 38B3 F0 27		            beq wait_depressed
   785
   786 38B5 20 94 3F		            jsr increase_level
   787 38B8 AE 65 3F		            ldx current_level_index
   788 38BB 20 7B 3F		            jsr set_level_ball_speed
   789
   790 38BE A9 05		            lda #5
   791 38C0 8D 64 3F		            sta previous_consol
   792 38C3 4C DC 38		            jmp wait_depressed
   793
   794 38C6			no_level_select
   795 38C6 C9 03		            cmp #3          ; option
   796 38C8 D0 0F		            bne no_player_mode_select
   797
   798 38CA AD 64 3F		            lda previous_consol
   799 38CD C9 03		            cmp #3
   800 38CF F0 0B		            beq wait_depressed
   801
   802 38D1 20 A4 3F		            jsr increase_player_mode
   803 38D4 20 B1 3F		            jsr show_player_mode
   804
   805 38D7 A9 03		            lda #3
   806 38D9			no_player_mode_select
   807 38D9 8D 64 3F		            sta previous_consol
   808
   809 38DC			wait_depressed
   810 38DC A9 01		            lda #1      ; dl jump
   811 38DE 8D 55 50		            sta menu_dl_hook
   812 38E1 A9 EE		            lda #<menu_dl_part
   813 38E3 8D 56 50		            sta menu_dl_hook+1
   814 38E6 A9 50		            lda #>menu_dl_part
   815 38E8 8D 57 50		            sta menu_dl_hook+2
   816
   817 				; detect/show controller type (used for both players)
   818 38EB 20 F7 38		            jsr detect_show_driver
   819
   820 38EE 20 7F 3A		            jsr handle_player1
   821 38F1 20 AA 3A		            jsr handle_player2
   822
   823 38F4 4C C9 39		            jmp exit_vbi
   824
   825 				; X = port/driver to detect
   826 38F7			detect_show_driver
   827 38F7 20 49 34		            jsr driver_detect
   828 38FA A8			            tay
   829 38FB B9 37 53		            lda driver_text_lo,y
   830 38FE 85 86		            sta tmp_screen
   831 3900 B9 3B 53		            lda driver_text_hi,y
   832 3903 85 87		            sta tmp_screen+1
   833
   834 3905 A0 07		            ldy #7
   835 3907			show_driv
   836 3907 B1 86		            lda (tmp_screen),y
   837 3909 99 5A 52		            sta driver_screen,y
   838 390C 88			            dey
   839 390D 10 F8		            bpl show_driv
   840 390F 60			            rts
   841
   842 				; main game vbi
   843 3910			main_game_vbi
   844 3910 A5 B6		            lda game_restart
   845 3912 F0 33		            beq no_restart
   846
   847 				; restart game
   848
   849 3914 20 0C 3A		            jsr silence_end
   850
   851 3917 A9 00		            lda #0
   852 3919 85 B6		            sta game_restart
   853 				            
   854 391B 20 2E 3D		            jsr reset_score
   855 391E 20 FC 3C		            jsr show_score_p1
   856 3921 20 15 3D		            jsr show_score_p2
   857
   858 3924 A6 9C		            ldx p1_angle
   859 3926 86 AA		            stx ball_angle_start
   860 3928 20 3A 3B		            jsr ball_to_start_position
   861 392B 20 49 3B		            jsr prepare_ball_end_position
   862
   863 392E A9 00		            lda #0
   864 3930 85 A0		            sta mp_collision
   865 3932 85 A1		            sta in_collision
   866 3934 85 A3		            sta edge_delay
   867 3936 85 AD		            sta edge_collision
   868 3938 85 AE		            sta edge_hit_count
   869 393A 8D 1E D0		            sta HITCLR
   870
   871 393D A9 02		            lda #2
   872 393F 85 B5		            sta player_turn
   873
   874 3941 20 54 37		            jsr turn_color_ball
   875 3944 4C C9 39		            jmp exit_vbi
   876
   877 3947			no_restart
   878 				; remove menu hook
   879 3947 A9 0F		            lda #$0f        ; dl gfx 8
   880 3949 8D 55 50		            sta menu_dl_hook
   881 394C 8D 56 50		            sta menu_dl_hook+1
   882 394F 8D 57 50		            sta menu_dl_hook+2
   883
   884 3952 AD 08 D0		            lda M0PL
   885 3955 85 A0		            sta mp_collision
   886 3957 AD 09 D0		            lda M1PL
   887 395A 05 A0		            ora mp_collision
   888 395C 85 A0		            sta mp_collision
   889
   890 395E AD 00 D0		            lda M0PF
   891 3961 85 AD		            sta edge_collision
   892 3963 AD 01 D0		            lda M1PF
   893 3966 05 AD		            ora edge_collision
   894 3968 85 AD		            sta edge_collision
   895 				;           beq no_edge_collision
   896
   897 				;            inc edge_hit_count
   898 				;            lda edge_hit_count
   899 				;            cmp #2
   900 				;            bcc edge_hit_counting
   901
   902 				;            sei
   903 				;lalala      jmp lalala
   904
   905 				;no_edge_collision
   906 				;            lda #0
   907 				;            sta edge_hit_count
   908
   909 396A			edge_hit_counting
   910 396A 20 7F 3A		            jsr handle_player1
   911 396D 20 AA 3A		            jsr handle_player2
   912
   913 				; handle ball
   914
   915 3970 20 DF 3B		            jsr wipe_ball         
   916
   917 				; Check ball collision with bat
   918
   919 3973 A5 A4		            lda bat_collision_delay
   920 3975 F0 05		            beq check_allowed
   921 3977 C6 A4		            dec bat_collision_delay
   922 3979 4C 93 39		            jmp move_one
   923
   924 397C			check_allowed
   925 397C A5 A0		            lda mp_collision
   926 397E F0 0F		            beq reset_in_collision
   927
   928 3980 A5 A1		            lda in_collision
   929 3982 D0 0F		            bne no_first_hit
   930
   931 3984 E6 A1		            inc in_collision            
   932 3986 20 76 3B		            jsr bounce_bat_ball 
   933 				            
   934 3989 20 EF 39		            jsr start_sound_bat          
   935 				            
   936 398C 4C 93 39		            jmp move_one
   937 				            
   938 398F			reset_in_collision
   939 398F A9 00		            lda #0
   940 3991 85 A1		            sta in_collision        
   941
   942 3993			move_one
   943 3993			no_first_hit
   944 3993 20 80 3E		            jsr move_current_xy
   945 3996 F0 1E		            beq still_moving
   946
   947 				; edge detected
   948
   949 3998 20 2B 3A		            jsr start_sound_edge
   950
   951 399B A5 AB		            lda ball_angle_end
   952 399D 85 AA		            sta ball_angle_start
   953
   954 399F 20 6D 3B		            jsr ball_current_to_start_position
   955 39A2 20 49 3B		            jsr prepare_ball_end_position
   956
   957 39A5 20 4B 3A		            jsr update_score
   958 39A8 D0 37		            bne game_ends
   959
   960 				; switch turns
   961 39AA A5 B5		            lda player_turn
   962 39AC 49 03		            eor #3              ; 1 => 2, 2 => 1
   963 39AE 85 B5		            sta player_turn
   964 39B0 20 54 37		            jsr turn_color_ball
   965 39B3 20 DC 3A		            jsr set_cpu_angle_end
   966
   967 39B6			still_moving
   968 39B6 A5 EB		            lda current_x+1
   969 39B8 85 A6		            sta ball_current_x
   970 39BA A5 ED		            lda current_y+1
   971 39BC 85 A7		            sta ball_current_y
   972
   973 39BE 20 F4 3B		            jsr show_ball
   974
   975 39C1 A9 00		            lda #0
   976 39C3 8D 18 D0		            sta $d018           
   977
   978 				; anything in A to clear collisions
   979 39C6 8D 1E D0		            sta HITCLR
   980
   981 39C9			exit_vbi
   982
   983 				; always set header stuff
   984 39C9 A9 03		            lda #3
   985 39CB 8D 08 D0		            sta SIZEP0
   986 39CE 8D 09 D0		            sta SIZEP1
   987
   988 				; background in PM0/1 for header
   989 39D1 A9 FF		            lda #255
   990 39D3 A2 07		            ldx #7
   991 39D5			fill_pm_header
   992 39D5 9D 00 0E		            sta p0_area,x
   993 39D8 9D 80 0E		            sta p1_area,x
   994 39DB CA			            dex
   995 39DC 10 F7		            bpl fill_pm_header
   996
   997 39DE 4C 62 E4		            jmp $e462
   998
   999 39E1			game_ends
  1000 39E1 A9 FF		            lda #255
  1001 39E3 85 8F		            sta end_screen_delay
  1002
  1003 39E5 20 7C 37		            jsr show_end_screen
  1004
  1005 39E8 A9 02		            lda #STATE_IN_END
  1006 39EA 85 8C		            sta game_state
  1007
  1008 39EC 4C C9 39		            jmp exit_vbi
  1009
  1010 39EF			start_sound_bat
  1011 39EF A9 0A		            lda #10
  1012 39F1 85 8D		            sta volume_hit_bat
  1013 39F3 60			            rts
  1014
  1015 39F4			play_sound_end_game
  1016 39F4 20 60 32		            jsr music_off
  1017
  1018 39F7 A5 8F		            lda end_screen_delay
  1019 39F9 C9 C0		            cmp #192
  1020 39FB 90 0F		            bcc silence_end
  1021 39FD 4A			            lsr
  1022 39FE 25 8F		            and end_screen_delay
  1023 3A00 4A			            lsr
  1024 3A01 09 20		            ora #$20
  1025 3A03 8D 73 32		            sta SHADOW+4
  1026 				            ;lda end_screen_delay
  1027 3A06 A9 AA		            lda #$aa
  1028 3A08 8D 74 32		            sta SHADOW+5
  1029 3A0B 60			            rts
  1030 3A0C			silence_end
  1031 3A0C A9 00		            lda #0
  1032 3A0E 8D 74 32		            sta SHADOW+5
  1033 3A11 60			            rts
  1034
  1035 3A12			play_sound_bat
  1036 3A12 A5 8D		            lda volume_hit_bat
  1037 3A14 30 14		            bmi silenced_bat
  1038
  1039 3A16 A5 B5		            lda player_turn
  1040 3A18 0A			            asl
  1041 3A19 0A			            asl
  1042 3A1A 69 30		            adc #$30
  1043 3A1C E5 B3		            sbc angle_diff_bat
  1044 3A1E 8D 73 32		            sta SHADOW+4    ; $d204
  1045 3A21 A5 8D		            lda volume_hit_bat
  1046 3A23 09 A0		            ora #$a0
  1047 3A25 8D 74 32		            sta SHADOW+5    ; $d205
  1048 3A28 C6 8D		            dec volume_hit_bat
  1049 3A2A			silenced_bat
  1050 3A2A 60			            rts
  1051
  1052 3A2B			start_sound_edge
  1053 3A2B A9 04		            lda #4
  1054 3A2D 85 8E		            sta volume_hit_edge
  1055 3A2F 60			            rts
  1056
  1057 3A30			play_sound_edge
  1058 3A30 A5 8E		            lda volume_hit_edge
  1059 3A32 30 16		            bmi silenced_edge
  1060 3A34 D0 06		            bne no_silenced_edge
  1061 3A36 8D 74 32		            sta SHADOW+5    ; $d205
  1062 3A39 C6 8E		            dec volume_hit_edge
  1063 3A3B 60			            rts            
  1064
  1065 3A3C			no_silenced_edge
  1066 3A3C A9 08		            lda #$08
  1067 3A3E 8D 73 32		            sta SHADOW+4    ; $d204
  1068 3A41 A5 8E		            lda volume_hit_edge
  1069 3A43 09 26		            ora #$26
  1070 3A45 8D 74 32		            sta SHADOW+5    ; $d205
  1071 3A48 C6 8E		            dec volume_hit_edge
  1072 3A4A			silenced_edge
  1073 3A4A 60			            rts
  1074
  1075 				; Update score
  1076 				; Score > max score, then exit A = 1, otherwise A = 0
  1077
  1078 3A4B			update_score
  1079 3A4B A5 B5		            lda player_turn
  1080 3A4D C9 01		            cmp #1
  1081 3A4F D0 12		            bne was_player2_turn
  1082 				; was player 1 turn, so player 2 gets a point
  1083 3A51 20 43 3D		            jsr inc_score_p2
  1084 3A54 20 15 3D		            jsr show_score_p2
  1085
  1086 3A57 AD 2F 51		            lda score_p2
  1087 3A5A C9 11		            cmp #MAX_SCORE
  1088 3A5C D0 17		            bne reset_edge_delay
  1089
  1090 3A5E A9 01		            lda #STATE_IN_MENU
  1091 3A60 85 8C		            sta game_state
  1092 3A62 60			            rts
  1093
  1094 3A63			was_player2_turn
  1095 3A63 20 37 3D		            jsr inc_score_p1
  1096 3A66 20 FC 3C		            jsr show_score_p1
  1097
  1098 3A69 AD 2E 51		            lda score_p1
  1099 3A6C C9 11		            cmp #MAX_SCORE
  1100 3A6E D0 05		            bne reset_edge_delay
  1101
  1102 3A70 A9 01		            lda #STATE_IN_MENU
  1103 3A72 85 8C		            sta game_state
  1104 3A74 60			            rts
  1105
  1106 3A75			reset_edge_delay
  1107 3A75 A9 0A		            lda #10
  1108 3A77 85 A3		            sta edge_delay
  1109
  1110 3A79			no_edge
  1111
  1112 3A79 A9 00		            lda #0      ; no end game
  1113 				; anything in A to clear collisions
  1114 3A7B 8D 1E D0		            sta HITCLR
  1115 3A7E 60			            rts
  1116
  1117 				; player 1
  1118 				; - wipe shape at previous y-position
  1119 				; - move player using controller
  1120 				; - set sprite positions
  1121
  1122 3A7F			handle_player1
  1123 3A7F 20 64 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1124
  1125 3A82 A5 8A		            lda player_mode
  1126 3A84 C9 02		            cmp #2
  1127 3A86 F0 0C		            beq do_p1_is_computer
  1128
  1129 3A88 A2 00		            ldx #0              ; player 1
  1130 3A8A 20 83 34		            jsr main_driver
  1131 3A8D 20 1C 3B		            jsr move_player
  1132 				            
  1133 3A90 20 18 3C		            jsr show_p1
  1134 3A93 60			            rts
  1135
  1136 				; p1 now controlled by computer
  1137 3A94			do_p1_is_computer
  1138 3A94 A5 8C		            lda game_state
  1139 3A96 D0 3A		            bne not_in_game
  1140
  1141 3A98 A2 00		            ldx #0              ; player 1
  1142
  1143 3A9A A5 B5		            lda player_turn
  1144 3A9C C9 01		            cmp #1
  1145 3A9E D0 03		            bne not_p1_turn
  1146
  1147 3AA0 20 ED 3A		            jsr cpu_controller
  1148 3AA3			not_p1_turn
  1149
  1150 3AA3 20 1C 3B		            jsr move_player
  1151 3AA6 20 18 3C		            jsr show_p1
  1152 3AA9 60			            rts
  1153
  1154 				; player 2
  1155 				; - wipe shape at previous y-position
  1156 				; - move player using controller
  1157 				; - set sprite positions
  1158
  1159 3AAA			handle_player2
  1160 3AAA 20 79 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1161
  1162 3AAD A5 8A		            lda player_mode
  1163 3AAF D0 0C		            bne do_p2_is_computer
  1164
  1165 3AB1 A2 01		            ldx #1              ; player 2
  1166 3AB3 20 83 34		            jsr main_driver
  1167 3AB6 20 1C 3B		            jsr move_player
  1168 				                        
  1169 3AB9 20 3E 3C		            jsr show_p2
  1170 3ABC 60			            rts
  1171
  1172 				; p2 now controlled by computer
  1173 3ABD			do_p2_is_computer
  1174 3ABD A5 8C		            lda game_state
  1175 3ABF D0 11		            bne not_in_game
  1176
  1177 3AC1 A2 01		            ldx #1              ; player 2
  1178
  1179 3AC3 A5 B5		            lda player_turn
  1180 3AC5 C9 02		            cmp #2
  1181 3AC7 D0 03		            bne not_p2_turn
  1182
  1183 3AC9 20 ED 3A		            jsr cpu_controller
  1184
  1185 3ACC			not_p2_turn
  1186 3ACC 20 1C 3B		            jsr move_player
  1187 3ACF 20 3E 3C		            jsr show_p2
  1188
  1189 3AD2			not_in_game
  1190 3AD2 60			            rts
  1191
  1192 3AD3			reset_cpu_angle_end
  1193 3AD3 A9 00		            lda #0
  1194 3AD5 85 BA		            sta cpu1_angle_end
  1195 3AD7 A9 80		            lda #128
  1196 3AD9 85 BB		            sta cpu2_angle_end
  1197 3ADB 60			            rts
  1198
  1199 3ADC			set_cpu_angle_end
  1200 3ADC A6 B5		            ldx player_turn
  1201 3ADE CA			            dex
  1202 3ADF AD 0A D2		            lda RANDOM
  1203 3AE2 29 07		            and #7
  1204 3AE4 18			            clc
  1205 3AE5 65 AB		            adc ball_angle_end
  1206 3AE7 38			            sec
  1207 3AE8 E9 03		            sbc #3
  1208 3AEA 95 BA		            sta cpu_angle_end,x
  1209 3AEC 60			            rts
  1210
  1211 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1212
  1213 3AED			cpu_controller
  1214 				;            lda ball_angle_end  ; current ball end
  1215 3AED B5 BA		            lda cpu_angle_end,x
  1216 3AEF 85 B0		            sta tmp_angle1
  1217 3AF1 B5 9C		            lda p1_angle,x
  1218 3AF3 85 B1		            sta tmp_angle2
  1219
  1220 3AF5 20 4F 3D		            jsr calc_angle_diff
  1221
  1222 3AF8 A5 B7		            lda tmp_angle_diff
  1223 3AFA F0 1F		            beq comp_in_catch_position
  1224 3AFC A5 B4		            lda tmp_angle_direction
  1225 3AFE D0 0E		            bne move_comp_clockwise
  1226
  1227 3B00 AD 0A D2		            lda RANDOM
  1228 3B03 29 03		            and #3
  1229 3B05 D0 14		            bne comp_in_catch_position
  1230 3B07 B5 9C		            lda p1_angle,x
  1231 3B09 65 88		            adc stick_slow_speed
  1232 3B0B 95 9C		            sta p1_angle,x
  1233 3B0D 60			            rts
  1234 3B0E			move_comp_clockwise
  1235
  1236 3B0E AD 0A D2		            lda RANDOM
  1237 3B11 29 03		            and #3
  1238 3B13 D0 06		            bne comp_in_catch_position
  1239
  1240 3B15 B5 9C		            lda p1_angle,x
  1241 3B17 E5 88		            sbc stick_slow_speed
  1242 3B19 95 9C		            sta p1_angle,x
  1243 3B1B			comp_in_catch_position
  1244 3B1B 60			            rts
  1245
  1246 				; move player 1/2
  1247 				; right - clockwise, left = anti-clockwise
  1248
  1249 				; X = 0, player 1
  1250 				; X = 1, player 2
  1251
  1252 				; Y = driver mode:
  1253 				; 0 : stick
  1254 				; 1 : paddle
  1255 				; 2 : mouse
  1256 				; 3 : computer
  1257 				            
  1258 3B1C			move_player
  1259 3B1C B5 9C		            lda p1_angle,x
  1260 3B1E 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1261 3B20 49 40		            eor #64                     ; perpendicular to the circle angle
  1262 3B22 95 90		            sta p1_shape,x
  1263
  1264 3B24 B4 9C		            ldy p1_angle,x
  1265 3B26 B9 00 40		            lda inner_x_tab,y
  1266 3B29 4A			            lsr
  1267 3B2A 69 20		            adc #inner_x_margin/2
  1268 3B2C 95 94		            sta player1_x,x
  1269 3B2E B9 00 41		            lda inner_y_tab,y
  1270 3B31 4A			            lsr
  1271 3B32 95 98		            sta player1_y,x
  1272
  1273 3B34 B4 90		            ldy p1_shape,x
  1274 3B36 20 B3 3C		            jsr shape_to_ptr
  1275
  1276 3B39 60			            rts
  1277
  1278 				; Set ball at start position
  1279 				; - start angle current player
  1280 				; - start position by inner table
  1281 				; - collision delay set?
  1282
  1283 				; Set ball current position to start position
  1284 				; input:
  1285 				; X = angle of start position
  1286 				; output:
  1287 				; ball position: (ball_current_x, ball_current_y)
  1288 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1289 3B3A			ball_to_start_position
  1290 3B3A BD 00 40		            lda inner_x_tab,x
  1291 3B3D 85 A6		            sta ball_current_x
  1292 3B3F 85 E6		            sta tmp_x1
  1293 3B41 BD 00 41		            lda inner_y_tab,x
  1294 3B44 85 A7		            sta ball_current_y
  1295 3B46 85 E7		            sta tmp_y1
  1296 3B48 60			            rts
  1297
  1298 				; Prepare ball end position
  1299 				; - end angle current player
  1300 				; - end position by outer table
  1301 				; - calculate step size x,y
  1302
  1303 				; Input:
  1304 				; - ball_angle_start
  1305 				; - ball speed
  1306 				; Output:
  1307 				; - ball_andle_end
  1308 				; - ball start position (tmp_x1, tmp_y1)
  1309 				; - ball end position (tmp_x2, tmp_y2)
  1310 				; - step size (step_x, step_y) for ball movement
  1311 3B49			prepare_ball_end_position
  1312 3B49 A5 AA		            lda ball_angle_start
  1313 3B4B 49 80		            eor #128        ; other side
  1314 3B4D 85 AB		            sta ball_angle_end
  1315 3B4F AA			            tax
  1316 3B50 20 D4 3B		            jsr angle_to_end_position
  1317 				                        
  1318 3B53 20 13 3E		            jsr init_current_xy
  1319 				            
  1320 				; move current a little bit            
  1321 3B56 20 80 3E		            jsr move_current_xy
  1322 				; ignore end indicator, since we only just started
  1323
  1324
  1325 3B59 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1326 3B5B 85 A4		            sta bat_collision_delay
  1327 3B5D 60			            rts
  1328
  1329 				; x = angle 0..255
  1330 3B5E			outer_angle_to_start_position
  1331 3B5E BD 00 10		            lda outer_x_256,x
  1332 3B61 85 A6		            sta ball_current_x
  1333 3B63 85 E6		            sta tmp_x1
  1334 3B65 BD 00 11		            lda outer_y_256,x
  1335 3B68 85 A7		            sta ball_current_y
  1336 3B6A 85 E7		            sta tmp_y1
  1337 3B6C 60			            rts
  1338
  1339 3B6D			ball_current_to_start_position
  1340 3B6D A5 A6		            lda ball_current_x
  1341 3B6F 85 E6		            sta tmp_x1
  1342 3B71 A5 A7		            lda ball_current_y
  1343 3B73 85 E7		            sta tmp_y1
  1344 3B75 60			            rts
  1345
  1346 				; Ball collides with bat
  1347 				; - start ball angle = end ball angle
  1348 				; - calculate diff between bat and ball end angle
  1349 				; - calculate new end angle
  1350 				; - Set ball at start position
  1351 				; - Prepare ball end position
  1352
  1353 3B76			bounce_bat_ball
  1354 				; set new start of ball
  1355 				; @todo check ball angles
  1356 				; set new ball start angle (= previous end angle)
  1357 3B76 A5 AB		            lda ball_angle_end
  1358 3B78 85 AA		            sta ball_angle_start
  1359 				            
  1360 				; alternative?
  1361 				            ;ldx ball_angle_start
  1362 				            ;jsr ball_to_start_position          
  1363 3B7A 20 6D 3B		            jsr ball_current_to_start_position
  1364
  1365 				; which player hit the ball?
  1366 				; collision bits:
  1367 				; xxxxx1x1 : 1 is player1 collision
  1368 				; xxxx1010 : 2 is player2 collision
  1369
  1370 3B7D A5 A0		            lda mp_collision
  1371 3B7F 4A			            lsr
  1372 3B80 4A			            lsr
  1373 3B81 05 A0		            ora mp_collision
  1374 3B83 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1375
  1376 				; who's turn is it and who bounced the ball?
  1377
  1378 3B85 25 B5		            and player_turn
  1379 3B87 F0 06		            beq no_switch_turn
  1380
  1381 3B89 A5 B5		            lda player_turn
  1382 3B8B 49 03		            eor #3              ; 1 => 2, 2 => 1
  1383 3B8D 85 B5		            sta player_turn
  1384
  1385 3B8F			no_switch_turn
  1386 3B8F 20 54 37		            jsr turn_color_ball
  1387
  1388 3B92 A5 B5		            lda player_turn
  1389 3B94 49 03		            eor #3
  1390 3B96 AA			            tax
  1391 3B97 CA			            dex                 ; index 0,1 (player = 1,2)
  1392 3B98 B5 9C		            lda p1_angle,x
  1393
  1394 				; Calculate diff between bat angle position and new ball start position
  1395 3B9A 85 B0		            sta tmp_angle1
  1396
  1397 3B9C A5 AA		            lda ball_angle_start
  1398 3B9E 85 B1		            sta tmp_angle2
  1399
  1400 3BA0 20 4F 3D		            jsr calc_angle_diff
  1401
  1402 3BA3 0A			            asl
  1403 3BA4 0A			            asl
  1404 3BA5 0A			            asl
  1405 3BA6 85 B3		            sta angle_diff_bat
  1406
  1407 3BA8 A5 B0		            lda tmp_angle1
  1408 3BAA 18			            clc
  1409 3BAB 65 B2		            adc add_to_angle
  1410 3BAD 49 80		            eor #128            ; other side
  1411 3BAF 85 B0		            sta tmp_angle1
  1412 				            
  1413 3BB1 A5 B4		            lda tmp_angle_direction
  1414 3BB3 D0 0A		            bne diff_clockwise
  1415 				; diff counter clockwise
  1416 3BB5 A5 B0		            lda tmp_angle1
  1417 3BB7 18			            clc
  1418 3BB8 65 B3		            adc angle_diff_bat
  1419 3BBA 85 B0		            sta tmp_angle1
  1420 3BBC 4C C6 3B		            jmp calc_done            
  1421
  1422 3BBF			diff_clockwise
  1423 3BBF A5 B0		            lda tmp_angle1
  1424 3BC1 38			            sec
  1425 3BC2 E5 B3		            sbc angle_diff_bat
  1426 3BC4 85 B0		            sta tmp_angle1
  1427 				            
  1428 				; calculation done            
  1429 3BC6			calc_done
  1430 3BC6 A5 B0		            lda tmp_angle1
  1431 3BC8 85 AB		            sta ball_angle_end
  1432 3BCA AA			            tax
  1433 3BCB 20 D4 3B		            jsr angle_to_end_position
  1434
  1435 3BCE 20 DC 3A		            jsr set_cpu_angle_end
  1436
  1437 3BD1 4C 13 3E		            jmp init_current_xy
  1438
  1439 				; x = angle 0..255
  1440 3BD4			angle_to_end_position
  1441 3BD4 BD 00 10		            lda outer_x_256,x
  1442 3BD7 85 E8		            sta tmp_x2
  1443 3BD9 BD 00 11		            lda outer_y_256,x
  1444 3BDC 85 E9		            sta tmp_y2
  1445 3BDE 60			            rts
  1446
  1447 3BDF			wipe_ball
  1448 3BDF A5 A7		            lda ball_current_y
  1449 3BE1 4A			            lsr
  1450 3BE2 69 06		            adc #ball_top_margin
  1451 3BE4 AA			            tax                 ; x = real y position on screen
  1452 3BE5 A9 00		            lda #0
  1453 3BE7 9D 80 0D		            sta msl_area,x
  1454 3BEA 9D 81 0D		            sta msl_area+1,x
  1455 3BED 9D 82 0D		            sta msl_area+2,x
  1456 3BF0 9D 83 0D		            sta msl_area+3,x
  1457 3BF3 60			            rts
  1458
  1459 3BF4			show_ball
  1460 3BF4 A5 A7		            lda ball_current_y
  1461 3BF6 4A			            lsr
  1462 3BF7 69 06		            adc #ball_top_margin
  1463 3BF9 AA			            tax                 ; x = real y position on screen
  1464
  1465 3BFA A9 02		            lda #%00000010
  1466 3BFC 9D 80 0D		            sta msl_area,x
  1467 3BFF 9D 83 0D		            sta msl_area+3,x
  1468 3C02 A9 07		            lda #%00000111
  1469 3C04 9D 81 0D		            sta msl_area+1,x
  1470 3C07 9D 82 0D		            sta msl_area+2,x
  1471 				            
  1472 3C0A A5 A6		            lda ball_current_x
  1473 3C0C 4A			            lsr
  1474 3C0D 69 45		            adc #ball_left_margin
  1475 3C0F 8D 05 D0		            sta HPOSM1
  1476 3C12 69 02		            adc #2
  1477 3C14 8D 04 D0		            sta HPOSM0
  1478 				                        
  1479 3C17 60			            rts
  1480 				            
  1481 3C18			show_p1
  1482 				; y position
  1483 3C18 A5 98		            lda player1_y
  1484 3C1A 18			            clc
  1485 3C1B 69 01		            adc #upper_margin
  1486 3C1D AA			            tax
  1487
  1488 3C1E A0 00		            ldy #0
  1489 3C20			show_shape1
  1490 3C20 B1 84		            lda (shape_ptr),y
  1491 3C22 9D 00 0E		            sta p0_area,x 
  1492 3C25 C8			            iny
  1493 3C26 B1 84		            lda (shape_ptr),y
  1494 3C28 9D 00 0F		            sta p2_area,x
  1495 3C2B E8			            inx
  1496 3C2C C8			            iny
  1497 3C2D C0 20		            cpy #32
  1498 3C2F D0 EF		            bne show_shape1
  1499
  1500 				; x position
  1501 3C31 A5 94		            lda player1_x
  1502 3C33 18			            clc
  1503 3C34 69 20		            adc #left_margin
  1504 3C36 85 81		            sta shadow_HPOSP0
  1505 3C38 69 08		            adc #8
  1506 3C3A 8D 02 D0		            sta HPOSP2
  1507 3C3D 60			            rts
  1508
  1509 3C3E			show_p2
  1510 				; y position
  1511 3C3E A5 99		            lda player2_y
  1512 3C40 18			            clc
  1513 3C41 69 01		            adc #upper_margin
  1514 3C43 AA			            tax
  1515
  1516 3C44 A0 00		            ldy #0
  1517 3C46			show_shape2
  1518 3C46 B1 84		            lda (shape_ptr),y
  1519 3C48 9D 80 0E		            sta p1_area,x
  1520 3C4B C8			            iny
  1521 3C4C B1 84		            lda (shape_ptr),y
  1522 3C4E 9D 80 0F		            sta p3_area,x
  1523 3C51 E8			            inx
  1524 3C52 C8			            iny
  1525 3C53 C0 20		            cpy #32
  1526 3C55 D0 EF		            bne show_shape2
  1527
  1528 				; x position
  1529 3C57 A5 95		            lda player2_x
  1530 3C59 18			            clc
  1531 3C5A 69 20		            adc #left_margin
  1532 3C5C 85 82		            sta shadow_HPOSP1
  1533 3C5E 69 08		            adc #8
  1534 3C60 8D 03 D0		            sta HPOSP3
  1535 3C63 60			            rts
  1536
  1537 3C64			wipe_p1
  1538 3C64 A5 98		            lda player1_y
  1539 3C66 18			            clc
  1540 3C67 69 01		            adc #upper_margin
  1541 3C69 AA			            tax
  1542 				            
  1543 3C6A A0 10		            ldy #16
  1544 3C6C A9 00		            lda #0
  1545 3C6E			wipe_it1            
  1546 3C6E 9D 00 0E		            sta p0_area,x 
  1547 3C71 9D 00 0F		            sta p2_area,x
  1548 3C74 E8			            inx
  1549 3C75 88			            dey
  1550 3C76 D0 F6		            bne wipe_it1 
  1551 3C78 60			            rts
  1552
  1553 3C79			wipe_p2
  1554 3C79 A5 99		            lda player2_y
  1555 3C7B 18			            clc
  1556 3C7C 69 01		            adc #upper_margin
  1557 3C7E AA			            tax
  1558 				            
  1559 3C7F A0 10		            ldy #16
  1560 3C81 A9 00		            lda #0
  1561 3C83			wipe_it2            
  1562 3C83 9D 80 0E		            sta p1_area,x
  1563 3C86 9D 80 0F		            sta p3_area,x
  1564 3C89 E8			            inx
  1565 3C8A 88			            dey
  1566 3C8B D0 F6		            bne wipe_it2 
  1567 3C8D 60			            rts
  1568
  1569 3C8E			make_shape_index
  1570 3C8E A9 00		            lda #<pm_shapes
  1571 3C90 85 84		            sta shape_ptr
  1572 3C92 A9 60		            lda #>pm_shapes
  1573 3C94 85 85		            sta shape_ptr+1
  1574 				            
  1575 3C96 A2 00		            ldx #0
  1576 3C98			fill_pm_tab
  1577 3C98 A5 84		            lda shape_ptr
  1578 3C9A 9D 00 14		            sta pm_shape_lo,x
  1579 3C9D A5 85		            lda shape_ptr+1
  1580 3C9F 9D 80 14		            sta pm_shape_hi,x
  1581 				            
  1582 3CA2 A5 84		            lda shape_ptr
  1583 3CA4 18			            clc
  1584 3CA5 69 20		            adc #32
  1585 3CA7 85 84		            sta shape_ptr
  1586 3CA9 A5 85		            lda shape_ptr+1
  1587 3CAB 69 00		            adc #0
  1588 3CAD 85 85		            sta shape_ptr+1
  1589 				            
  1590 3CAF E8			            inx
  1591 3CB0 10 E6		            bpl fill_pm_tab
  1592 				            
  1593 3CB2 60			            rts
  1594 				            
  1595 				; there are 128 shapes, each 32 bytes
  1596
  1597 				; y = shape index
  1598 3CB3			shape_to_ptr
  1599 3CB3 B9 00 14		            lda pm_shape_lo,y
  1600 3CB6 85 84		            sta shape_ptr
  1601 3CB8 B9 80 14		            lda pm_shape_hi,y
  1602 3CBB 85 85		            sta shape_ptr+1
  1603
  1604 3CBD 60			            rts
  1605
  1606 				; turn 1024 tables into 256 bytes for ball edge lookup
  1607 3CBE			make_outer_256
  1608 3CBE A0 00		            ldy #0
  1609 3CC0 A2 00		            ldx #0
  1610 3CC2			conv_256
  1611 3CC2 BD 00 44		            lda outer_x_tab,x
  1612 3CC5 99 00 10		            sta outer_x_256,y
  1613 3CC8 BD 00 45		            lda outer_x_tab+$100,x
  1614 3CCB 99 40 10		            sta outer_x_256+64,y
  1615 3CCE BD 00 46		            lda outer_x_tab+$200,x
  1616 3CD1 99 80 10		            sta outer_x_256+128,y
  1617 3CD4 BD 00 47		            lda outer_x_tab+$300,x
  1618 3CD7 99 C0 10		            sta outer_x_256+192,y
  1619 				            
  1620 3CDA BD 00 48		            lda outer_y_tab,x
  1621 3CDD 99 00 11		            sta outer_y_256,y
  1622 3CE0 BD 00 49		            lda outer_y_tab+$100,x
  1623 3CE3 99 40 11		            sta outer_y_256+64,y
  1624 3CE6 BD 00 4A		            lda outer_y_tab+$200,x
  1625 3CE9 99 80 11		            sta outer_y_256+128,y
  1626 3CEC BD 00 4B		            lda outer_y_tab+$300,x
  1627 3CEF 99 C0 11		            sta outer_y_256+192,y
  1628
  1629 3CF2 E8			            inx
  1630 3CF3 E8			            inx
  1631 3CF4 E8			            inx
  1632 3CF5 E8			            inx
  1633 3CF6 C8			            iny
  1634 3CF7 C0 40		            cpy #64
  1635 3CF9 D0 C7		            bne conv_256            
  1636 3CFB 60			            rts
  1637
  1638 3CFC			show_score_p1
  1639 3CFC AD 2E 51		            lda score_p1
  1640 3CFF 4A			            lsr
  1641 3D00 4A			            lsr
  1642 3D01 4A			            lsr
  1643 3D02 4A			            lsr
  1644 3D03 F0 02		            beq do_space1
  1645 3D05 09 10		            ora #16
  1646 3D07			do_space1
  1647 3D07 8D 0B 51		            sta score_chars_p1
  1648 3D0A AD 2E 51		            lda score_p1
  1649 3D0D 29 0F		            and #15
  1650 3D0F 09 10		            ora #16
  1651 3D11 8D 0C 51		            sta score_chars_p1+1
  1652 3D14 60			            rts
  1653
  1654 3D15			show_score_p2
  1655 3D15 AD 2F 51		            lda score_p2
  1656 3D18 4A			            lsr
  1657 3D19 4A			            lsr
  1658 3D1A 4A			            lsr
  1659 3D1B 4A			            lsr
  1660 3D1C F0 02		            beq do_space2
  1661 3D1E 09 10		            ora #16
  1662 3D20			do_space2
  1663 3D20 8D 2B 51		            sta score_chars_p2
  1664 3D23 AD 2F 51		            lda score_p2
  1665 3D26 29 0F		            and #15
  1666 3D28 09 10		            ora #16
  1667 3D2A 8D 2C 51		            sta score_chars_p2+1
  1668 3D2D 60			            rts
  1669 				                        
  1670 3D2E			reset_score
  1671 3D2E A9 00		            lda #0
  1672 3D30 8D 2E 51		            sta score_p1
  1673 3D33 8D 2F 51		            sta score_p2
  1674 3D36 60			            rts            
  1675 				         
  1676 3D37			inc_score_p1
  1677 3D37 F8			            sed
  1678 3D38 AD 2E 51		            lda score_p1
  1679 3D3B 18			            clc
  1680 3D3C 69 01		            adc #1
  1681 3D3E 8D 2E 51		            sta score_p1    
  1682 3D41 D8			            cld
  1683 3D42 60			            rts
  1684
  1685 3D43			inc_score_p2
  1686 3D43 F8			            sed
  1687 3D44 AD 2F 51		            lda score_p2
  1688 3D47 18			            clc
  1689 3D48 69 01		            adc #1
  1690 3D4A 8D 2F 51		            sta score_p2
  1691 3D4D D8			            cld
  1692 3D4E 60			            rts
  1693
  1694 				; calculate the difference between angle1 and angle2
  1695
  1696 				; input:
  1697 				; tmp_angle1 (0..255)
  1698 				; tmp_angle2 (0..255)
  1699
  1700 				; output:
  1701 				; tmp_angle_diff, A: difference between angle1 and angle2
  1702 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1703
  1704 3D4F			calc_angle_diff
  1705 3D4F A9 00		            lda #0
  1706 3D51 85 B2		            sta add_to_angle
  1707 3D53 85 B4		            sta tmp_angle_direction
  1708
  1709 				; make sure we can compare angles, otherwise add $40 to angles
  1710 3D55 A5 B0		            lda tmp_angle1
  1711 3D57 C9 C0		            cmp #$c0
  1712 3D59 B0 06		            bcs too_large
  1713 3D5B A5 B1		            lda tmp_angle2
  1714 3D5D C9 C0		            cmp #$c0
  1715 3D5F 90 12		            bcc not_too_large
  1716 3D61			too_large
  1717 3D61 A5 B0		            lda tmp_angle1
  1718 3D63 38			            sec
  1719 3D64 E9 40		            sbc #$40
  1720 3D66 85 B0		            sta tmp_angle1
  1721 				            
  1722 3D68 A5 B1		            lda tmp_angle2
  1723 3D6A 38			            sec
  1724 3D6B E9 40		            sbc #$40
  1725 3D6D 85 B1		            sta tmp_angle2
  1726 				            
  1727 3D6F A9 40		            lda #$40
  1728 3D71 85 B2		            sta add_to_angle
  1729
  1730 3D73			not_too_large
  1731 3D73 A5 B1		            lda tmp_angle2
  1732 3D75 C5 B0		            cmp tmp_angle1
  1733 3D77 90 0A		            bcc angle2_smaller_angle1
  1734 				; ball >= play
  1735 3D79 38			            sec
  1736 3D7A E5 B0		            sbc tmp_angle1
  1737 3D7C 85 B7		            sta tmp_angle_diff
  1738 				            
  1739 3D7E E6 B4		            inc tmp_angle_direction
  1740 3D80 4C 8A 3D		            jmp diff_calculated
  1741 				                        
  1742 3D83			angle2_smaller_angle1
  1743 3D83 A5 B0		            lda tmp_angle1
  1744 3D85 38			            sec
  1745 3D86 E5 B1		            sbc tmp_angle2
  1746 3D88 85 B7		            sta tmp_angle_diff
  1747
  1748 3D8A			diff_calculated
  1749 3D8A A5 B7		            lda tmp_angle_diff           
  1750 3D8C 60			            rts
  1751
  1752 				; X = angle
  1753 				; lookup magnitude of angle 0 to angle X
  1754 3D8D			angle_to_magnitude
  1755 3D8D BD 00 4C		            lda magnitudes_lo,x
  1756 3D90 85 B8		            sta magnitude
  1757 3D92 BD 00 4D		            lda magnitudes_hi,x
  1758 3D95 85 B9		            sta magnitude+1
  1759 3D97 60			            rts
  1760
  1761 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1762 3D98			calc_abs_tmp_dx
  1763 3D98 A5 E8		            lda tmp_x2
  1764 3D9A 38			            sec
  1765 3D9B E5 E6		            sbc tmp_x1
  1766 3D9D B0 05		            bcs x2_le
  1767 3D9F 49 FF		            eor #255
  1768 3DA1 18			            clc
  1769 3DA2 69 01		            adc #1
  1770 3DA4 85 F2		x2_le       sta tmp_dx
  1771
  1772 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1773 3DA6			calc_abs_tmp_dy
  1774 3DA6 A5 E9		            lda tmp_y2
  1775 3DA8 38			            sec
  1776 3DA9 E5 E7		            sbc tmp_y1
  1777 3DAB B0 05		            bcs y2_le
  1778 3DAD 49 FF		            eor #255
  1779 3DAF 18			            clc
  1780 3DB0 69 01		            adc #1
  1781 3DB2 85 F3		y2_le       sta tmp_dy
  1782 3DB4 60			            rts
  1783 				            
  1784 3DB5			calc_dx_div_magnitude
  1785 3DB5 A9 00		            lda #0
  1786 3DB7 85 E2		            sta _dividend
  1787 3DB9 A5 F2		            lda tmp_dx
  1788 3DBB 85 E3		            sta _dividend+1
  1789
  1790 3DBD A5 B9		            lda magnitude+1
  1791 3DBF 85 E0		            sta _divisor
  1792 3DC1 A9 00		            lda #0
  1793 3DC3 85 E1		            sta _divisor+1
  1794 				            
  1795 3DC5 20 ED 3D		            jsr _div16
  1796
  1797 				; todo multiply result with velocity            
  1798 3DC8 A5 E2		            lda _result
  1799 3DCA 85 EE		            sta step_x
  1800 3DCC A5 E3		            lda _result+1
  1801 3DCE 85 EF		            sta step_x+1
  1802 				            
  1803 3DD0 60			            rts
  1804 				            
  1805 3DD1			calc_dy_div_magnitude
  1806 3DD1 A9 00		            lda #0
  1807 3DD3 85 E2		            sta _dividend
  1808 3DD5 A5 F3		            lda tmp_dy
  1809 3DD7 85 E3		            sta _dividend+1
  1810 				            
  1811 3DD9 A5 B9		            lda magnitude+1
  1812 3DDB 85 E0		            sta _divisor
  1813 3DDD A9 00		            lda #0
  1814 3DDF 85 E1		            sta _divisor+1
  1815
  1816 3DE1 20 ED 3D		            jsr _div16
  1817 				            
  1818 				; todo multiply result with velocity
  1819 3DE4 A5 E2		            lda _result
  1820 3DE6 85 F0		            sta step_y
  1821 3DE8 A5 E3		            lda _result+1
  1822 3DEA 85 F1		            sta step_y+1
  1823 				            
  1824 3DEC 60			            rts
  1825
  1826 				; divide 16bit
  1827 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1828
  1829 				; _result = _dividend / divisor
  1830
  1831 3DED A9 00		_div16      lda #0          ;preset remainder to 0
  1832 3DEF 85 E4		            sta _remainder
  1833 3DF1 85 E5		            sta _remainder+1
  1834 3DF3 A2 10		            ldx #16         ;repeat for each bit: ...
  1835
  1836 3DF5 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1837 3DF7 26 E3		            rol _dividend+1  
  1838 3DF9 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1839 3DFB 26 E5		            rol _remainder+1
  1840 3DFD A5 E4		            lda _remainder
  1841 3DFF 38			            sec
  1842 3E00 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1843 3E02 A8			            tay         ;lb result -> Y, for we may need it later
  1844 3E03 A5 E5		            lda _remainder+1
  1845 3E05 E5 E1		            sbc _divisor+1
  1846 3E07 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1847
  1848 3E09 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1849 3E0B 84 E4		            sty _remainder   
  1850 3E0D E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1851
  1852 3E0F CA			_div_skip   dex
  1853 3E10 D0 E3		            bne _div_loop 
  1854 3E12 60			            rts
  1855
  1856 				; Calculations for step size
  1857
  1858 				; not optimised for speed or size
  1859 				; step should be set according to the angle
  1860
  1861 				; move in straight line (x1,y1) to (x2,y2)
  1862
  1863 				; 1. set start/end of line
  1864 				; set (tmp_x1, tmp_y1)
  1865 				; set (tmp_x2, tmp_y2)
  1866
  1867 				; 2. init. current_x, current_y
  1868 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1869 				; - calculates step sizes for x,y
  1870 				; - calculated directions for x,y
  1871 				;            jsr init_current_xy
  1872
  1873 				; 3. use current_x, current_y to plot or set a position
  1874 				;            lda current_x+1
  1875 				;            sta x_position
  1876 				;            lda current_y+1
  1877 				;            sta y_position
  1878 				;            jsr plot_pixel
  1879
  1880 				; 4. move current_x, current_y to next position on line
  1881 				; A=0 still moving
  1882 				;           move_current_xy
  1883
  1884 3E13			init_current_xy
  1885 3E13 A9 7F		            lda #$7f      ; was 128 for half pixel
  1886 3E15 85 EA		            sta current_x
  1887 3E17 85 EC		            sta current_y
  1888
  1889 3E19 A5 E6		            lda tmp_x1
  1890 3E1B 85 EB		            sta current_x+1
  1891 				            
  1892 3E1D A5 E7		            lda tmp_y1
  1893 3E1F 85 ED		            sta current_y+1
  1894
  1895 				; dx = abs(tmp_x1 - tmp_x2)
  1896 3E21 20 98 3D		            jsr calc_abs_tmp_dx
  1897
  1898 				; dy = abs(tmp_y1 - tmp_y2)
  1899 3E24 20 A6 3D		            jsr calc_abs_tmp_dy
  1900
  1901 				; set directions
  1902 3E27 A5 E6		            lda tmp_x1
  1903 3E29 C5 E8		            cmp tmp_x2
  1904 3E2B 90 04		            bcc x1_smaller_x2
  1905 				; x1 >= x2
  1906 3E2D A9 01		            lda #1
  1907 3E2F D0 02		            bne set_dir_x
  1908 3E31			x1_smaller_x2
  1909 3E31 A9 00		            lda #0
  1910 3E33			set_dir_x
  1911 3E33 85 FA		            sta dir_x
  1912 				            
  1913 3E35 A5 E7		            lda tmp_y1
  1914 3E37 C5 E9		            cmp tmp_y2
  1915 3E39 90 04		            bcc y1_smaller_y2
  1916 				; y1 >= y2
  1917 3E3B A9 01		            lda #1
  1918 3E3D D0 02		            bne set_dir_y
  1919 3E3F			y1_smaller_y2
  1920 3E3F A9 00		            lda #0
  1921 3E41			set_dir_y
  1922 3E41 85 FB		            sta dir_y
  1923
  1924 				; Calculate diff between start angle and end angle
  1925
  1926 3E43 A5 AA		            lda ball_angle_start
  1927 3E45 85 B0		            sta tmp_angle1
  1928 3E47 A5 AB		            lda ball_angle_end
  1929 3E49 85 B1		            sta tmp_angle2
  1930 				            
  1931 3E4B 20 4F 3D		            jsr calc_angle_diff
  1932
  1933 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1934 3E4E A6 B7		            ldx tmp_angle_diff
  1935 3E50 20 8D 3D		            jsr angle_to_magnitude
  1936 				            
  1937 3E53 20 B5 3D		            jsr calc_dx_div_magnitude
  1938 3E56 20 D1 3D		            jsr calc_dy_div_magnitude
  1939 				            
  1940 				; Calculate step size by ball speed
  1941 				            
  1942 				; step_x = step_x * speed
  1943 				            
  1944 3E59 A5 EE		            lda step_x
  1945 3E5B 85 F6		            sta _multiplicand
  1946 3E5D A5 EF		            lda step_x+1
  1947 3E5F 85 F7		            sta _multiplicand+1
  1948 3E61 A5 AC		            lda ball_speed
  1949 3E63 85 F8		            sta _multiplier
  1950
  1951 3E65 20 F0 35		            jsr _multi8
  1952 				;result in .A (low byte, also in .X) and .Y (high byte)
  1953 3E68 85 EE		            sta step_x
  1954 3E6A 84 EF		            sty step_x+1
  1955 3E6C			skip_step_x_hi
  1956 				            
  1957 				; step_y = step_y * speed
  1958
  1959 3E6C A5 F0		            lda step_y
  1960 3E6E 85 F6		            sta _multiplicand
  1961 3E70 A5 F1		            lda step_y+1
  1962 3E72 85 F7		            sta _multiplicand+1
  1963 3E74 A5 AC		            lda ball_speed
  1964 3E76 85 F8		            sta _multiplier
  1965
  1966 3E78 20 F0 35		            jsr _multi8
  1967 				;result in .A (low byte, also in .X) and .Y (high byte)
  1968 3E7B 85 F0		            sta step_y
  1969 3E7D 84 F1		            sty step_y+1
  1970 3E7F			skip_step_y_hi
  1971
  1972 3E7F 60			            rts
  1973
  1974 				; Move ball position 
  1975 				; Add one step, until end reached
  1976 				; Input:
  1977 				; - step size (step_x, step_y)
  1978 				; - current ball position (current_x, current_y)
  1979 				; - end position (tmp_x2, tmp_y2)
  1980 				; Output:
  1981 				; A (0 = still moving, 1 = end reached)
  1982 3E80			move_current_xy
  1983 3E80 A9 00		            lda #0
  1984 3E82 85 FC		            sta line_end_x
  1985 3E84 85 FD		            sta line_end_y
  1986
  1987 				; sets line end indicators here
  1988 3E86 20 A3 3E		            jsr move_current_x
  1989 3E89 20 E3 3E		            jsr move_current_y
  1990
  1991 3E8C A5 FC		            lda line_end_x
  1992 3E8E 25 FD		            and line_end_y
  1993 3E90 F0 10		            beq no_end_reached
  1994 				            
  1995 				; set current to (x2,y2)
  1996 3E92 A5 E8		            lda tmp_x2
  1997 3E94 85 EB		            sta current_x+1
  1998 3E96 A5 E9		            lda tmp_y2
  1999 3E98 85 ED		            sta current_y+1
  2000 				            
  2001 3E9A A9 00		            lda #0
  2002 3E9C 85 EA		            sta current_x
  2003 3E9E 85 EC		            sta current_y
  2004 				            
  2005 3EA0 A9 01		            lda #1 ; end reached
  2006 				            
  2007 3EA2			no_end_reached  ; A = 0
  2008 3EA2 60			            rts
  2009
  2010 3EA3			move_current_x
  2011 3EA3 A5 FA		            lda dir_x
  2012 3EA5 D0 18		            bne move_current_left
  2013
  2014 				; move right, add
  2015 3EA7 A5 EA		            lda current_x
  2016 3EA9 18			            clc
  2017 3EAA 65 EE		            adc step_x
  2018 3EAC 85 EA		            sta current_x
  2019 3EAE A5 EB		            lda current_x+1
  2020 3EB0 65 EF		            adc step_x+1
  2021 3EB2 85 EB		            sta current_x+1
  2022
  2023 3EB4 A5 EB		            lda current_x+1
  2024 3EB6 C5 E8		            cmp tmp_x2
  2025 3EB8 90 04		            bcc no_line_end
  2026 3EBA			exact_end_x
  2027 3EBA A9 01		            lda #1
  2028 3EBC 85 FC		            sta line_end_x 
  2029 3EBE			no_line_end
  2030 3EBE 60			            rts
  2031 				            
  2032 3EBF			move_current_left
  2033 3EBF A5 EA		            lda current_x
  2034 3EC1 38			            sec
  2035 3EC2 E5 EE		            sbc step_x
  2036 3EC4 90 01		            bcc clear_skip
  2037 3EC6 EA			            nop
  2038 3EC7			clear_skip
  2039 3EC7 85 EA		            sta current_x
  2040 3EC9 A5 EB		            lda current_x+1
  2041 3ECB E5 EF		            sbc step_x+1
  2042 3ECD 85 EB		            sta current_x+1
  2043 3ECF 90 0B		            bcc below_zero
  2044 				                        
  2045 3ED1 A5 E8		            lda tmp_x2
  2046 3ED3 C5 EB		            cmp current_x+1
  2047 3ED5 90 E7		            bcc no_line_end
  2048 3ED7 A9 01		            lda #1
  2049 3ED9 85 FC		            sta line_end_x            
  2050 3EDB 60			            rts
  2051 3EDC			below_zero            
  2052 3EDC A9 01		            lda #1
  2053 3EDE 85 FC		            sta line_end_x
  2054 3EE0 85 FD		            sta line_end_y
  2055 3EE2 60			            rts
  2056 3EE3			move_current_y
  2057 3EE3 A5 FB		            lda dir_y
  2058 3EE5 D0 18		            bne move_current_up
  2059
  2060 				; move down, add
  2061 3EE7 A5 EC		            lda current_y
  2062 3EE9 18			            clc
  2063 3EEA 65 F0		            adc step_y
  2064 3EEC 85 EC		            sta current_y
  2065 3EEE A5 ED		            lda current_y+1
  2066 3EF0 65 F1		            adc step_y+1
  2067 3EF2 85 ED		            sta current_y+1
  2068 				            
  2069 3EF4 A5 ED		            lda current_y+1
  2070 3EF6 C5 E9		            cmp tmp_y2
  2071 3EF8 90 C4		            bcc no_line_end
  2072 3EFA			exact_end_y
  2073 3EFA A9 01		            lda #1
  2074 3EFC 85 FD		            sta line_end_y
  2075 3EFE 60			            rts
  2076
  2077 3EFF			move_current_up
  2078 3EFF A5 EC		            lda current_y
  2079 3F01 38			            sec
  2080 3F02 E5 F0		            sbc step_y
  2081 3F04 85 EC		            sta current_y
  2082 3F06 A5 ED		            lda current_y+1
  2083 3F08 E5 F1		            sbc step_y+1
  2084 3F0A 90 D0		            bcc below_zero
  2085 3F0C 85 ED		            sta current_y+1
  2086 				            
  2087 3F0E A5 E9		            lda tmp_y2
  2088 3F10 C5 ED		            cmp current_y+1
  2089 3F12 90 AA		            bcc no_line_end
  2090 3F14 A9 01		            lda #1
  2091 3F16 85 FD		            sta line_end_y
  2092 3F18 60			            rts                            
  2093 				            
  2094 3F19			init_sprites
  2095 3F19 A2 00		            ldx #0
  2096 3F1B 8A			            txa
  2097 3F1C			set_p
  2098 3F1C 9D 00 0E		            sta p0_area,x
  2099 3F1F 9D 80 0E		            sta p1_area,x
  2100 3F22 9D 00 0F		            sta p2_area,x
  2101 3F25 9D 80 0F		            sta p3_area,x
  2102 3F28 E8			            inx
  2103 3F29 10 F1		            bpl set_p
  2104
  2105 3F2B A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2106 3F2D 8D 6F 02		            sta GPRIOR
  2107
  2108 3F30 A9 0C		            lda #>pm_area
  2109 3F32 8D 07 D4		            sta PMBASE
  2110
  2111 3F35 A9 03		            lda #3          ; P/M both on
  2112 3F37 8D 1D D0		            sta GRACTL
  2113
  2114 3F3A A9 90		            lda #$90
  2115 3F3C 8D 02 D0		            sta HPOSP2
  2116 3F3F A9 A0		            lda #$A0
  2117 3F41 8D 03 D0		            sta HPOSP3  
  2118 3F44 60			            rts
  2119
  2120 3F45			init_colors
  2121 3F45 A9 5A		            lda #BASE_COLOR_P1+10
  2122 3F47 8D C2 02		            sta PCOLR2
  2123 3F4A A9 BA		            lda #BASE_COLOR_P2+10
  2124 3F4C 8D C3 02		            sta PCOLR3
  2125 				            
  2126 3F4F A9 00		            lda #0
  2127 3F51 8D C6 02		            sta COLOR2
  2128
  2129 3F54 A9 0E		            lda #HEADER_FG_COLOR
  2130 3F56 8D C5 02		            sta COLOR1
  2131
  2132 3F59 A9 50		            lda #HEADER_P1_COLOR
  2133 3F5B 8D C0 02		            sta PCOLR0
  2134 3F5E A9 B0		            lda #HEADER_P2_COLOR
  2135 3F60 8D C1 02		            sta PCOLR1
  2136
  2137 3F63 60			            rts
  2138
  2139 3F64			previous_consol
  2140 3F64 00			            dta 0
  2141
  2142 3F65			current_level_index
  2143 3F65 00			            dta 0
  2144 = 0007			NR_OF_LEVELS = 7
  2145 = 0000			INIT_LEVEL_INDEX = 0
  2146 3F66			level_speeds
  2147 3F66 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2148 				;level_speeds_lo
  2149 				;            dta 128
  2150 3F6D			stick_slow_speed_tab
  2151 3F6D 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2152 3F74			stick_fast_speed_tab
  2153 3F74 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2154
  2155 				; X = level (0..NR_OF_LEVELS)
  2156 3F7B			set_level_ball_speed
  2157 3F7B BD 6D 3F		            lda stick_slow_speed_tab,x
  2158 3F7E 85 88		            sta stick_slow_speed
  2159 3F80 BD 74 3F		            lda stick_fast_speed_tab,x
  2160 3F83 85 89		            sta stick_fast_speed
  2161
  2162 3F85 BD 66 3F		            lda level_speeds,x
  2163 3F88 85 AC		            sta ball_speed
  2164 3F8A 8A			            txa
  2165 3F8B 18			            clc
  2166 3F8C 69 01		            adc #1
  2167 3F8E 09 10		            ora #16
  2168 3F90 8D AB 52		            sta level_char
  2169 3F93 60			            rts
  2170 				            
  2171 3F94			increase_level
  2172 3F94 EE 65 3F		            inc current_level_index
  2173 3F97 AD 65 3F		            lda current_level_index
  2174 3F9A C9 07		            cmp #NR_OF_LEVELS
  2175 3F9C D0 05		            bne ok_level
  2176 3F9E A9 00		            lda #INIT_LEVEL_INDEX
  2177 3FA0 8D 65 3F		            sta current_level_index
  2178 3FA3			ok_level           
  2179 3FA3 60			            rts
  2180
  2181 3FA4			increase_player_mode
  2182 3FA4 E6 8A		            inc player_mode
  2183 3FA6 A5 8A		            lda player_mode
  2184 3FA8 C9 03		            cmp #NR_OF_PLAYER_MODES
  2185 3FAA D0 04		            bne ok_player_mode
  2186 3FAC A9 00		            lda #INIT_PLAYER_MODE
  2187 3FAE 85 8A		            sta player_mode
  2188 3FB0			ok_player_mode
  2189 3FB0 60			            rts
  2190
  2191 3FB1			show_player_mode
  2192 3FB1 A6 8A		            ldx player_mode
  2193 3FB3 BD 3F 53		            lda player_mode_lo,x
  2194 3FB6 8D F9 50		            sta menu_line2_ptr
  2195 3FB9 BD 42 53		            lda player_mode_hi,x
  2196 3FBC 8D FA 50		            sta menu_line2_ptr+1
  2197 3FBF 60			            rts
  2198
  2199 3FC0			            .align $100
  2200 4000			inner_x_tab
  2201 = 4100			inner_y_tab = *+$100
  2202 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2203 				      
  2204 4200			            .align $400            
  2205 				; outer circle 1024 plot points on 360 degrees
  2206 4400			outer_x_tab
  2207 = 4800			outer_y_tab = *+1024
  2208 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2209 				           
  2210 4C00			            .align $400
  2211 				; table of magnitudes (length) between angle 0 and 0..255
  2212 				; fixed point 8.8 : hi.lo
  2213 4C00			magnitudes_lo
  2214 = 4D00			magnitudes_hi = *+256
  2215 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2216
  2217 4E00			            .align $400
  2218 5000			display_list
  2219 5000-512F> C2		            dta $42+128         ; dli_header
  2220 5001 06 51		            dta a(score_line)
  2221
  2222 				; 102 x 40 = 4080 bytes            
  2223 5003 4F			            dta $4f
  2224 5004 00 70		            dta a(screen_mem1)
  2225 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2226 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2227 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2228 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2229
  2230 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2231 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2232 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2233 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2234
  2235 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2236 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2237 5055			menu_dl_hook
  2238 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2239 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2240
  2241 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2242
  2243 				; 42 + 60 = 102, 4080 bytes
  2244 506B 4F			            dta $4f
  2245 506C 00 80		            dta a(screen_mem2)
  2246 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2247
  2248 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2249 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2250 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2251 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2252
  2253 5095 0F 0F		            dta $0f,$0f
  2254
  2255 				; 60 lines
  2256 5097			menu_dl_end
  2257 5097 4F			            dta $4f
  2258 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2259 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2260 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2261 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2262 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2263
  2264 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2265 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2266 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2267 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2268
  2269 				; 20 x 40 = 800
  2270 50D5 4F			            dta $4f
  2271 50D6 00 90		            dta a(screen_mem3)       
  2272 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2273 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2274 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2275 				            
  2276 50EB 41			            dta $41
  2277 50EC 00 50		            dta a(display_list)
  2278
  2279 50EE			menu_dl_part
  2280 50EE 80			            dta 128 ; dli_menu
  2281 50EF 20			            dta $20
  2282 50F0 42			            dta $42
  2283 50F1 00 52		            dta a(rotor_logo_text)
  2284 50F3 02			            dta 2
  2285 50F4 30			            dta $30
  2286 50F5 46			            dta $46
  2287 50F6			menu_line1_ptr
  2288 50F6 50 52		            dta a(controller_text)
  2289 50F8 46			            dta $46
  2290 50F9			menu_line2_ptr
  2291 50F9 64 52		            dta a(two_player_text)
  2292 50FB 46			            dta $46
  2293 50FC			menu_line3_ptr
  2294 50FC 9F 52		            dta a(level_text)
  2295 50FE 30			            dta $30
  2296 50FF 42			            dta $42
  2297 5100 B3 52		            dta a(start_text)
  2298 5102 10			            dta $10
  2299 5103 01			            dta $01 ; jump
  2300 5104 97 50		            dta a(menu_dl_end)
  2301
  2302 5106			score_line  
  2303 5106 00 2F 2E 25 00	            dta d' ONE '
  2304 510B			score_chars_p1
  2305 510B 0D 0D 00		            dta d'-- '
  2306
  2307 510E 00 00 00 00 00 00 +             dta d'          '
  2308 5118 00 00 00 00 00 00 +             dta d'          '
  2309
  2310 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2311 512B			score_chars_p2
  2312 512B 0D 0D 00		            dta d'-- '
  2313
  2314 512E 00			score_p1    dta 0
  2315 512F 00			score_p2    dta 0
  2316
  2317 5130			            .align $100
  2318 5200			rotor_logo_text
  2319 5200-5344> 00 00 00 00 +             dta d'              '
  2320 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2321 521A 40			            dta $40
  2322 521B 00 00 00 00 00 00 +             dta d'             '
  2323 5228 00 00 00 00 00 00 +             dta d'              '
  2324 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2325 5242 00 00 00 00 00 00 +             dta d'              '
  2326
  2327 5250			controller_text
  2328 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2329 525A			driver_screen
  2330 525A 00 00 00 00 00 00 +             dta d'          '
  2331
  2332 5264			two_player_text
  2333 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2334
  2335 5278			one_player_text
  2336 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2337
  2338 528B			demo_player_text
  2339 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2340
  2341 529F			level_text
  2342 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2343 52AB			level_char            
  2344 52AB 11 00 00 00 00 00 +             dta d'1       '
  2345
  2346 52B3			start_text
  2347 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2348 52DB			stick_text
  2349 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2350 52E3			paddle_text
  2351 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2352 52EB			mouse_text
  2353 52EB 2D 2F 35 33 25 00 +             dta d'MOUSE   '
  2354 52F3			computer_text
  2355 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2356
  2357 52FB			empty_text
  2358 52FB 00 00 00 00 00 00 +             dta d'                    '
  2359 530F			winner_one_text
  2360 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2361 5323			winner_two_text
  2362 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2363
  2364 5337			driver_text_lo
  2365 5337 DB			            dta <stick_text
  2366 5338 E3			            dta <paddle_text
  2367 5339 EB			            dta <mouse_text
  2368 533A F3			            dta <computer_text
  2369 				            
  2370 533B			driver_text_hi
  2371 533B 52			            dta >stick_text
  2372 533C 52			            dta >paddle_text
  2373 533D 52			            dta >mouse_text
  2374 533E 52			            dta >computer_text
  2375
  2376 533F			player_mode_lo
  2377 533F 64			            dta <two_player_text
  2378 5340 78			            dta <one_player_text
  2379 5341 8B			            dta <demo_player_text
  2380
  2381 5342			player_mode_hi
  2382 5342 52			            dta >two_player_text
  2383 5343 52			            dta >one_player_text
  2384 5344 52			            dta >demo_player_text
  2385
  2386 				; 4 KB
  2387 				; 128 x 32 bytes shapes
  2388 5345			            .align $1000
  2389 6000			pm_shapes
  2390 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2391
  2392 				; 9 KB for backdrop image
  2393 7000			            .align $1000
  2394 = 7000			screen_mem1 = * ; 4K
  2395 				;            org screen_mem1
  2396 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2397
  2398 7FF0			            .align $1000
  2399 = 8000			screen_mem2 = * ; 4K
  2400 				;            org screen_mem2
  2401 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2402
  2403 8FF0			            .align $1000
  2404 = 9000			screen_mem3 = * ; 1K
  2405 				;            org screen_mem3
  2406 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2407
  2408 02E0-02E1> 54 35		            run main
