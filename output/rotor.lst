mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-27
     4 				; Version 1.1.20
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; Optional for a later version:
    16 				; - add computer player(s)
    17 				; - add support for driving controllers
    18
    19 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    20
    21 				; color scheme
    22 = 0050			BASE_COLOR_P1   = $50   ; purple
    23 = 00B0			BASE_COLOR_P2   = $b0   ; green
    24
    25 = 000E			HEADER_FG_COLOR = 14
    26 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    27 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 0C00			pm_area     = $0c00
    33 = 0D80			msl_area    = pm_area+$180
    34 = 0E00			p0_area     = pm_area+$200
    35 = 0E80			p1_area     = pm_area+$280
    36 = 0F00			p2_area     = pm_area+$300
    37 = 0F80			p3_area     = pm_area+$380
    38
    39 				; outer tables 256 for 360 degrees
    40 = 1000			outer_x_256     = $1000
    41 = 1100			outer_y_256     = $1100
    42
    43 = 1200			screen_y_lo     = $1200
    44 = 1300			screen_y_hi     = $1300
    45
    46 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    47 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    48
    49 = 0140			WIDTH           = 320
    50 = 00C0			HEIGHT          = 192
    51
    52 = 0028			SCREEN_WIDTH    = 40
    53
    54 = 0030			outer_x_margin  = 48 ;47-32
    55 = 0040			inner_x_margin  = 64
    56
    57 = 00A0			circle_center_x = WIDTH/2
    58 = 0060			circle_center_y = HEIGHT/2
    59
    60 = 0006			ball_top_margin     = 6
    61 = 0045			ball_left_margin    = 64+5
    62
    63 				; pm upper margin
    64 = 0001			upper_margin    = 1
    65 = 0020			left_margin     = 32
    66
    67 = 0080			music_toggle    = $80
    68
    69 = 0081			shadow_HPOSP0   = $81
    70 = 0082			shadow_HPOSP1   = $82
    71
    72 = 0083			winner_color    = $83
    73
    74 = 0084			shape_ptr       = $84
    75 = 0086			tmp_screen      = $86
    76
    77 = 0088			stick_slow_speed = $88
    78 = 0089			stick_fast_speed = $89
    79
    80 = 008C			game_state      = $8c
    81 = 0000			STATE_IN_GAME   = 0
    82 = 0001			STATE_IN_MENU   = 1
    83 = 0002			STATE_IN_END    = 2
    84
    85 = 008D			volume_hit_bat  = $8d
    86 = 008E			volume_hit_edge = $8e
    87
    88 = 008F			end_screen_delay = $8f
    89
    90 				; player vars must be in sequence for zp,x indexing
    91
    92 = 0090			p1_shape        = $90
    93 = 0091			p2_shape        = $91
    94
    95 = 0094			player1_x       = $94
    96 = 0095			player2_x       = $95
    97
    98 = 0098			player1_y       = $98
    99 = 0099			player2_y       = $99
   100
   101 = 009C			p1_angle        = $9c
   102 = 009D			p2_angle        = $9d
   103
   104 = 00A0			mp_collision    = $a0
   105 = 00A1			in_collision    = $a1
   106 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   107 = 00A3			edge_delay      = $a3
   108 = 00A4			bat_collision_delay = $a4
   109
   110 				; ball vars
   111 = 00A6			ball_current_x      = $a6
   112 = 00A7			ball_current_y      = $a7
   113 = 00AA			ball_angle_start    = $aa
   114 = 00AB			ball_angle_end      = $ab
   115 = 00AC			ball_speed          = $ac
   116
   117 = 00B0			tmp_angle1          = $b0
   118 = 00B1			tmp_angle2          = $b1
   119 = 00B2			add_to_angle        = $b2
   120 = 00B3			angle_diff_bat      = $b3
   121 = 00B4			tmp_angle_direction = $b4
   122 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   123 = 00B6			game_restart        = $b6
   124 = 00B7			tmp_angle_diff      = $b7
   125 = 00B8			magnitude           = $b8       ; word
   126
   127 				; $c0 - $df free for music
   128
   129 = 00E0			_divisor    = $e0   ; word
   130 = 00E2			_dividend   = $e2   ; word
   131 = 00E4			_remainder  = $e4   ; word
   132 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   133
   134 = 00E6			tmp_x1      = $e6   ; byte
   135 = 00E7			tmp_y1      = $e7   ; byte
   136 = 00E8			tmp_x2      = $e8   ; byte
   137 = 00E9			tmp_y2      = $e9   ; byte
   138
   139 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   140 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   141
   142 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   143 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   144
   145 = 00F2			tmp_dx      = $f2  ; byte
   146 = 00F3			tmp_dy      = $f3  ; byte
   147
   148 = 00F6			_multiplicand   = $f6   ; word
   149 = 00F8			_multiplier     = $f8   ; byte
   150
   151 				; direction:
   152 				; 0 : x1<x2 or y1<y2 = add
   153 				; 1 ; x1>=y2 or y1>=y2 = subtract
   154
   155 = 00FA			dir_x       = $fa  ; byte
   156 = 00FB			dir_y       = $fb  ; byte
   157
   158 = 00FC			line_end_x  = $fc  ; byte
   159 = 00FD			line_end_y  = $fd  ; byte
   160
   161 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $9800
    17 9800			rotor_font
    18 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 9C00			intro_main
    21 9C00 A9 48		            lda #<dl_intro
    22 9C02 8D 30 02		            sta $230
    23 9C05 A9 9C		            lda #>dl_intro
    24 9C07 8D 31 02		            sta $231
    25
    26 9C0A A9 98		            lda #>rotor_font
    27 9C0C 8D F4 02		            sta 756
    28
    29 9C0F A9 00		            lda #0
    30 9C11 8D C6 02		            sta 710
    31
    32 9C14 A9 22		            lda #34
    33 9C16 8D 2F 02		            sta 559
    34
    35 				; reset clock
    36 9C19 A9 00		            lda #0
    37 9C1B 85 14		            sta 20
    38 9C1D 85 13		            sta 19
    39 				            
    40 9C1F 60			            rts
    41
    42 9C20			footer_intro
    43 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    44
    45 9C48			dl_intro
    46 9C48 70 70 70		            dta $70,$70,$70
    47
    48 9C4B 4F			            dta $4f
    49 9C4C 10 A0		            dta a(intro_image)
    50 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    51 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54
    55 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    56 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59
    60 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64
    65 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    66
    67 9CB3 4F			            dta $4f
    68 9CB4 00 B0		            dta a(intro_image+$ff0)
    69 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73
    74 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    75 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78
    79 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    81 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    82 9D0D 0F 0F		            dta $0f,$0f
    83 				            
    84 9D0F 20			            dta $20
    85 9D10 42			            dta $42
    86 9D11 20 9C		            dta a(footer_intro)
    87
    88 9D13 41			            dta $41
    89 9D14 48 9C		            dta a(dl_intro)
    90 				            
    91 9D16			            org $a010
    92 A010			intro_image
    93 A010-BE0F> 00 00 00 00 +             ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
    94
    95 02E2-02E3> 00 9C		            ini intro_main
   162
   163 				; real data is loaded at $2000 ($1700+$900)
   164 BE10			            org $1700
   165 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   166
   167 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3E1C> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 DF			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 31		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 16		            bne no_left
   139
   140 3493 B5 9C		            lda p1_angle,x
   141 3495 38			            sec
   142 3496 E5 88		            sbc stick_slow_speed
   143 3498 95 9C		            sta p1_angle,x
   144
   145 349A BD 84 02		            lda STRIG0,x
   146 349D D0 07		            bne no_fast
   147
   148 349F B5 9C		            lda p1_angle,x
   149 34A1 38			            sec
   150 34A2 E5 89		            sbc stick_fast_speed
   151 34A4 95 9C		            sta p1_angle,x
   152 34A6			no_fast
   153 				            
   154 34A6 4C C0 34		            jmp move_done
   155 34A9 C9 07		no_left     cmp #7
   156 34AB D0 13		            bne move_done
   157
   158 34AD B5 9C		            lda p1_angle,x
   159 34AF 18			            clc
   160 34B0 65 88		            adc stick_slow_speed
   161 34B2 95 9C		            sta p1_angle,x
   162
   163 34B4 BD 84 02		            lda STRIG0,x
   164 34B7 D0 07		            bne no_fast_right
   165
   166 34B9 B5 9C		            lda p1_angle,x
   167 34BB 18			            clc
   168 34BC 65 89		            adc stick_fast_speed
   169 34BE 95 9C		            sta p1_angle,x
   170 34C0			no_fast_right
   171 34C0			move_done
   172 34C0 60			            rts
   173
   174 				; X=port number to check (paddle uses only port 1)
   175 				; check fire button (paddle uses left/right stick as fire button)
   176 				; A=0 not pressed, 1=pressed
   177
   178 34C1			is_both_buttons
   179 34C1 AD BE 32		            lda driver_mode
   180 34C4 C9 01		            cmp #1
   181 34C6 F0 0D		            beq check_paddle_fire
   182
   183 34C8 AD 84 02		            lda STRIG0
   184 34CB D0 0F		            bne not_both_stick
   185 34CD AD 85 02		            lda STRIG1
   186 34D0 D0 0A		            bne not_both_stick
   187
   188 34D2			both_fire
   189 34D2 A9 01		            lda #1
   190 34D4 60			            rts
   191
   192 34D5			check_paddle_fire
   193 34D5 AD 78 02		            lda STICK0
   194 34D8 C9 03		            cmp #3
   195 34DA F0 F6		            beq both_fire
   196
   197 34DC			not_both_stick
   198 34DC A9 00		            lda #0
   199 34DE 60			            rts
   200
   201 				; paddle driver
   202 				            
   203 34DF			driver_paddle            
   204 34DF BD 70 02		            lda PADDL0,x
   205 34E2 A8			            tay
   206 34E3 B9 00 33		            lda paddle_to_256,y
   207 34E6 5D EC 34		            eor paddle_offsets,x
   208 34E9 95 9C		            sta p1_angle,x
   209 34EB 60			            rts
   210
   211 34EC			paddle_offsets
   212 34EC 00 00		            dta 0,0
   168
   169 34EE			reset_pressed
   170 34EE 20 00 9C		            jsr intro_main
   171
   172 34F1			main
   173 34F1 A9 FF		            lda #255
   174 34F3 8D FC 02		            sta 764
   175
   176 				; for fast loaders, wait 10 seconds or continue with spacebar
   177 34F6			wait_a_sec
   178 34F6 AD FC 02		            lda 764
   179 34F9 C9 FF		            cmp #255
   180 34FB D0 06		            bne any_key_pressed
   181
   182 34FD A5 13		            lda 19
   183 34FF C9 02		            cmp #2
   184 3501 90 F3		            bcc wait_a_sec
   185
   186 3503			any_key_pressed
   187 3503 A9 FF		            lda #255
   188 3505 8D FC 02		            sta 764
   189
   190 				; start the game!
   191 				 
   192 3508 A9 00		            lda #0
   193 350A 8D 2F 02		            sta SDMCTL
   194 350D 85 B6		            sta game_restart
   195 350F 85 8F		            sta end_screen_delay
   196 3511 85 83		            sta winner_color
   197
   198 3513 A9 80		            lda #128
   199 3515 85 8D		            sta volume_hit_bat
   200 3517 85 8E		            sta volume_hit_edge
   201 3519 85 80		            sta music_toggle        ; 128 = on, 0 = off
   202
   203 351B A9 01		            lda #1
   204 351D 8D 44 02		            sta 580 ; coldstart
   205
   206 				;            lda #1
   207 				;            sta 9   ; boot
   208
   209 				;            lda #<reset_pressed
   210 				;            sta $0a
   211 				;            lda #>reset_pressed
   212 				;            sta $0b
   213
   214 3520 20 01 34		            jsr driver_init
   215
   216 3523 20 10 3B		            jsr make_shape_index
   217
   218 3526 20 40 3B		            jsr make_outer_256
   219
   220 3529 20 50 36		            jsr make_screen_y_tab
   221
   222 352C 20 9B 36		            jsr invert_backdrop
   223 352F A9 60		            lda #$60
   224 3531 8D 9B 36		            sta invert_backdrop ; dirty hack to fix warm reset :P
   225
   226 3534 20 B0 3B		            jsr reset_score
   227 3537 20 7E 3B		            jsr show_score_p1
   228 353A 20 97 3B		            jsr show_score_p2
   229
   230 353D 20 9B 3D		            jsr init_sprites
   231 3540 20 C7 3D		            jsr init_colors
   232
   233 				; init. game vars
   234 3543 A2 00		            ldx #INIT_LEVEL_INDEX
   235 3545 8E E7 3D		            stx current_level_index
   236 3548 20 F4 3D		            jsr set_level_ball_speed
   237
   238 354B A9 01		            lda #STATE_IN_MENU
   239 354D 85 8C		            sta game_state           ; start with menu
   240
   241 354F 20 6E 31		            jsr music_init
   242
   243 3552 20 E0 36		            jsr show_menu_options
   244
   245 3555 A9 00		            lda #<display_list
   246 3557 8D 30 02		            sta SDLSTL
   247 355A A9 50		            lda #>display_list
   248 355C 8D 31 02		            sta SDLSTH
   249
   250 				; start vbi
   251
   252 355F A9 C0		            lda #$c0
   253 3561 8D 0E D4		            sta NMIEN
   254
   255 3564 A9 07		            lda #7          ; sets VVBLKI
   256 3566 A0 39		            ldy #<vbi
   257 3568 A2 37		            ldx #>vbi
   258 356A 20 5C E4		            jsr $e45c       ; SETVBV
   259
   260 				; we're just sitting here while VBI does all the work :)
   261 356D 4C 6D 35		loop        jmp loop
   262
   263 				;------------------------
   264 				; 8bit * 8bit = 16bit multiply
   265 				; By White Flame
   266 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   267 				; uses extra zp var _multiplicand+1
   268
   269 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   270 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   271
   272 				; In this version, both inputs must be unsigned
   273 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   274
   275 3570			_multi8
   276 3570 A9 00		            lda #$00
   277 3572 A8			            tay
   278 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   279 3573 F0 0D		            beq _enter_loop
   280 3575			_do_add
   281 3575 18			            clc
   282 3576 65 F6		            adc _multiplicand
   283 3578 AA			            tax
   284
   285 3579 98			            tya
   286 357A 65 F7		            adc _multiplicand+1
   287 357C A8			            tay
   288 357D 8A			            txa
   289 357E			_mul_loop
   290 357E 06 F6		            asl _multiplicand
   291 3580 26 F7		            rol _multiplicand+1
   292 3582			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   293 3582 46 F8		            lsr _multiplier
   294 3584 B0 EF		            bcs _do_add
   295 3586 D0 F6		            bne _mul_loop
   296 3588 60			            rts
   297
   298 				; reset PM0/1 to playfield settings
   299 3589			dli_header
   300 3589 48			            pha
   301
   302 358A A9 08		            lda #8
   303 358C 8D 17 D0		            sta COLPF1
   304
   305 358F A5 81		            lda shadow_HPOSP0
   306 3591 8D 00 D0		            sta HPOSP0
   307 3594 A5 82		            lda shadow_HPOSP1
   308 3596 8D 01 D0		            sta HPOSP1
   309
   310 3599 A9 00		            lda #0
   311 359B 8D 08 D0		            sta SIZEP0
   312 359E 8D 09 D0		            sta SIZEP1
   313
   314 35A1 A9 5A		            lda #BASE_COLOR_P1+10
   315 35A3 8D 12 D0		            sta COLPM0
   316 35A6 A9 BA		            lda #BASE_COLOR_P2+10
   317 35A8 8D 13 D0		            sta COLPM1
   318
   319 35AB A9 B7		            lda #<dli_menu
   320 35AD 8D 00 02		            sta VDSLST
   321 35B0 A9 35		            lda #>dli_menu
   322 35B2 8D 01 02		            sta VDSLST+1
   323
   324 35B5 68			            pla
   325 35B6 40			            rti
   326
   327 35B7			dli_menu
   328 35B7 48			            pha
   329 35B8 8A			            txa
   330 35B9 48			            pha
   331
   332 35BA A9 0E		            lda #$0e
   333 35BC 8D 0A D4		            sta WSYNC
   334 35BF 8D 1A D0		            sta COLBK
   335 35C2 A9 0A		            lda #$0a
   336 35C4 8D 0A D4		            sta WSYNC
   337 35C7 8D 1A D0		            sta COLBK
   338 35CA A9 00		            lda #0
   339 35CC 8D 0A D4		            sta WSYNC
   340 35CF 8D 1A D0		            sta COLBK
   341
   342 35D2 A2 00		            ldx #0
   343 35D4			color_it1
   344 35D4 BD 18 36		            lda menu_colpf2,x
   345 35D7 8D 0A D4		            sta WSYNC
   346 35DA 8D 18 D0		            sta COLPF2
   347 35DD E8			            inx
   348 35DE E0 12		            cpx #18
   349 35E0 D0 F2		            bne color_it1
   350
   351 35E2 A2 00		            ldx #0
   352 35E4			color_it2
   353 35E4 BD 2A 36		            lda menu_colpf0,x
   354 35E7 05 83		            ora winner_color
   355 35E9 8D 0A D4		            sta WSYNC
   356 35EC 8D 16 D0		            sta COLPF0
   357 35EF E8			            inx
   358 35F0 E0 26		            cpx #38
   359 35F2 D0 F0		            bne color_it2
   360
   361 35F4 A9 00		            lda #0
   362 35F6 8D 0A D4		            sta WSYNC
   363 35F9 8D 1A D0		            sta COLBK
   364 35FC A9 0A		            lda #$0a
   365 35FE 8D 0A D4		            sta WSYNC
   366 3601 8D 1A D0		            sta COLBK
   367 3604 A9 0E		            lda #$0e
   368 3606 8D 0A D4		            sta WSYNC
   369 3609 8D 1A D0		            sta COLBK
   370 360C A9 00		            lda #0
   371 360E 8D 0A D4		            sta WSYNC
   372 3611 8D 1A D0		            sta COLBK
   373 				            
   374 3614 68			            pla
   375 3615 AA			            tax
   376 3616 68			            pla
   377 3617 40			            rti
   378
   379 3618			menu_colpf2
   380 3618 50			            dta BASE_COLOR_P1
   381 3619 50			            dta BASE_COLOR_P1
   382 361A 50			            dta BASE_COLOR_P1
   383 361B 50			            dta BASE_COLOR_P1
   384 361C 50			            dta BASE_COLOR_P1
   385 361D 50			            dta BASE_COLOR_P1
   386 361E 50			            dta BASE_COLOR_P1
   387 361F 50			            dta BASE_COLOR_P1
   388
   389 3620 B0			            dta BASE_COLOR_P2
   390 3621 B0			            dta BASE_COLOR_P2
   391 3622 B0			            dta BASE_COLOR_P2
   392 3623 B0			            dta BASE_COLOR_P2
   393 3624 B0			            dta BASE_COLOR_P2
   394 3625 B0			            dta BASE_COLOR_P2
   395 3626 B0			            dta BASE_COLOR_P2
   396 3627 B0			            dta BASE_COLOR_P2
   397
   398 3628 00 00		            dta 0,0
   399
   400 362A			menu_colpf0
   401 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   402 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   403 362A 00 00		            dta 0,0
   404 362C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   405 3634 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   406 363C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   407 3644 00 00 00 00		            dta 0,0,0,0
   408 3648 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   409
   410 				; make pointers from y-position to screen memory
   411 				; screen memory is 3 blocks
   412 				; screen_mem1 : 102 lines, 4080 bytes
   413 				; screen_mem2 : 102 lines, 4080 bytes
   414 				; screen_mem3 :  20 lines,  800 bytes
   415
   416 3650			make_screen_y_tab
   417 3650 A9 00		            lda #<screen_mem1
   418 3652 85 86		            sta tmp_screen
   419 3654 A9 70		            lda #>screen_mem1
   420 3656 85 87		            sta tmp_screen+1
   421
   422 3658 A2 00		            ldx #0
   423 365A			fill_y_tab1
   424 365A 20 83 36		            jsr store_y_line
   425 365D E8			            inx
   426 365E E0 66		            cpx #102
   427 3660 D0 F8		            bne fill_y_tab1
   428
   429 				; x = 102
   430 3662 A9 00		            lda #<screen_mem2
   431 3664 85 86		            sta tmp_screen
   432 3666 A9 80		            lda #>screen_mem2
   433 3668 85 87		            sta tmp_screen+1
   434
   435 366A			fill_y_tab2
   436 366A 20 83 36		            jsr store_y_line
   437 366D E8			            inx
   438 366E E0 CC		            cpx #204
   439 3670 D0 F8		            bne fill_y_tab2
   440
   441 3672 A9 00		            lda #<screen_mem3
   442 3674 85 86		            sta tmp_screen
   443 3676 A9 90		            lda #>screen_mem3
   444 3678 85 87		            sta tmp_screen+1
   445
   446 				; x = 204
   447 367A			fill_y_tab3
   448 367A 20 83 36		            jsr store_y_line
   449 367D E8			            inx
   450 367E E0 E0		            cpx #224
   451 3680 D0 F8		            bne fill_y_tab3
   452 3682 60			            rts
   453
   454 3683			store_y_line
   455 3683 A5 86		            lda tmp_screen
   456 3685 9D 00 12		            sta screen_y_lo,x
   457 3688 A5 87		            lda tmp_screen+1
   458 368A 9D 00 13		            sta screen_y_hi,x
   459 				            
   460 368D A5 86		            lda tmp_screen
   461 368F 18			            clc
   462 3690 69 28		            adc #SCREEN_WIDTH
   463 3692 85 86		            sta tmp_screen
   464 3694 A5 87		            lda tmp_screen+1
   465 3696 69 00		            adc #0
   466 3698 85 87		            sta tmp_screen+1
   467 369A 60			            rts
   468
   469 				; @todo invert backdrop image
   470 				; now we have to do it here :P
   471 369B			invert_backdrop
   472 369B A9 00		            lda #<screen_mem1
   473 369D 85 86		            sta tmp_screen
   474 369F A9 70		            lda #>screen_mem1
   475 36A1 85 87		            sta tmp_screen+1
   476 				            
   477 36A3 A2 10		            ldx #16     ; 16 pages = 4K
   478 36A5 20 C3 36		            jsr do_x_pages
   479 				           
   480 36A8 A9 00		            lda #<screen_mem2
   481 36AA 85 86		            sta tmp_screen
   482 36AC A9 80		            lda #>screen_mem2
   483 36AE 85 87		            sta tmp_screen+1
   484 				            
   485 36B0 A2 10		            ldx #16     ; 16 pages = 4K
   486 36B2 20 C3 36		            jsr do_x_pages
   487
   488 36B5 A9 00		            lda #<screen_mem3
   489 36B7 85 86		            sta tmp_screen
   490 36B9 A9 90		            lda #>screen_mem3
   491 36BB 85 87		            sta tmp_screen+1
   492 				            
   493 36BD A2 04		            ldx #4     ; 4 pages = 1K
   494 36BF 20 C3 36		            jsr do_x_pages
   495 36C2 60			            rts
   496
   497 				; invert x pages, starting from tmp_screen
   498
   499 36C3			do_x_pages
   500 36C3 A0 00		            ldy #0
   501 36C5			do_page
   502 36C5 B1 86		            lda (tmp_screen),y
   503 36C7 49 FF		            eor #$ff
   504 36C9 91 86		            sta (tmp_screen),y
   505 36CB C8			            iny
   506 36CC D0 F7		            bne do_page 
   507
   508 36CE E6 87		            inc tmp_screen+1
   509 36D0 CA			            dex
   510 36D1 D0 F2		            bne do_page
   511 36D3 60			            rts
   512
   513 36D4			turn_color_ball
   514 36D4 A6 B5		            ldx player_turn
   515 36D6 BD DD 36		            lda color_turn,x
   516 36D9 8D C7 02		            sta COLOR3
   517 36DC 60			            rts
   518 				            
   519 36DD 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   520
   521 36E0			show_menu_options
   522 36E0 A9 50		            lda #<controller_text
   523 36E2 8D F6 50		            sta menu_line1_ptr
   524 36E5 A9 52		            lda #>controller_text
   525 36E7 8D F7 50		            sta menu_line1_ptr+1
   526
   527 36EA A9 64		            lda #<two_player_text
   528 36EC 8D F9 50		            sta menu_line2_ptr
   529 36EF A9 52		            lda #>two_player_text
   530 36F1 8D FA 50		            sta menu_line2_ptr+1
   531
   532 36F4 A9 78		            lda #<level_text
   533 36F6 8D FC 50		            sta menu_line3_ptr
   534 36F9 A9 52		            lda #>level_text
   535 36FB 8D FD 50		            sta menu_line3_ptr+1
   536
   537 36FE A9 00		            lda #0
   538 3700 85 83		            sta winner_color
   539 3702 60			            rts
   540
   541 3703			show_end_screen
   542 3703 A9 D4		            lda #<empty_text
   543 3705 8D F6 50		            sta menu_line1_ptr
   544 3708 8D FC 50		            sta menu_line3_ptr
   545 370B A9 52		            lda #>empty_text
   546 370D 8D F7 50		            sta menu_line1_ptr+1
   547 3710 8D FD 50		            sta menu_line3_ptr+1
   548
   549 3713 AD 2E 51		            lda score_p1
   550 3716 CD 2F 51		            cmp score_p2
   551 3719 90 0F		            bcc player_2_wins
   552
   553 371B A9 E8		            lda #<winner_one_text
   554 371D 8D F9 50		            sta menu_line2_ptr
   555 3720 A9 52		            lda #>winner_one_text
   556 3722 8D FA 50		            sta menu_line2_ptr+1
   557
   558 3725 A9 50		            lda #BASE_COLOR_P1
   559 3727 85 83		            sta winner_color
   560 3729 60			            rts
   561
   562 372A			player_2_wins
   563 372A A9 FC		            lda #<winner_two_text
   564 372C 8D F9 50		            sta menu_line2_ptr
   565 372F A9 52		            lda #>winner_two_text
   566 3731 8D FA 50		            sta menu_line2_ptr+1
   567
   568 3734 A9 B0		            lda #BASE_COLOR_P2
   569 3736 85 83		            sta winner_color
   570
   571 3738 60			            rts
   572
   573 				; A, X, Y are already saved by the OS
   574 3739			vbi
   575 3739 20 DC 31		            jsr copy_shadow
   576
   577 373C A5 80		            lda music_toggle
   578 373E F0 03		            beq skip_music
   579 3740 20 97 31		            jsr play_song
   580 3743			skip_music
   581
   582 				; toggle music on/off with spacebar
   583 3743 AD FC 02		            lda 764
   584 3746 C9 21		            cmp #$21
   585 3748 D0 10		            bne no_spacebar
   586 374A A5 80		            lda music_toggle
   587 374C 49 80		            eor #128
   588 374E 85 80		            sta music_toggle
   589 3750 D0 03		            bne music_turned_on
   590 3752 20 60 32		            jsr music_off
   591
   592 3755			music_turned_on
   593 3755 A9 FF		            lda #255
   594 3757 8D FC 02		            sta 764
   595
   596 375A			no_spacebar
   597 375A 20 19 39		            jsr play_sound_bat
   598 375D 20 37 39		            jsr play_sound_edge
   599
   600 3760 A9 89		            lda #<dli_header
   601 3762 8D 00 02		            sta VDSLST
   602 3765 A9 35		            lda #>dli_header
   603 3767 8D 01 02		            sta VDSLST+1
   604
   605 376A A9 2E		            lda #%00101110  ; enable P/M DMA
   606 376C 8D 2F 02		            sta SDMCTL
   607 376F A9 00		            lda #0
   608 3771 85 4D		            sta 77      ; attract off
   609 3773 A9 98		            lda #>rotor_font
   610 3775 8D F4 02		            sta 756
   611
   612 3778 A9 30		            lda #$30
   613 377A 8D 00 D0		            sta HPOSP0
   614 377D A9 B0		            lda #$b0
   615 377F 8D 01 D0		            sta HPOSP1
   616
   617 				; menu switching thingy
   618
   619 3782 AD 1F D0		            lda CONSOL
   620 3785 C9 03		            cmp #3  ; option button
   621 3787 D0 10		            bne no_option_pressed
   622
   623 3789			go_menu_mode
   624 3789 20 79 3A		            jsr wipe_ball
   625
   626 378C 20 FA 31		            jsr music_normal_volume
   627
   628 378F 20 E0 36		            jsr show_menu_options
   629
   630 3792 A9 01		            lda #STATE_IN_MENU
   631 3794 85 8C		            sta game_state
   632 3796 4C AB 37		            jmp check_game_state
   633
   634 3799			no_option_pressed
   635 3799 C9 06		            cmp #6  ; start pressed
   636 379B D0 0E		            bne check_game_state
   637
   638 				; reset game
   639
   640 379D			reset_game
   641 379D 20 05 32		            jsr music_low_volume
   642
   643 37A0 20 79 3A		            jsr wipe_ball
   644 				            
   645 37A3 A9 01		            lda #1
   646 37A5 85 B6		            sta game_restart
   647
   648 37A7 A9 00		            lda #STATE_IN_GAME
   649 37A9 85 8C		            sta game_state
   650
   651 37AB			check_game_state
   652 37AB A5 8C		            lda game_state
   653 37AD F0 7B		            beq main_game_vbi
   654
   655 37AF C9 02		            cmp #STATE_IN_END
   656 37B1 D0 1C		            bne menu_vbi
   657
   658 				; end screen vbi
   659 37B3 A5 8F		            lda end_screen_delay
   660 37B5 D0 10		            bne stay_in_end_screen
   661
   662 37B7 20 A6 31		            jsr restart_music
   663 37BA 20 FA 31		            jsr music_normal_volume
   664
   665 				; here we show the menu again
   666 37BD 20 E0 36		            jsr show_menu_options
   667
   668 37C0 A9 01		            lda #STATE_IN_MENU
   669 37C2 85 8C		            sta game_state
   670 37C4 4C CF 37		            jmp menu_vbi
   671
   672 37C7			stay_in_end_screen
   673 37C7 20 FB 38		            jsr play_sound_end_game
   674 37CA C6 8F		            dec end_screen_delay
   675 37CC 4C F6 37		            jmp wait_depressed
   676
   677 				; within menu vbi
   678
   679 37CF			menu_vbi
   680 37CF 20 C1 34		            jsr is_both_buttons
   681 37D2 D0 C9		            bne reset_game
   682
   683 37D4 AD 1F D0		            lda CONSOL
   684 37D7 C9 05		            cmp #5          ; select
   685 37D9 D0 18		            bne no_level_select
   686 				            
   687 37DB AD E6 3D		            lda previous_consol
   688 37DE C9 05		            cmp #5
   689 37E0 F0 14		            beq wait_depressed
   690 				            
   691 37E2 20 0D 3E		            jsr increase_level
   692 37E5 AE E7 3D		            ldx current_level_index
   693 37E8 20 F4 3D		            jsr set_level_ball_speed            
   694
   695 37EB A9 05		            lda #5
   696 37ED 8D E6 3D		            sta previous_consol
   697 37F0 4C F6 37		            jmp wait_depressed
   698
   699 37F3			no_level_select
   700 37F3 8D E6 3D		            sta previous_consol
   701
   702 37F6			wait_depressed
   703 37F6 A9 01		            lda #1      ; dl jump
   704 37F8 8D 55 50		            sta menu_dl_hook
   705 37FB A9 EE		            lda #<menu_dl_part
   706 37FD 8D 56 50		            sta menu_dl_hook+1
   707 3800 A9 50		            lda #>menu_dl_part
   708 3802 8D 57 50		            sta menu_dl_hook+2
   709
   710 				; detect/show controller type (used for both players)
   711 3805 20 11 38		            jsr detect_show_driver
   712
   713 3808 20 86 39		            jsr handle_player1
   714 380B 20 9E 39		            jsr handle_player2
   715
   716 380E 4C D0 38		            jmp exit_vbi
   717
   718 				; X = port/driver to detect
   719 3811			detect_show_driver
   720 3811 20 3B 34		            jsr driver_detect
   721 3814 A8			            tay
   722 3815 B9 10 53		            lda driver_text_lo,y
   723 3818 85 86		            sta tmp_screen
   724 381A B9 14 53		            lda driver_text_hi,y
   725 381D 85 87		            sta tmp_screen+1
   726
   727 381F A0 07		            ldy #7
   728 3821			show_driv
   729 3821 B1 86		            lda (tmp_screen),y
   730 3823 99 5A 52		            sta driver_screen,y
   731 3826 88			            dey
   732 3827 10 F8		            bpl show_driv
   733 3829 60			            rts
   734
   735 				; main game vbi
   736 382A			main_game_vbi
   737 382A A5 B6		            lda game_restart
   738 382C F0 2F		            beq no_restart
   739
   740 				; restart game
   741
   742 382E 20 13 39		            jsr silence_end
   743
   744 3831 A9 00		            lda #0
   745 3833 85 B6		            sta game_restart
   746 				            
   747 3835 20 B0 3B		            jsr reset_score
   748 3838 20 7E 3B		            jsr show_score_p1
   749 383B 20 97 3B		            jsr show_score_p2
   750
   751 383E A6 9C		            ldx p1_angle
   752 3840 86 AA		            stx ball_angle_start
   753 3842 20 D7 39		            jsr ball_to_start_position
   754 3845 20 E6 39		            jsr prepare_ball_end_position
   755
   756 3848 A9 00		            lda #0
   757 384A 85 A0		            sta mp_collision
   758 384C 85 A1		            sta in_collision
   759 384E 85 A3		            sta edge_delay
   760 3850 8D 1E D0		            sta HITCLR
   761
   762 3853 A9 02		            lda #2
   763 3855 85 B5		            sta player_turn
   764
   765 3857 20 D4 36		            jsr turn_color_ball
   766 385A 4C D0 38		            jmp exit_vbi
   767
   768 385D			no_restart
   769 				; remove menu hook
   770 385D A9 0F		            lda #$0f        ; dl gfx 8
   771 385F 8D 55 50		            sta menu_dl_hook
   772 3862 8D 56 50		            sta menu_dl_hook+1
   773 3865 8D 57 50		            sta menu_dl_hook+2
   774
   775 3868 AD 08 D0		            lda M0PL
   776 386B 85 A0		            sta mp_collision
   777 386D AD 09 D0		            lda M1PL
   778 3870 05 A0		            ora mp_collision
   779 3872 85 A0		            sta mp_collision
   780 				 
   781 3874 20 86 39		            jsr handle_player1
   782 3877 20 9E 39		            jsr handle_player2
   783
   784 				; handle ball
   785
   786 387A 20 79 3A		            jsr wipe_ball         
   787
   788 				; Check ball collision with bat
   789
   790 387D A5 A4		            lda bat_collision_delay
   791 387F F0 05		            beq check_allowed
   792 3881 C6 A4		            dec bat_collision_delay
   793 3883 4C 9D 38		            jmp move_one
   794
   795 3886			check_allowed
   796 3886 A5 A0		            lda mp_collision
   797 3888 F0 0F		            beq reset_in_collision
   798
   799 388A A5 A1		            lda in_collision
   800 388C D0 0F		            bne no_first_hit
   801
   802 388E E6 A1		            inc in_collision            
   803 3890 20 13 3A		            jsr bounce_bat_ball 
   804 				            
   805 3893 20 F6 38		            jsr start_sound_bat          
   806 				            
   807 3896 4C 9D 38		            jmp move_one
   808 				            
   809 3899			reset_in_collision
   810 3899 A9 00		            lda #0
   811 389B 85 A1		            sta in_collision        
   812
   813 389D			move_one
   814 389D			no_first_hit
   815 389D 20 02 3D		            jsr move_current_xy
   816 38A0 F0 1B		            beq still_moving
   817
   818 				; edge detected
   819
   820 38A2 20 32 39		            jsr start_sound_edge
   821
   822 38A5 A5 AB		            lda ball_angle_end
   823 38A7 85 AA		            sta ball_angle_start
   824
   825 38A9 20 0A 3A		            jsr ball_current_to_start_position
   826 38AC 20 E6 39		            jsr prepare_ball_end_position
   827
   828 38AF 20 52 39		            jsr update_score
   829 38B2 D0 34		            bne game_ends
   830
   831 				; switch turns
   832 38B4 A5 B5		            lda player_turn
   833 38B6 49 03		            eor #3              ; 1 => 2, 2 => 1
   834 38B8 85 B5		            sta player_turn
   835 38BA 20 D4 36		            jsr turn_color_ball
   836
   837 38BD			still_moving
   838 38BD A5 EB		            lda current_x+1
   839 38BF 85 A6		            sta ball_current_x
   840 38C1 A5 ED		            lda current_y+1
   841 38C3 85 A7		            sta ball_current_y
   842
   843 38C5 20 8E 3A		            jsr show_ball
   844
   845 38C8 A9 00		            lda #0
   846 38CA 8D 18 D0		            sta $d018           
   847
   848 				; anything in A to clear collisions
   849 38CD 8D 1E D0		            sta HITCLR
   850
   851 38D0			exit_vbi
   852
   853 				; always set header stuff
   854 38D0 A9 03		            lda #3
   855 38D2 8D 08 D0		            sta SIZEP0
   856 38D5 8D 09 D0		            sta SIZEP1
   857
   858 				; background in PM0/1 for header
   859 38D8 A9 FF		            lda #255
   860 38DA A2 07		            ldx #7
   861 38DC			fill_pm_header
   862 38DC 9D 00 0E		            sta p0_area,x
   863 38DF 9D 80 0E		            sta p1_area,x
   864 38E2 CA			            dex
   865 38E3 10 F7		            bpl fill_pm_header
   866
   867 38E5 4C 62 E4		            jmp $e462
   868
   869 38E8			game_ends
   870 38E8 A9 FF		            lda #255
   871 38EA 85 8F		            sta end_screen_delay
   872
   873 38EC 20 03 37		            jsr show_end_screen
   874
   875 38EF A9 02		            lda #STATE_IN_END
   876 38F1 85 8C		            sta game_state
   877
   878 38F3 4C D0 38		            jmp exit_vbi
   879
   880 38F6			start_sound_bat
   881 38F6 A9 0A		            lda #10
   882 38F8 85 8D		            sta volume_hit_bat
   883 38FA 60			            rts
   884
   885 38FB			play_sound_end_game
   886 38FB 20 60 32		            jsr music_off
   887
   888 38FE A5 8F		            lda end_screen_delay
   889 3900 C9 C0		            cmp #192
   890 3902 90 0F		            bcc silence_end
   891 3904 4A			            lsr
   892 3905 25 8F		            and end_screen_delay
   893 3907 4A			            lsr
   894 3908 09 20		            ora #$20
   895 390A 8D 73 32		            sta SHADOW+4
   896 				            ;lda end_screen_delay
   897 390D A9 AA		            lda #$aa
   898 390F 8D 74 32		            sta SHADOW+5
   899 3912 60			            rts
   900 3913			silence_end
   901 3913 A9 00		            lda #0
   902 3915 8D 74 32		            sta SHADOW+5
   903 3918 60			            rts
   904
   905 3919			play_sound_bat
   906 3919 A5 8D		            lda volume_hit_bat
   907 391B 30 14		            bmi silenced_bat
   908
   909 391D A5 B5		            lda player_turn
   910 391F 0A			            asl
   911 3920 0A			            asl
   912 3921 69 30		            adc #$30
   913 3923 E5 B3		            sbc angle_diff_bat
   914 3925 8D 73 32		            sta SHADOW+4    ; $d204
   915 3928 A5 8D		            lda volume_hit_bat
   916 392A 09 A0		            ora #$a0
   917 392C 8D 74 32		            sta SHADOW+5    ; $d205
   918 392F C6 8D		            dec volume_hit_bat
   919 3931			silenced_bat
   920 3931 60			            rts
   921
   922 3932			start_sound_edge
   923 3932 A9 04		            lda #4
   924 3934 85 8E		            sta volume_hit_edge
   925 3936 60			            rts
   926
   927 3937			play_sound_edge
   928 3937 A5 8E		            lda volume_hit_edge
   929 3939 30 16		            bmi silenced_edge
   930 393B D0 06		            bne no_silenced_edge
   931 393D 8D 74 32		            sta SHADOW+5    ; $d205
   932 3940 C6 8E		            dec volume_hit_edge
   933 3942 60			            rts            
   934
   935 3943			no_silenced_edge
   936 3943 A9 08		            lda #$08
   937 3945 8D 73 32		            sta SHADOW+4    ; $d204
   938 3948 A5 8E		            lda volume_hit_edge
   939 394A 09 26		            ora #$26
   940 394C 8D 74 32		            sta SHADOW+5    ; $d205
   941 394F C6 8E		            dec volume_hit_edge
   942 3951			silenced_edge
   943 3951 60			            rts
   944
   945 				; Update score
   946 				; Score > max score, then exit A = 1, otherwise A = 0
   947
   948 3952			update_score
   949 3952 A5 B5		            lda player_turn
   950 3954 C9 01		            cmp #1
   951 3956 D0 12		            bne was_player2_turn
   952 				; was player 1 turn, so player 2 gets a point
   953 3958 20 C5 3B		            jsr inc_score_p2
   954 395B 20 97 3B		            jsr show_score_p2
   955
   956 395E AD 2F 51		            lda score_p2
   957 3961 C9 11		            cmp #MAX_SCORE
   958 3963 D0 17		            bne reset_edge_delay
   959
   960 3965 A9 01		            lda #STATE_IN_MENU
   961 3967 85 8C		            sta game_state
   962 3969 60			            rts
   963
   964 396A			was_player2_turn
   965 396A 20 B9 3B		            jsr inc_score_p1
   966 396D 20 7E 3B		            jsr show_score_p1
   967
   968 3970 AD 2E 51		            lda score_p1
   969 3973 C9 11		            cmp #MAX_SCORE
   970 3975 D0 05		            bne reset_edge_delay
   971
   972 3977 A9 01		            lda #STATE_IN_MENU
   973 3979 85 8C		            sta game_state
   974 397B 60			            rts
   975
   976 397C			reset_edge_delay
   977 397C A9 0A		            lda #10
   978 397E 85 A3		            sta edge_delay
   979
   980 3980			no_edge
   981
   982 3980 A9 00		            lda #0      ; no end game
   983 				; anything in A to clear collisions
   984 3982 8D 1E D0		            sta HITCLR
   985 3985 60			            rts
   986
   987 				; player 1
   988 				; - wipe shape at previous y-position
   989 				; - move player using controller
   990 				; - set sprite positions
   991
   992 3986			handle_player1
   993 3986 20 E6 3A		            jsr wipe_p1         ; wipe previous shape player 1
   994
   995 3989 A2 00		            ldx #0              ; player 1
   996 398B 20 B6 39		            jsr move_player
   997 				            
   998 398E 20 B2 3A		            jsr show_p1
   999
  1000 3991 A5 94		            lda player1_x
  1001 3993 18			            clc
  1002 3994 69 20		            adc #left_margin
  1003 3996 85 81		            sta shadow_HPOSP0
  1004 3998 69 08		            adc #8
  1005 399A 8D 02 D0		            sta HPOSP2
  1006 399D 60			            rts
  1007
  1008 				; player 2
  1009 				; - wipe shape at previous y-position
  1010 				; - move player using controller
  1011 				; - set sprite positions
  1012
  1013 399E			handle_player2
  1014 399E 20 FB 3A		            jsr wipe_p2         ; wipe previous shape player 2
  1015
  1016 39A1 A2 01		            ldx #1              ; player 2
  1017 39A3 20 B6 39		            jsr move_player
  1018 				                        
  1019 39A6 20 CC 3A		            jsr show_p2
  1020
  1021 39A9 A5 95		            lda player2_x
  1022 39AB 18			            clc
  1023 39AC 69 20		            adc #left_margin
  1024 39AE 85 82		            sta shadow_HPOSP1
  1025 39B0 69 08		            adc #8
  1026 39B2 8D 03 D0		            sta HPOSP3
  1027 39B5 60			            rts
  1028
  1029 				; move player 1/2
  1030 				; right - clockwise, left = anti-clockwise
  1031
  1032 				; X = 0, player 1
  1033 				; X = 1, player 2
  1034
  1035 				; Y = driver mode:
  1036 				; 0 : stick
  1037 				; 1 : paddle
  1038 				; 2 : driving
  1039 				; 3 : computer
  1040 				            
  1041 39B6			move_player
  1042 39B6 20 6E 34		            jsr main_driver
  1043
  1044 39B9 B5 9C		            lda p1_angle,x
  1045 39BB 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1046 39BD 49 40		            eor #64                     ; perpendicular to the circle angle
  1047 39BF 95 90		            sta p1_shape,x
  1048
  1049 39C1 B4 9C		            ldy p1_angle,x
  1050 39C3 B9 00 3F		            lda inner_x_tab,y
  1051 39C6 4A			            lsr
  1052 39C7 69 20		            adc #inner_x_margin/2
  1053 39C9 95 94		            sta player1_x,x
  1054 39CB B9 00 40		            lda inner_y_tab,y
  1055 39CE 4A			            lsr
  1056 39CF 95 98		            sta player1_y,x
  1057
  1058 39D1 B4 90		            ldy p1_shape,x
  1059 39D3 20 35 3B		            jsr shape_to_ptr
  1060
  1061 39D6 60			            rts
  1062
  1063 				; Set ball at start position
  1064 				; - start angle current player
  1065 				; - start position by inner table
  1066 				; - collision delay set?
  1067
  1068 				; Set ball current position to start position
  1069 				; input:
  1070 				; X = angle of start position
  1071 				; output:
  1072 				; ball position: (ball_current_x, ball_current_y)
  1073 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1074 39D7			ball_to_start_position
  1075 39D7 BD 00 3F		            lda inner_x_tab,x
  1076 39DA 85 A6		            sta ball_current_x
  1077 39DC 85 E6		            sta tmp_x1
  1078 39DE BD 00 40		            lda inner_y_tab,x
  1079 39E1 85 A7		            sta ball_current_y
  1080 39E3 85 E7		            sta tmp_y1
  1081 39E5 60			            rts
  1082
  1083 				; Prepare ball end position
  1084 				; - end angle current player
  1085 				; - end position by outer table
  1086 				; - calculate step size x,y
  1087
  1088 				; Input:
  1089 				; - ball_angle_start
  1090 				; - ball speed
  1091 				; Output:
  1092 				; - ball_andle_end
  1093 				; - ball start position (tmp_x1, tmp_y1)
  1094 				; - ball end position (tmp_x2, tmp_y2)
  1095 				; - step size (step_x, step_y) for ball movement
  1096 39E6			prepare_ball_end_position
  1097 39E6 A5 AA		            lda ball_angle_start
  1098 39E8 49 80		            eor #128        ; other side
  1099 39EA 85 AB		            sta ball_angle_end
  1100 39EC AA			            tax
  1101 39ED 20 6E 3A		            jsr angle_to_end_position
  1102 				                        
  1103 39F0 20 95 3C		            jsr init_current_xy
  1104 				            
  1105 				; move current a little bit            
  1106 39F3 20 02 3D		            jsr move_current_xy
  1107 				; ignore end indicator, since we only just started
  1108
  1109
  1110 39F6 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1111 39F8 85 A4		            sta bat_collision_delay
  1112 39FA 60			            rts
  1113
  1114 				; x = angle 0..255
  1115 39FB			outer_angle_to_start_position
  1116 39FB BD 00 10		            lda outer_x_256,x
  1117 39FE 85 A6		            sta ball_current_x
  1118 3A00 85 E6		            sta tmp_x1
  1119 3A02 BD 00 11		            lda outer_y_256,x
  1120 3A05 85 A7		            sta ball_current_y
  1121 3A07 85 E7		            sta tmp_y1
  1122 3A09 60			            rts
  1123
  1124 3A0A			ball_current_to_start_position
  1125 3A0A A5 A6		            lda ball_current_x
  1126 3A0C 85 E6		            sta tmp_x1
  1127 3A0E A5 A7		            lda ball_current_y
  1128 3A10 85 E7		            sta tmp_y1
  1129 3A12 60			            rts
  1130
  1131 				; Ball collides with bat
  1132 				; - start ball angle = end ball angle
  1133 				; - calculate diff between bat and ball end angle
  1134 				; - calculate new end angle
  1135 				; - Set ball at start position
  1136 				; - Prepare ball end position
  1137
  1138 3A13			bounce_bat_ball
  1139 				; set new start of ball
  1140 				; @todo check ball angles
  1141 				; set new ball start angle (= previous end angle)
  1142 3A13 A5 AB		            lda ball_angle_end
  1143 3A15 85 AA		            sta ball_angle_start
  1144 				            
  1145 				; alternative?
  1146 				            ;ldx ball_angle_start
  1147 				            ;jsr ball_to_start_position          
  1148 3A17 20 0A 3A		            jsr ball_current_to_start_position
  1149
  1150 				; which player hit the ball?
  1151 				; collision bits:
  1152 				; xxxxx1x1 : 1 is player1 collision
  1153 				; xxxx1010 : 2 is player2 collision
  1154
  1155 3A1A A5 A0		            lda mp_collision
  1156 3A1C 4A			            lsr
  1157 3A1D 4A			            lsr
  1158 3A1E 05 A0		            ora mp_collision
  1159 3A20 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1160
  1161 				; who's turn is it and who bounced the ball?
  1162
  1163 3A22 25 B5		            and player_turn
  1164 3A24 F0 06		            beq no_switch_turn
  1165
  1166 3A26 A5 B5		            lda player_turn
  1167 3A28 49 03		            eor #3              ; 1 => 2, 2 => 1
  1168 3A2A 85 B5		            sta player_turn 
  1169
  1170 3A2C			no_switch_turn
  1171 3A2C 20 D4 36		            jsr turn_color_ball
  1172
  1173 3A2F A5 B5		            lda player_turn
  1174 3A31 49 03		            eor #3
  1175 3A33 AA			            tax
  1176 3A34 CA			            dex                 ; index 0,1 (player = 1,2)
  1177 3A35 B5 9C		            lda p1_angle,x
  1178
  1179 				; Calculate diff between bat angle position and new ball start position
  1180 3A37 85 B0		            sta tmp_angle1
  1181
  1182 3A39 A5 AA		            lda ball_angle_start
  1183 3A3B 85 B1		            sta tmp_angle2
  1184
  1185 3A3D 20 D1 3B		            jsr calc_angle_diff
  1186
  1187 3A40 0A			            asl
  1188 3A41 0A			            asl
  1189 3A42 0A			            asl
  1190 3A43 85 B3		            sta angle_diff_bat
  1191
  1192 3A45 A5 B0		            lda tmp_angle1
  1193 3A47 18			            clc
  1194 3A48 65 B2		            adc add_to_angle
  1195 3A4A 49 80		            eor #128            ; other side
  1196 3A4C 85 B0		            sta tmp_angle1
  1197 				            
  1198 3A4E A5 B4		            lda tmp_angle_direction
  1199 3A50 D0 0A		            bne diff_clockwise
  1200 				; diff counter clockwise
  1201 3A52 A5 B0		            lda tmp_angle1
  1202 3A54 18			            clc
  1203 3A55 65 B3		            adc angle_diff_bat
  1204 3A57 85 B0		            sta tmp_angle1
  1205 3A59 4C 63 3A		            jmp calc_done            
  1206
  1207 3A5C			diff_clockwise
  1208 3A5C A5 B0		            lda tmp_angle1
  1209 3A5E 38			            sec
  1210 3A5F E5 B3		            sbc angle_diff_bat
  1211 3A61 85 B0		            sta tmp_angle1
  1212 				            
  1213 				; calculation done            
  1214 3A63			calc_done
  1215 3A63 A5 B0		            lda tmp_angle1
  1216 3A65 85 AB		            sta ball_angle_end
  1217 3A67 AA			            tax
  1218 3A68 20 6E 3A		            jsr angle_to_end_position
  1219 				                        
  1220 3A6B 4C 95 3C		            jmp init_current_xy
  1221
  1222 				; x = angle 0..255
  1223 3A6E			angle_to_end_position
  1224 3A6E BD 00 10		            lda outer_x_256,x
  1225 3A71 85 E8		            sta tmp_x2
  1226 3A73 BD 00 11		            lda outer_y_256,x
  1227 3A76 85 E9		            sta tmp_y2
  1228 3A78 60			            rts
  1229
  1230 3A79			wipe_ball
  1231 3A79 A5 A7		            lda ball_current_y
  1232 3A7B 4A			            lsr
  1233 3A7C 69 06		            adc #ball_top_margin
  1234 3A7E AA			            tax                 ; x = real y position on screen
  1235 3A7F A9 00		            lda #0
  1236 3A81 9D 80 0D		            sta msl_area,x
  1237 3A84 9D 81 0D		            sta msl_area+1,x
  1238 3A87 9D 82 0D		            sta msl_area+2,x
  1239 3A8A 9D 83 0D		            sta msl_area+3,x
  1240 3A8D 60			            rts
  1241
  1242 3A8E			show_ball
  1243 3A8E A5 A7		            lda ball_current_y
  1244 3A90 4A			            lsr
  1245 3A91 69 06		            adc #ball_top_margin
  1246 3A93 AA			            tax                 ; x = real y position on screen
  1247
  1248 3A94 A9 02		            lda #%00000010
  1249 3A96 9D 80 0D		            sta msl_area,x
  1250 3A99 9D 83 0D		            sta msl_area+3,x
  1251 3A9C A9 07		            lda #%00000111
  1252 3A9E 9D 81 0D		            sta msl_area+1,x
  1253 3AA1 9D 82 0D		            sta msl_area+2,x
  1254 				            
  1255 3AA4 A5 A6		            lda ball_current_x
  1256 3AA6 4A			            lsr
  1257 3AA7 69 45		            adc #ball_left_margin
  1258 3AA9 8D 05 D0		            sta HPOSM1
  1259 3AAC 69 02		            adc #2
  1260 3AAE 8D 04 D0		            sta HPOSM0
  1261 				                        
  1262 3AB1 60			            rts
  1263 				            
  1264 3AB2			show_p1
  1265 3AB2 A5 98		            lda player1_y
  1266 3AB4 18			            clc
  1267 3AB5 69 01		            adc #upper_margin
  1268 3AB7 AA			            tax
  1269
  1270 3AB8 A0 00		            ldy #0
  1271 3ABA			show_shape1
  1272 3ABA B1 84		            lda (shape_ptr),y
  1273 3ABC 9D 00 0E		            sta p0_area,x 
  1274 3ABF C8			            iny
  1275 3AC0 B1 84		            lda (shape_ptr),y
  1276 3AC2 9D 00 0F		            sta p2_area,x
  1277 3AC5 E8			            inx
  1278 3AC6 C8			            iny
  1279 3AC7 C0 20		            cpy #32
  1280 3AC9 D0 EF		            bne show_shape1
  1281 3ACB 60			            rts
  1282
  1283 3ACC			show_p2
  1284 3ACC A5 99		            lda player2_y
  1285 3ACE 18			            clc
  1286 3ACF 69 01		            adc #upper_margin
  1287 3AD1 AA			            tax
  1288
  1289 3AD2 A0 00		            ldy #0
  1290 3AD4			show_shape2
  1291 3AD4 B1 84		            lda (shape_ptr),y
  1292 3AD6 9D 80 0E		            sta p1_area,x
  1293 3AD9 C8			            iny
  1294 3ADA B1 84		            lda (shape_ptr),y
  1295 3ADC 9D 80 0F		            sta p3_area,x
  1296 3ADF E8			            inx
  1297 3AE0 C8			            iny
  1298 3AE1 C0 20		            cpy #32
  1299 3AE3 D0 EF		            bne show_shape2
  1300 3AE5 60			            rts
  1301
  1302 3AE6			wipe_p1
  1303 3AE6 A5 98		            lda player1_y
  1304 3AE8 18			            clc
  1305 3AE9 69 01		            adc #upper_margin
  1306 3AEB AA			            tax
  1307 				            
  1308 3AEC A0 10		            ldy #16
  1309 3AEE A9 00		            lda #0
  1310 3AF0			wipe_it1            
  1311 3AF0 9D 00 0E		            sta p0_area,x 
  1312 3AF3 9D 00 0F		            sta p2_area,x
  1313 3AF6 E8			            inx
  1314 3AF7 88			            dey
  1315 3AF8 D0 F6		            bne wipe_it1 
  1316 3AFA 60			            rts
  1317
  1318 3AFB			wipe_p2
  1319 3AFB A5 99		            lda player2_y
  1320 3AFD 18			            clc
  1321 3AFE 69 01		            adc #upper_margin
  1322 3B00 AA			            tax
  1323 				            
  1324 3B01 A0 10		            ldy #16
  1325 3B03 A9 00		            lda #0
  1326 3B05			wipe_it2            
  1327 3B05 9D 80 0E		            sta p1_area,x
  1328 3B08 9D 80 0F		            sta p3_area,x
  1329 3B0B E8			            inx
  1330 3B0C 88			            dey
  1331 3B0D D0 F6		            bne wipe_it2 
  1332 3B0F 60			            rts
  1333
  1334 3B10			make_shape_index
  1335 3B10 A9 00		            lda #<pm_shapes
  1336 3B12 85 84		            sta shape_ptr
  1337 3B14 A9 60		            lda #>pm_shapes
  1338 3B16 85 85		            sta shape_ptr+1
  1339 				            
  1340 3B18 A2 00		            ldx #0
  1341 3B1A			fill_pm_tab
  1342 3B1A A5 84		            lda shape_ptr
  1343 3B1C 9D 00 14		            sta pm_shape_lo,x
  1344 3B1F A5 85		            lda shape_ptr+1
  1345 3B21 9D 80 14		            sta pm_shape_hi,x
  1346 				            
  1347 3B24 A5 84		            lda shape_ptr
  1348 3B26 18			            clc
  1349 3B27 69 20		            adc #32
  1350 3B29 85 84		            sta shape_ptr
  1351 3B2B A5 85		            lda shape_ptr+1
  1352 3B2D 69 00		            adc #0
  1353 3B2F 85 85		            sta shape_ptr+1
  1354 				            
  1355 3B31 E8			            inx
  1356 3B32 10 E6		            bpl fill_pm_tab
  1357 				            
  1358 3B34 60			            rts
  1359 				            
  1360 				; there are 128 shapes, each 32 bytes
  1361
  1362 				; y = shape index
  1363 3B35			shape_to_ptr
  1364 3B35 B9 00 14		            lda pm_shape_lo,y
  1365 3B38 85 84		            sta shape_ptr
  1366 3B3A B9 80 14		            lda pm_shape_hi,y
  1367 3B3D 85 85		            sta shape_ptr+1
  1368
  1369 3B3F 60			            rts
  1370
  1371 				; turn 1024 tables into 256 bytes for ball edge lookup
  1372 3B40			make_outer_256
  1373 3B40 A0 00		            ldy #0
  1374 3B42 A2 00		            ldx #0
  1375 3B44			conv_256
  1376 3B44 BD 00 44		            lda outer_x_tab,x
  1377 3B47 99 00 10		            sta outer_x_256,y
  1378 3B4A BD 00 45		            lda outer_x_tab+$100,x
  1379 3B4D 99 40 10		            sta outer_x_256+64,y
  1380 3B50 BD 00 46		            lda outer_x_tab+$200,x
  1381 3B53 99 80 10		            sta outer_x_256+128,y
  1382 3B56 BD 00 47		            lda outer_x_tab+$300,x
  1383 3B59 99 C0 10		            sta outer_x_256+192,y
  1384 				            
  1385 3B5C BD 00 48		            lda outer_y_tab,x
  1386 3B5F 99 00 11		            sta outer_y_256,y
  1387 3B62 BD 00 49		            lda outer_y_tab+$100,x
  1388 3B65 99 40 11		            sta outer_y_256+64,y
  1389 3B68 BD 00 4A		            lda outer_y_tab+$200,x
  1390 3B6B 99 80 11		            sta outer_y_256+128,y
  1391 3B6E BD 00 4B		            lda outer_y_tab+$300,x
  1392 3B71 99 C0 11		            sta outer_y_256+192,y
  1393
  1394 3B74 E8			            inx
  1395 3B75 E8			            inx
  1396 3B76 E8			            inx
  1397 3B77 E8			            inx
  1398 3B78 C8			            iny
  1399 3B79 C0 40		            cpy #64
  1400 3B7B D0 C7		            bne conv_256            
  1401 3B7D 60			            rts
  1402
  1403 3B7E			show_score_p1
  1404 3B7E AD 2E 51		            lda score_p1
  1405 3B81 4A			            lsr
  1406 3B82 4A			            lsr
  1407 3B83 4A			            lsr
  1408 3B84 4A			            lsr
  1409 3B85 F0 02		            beq do_space1
  1410 3B87 09 10		            ora #16
  1411 3B89			do_space1
  1412 3B89 8D 0B 51		            sta score_chars_p1
  1413 3B8C AD 2E 51		            lda score_p1
  1414 3B8F 29 0F		            and #15
  1415 3B91 09 10		            ora #16
  1416 3B93 8D 0C 51		            sta score_chars_p1+1
  1417 3B96 60			            rts
  1418
  1419 3B97			show_score_p2
  1420 3B97 AD 2F 51		            lda score_p2
  1421 3B9A 4A			            lsr
  1422 3B9B 4A			            lsr
  1423 3B9C 4A			            lsr
  1424 3B9D 4A			            lsr
  1425 3B9E F0 02		            beq do_space2
  1426 3BA0 09 10		            ora #16
  1427 3BA2			do_space2
  1428 3BA2 8D 2B 51		            sta score_chars_p2
  1429 3BA5 AD 2F 51		            lda score_p2
  1430 3BA8 29 0F		            and #15
  1431 3BAA 09 10		            ora #16
  1432 3BAC 8D 2C 51		            sta score_chars_p2+1
  1433 3BAF 60			            rts
  1434 				                        
  1435 3BB0			reset_score
  1436 3BB0 A9 00		            lda #0
  1437 3BB2 8D 2E 51		            sta score_p1
  1438 3BB5 8D 2F 51		            sta score_p2
  1439 3BB8 60			            rts            
  1440 				         
  1441 3BB9			inc_score_p1
  1442 3BB9 F8			            sed
  1443 3BBA AD 2E 51		            lda score_p1
  1444 3BBD 18			            clc
  1445 3BBE 69 01		            adc #1
  1446 3BC0 8D 2E 51		            sta score_p1    
  1447 3BC3 D8			            cld
  1448 3BC4 60			            rts
  1449
  1450 3BC5			inc_score_p2
  1451 3BC5 F8			            sed
  1452 3BC6 AD 2F 51		            lda score_p2
  1453 3BC9 18			            clc
  1454 3BCA 69 01		            adc #1
  1455 3BCC 8D 2F 51		            sta score_p2
  1456 3BCF D8			            cld
  1457 3BD0 60			            rts
  1458
  1459 				; calculate the difference between angle1 and angle2
  1460
  1461 				; input:
  1462 				; tmp_angle1 (0..255)
  1463 				; tmp_angle2 (0..255)
  1464
  1465 				; output:
  1466 				; tmp_angle_diff, A: difference between angle1 and angle2
  1467 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1468
  1469 3BD1			calc_angle_diff
  1470 3BD1 A9 00		            lda #0
  1471 3BD3 85 B2		            sta add_to_angle
  1472 3BD5 85 B4		            sta tmp_angle_direction
  1473
  1474 				; make sure we can compare angles, otherwise add $40 to angles
  1475 3BD7 A5 B0		            lda tmp_angle1
  1476 3BD9 C9 C0		            cmp #$c0
  1477 3BDB B0 06		            bcs too_large
  1478 3BDD A5 B1		            lda tmp_angle2
  1479 3BDF C9 C0		            cmp #$c0
  1480 3BE1 90 12		            bcc not_too_large
  1481 3BE3			too_large
  1482 3BE3 A5 B0		            lda tmp_angle1
  1483 3BE5 38			            sec
  1484 3BE6 E9 40		            sbc #$40
  1485 3BE8 85 B0		            sta tmp_angle1
  1486 				            
  1487 3BEA A5 B1		            lda tmp_angle2
  1488 3BEC 38			            sec
  1489 3BED E9 40		            sbc #$40
  1490 3BEF 85 B1		            sta tmp_angle2
  1491 				            
  1492 3BF1 A9 40		            lda #$40
  1493 3BF3 85 B2		            sta add_to_angle
  1494
  1495 3BF5			not_too_large
  1496 3BF5 A5 B1		            lda tmp_angle2
  1497 3BF7 C5 B0		            cmp tmp_angle1
  1498 3BF9 90 0A		            bcc angle2_smaller_angle1
  1499 				; ball >= play
  1500 3BFB 38			            sec
  1501 3BFC E5 B0		            sbc tmp_angle1
  1502 3BFE 85 B7		            sta tmp_angle_diff
  1503 				            
  1504 3C00 E6 B4		            inc tmp_angle_direction
  1505 3C02 4C 0C 3C		            jmp diff_calculated
  1506 				                        
  1507 3C05			angle2_smaller_angle1
  1508 3C05 A5 B0		            lda tmp_angle1
  1509 3C07 38			            sec
  1510 3C08 E5 B1		            sbc tmp_angle2
  1511 3C0A 85 B7		            sta tmp_angle_diff
  1512
  1513 3C0C			diff_calculated
  1514 3C0C A5 B7		            lda tmp_angle_diff           
  1515 3C0E 60			            rts
  1516
  1517 				; X = angle
  1518 				; lookup magnitude of angle 0 to angle X
  1519 3C0F			angle_to_magnitude
  1520 3C0F BD 00 4C		            lda magnitudes_lo,x
  1521 3C12 85 B8		            sta magnitude
  1522 3C14 BD 00 4D		            lda magnitudes_hi,x
  1523 3C17 85 B9		            sta magnitude+1
  1524 3C19 60			            rts
  1525
  1526 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1527 3C1A			calc_abs_tmp_dx
  1528 3C1A A5 E8		            lda tmp_x2
  1529 3C1C 38			            sec
  1530 3C1D E5 E6		            sbc tmp_x1
  1531 3C1F B0 05		            bcs x2_le
  1532 3C21 49 FF		            eor #255
  1533 3C23 18			            clc
  1534 3C24 69 01		            adc #1
  1535 3C26 85 F2		x2_le       sta tmp_dx
  1536
  1537 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1538 3C28			calc_abs_tmp_dy
  1539 3C28 A5 E9		            lda tmp_y2
  1540 3C2A 38			            sec
  1541 3C2B E5 E7		            sbc tmp_y1
  1542 3C2D B0 05		            bcs y2_le
  1543 3C2F 49 FF		            eor #255
  1544 3C31 18			            clc
  1545 3C32 69 01		            adc #1
  1546 3C34 85 F3		y2_le       sta tmp_dy
  1547 3C36 60			            rts
  1548 				            
  1549 3C37			calc_dx_div_magnitude
  1550 3C37 A9 00		            lda #0
  1551 3C39 85 E2		            sta _dividend
  1552 3C3B A5 F2		            lda tmp_dx
  1553 3C3D 85 E3		            sta _dividend+1
  1554
  1555 3C3F A5 B9		            lda magnitude+1
  1556 3C41 85 E0		            sta _divisor
  1557 3C43 A9 00		            lda #0
  1558 3C45 85 E1		            sta _divisor+1
  1559 				            
  1560 3C47 20 6F 3C		            jsr _div16
  1561
  1562 				; todo multiply result with velocity            
  1563 3C4A A5 E2		            lda _result
  1564 3C4C 85 EE		            sta step_x
  1565 3C4E A5 E3		            lda _result+1
  1566 3C50 85 EF		            sta step_x+1
  1567 				            
  1568 3C52 60			            rts
  1569 				            
  1570 3C53			calc_dy_div_magnitude
  1571 3C53 A9 00		            lda #0
  1572 3C55 85 E2		            sta _dividend
  1573 3C57 A5 F3		            lda tmp_dy
  1574 3C59 85 E3		            sta _dividend+1
  1575 				            
  1576 3C5B A5 B9		            lda magnitude+1
  1577 3C5D 85 E0		            sta _divisor
  1578 3C5F A9 00		            lda #0
  1579 3C61 85 E1		            sta _divisor+1
  1580
  1581 3C63 20 6F 3C		            jsr _div16
  1582 				            
  1583 				; todo multiply result with velocity
  1584 3C66 A5 E2		            lda _result
  1585 3C68 85 F0		            sta step_y
  1586 3C6A A5 E3		            lda _result+1
  1587 3C6C 85 F1		            sta step_y+1
  1588 				            
  1589 3C6E 60			            rts
  1590
  1591 				; divide 16bit
  1592 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1593
  1594 				; _result = _dividend / divisor
  1595
  1596 3C6F A9 00		_div16      lda #0          ;preset remainder to 0
  1597 3C71 85 E4		            sta _remainder
  1598 3C73 85 E5		            sta _remainder+1
  1599 3C75 A2 10		            ldx #16         ;repeat for each bit: ...
  1600
  1601 3C77 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1602 3C79 26 E3		            rol _dividend+1  
  1603 3C7B 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1604 3C7D 26 E5		            rol _remainder+1
  1605 3C7F A5 E4		            lda _remainder
  1606 3C81 38			            sec
  1607 3C82 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1608 3C84 A8			            tay         ;lb result -> Y, for we may need it later
  1609 3C85 A5 E5		            lda _remainder+1
  1610 3C87 E5 E1		            sbc _divisor+1
  1611 3C89 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1612
  1613 3C8B 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1614 3C8D 84 E4		            sty _remainder   
  1615 3C8F E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1616
  1617 3C91 CA			_div_skip   dex
  1618 3C92 D0 E3		            bne _div_loop 
  1619 3C94 60			            rts
  1620
  1621 				; Calculations for step size
  1622
  1623 				; not optimised for speed or size
  1624 				; step should be set according to the angle
  1625
  1626 				; move in straight line (x1,y1) to (x2,y2)
  1627
  1628 				; 1. set start/end of line
  1629 				; set (tmp_x1, tmp_y1)
  1630 				; set (tmp_x2, tmp_y2)
  1631
  1632 				; 2. init. current_x, current_y
  1633 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1634 				; - calculates step sizes for x,y
  1635 				; - calculated directions for x,y
  1636 				;            jsr init_current_xy
  1637
  1638 				; 3. use current_x, current_y to plot or set a position
  1639 				;            lda current_x+1
  1640 				;            sta x_position
  1641 				;            lda current_y+1
  1642 				;            sta y_position
  1643 				;            jsr plot_pixel
  1644
  1645 				; 4. move current_x, current_y to next position on line
  1646 				; A=0 still moving
  1647 				;           move_current_xy
  1648
  1649 3C95			init_current_xy
  1650 3C95 A9 7F		            lda #$7f      ; was 128 for half pixel
  1651 3C97 85 EA		            sta current_x
  1652 3C99 85 EC		            sta current_y
  1653
  1654 3C9B A5 E6		            lda tmp_x1
  1655 3C9D 85 EB		            sta current_x+1
  1656 				            
  1657 3C9F A5 E7		            lda tmp_y1
  1658 3CA1 85 ED		            sta current_y+1
  1659
  1660 				; dx = abs(tmp_x1 - tmp_x2)
  1661 3CA3 20 1A 3C		            jsr calc_abs_tmp_dx
  1662
  1663 				; dy = abs(tmp_y1 - tmp_y2)
  1664 3CA6 20 28 3C		            jsr calc_abs_tmp_dy
  1665
  1666 				; set directions
  1667 3CA9 A5 E6		            lda tmp_x1
  1668 3CAB C5 E8		            cmp tmp_x2
  1669 3CAD 90 04		            bcc x1_smaller_x2
  1670 				; x1 >= x2
  1671 3CAF A9 01		            lda #1
  1672 3CB1 D0 02		            bne set_dir_x
  1673 3CB3			x1_smaller_x2
  1674 3CB3 A9 00		            lda #0
  1675 3CB5			set_dir_x
  1676 3CB5 85 FA		            sta dir_x
  1677 				            
  1678 3CB7 A5 E7		            lda tmp_y1
  1679 3CB9 C5 E9		            cmp tmp_y2
  1680 3CBB 90 04		            bcc y1_smaller_y2
  1681 				; y1 >= y2
  1682 3CBD A9 01		            lda #1
  1683 3CBF D0 02		            bne set_dir_y
  1684 3CC1			y1_smaller_y2
  1685 3CC1 A9 00		            lda #0
  1686 3CC3			set_dir_y
  1687 3CC3 85 FB		            sta dir_y
  1688
  1689 				; Calculate diff between start angle and end angle
  1690
  1691 3CC5 A5 AA		            lda ball_angle_start
  1692 3CC7 85 B0		            sta tmp_angle1
  1693 3CC9 A5 AB		            lda ball_angle_end
  1694 3CCB 85 B1		            sta tmp_angle2
  1695 				            
  1696 3CCD 20 D1 3B		            jsr calc_angle_diff
  1697
  1698 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1699 3CD0 A6 B7		            ldx tmp_angle_diff
  1700 3CD2 20 0F 3C		            jsr angle_to_magnitude
  1701 				            
  1702 3CD5 20 37 3C		            jsr calc_dx_div_magnitude
  1703 3CD8 20 53 3C		            jsr calc_dy_div_magnitude
  1704 				            
  1705 				; Calculate step size by ball speed
  1706 				            
  1707 				; step_x = step_x * speed
  1708 				            
  1709 3CDB A5 EE		            lda step_x
  1710 3CDD 85 F6		            sta _multiplicand
  1711 3CDF A5 EF		            lda step_x+1
  1712 3CE1 85 F7		            sta _multiplicand+1
  1713 3CE3 A5 AC		            lda ball_speed
  1714 3CE5 85 F8		            sta _multiplier
  1715
  1716 3CE7 20 70 35		            jsr _multi8
  1717 				;result in .A (low byte, also in .X) and .Y (high byte)
  1718 3CEA 85 EE		            sta step_x
  1719 3CEC 84 EF		            sty step_x+1
  1720 3CEE			skip_step_x_hi
  1721 				            
  1722 				; step_y = step_y * speed
  1723
  1724 3CEE A5 F0		            lda step_y
  1725 3CF0 85 F6		            sta _multiplicand
  1726 3CF2 A5 F1		            lda step_y+1
  1727 3CF4 85 F7		            sta _multiplicand+1
  1728 3CF6 A5 AC		            lda ball_speed
  1729 3CF8 85 F8		            sta _multiplier
  1730
  1731 3CFA 20 70 35		            jsr _multi8
  1732 				;result in .A (low byte, also in .X) and .Y (high byte)
  1733 3CFD 85 F0		            sta step_y
  1734 3CFF 84 F1		            sty step_y+1
  1735 3D01			skip_step_y_hi
  1736
  1737 3D01 60			            rts
  1738
  1739 				; Move ball position 
  1740 				; Add one step, until end reached
  1741 				; Input:
  1742 				; - step size (step_x, step_y)
  1743 				; - current ball position (current_x, current_y)
  1744 				; - end position (tmp_x2, tmp_y2)
  1745 				; Output:
  1746 				; A (0 = still moving, 1 = end reached)
  1747 3D02			move_current_xy
  1748 3D02 A9 00		            lda #0
  1749 3D04 85 FC		            sta line_end_x
  1750 3D06 85 FD		            sta line_end_y
  1751
  1752 				; sets line end indicators here
  1753 3D08 20 25 3D		            jsr move_current_x
  1754 3D0B 20 65 3D		            jsr move_current_y
  1755
  1756 3D0E A5 FC		            lda line_end_x
  1757 3D10 25 FD		            and line_end_y
  1758 3D12 F0 10		            beq no_end_reached
  1759 				            
  1760 				; set current to (x2,y2)
  1761 3D14 A5 E8		            lda tmp_x2
  1762 3D16 85 EB		            sta current_x+1
  1763 3D18 A5 E9		            lda tmp_y2
  1764 3D1A 85 ED		            sta current_y+1
  1765 				            
  1766 3D1C A9 00		            lda #0
  1767 3D1E 85 EA		            sta current_x
  1768 3D20 85 EC		            sta current_y
  1769 				            
  1770 3D22 A9 01		            lda #1 ; end reached
  1771 				            
  1772 3D24			no_end_reached  ; A = 0
  1773 3D24 60			            rts
  1774
  1775 3D25			move_current_x
  1776 3D25 A5 FA		            lda dir_x
  1777 3D27 D0 18		            bne move_current_left
  1778
  1779 				; move right, add
  1780 3D29 A5 EA		            lda current_x
  1781 3D2B 18			            clc
  1782 3D2C 65 EE		            adc step_x
  1783 3D2E 85 EA		            sta current_x
  1784 3D30 A5 EB		            lda current_x+1
  1785 3D32 65 EF		            adc step_x+1
  1786 3D34 85 EB		            sta current_x+1
  1787
  1788 3D36 A5 EB		            lda current_x+1
  1789 3D38 C5 E8		            cmp tmp_x2
  1790 3D3A 90 04		            bcc no_line_end
  1791 3D3C			exact_end_x
  1792 3D3C A9 01		            lda #1
  1793 3D3E 85 FC		            sta line_end_x 
  1794 3D40			no_line_end
  1795 3D40 60			            rts
  1796 				            
  1797 3D41			move_current_left
  1798 3D41 A5 EA		            lda current_x
  1799 3D43 38			            sec
  1800 3D44 E5 EE		            sbc step_x
  1801 3D46 90 01		            bcc clear_skip
  1802 3D48 EA			            nop
  1803 3D49			clear_skip
  1804 3D49 85 EA		            sta current_x
  1805 3D4B A5 EB		            lda current_x+1
  1806 3D4D E5 EF		            sbc step_x+1
  1807 3D4F 85 EB		            sta current_x+1
  1808 3D51 90 0B		            bcc below_zero
  1809 				                        
  1810 3D53 A5 E8		            lda tmp_x2
  1811 3D55 C5 EB		            cmp current_x+1
  1812 3D57 90 E7		            bcc no_line_end
  1813 3D59 A9 01		            lda #1
  1814 3D5B 85 FC		            sta line_end_x            
  1815 3D5D 60			            rts
  1816 3D5E			below_zero            
  1817 3D5E A9 01		            lda #1
  1818 3D60 85 FC		            sta line_end_x
  1819 3D62 85 FD		            sta line_end_y
  1820 3D64 60			            rts
  1821 3D65			move_current_y
  1822 3D65 A5 FB		            lda dir_y
  1823 3D67 D0 18		            bne move_current_up
  1824
  1825 				; move down, add
  1826 3D69 A5 EC		            lda current_y
  1827 3D6B 18			            clc
  1828 3D6C 65 F0		            adc step_y
  1829 3D6E 85 EC		            sta current_y
  1830 3D70 A5 ED		            lda current_y+1
  1831 3D72 65 F1		            adc step_y+1
  1832 3D74 85 ED		            sta current_y+1
  1833 				            
  1834 3D76 A5 ED		            lda current_y+1
  1835 3D78 C5 E9		            cmp tmp_y2
  1836 3D7A 90 C4		            bcc no_line_end
  1837 3D7C			exact_end_y
  1838 3D7C A9 01		            lda #1
  1839 3D7E 85 FD		            sta line_end_y
  1840 3D80 60			            rts
  1841
  1842 3D81			move_current_up
  1843 3D81 A5 EC		            lda current_y
  1844 3D83 38			            sec
  1845 3D84 E5 F0		            sbc step_y
  1846 3D86 85 EC		            sta current_y
  1847 3D88 A5 ED		            lda current_y+1
  1848 3D8A E5 F1		            sbc step_y+1
  1849 3D8C 90 D0		            bcc below_zero
  1850 3D8E 85 ED		            sta current_y+1
  1851 				            
  1852 3D90 A5 E9		            lda tmp_y2
  1853 3D92 C5 ED		            cmp current_y+1
  1854 3D94 90 AA		            bcc no_line_end
  1855 3D96 A9 01		            lda #1
  1856 3D98 85 FD		            sta line_end_y
  1857 3D9A 60			            rts                            
  1858 				            
  1859 3D9B			init_sprites
  1860 3D9B A2 00		            ldx #0
  1861 3D9D 8A			            txa
  1862 3D9E			set_p
  1863 3D9E 9D 00 0E		            sta p0_area,x
  1864 3DA1 9D 80 0E		            sta p1_area,x
  1865 3DA4 9D 00 0F		            sta p2_area,x
  1866 3DA7 9D 80 0F		            sta p3_area,x
  1867 3DAA E8			            inx
  1868 3DAB 10 F1		            bpl set_p
  1869
  1870 3DAD A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1871 3DAF 8D 6F 02		            sta GPRIOR
  1872
  1873 3DB2 A9 0C		            lda #>pm_area
  1874 3DB4 8D 07 D4		            sta PMBASE
  1875
  1876 3DB7 A9 03		            lda #3          ; P/M both on
  1877 3DB9 8D 1D D0		            sta GRACTL
  1878
  1879 3DBC A9 90		            lda #$90
  1880 3DBE 8D 02 D0		            sta HPOSP2
  1881 3DC1 A9 A0		            lda #$A0
  1882 3DC3 8D 03 D0		            sta HPOSP3  
  1883 3DC6 60			            rts
  1884
  1885 3DC7			init_colors
  1886 3DC7 A9 5A		            lda #BASE_COLOR_P1+10
  1887 3DC9 8D C2 02		            sta PCOLR2
  1888 3DCC A9 BA		            lda #BASE_COLOR_P2+10
  1889 3DCE 8D C3 02		            sta PCOLR3
  1890 				            
  1891 3DD1 A9 00		            lda #0
  1892 3DD3 8D C6 02		            sta COLOR2
  1893
  1894 3DD6 A9 0E		            lda #HEADER_FG_COLOR
  1895 3DD8 8D C5 02		            sta COLOR1
  1896
  1897 3DDB A9 50		            lda #HEADER_P1_COLOR
  1898 3DDD 8D C0 02		            sta PCOLR0
  1899 3DE0 A9 B0		            lda #HEADER_P2_COLOR
  1900 3DE2 8D C1 02		            sta PCOLR1
  1901
  1902 3DE5 60			            rts
  1903
  1904 3DE6			previous_consol
  1905 3DE6 00			            dta 0
  1906
  1907 3DE7			current_level_index
  1908 3DE7 00			            dta 0
  1909 = 0004			NR_OF_LEVELS = 4
  1910 = 0000			INIT_LEVEL_INDEX = 0
  1911 3DE8			level_speeds
  1912 3DE8 02 04 06 08		            dta 2,4,6,8
  1913 3DEC			stick_slow_speed_tab
  1914 3DEC 01 02 02 03		            dta 1,2,2,3
  1915 3DF0			stick_fast_speed_tab
  1916 3DF0 02 03 03 04		            dta 2,3,3,4
  1917 				            
  1918 				; X = level (0..NR_OF_LEVELS)
  1919 3DF4			set_level_ball_speed
  1920 3DF4 BD EC 3D		            lda stick_slow_speed_tab,x
  1921 3DF7 85 88		            sta stick_slow_speed
  1922 3DF9 BD F0 3D		            lda stick_fast_speed_tab,x
  1923 3DFC 85 89		            sta stick_fast_speed
  1924
  1925 3DFE BD E8 3D		            lda level_speeds,x
  1926 3E01 85 AC		            sta ball_speed
  1927 3E03 8A			            txa
  1928 3E04 18			            clc
  1929 3E05 69 01		            adc #1
  1930 3E07 09 10		            ora #16
  1931 3E09 8D 84 52		            sta level_char
  1932 3E0C 60			            rts
  1933 				            
  1934 3E0D			increase_level
  1935 3E0D EE E7 3D		            inc current_level_index
  1936 3E10 AD E7 3D		            lda current_level_index
  1937 3E13 C9 04		            cmp #NR_OF_LEVELS
  1938 3E15 D0 05		            bne ok_level
  1939 3E17 A9 00		            lda #INIT_LEVEL_INDEX
  1940 3E19 8D E7 3D		            sta current_level_index
  1941 3E1C			ok_level           
  1942 3E1C 60			            rts
  1943 				            
  1944 3E1D			            .align $100
  1945 3F00			inner_x_tab
  1946 = 4000			inner_y_tab = *+$100
  1947 3F00-40FF> 70 72 75 77 +             ins 'data\in210.dat'
  1948 				      
  1949 4100			            .align $400            
  1950 				; outer circle 1024 plot points on 360 degrees
  1951 4400			outer_x_tab
  1952 = 4800			outer_y_tab = *+1024
  1953 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1954 				           
  1955 4C00			            .align $400
  1956 				; table of magnitudes (length) between angle 0 and 0..255
  1957 				; fixed point 8.8 : hi.lo
  1958 4C00			magnitudes_lo
  1959 = 4D00			magnitudes_hi = *+256
  1960 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1961
  1962 4E00			            .align $400
  1963 5000			display_list
  1964 5000-512F> C2		            dta $42+128         ; dli_header
  1965 5001 06 51		            dta a(score_line)
  1966
  1967 				; 102 x 40 = 4080 bytes            
  1968 5003 4F			            dta $4f
  1969 5004 00 70		            dta a(screen_mem1)
  1970 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1971 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1972 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1973 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1974
  1975 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1976 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1977 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1978 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1979
  1980 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1981 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1982 5055			menu_dl_hook
  1983 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1984 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1985
  1986 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1987
  1988 				; 42 + 60 = 102, 4080 bytes
  1989 506B 4F			            dta $4f
  1990 506C 00 80		            dta a(screen_mem2)
  1991 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1992
  1993 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1994 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1995 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1996 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1997
  1998 5095 0F 0F		            dta $0f,$0f
  1999
  2000 				; 60 lines
  2001 5097			menu_dl_end
  2002 5097 4F			            dta $4f
  2003 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2004 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2005 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2006 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2007 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2008
  2009 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2010 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2011 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2012 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2013
  2014 				; 20 x 40 = 800
  2015 50D5 4F			            dta $4f
  2016 50D6 00 90		            dta a(screen_mem3)       
  2017 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2018 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2019 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2020 				            
  2021 50EB 41			            dta $41
  2022 50EC 00 50		            dta a(display_list)
  2023
  2024 50EE			menu_dl_part
  2025 50EE 80			            dta 128 ; dli_menu
  2026 50EF 20			            dta $20
  2027 50F0 42			            dta $42
  2028 50F1 00 52		            dta a(rotor_logo_text)
  2029 50F3 02			            dta 2
  2030 50F4 30			            dta $30
  2031 50F5 46			            dta $46
  2032 50F6			menu_line1_ptr
  2033 50F6 50 52		            dta a(controller_text)
  2034 50F8 46			            dta $46
  2035 50F9			menu_line2_ptr
  2036 50F9 64 52		            dta a(two_player_text)
  2037 50FB 46			            dta $46
  2038 50FC			menu_line3_ptr
  2039 50FC 78 52		            dta a(level_text)
  2040 50FE 30			            dta $30
  2041 50FF 42			            dta $42
  2042 5100 8C 52		            dta a(start_text)
  2043 5102 10			            dta $10
  2044 5103 01			            dta $01 ; jump
  2045 5104 97 50		            dta a(menu_dl_end)
  2046
  2047 5106			score_line  
  2048 5106 00 2F 2E 25 00	            dta d' ONE '
  2049 510B			score_chars_p1
  2050 510B 0D 0D 00		            dta d'-- '
  2051
  2052 510E 00 00 00 00 00 00 +             dta d'          '
  2053 5118 00 00 00 00 00 00 +             dta d'          '
  2054
  2055 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2056 512B			score_chars_p2
  2057 512B 0D 0D 00		            dta d'-- '
  2058
  2059 512E 00			score_p1    dta 0
  2060 512F 00			score_p2    dta 0
  2061
  2062 5130			            .align $100
  2063 5200			rotor_logo_text
  2064 5200-5317> 00 00 00 00 +             dta d'              '
  2065 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2066 521A 00 00 00 00 00 00 +             dta d'              '
  2067 5228 00 00 00 00 00 00 +             dta d'              '
  2068 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2069 5242 00 00 00 00 00 00 +             dta d'              '
  2070
  2071 5250			controller_text
  2072 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2073 525A			driver_screen
  2074 525A 00 00 00 00 00 00 +             dta d'          '
  2075
  2076 5264			two_player_text
  2077 5264 00 00 00 12 00 30 +             dta d'   2 PLAYER GAME    '
  2078
  2079 5278			level_text
  2080 5278 00 00 00 00 00 00 +             dta d'      LEVEL '
  2081 5284			level_char            
  2082 5284 11 00 00 00 00 00 +             dta d'1       '
  2083
  2084 528C			start_text
  2085 528C 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2086 52B4			stick_text
  2087 52B4 33 34 29 23 2B 00 +             dta d'STICK   '
  2088 52BC			paddle_text
  2089 52BC 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2090 52C4			driving_text
  2091 52C4 24 32 29 36 29 2E +             dta d'DRIVING '
  2092 52CC			computer_text
  2093 52CC 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2094
  2095 52D4			empty_text
  2096 52D4 00 00 00 00 00 00 +             dta d'                    '
  2097 52E8			winner_one_text
  2098 52E8 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2099 52FC			winner_two_text
  2100 52FC 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2101
  2102 5310			driver_text_lo
  2103 5310 B4			            dta <stick_text
  2104 5311 BC			            dta <paddle_text
  2105 5312 C4			            dta <driving_text
  2106 5313 CC			            dta <computer_text
  2107 				            
  2108 5314			driver_text_hi
  2109 5314 52			            dta >stick_text
  2110 5315 52			            dta >paddle_text
  2111 5316 52			            dta >driving_text
  2112 5317 52			            dta >computer_text
  2113
  2114 				; 4 KB
  2115 				; 128 x 32 bytes shapes
  2116 5318			            .align $1000
  2117 6000			pm_shapes
  2118 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2119
  2120 				; 9 KB for backdrop image
  2121 7000			            .align $1000
  2122 = 7000			screen_mem1 = * ; 4K
  2123 				;            org screen_mem1
  2124 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2125
  2126 7FF0			            .align $1000
  2127 = 8000			screen_mem2 = * ; 4K
  2128 				;            org screen_mem2
  2129 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2130
  2131 8FF0			            .align $1000
  2132 = 9000			screen_mem3 = * ; 1K
  2133 				;            org screen_mem3
  2134 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2135
  2136 02E0-02E1> F1 34		            run main
