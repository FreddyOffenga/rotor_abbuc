mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-27
     4 				; Version 1.1.21
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; Optional for a later version:
    16 				; - add computer player(s)
    17 				; - add support for driving controllers
    18
    19 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    20
    21 				; color scheme
    22 = 0050			BASE_COLOR_P1   = $50   ; purple
    23 = 00B0			BASE_COLOR_P2   = $b0   ; green
    24
    25 = 000E			HEADER_FG_COLOR = 14
    26 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    27 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 0C00			pm_area     = $0c00
    33 = 0D80			msl_area    = pm_area+$180
    34 = 0E00			p0_area     = pm_area+$200
    35 = 0E80			p1_area     = pm_area+$280
    36 = 0F00			p2_area     = pm_area+$300
    37 = 0F80			p3_area     = pm_area+$380
    38
    39 				; outer tables 256 for 360 degrees
    40 = 1000			outer_x_256     = $1000
    41 = 1100			outer_y_256     = $1100
    42
    43 = 1200			screen_y_lo     = $1200
    44 = 1300			screen_y_hi     = $1300
    45
    46 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    47 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    48
    49 = 0140			WIDTH           = 320
    50 = 00C0			HEIGHT          = 192
    51
    52 = 0028			SCREEN_WIDTH    = 40
    53
    54 = 0030			outer_x_margin  = 48 ;47-32
    55 = 0040			inner_x_margin  = 64
    56
    57 = 00A0			circle_center_x = WIDTH/2
    58 = 0060			circle_center_y = HEIGHT/2
    59
    60 = 0006			ball_top_margin     = 6
    61 = 0045			ball_left_margin    = 64+5
    62
    63 				; pm upper margin
    64 = 0001			upper_margin    = 1
    65 = 0020			left_margin     = 32
    66
    67 = 0080			music_toggle    = $80
    68
    69 = 0081			shadow_HPOSP0   = $81
    70 = 0082			shadow_HPOSP1   = $82
    71
    72 = 0083			winner_color    = $83
    73
    74 = 0084			shape_ptr       = $84
    75 = 0086			tmp_screen      = $86
    76
    77 = 0088			stick_slow_speed = $88
    78 = 0089			stick_fast_speed = $89
    79
    80 = 008A			player_mode     = $8a
    81 = 0000			MODE_2_PLAYER   = 0
    82 = 0001			MODE_1_PLAYER   = 1
    83 = 0002			MODE_DEMO       = 2
    84 = 0003			NR_OF_PLAYER_MODES = 3
    85 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    86
    87 = 008C			game_state      = $8c
    88 = 0000			STATE_IN_GAME   = 0
    89 = 0001			STATE_IN_MENU   = 1
    90 = 0002			STATE_IN_END    = 2
    91
    92 = 008D			volume_hit_bat  = $8d
    93 = 008E			volume_hit_edge = $8e
    94
    95 = 008F			end_screen_delay = $8f
    96
    97 				; player vars must be in sequence for zp,x indexing
    98
    99 = 0090			p1_shape        = $90
   100 = 0091			p2_shape        = $91
   101
   102 = 0094			player1_x       = $94
   103 = 0095			player2_x       = $95
   104
   105 = 0098			player1_y       = $98
   106 = 0099			player2_y       = $99
   107
   108 = 009C			p1_angle        = $9c
   109 = 009D			p2_angle        = $9d
   110
   111 = 00A0			mp_collision    = $a0
   112 = 00A1			in_collision    = $a1
   113 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   114 = 00A3			edge_delay      = $a3
   115 = 00A4			bat_collision_delay = $a4
   116
   117 				; ball vars
   118 = 00A6			ball_current_x      = $a6
   119 = 00A7			ball_current_y      = $a7
   120 = 00AA			ball_angle_start    = $aa
   121 = 00AB			ball_angle_end      = $ab
   122 = 00AC			ball_speed          = $ac
   123
   124 = 00B0			tmp_angle1          = $b0
   125 = 00B1			tmp_angle2          = $b1
   126 = 00B2			add_to_angle        = $b2
   127 = 00B3			angle_diff_bat      = $b3
   128 = 00B4			tmp_angle_direction = $b4
   129 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   130 = 00B6			game_restart        = $b6
   131 = 00B7			tmp_angle_diff      = $b7
   132 = 00B8			magnitude           = $b8       ; word
   133
   134 				; $c0 - $df free for music
   135
   136 = 00E0			_divisor    = $e0   ; word
   137 = 00E2			_dividend   = $e2   ; word
   138 = 00E4			_remainder  = $e4   ; word
   139 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   140
   141 = 00E6			tmp_x1      = $e6   ; byte
   142 = 00E7			tmp_y1      = $e7   ; byte
   143 = 00E8			tmp_x2      = $e8   ; byte
   144 = 00E9			tmp_y2      = $e9   ; byte
   145
   146 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   147 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   148
   149 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   150 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   151
   152 = 00F2			tmp_dx      = $f2  ; byte
   153 = 00F3			tmp_dy      = $f3  ; byte
   154
   155 = 00F6			_multiplicand   = $f6   ; word
   156 = 00F8			_multiplier     = $f8   ; byte
   157
   158 				; direction:
   159 				; 0 : x1<x2 or y1<y2 = add
   160 				; 1 ; x1>=y2 or y1>=y2 = subtract
   161
   162 = 00FA			dir_x       = $fa  ; byte
   163 = 00FB			dir_y       = $fb  ; byte
   164
   165 = 00FC			line_end_x  = $fc  ; byte
   166 = 00FD			line_end_y  = $fd  ; byte
   167
   168 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 A010-BE0F> 00 00 00 00 +             ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102
   103 02E2-02E3> 00 9C		            ini intro_main
   169
   170 				; real data is loaded at $2000 ($1700+$900)
   171 BE10			            org $1700
   172 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   173
   174 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3E9E> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 F6			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 31		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 16		            bne no_left
   139
   140 3493 B5 9C		            lda p1_angle,x
   141 3495 38			            sec
   142 3496 E5 88		            sbc stick_slow_speed
   143 3498 95 9C		            sta p1_angle,x
   144
   145 349A BD 84 02		            lda STRIG0,x
   146 349D D0 07		            bne no_fast
   147
   148 349F B5 9C		            lda p1_angle,x
   149 34A1 38			            sec
   150 34A2 E5 89		            sbc stick_fast_speed
   151 34A4 95 9C		            sta p1_angle,x
   152 34A6			no_fast
   153 				            
   154 34A6 4C C0 34		            jmp move_done
   155 34A9 C9 07		no_left     cmp #7
   156 34AB D0 13		            bne move_done
   157
   158 34AD B5 9C		            lda p1_angle,x
   159 34AF 18			            clc
   160 34B0 65 88		            adc stick_slow_speed
   161 34B2 95 9C		            sta p1_angle,x
   162
   163 34B4 BD 84 02		            lda STRIG0,x
   164 34B7 D0 07		            bne no_fast_right
   165
   166 34B9 B5 9C		            lda p1_angle,x
   167 34BB 18			            clc
   168 34BC 65 89		            adc stick_fast_speed
   169 34BE 95 9C		            sta p1_angle,x
   170 34C0			no_fast_right
   171 34C0			move_done
   172 34C0 60			            rts
   173
   174 				; check if player1 button is pressed
   175 				; A=0 not pressed, 1=pressed
   176
   177 34C1			is_player1_button_pressed
   178 34C1 AD BE 32		            lda driver_mode
   179 34C4 C9 01		            cmp #1
   180 34C6 F0 07		            beq check_player1_paddle_fire
   181
   182 34C8 AD 84 02		            lda STRIG0
   183 34CB F0 1C		            beq fire_pressed
   184 34CD D0 24		            bne fire_not_pressed
   185
   186 34CF			check_player1_paddle_fire
   187 34CF AD 78 02		            lda STICK0
   188 34D2 C9 0B		            cmp #11
   189 34D4 F0 13		            beq fire_pressed
   190 34D6 D0 1B		            bne fire_not_pressed
   191
   192 				; X=port number to check (paddle uses only port 1)
   193 				; check fire button (paddle uses left/right stick as fire button)
   194 				; A=0 not pressed, 1=pressed
   195
   196 34D8			is_both_buttons
   197 34D8 AD BE 32		            lda driver_mode
   198 34DB C9 01		            cmp #1
   199 34DD F0 0D		            beq check_paddle_fire
   200
   201 34DF AD 84 02		            lda STRIG0
   202 34E2 D0 0F		            bne fire_not_pressed
   203 34E4 AD 85 02		            lda STRIG1
   204 34E7 D0 0A		            bne fire_not_pressed
   205
   206 34E9			fire_pressed
   207 34E9 A9 01		            lda #1
   208 34EB 60			            rts
   209
   210 34EC			check_paddle_fire
   211 34EC AD 78 02		            lda STICK0
   212 34EF C9 03		            cmp #3
   213 34F1 F0 F6		            beq fire_pressed
   214
   215 34F3			fire_not_pressed
   216 34F3 A9 00		            lda #0
   217 34F5 60			            rts
   218
   219 				; paddle driver
   220 				            
   221 34F6			driver_paddle            
   222 34F6 BD 70 02		            lda PADDL0,x
   223 34F9 A8			            tay
   224 34FA B9 00 33		            lda paddle_to_256,y
   225 34FD 5D 03 35		            eor paddle_offsets,x
   226 3500 95 9C		            sta p1_angle,x
   227 3502 60			            rts
   228
   229 3503			paddle_offsets
   230 3503 00 00		            dta 0,0
   175
   176 3505			reset_pressed
   177 3505 20 00 9C		            jsr intro_main
   178
   179 3508			main
   180 3508 A9 FF		            lda #255
   181 350A 8D FC 02		            sta 764
   182
   183 				; for fast loaders, wait 10 seconds or continue with spacebar
   184 350D			wait_a_sec
   185 350D AD FC 02		            lda 764
   186 3510 C9 FF		            cmp #255
   187 3512 D0 06		            bne any_key_pressed
   188
   189 3514 A5 13		            lda 19
   190 3516 C9 02		            cmp #2
   191 3518 90 F3		            bcc wait_a_sec
   192
   193 351A			any_key_pressed
   194 351A A9 FF		            lda #255
   195 351C 8D FC 02		            sta 764
   196
   197 				; start the game!
   198 				 
   199 351F A9 00		            lda #0
   200 3521 8D 2F 02		            sta SDMCTL
   201 3524 85 B6		            sta game_restart
   202 3526 85 8F		            sta end_screen_delay
   203 3528 85 83		            sta winner_color
   204
   205 352A A9 80		            lda #128
   206 352C 85 8D		            sta volume_hit_bat
   207 352E 85 8E		            sta volume_hit_edge
   208 3530 85 80		            sta music_toggle        ; 128 = on, 0 = off
   209
   210 3532 A9 01		            lda #1
   211 3534 8D 44 02		            sta 580 ; coldstart
   212
   213 				;            lda #1
   214 				;            sta 9   ; boot
   215
   216 				;            lda #<reset_pressed
   217 				;            sta $0a
   218 				;            lda #>reset_pressed
   219 				;            sta $0b
   220
   221 3537 20 01 34		            jsr driver_init
   222
   223 353A 20 76 3B		            jsr make_shape_index
   224
   225 353D 20 A6 3B		            jsr make_outer_256
   226
   227 3540 20 6E 36		            jsr make_screen_y_tab
   228
   229 3543 20 B9 36		            jsr invert_backdrop
   230 3546 A9 60		            lda #$60
   231 3548 8D B9 36		            sta invert_backdrop ; dirty hack to fix warm reset :P
   232
   233 354B 20 16 3C		            jsr reset_score
   234 354E 20 E4 3B		            jsr show_score_p1
   235 3551 20 FD 3B		            jsr show_score_p2
   236
   237 3554 20 01 3E		            jsr init_sprites
   238 3557 20 2D 3E		            jsr init_colors
   239
   240 				; init. game vars
   241 355A A2 00		            ldx #INIT_LEVEL_INDEX
   242 355C 8E 4D 3E		            stx current_level_index
   243 355F 20 5A 3E		            jsr set_level_ball_speed
   244
   245 3562 A9 00		            lda #INIT_PLAYER_MODE
   246 3564 85 8A		            sta player_mode
   247 3566 20 90 3E		            jsr show_player_mode
   248
   249 3569 A9 01		            lda #STATE_IN_MENU
   250 356B 85 8C		            sta game_state           ; start with menu
   251
   252 356D 20 6E 31		            jsr music_init
   253
   254 3570 20 FE 36		            jsr show_menu_options
   255
   256 3573 A9 00		            lda #<display_list
   257 3575 8D 30 02		            sta SDLSTL
   258 3578 A9 50		            lda #>display_list
   259 357A 8D 31 02		            sta SDLSTH
   260
   261 				; start vbi
   262
   263 357D A9 C0		            lda #$c0
   264 357F 8D 0E D4		            sta NMIEN
   265
   266 3582 A9 07		            lda #7          ; sets VVBLKI
   267 3584 A0 50		            ldy #<vbi
   268 3586 A2 37		            ldx #>vbi
   269 3588 20 5C E4		            jsr $e45c       ; SETVBV
   270
   271 				; we're just sitting here while VBI does all the work :)
   272 358B 4C 8B 35		loop        jmp loop
   273
   274 				;------------------------
   275 				; 8bit * 8bit = 16bit multiply
   276 				; By White Flame
   277 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   278 				; uses extra zp var _multiplicand+1
   279
   280 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   281 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   282
   283 				; In this version, both inputs must be unsigned
   284 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   285
   286 358E			_multi8
   287 358E A9 00		            lda #$00
   288 3590 A8			            tay
   289 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   290 3591 F0 0D		            beq _enter_loop
   291 3593			_do_add
   292 3593 18			            clc
   293 3594 65 F6		            adc _multiplicand
   294 3596 AA			            tax
   295
   296 3597 98			            tya
   297 3598 65 F7		            adc _multiplicand+1
   298 359A A8			            tay
   299 359B 8A			            txa
   300 359C			_mul_loop
   301 359C 06 F6		            asl _multiplicand
   302 359E 26 F7		            rol _multiplicand+1
   303 35A0			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   304 35A0 46 F8		            lsr _multiplier
   305 35A2 B0 EF		            bcs _do_add
   306 35A4 D0 F6		            bne _mul_loop
   307 35A6 60			            rts
   308
   309 				; reset PM0/1 to playfield settings
   310 35A7			dli_header
   311 35A7 48			            pha
   312
   313 35A8 A9 08		            lda #8
   314 35AA 8D 17 D0		            sta COLPF1
   315
   316 35AD A5 81		            lda shadow_HPOSP0
   317 35AF 8D 00 D0		            sta HPOSP0
   318 35B2 A5 82		            lda shadow_HPOSP1
   319 35B4 8D 01 D0		            sta HPOSP1
   320
   321 35B7 A9 00		            lda #0
   322 35B9 8D 08 D0		            sta SIZEP0
   323 35BC 8D 09 D0		            sta SIZEP1
   324
   325 35BF A9 5A		            lda #BASE_COLOR_P1+10
   326 35C1 8D 12 D0		            sta COLPM0
   327 35C4 A9 BA		            lda #BASE_COLOR_P2+10
   328 35C6 8D 13 D0		            sta COLPM1
   329
   330 35C9 A9 D5		            lda #<dli_menu
   331 35CB 8D 00 02		            sta VDSLST
   332 35CE A9 35		            lda #>dli_menu
   333 35D0 8D 01 02		            sta VDSLST+1
   334
   335 35D3 68			            pla
   336 35D4 40			            rti
   337
   338 35D5			dli_menu
   339 35D5 48			            pha
   340 35D6 8A			            txa
   341 35D7 48			            pha
   342
   343 35D8 A9 0E		            lda #$0e
   344 35DA 8D 0A D4		            sta WSYNC
   345 35DD 8D 1A D0		            sta COLBK
   346 35E0 A9 0A		            lda #$0a
   347 35E2 8D 0A D4		            sta WSYNC
   348 35E5 8D 1A D0		            sta COLBK
   349 35E8 A9 00		            lda #0
   350 35EA 8D 0A D4		            sta WSYNC
   351 35ED 8D 1A D0		            sta COLBK
   352
   353 35F0 A2 00		            ldx #0
   354 35F2			color_it1
   355 35F2 BD 36 36		            lda menu_colpf2,x
   356 35F5 8D 0A D4		            sta WSYNC
   357 35F8 8D 18 D0		            sta COLPF2
   358 35FB E8			            inx
   359 35FC E0 12		            cpx #18
   360 35FE D0 F2		            bne color_it1
   361
   362 3600 A2 00		            ldx #0
   363 3602			color_it2
   364 3602 BD 48 36		            lda menu_colpf0,x
   365 3605 05 83		            ora winner_color
   366 3607 8D 0A D4		            sta WSYNC
   367 360A 8D 16 D0		            sta COLPF0
   368 360D E8			            inx
   369 360E E0 26		            cpx #38
   370 3610 D0 F0		            bne color_it2
   371
   372 3612 A9 00		            lda #0
   373 3614 8D 0A D4		            sta WSYNC
   374 3617 8D 1A D0		            sta COLBK
   375 361A A9 0A		            lda #$0a
   376 361C 8D 0A D4		            sta WSYNC
   377 361F 8D 1A D0		            sta COLBK
   378 3622 A9 0E		            lda #$0e
   379 3624 8D 0A D4		            sta WSYNC
   380 3627 8D 1A D0		            sta COLBK
   381 362A A9 00		            lda #0
   382 362C 8D 0A D4		            sta WSYNC
   383 362F 8D 1A D0		            sta COLBK
   384 				            
   385 3632 68			            pla
   386 3633 AA			            tax
   387 3634 68			            pla
   388 3635 40			            rti
   389
   390 3636			menu_colpf2
   391 3636 50			            dta BASE_COLOR_P1
   392 3637 50			            dta BASE_COLOR_P1
   393 3638 50			            dta BASE_COLOR_P1
   394 3639 50			            dta BASE_COLOR_P1
   395 363A 50			            dta BASE_COLOR_P1
   396 363B 50			            dta BASE_COLOR_P1
   397 363C 50			            dta BASE_COLOR_P1
   398 363D 50			            dta BASE_COLOR_P1
   399
   400 363E B0			            dta BASE_COLOR_P2
   401 363F B0			            dta BASE_COLOR_P2
   402 3640 B0			            dta BASE_COLOR_P2
   403 3641 B0			            dta BASE_COLOR_P2
   404 3642 B0			            dta BASE_COLOR_P2
   405 3643 B0			            dta BASE_COLOR_P2
   406 3644 B0			            dta BASE_COLOR_P2
   407 3645 B0			            dta BASE_COLOR_P2
   408
   409 3646 00 00		            dta 0,0
   410
   411 3648			menu_colpf0
   412 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   413 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   414 3648 00 00		            dta 0,0
   415 364A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   416 3652 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   417 365A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   418 3662 00 00 00 00		            dta 0,0,0,0
   419 3666 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   420
   421 				; make pointers from y-position to screen memory
   422 				; screen memory is 3 blocks
   423 				; screen_mem1 : 102 lines, 4080 bytes
   424 				; screen_mem2 : 102 lines, 4080 bytes
   425 				; screen_mem3 :  20 lines,  800 bytes
   426
   427 366E			make_screen_y_tab
   428 366E A9 00		            lda #<screen_mem1
   429 3670 85 86		            sta tmp_screen
   430 3672 A9 70		            lda #>screen_mem1
   431 3674 85 87		            sta tmp_screen+1
   432
   433 3676 A2 00		            ldx #0
   434 3678			fill_y_tab1
   435 3678 20 A1 36		            jsr store_y_line
   436 367B E8			            inx
   437 367C E0 66		            cpx #102
   438 367E D0 F8		            bne fill_y_tab1
   439
   440 				; x = 102
   441 3680 A9 00		            lda #<screen_mem2
   442 3682 85 86		            sta tmp_screen
   443 3684 A9 80		            lda #>screen_mem2
   444 3686 85 87		            sta tmp_screen+1
   445
   446 3688			fill_y_tab2
   447 3688 20 A1 36		            jsr store_y_line
   448 368B E8			            inx
   449 368C E0 CC		            cpx #204
   450 368E D0 F8		            bne fill_y_tab2
   451
   452 3690 A9 00		            lda #<screen_mem3
   453 3692 85 86		            sta tmp_screen
   454 3694 A9 90		            lda #>screen_mem3
   455 3696 85 87		            sta tmp_screen+1
   456
   457 				; x = 204
   458 3698			fill_y_tab3
   459 3698 20 A1 36		            jsr store_y_line
   460 369B E8			            inx
   461 369C E0 E0		            cpx #224
   462 369E D0 F8		            bne fill_y_tab3
   463 36A0 60			            rts
   464
   465 36A1			store_y_line
   466 36A1 A5 86		            lda tmp_screen
   467 36A3 9D 00 12		            sta screen_y_lo,x
   468 36A6 A5 87		            lda tmp_screen+1
   469 36A8 9D 00 13		            sta screen_y_hi,x
   470 				            
   471 36AB A5 86		            lda tmp_screen
   472 36AD 18			            clc
   473 36AE 69 28		            adc #SCREEN_WIDTH
   474 36B0 85 86		            sta tmp_screen
   475 36B2 A5 87		            lda tmp_screen+1
   476 36B4 69 00		            adc #0
   477 36B6 85 87		            sta tmp_screen+1
   478 36B8 60			            rts
   479
   480 				; @todo invert backdrop image
   481 				; now we have to do it here :P
   482 36B9			invert_backdrop
   483 36B9 A9 00		            lda #<screen_mem1
   484 36BB 85 86		            sta tmp_screen
   485 36BD A9 70		            lda #>screen_mem1
   486 36BF 85 87		            sta tmp_screen+1
   487 				            
   488 36C1 A2 10		            ldx #16     ; 16 pages = 4K
   489 36C3 20 E1 36		            jsr do_x_pages
   490 				           
   491 36C6 A9 00		            lda #<screen_mem2
   492 36C8 85 86		            sta tmp_screen
   493 36CA A9 80		            lda #>screen_mem2
   494 36CC 85 87		            sta tmp_screen+1
   495 				            
   496 36CE A2 10		            ldx #16     ; 16 pages = 4K
   497 36D0 20 E1 36		            jsr do_x_pages
   498
   499 36D3 A9 00		            lda #<screen_mem3
   500 36D5 85 86		            sta tmp_screen
   501 36D7 A9 90		            lda #>screen_mem3
   502 36D9 85 87		            sta tmp_screen+1
   503 				            
   504 36DB A2 04		            ldx #4     ; 4 pages = 1K
   505 36DD 20 E1 36		            jsr do_x_pages
   506 36E0 60			            rts
   507
   508 				; invert x pages, starting from tmp_screen
   509
   510 36E1			do_x_pages
   511 36E1 A0 00		            ldy #0
   512 36E3			do_page
   513 36E3 B1 86		            lda (tmp_screen),y
   514 36E5 49 FF		            eor #$ff
   515 36E7 91 86		            sta (tmp_screen),y
   516 36E9 C8			            iny
   517 36EA D0 F7		            bne do_page 
   518
   519 36EC E6 87		            inc tmp_screen+1
   520 36EE CA			            dex
   521 36EF D0 F2		            bne do_page
   522 36F1 60			            rts
   523
   524 36F2			turn_color_ball
   525 36F2 A6 B5		            ldx player_turn
   526 36F4 BD FB 36		            lda color_turn,x
   527 36F7 8D C7 02		            sta COLOR3
   528 36FA 60			            rts
   529 				            
   530 36FB 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   531
   532 36FE			show_menu_options
   533 36FE A9 50		            lda #<controller_text
   534 3700 8D F6 50		            sta menu_line1_ptr
   535 3703 A9 52		            lda #>controller_text
   536 3705 8D F7 50		            sta menu_line1_ptr+1
   537
   538 3708 20 90 3E		            jsr show_player_mode
   539
   540 370B A9 A0		            lda #<level_text
   541 370D 8D FC 50		            sta menu_line3_ptr
   542 3710 A9 52		            lda #>level_text
   543 3712 8D FD 50		            sta menu_line3_ptr+1
   544
   545 3715 A9 00		            lda #0
   546 3717 85 83		            sta winner_color
   547 3719 60			            rts
   548
   549 371A			show_end_screen
   550 371A A9 FC		            lda #<empty_text
   551 371C 8D F6 50		            sta menu_line1_ptr
   552 371F 8D FC 50		            sta menu_line3_ptr
   553 3722 A9 52		            lda #>empty_text
   554 3724 8D F7 50		            sta menu_line1_ptr+1
   555 3727 8D FD 50		            sta menu_line3_ptr+1
   556
   557 372A AD 2E 51		            lda score_p1
   558 372D CD 2F 51		            cmp score_p2
   559 3730 90 0F		            bcc player_2_wins
   560
   561 3732 A9 10		            lda #<winner_one_text
   562 3734 8D F9 50		            sta menu_line2_ptr
   563 3737 A9 53		            lda #>winner_one_text
   564 3739 8D FA 50		            sta menu_line2_ptr+1
   565
   566 373C A9 50		            lda #BASE_COLOR_P1
   567 373E 85 83		            sta winner_color
   568 3740 60			            rts
   569
   570 3741			player_2_wins
   571 3741 A9 24		            lda #<winner_two_text
   572 3743 8D F9 50		            sta menu_line2_ptr
   573 3746 A9 53		            lda #>winner_two_text
   574 3748 8D FA 50		            sta menu_line2_ptr+1
   575
   576 374B A9 B0		            lda #BASE_COLOR_P2
   577 374D 85 83		            sta winner_color
   578
   579 374F 60			            rts
   580
   581 				; A, X, Y are already saved by the OS
   582 3750			vbi
   583 3750 20 DC 31		            jsr copy_shadow
   584
   585 3753 A5 80		            lda music_toggle
   586 3755 F0 03		            beq skip_music
   587 3757 20 97 31		            jsr play_song
   588 375A			skip_music
   589
   590 				; toggle music on/off with spacebar
   591 375A AD FC 02		            lda 764
   592 375D C9 21		            cmp #$21
   593 375F D0 10		            bne no_spacebar
   594 3761 A5 80		            lda music_toggle
   595 3763 49 80		            eor #128
   596 3765 85 80		            sta music_toggle
   597 3767 D0 03		            bne music_turned_on
   598 3769 20 60 32		            jsr music_off
   599
   600 376C			music_turned_on
   601 376C A9 FF		            lda #255
   602 376E 8D FC 02		            sta 764
   603
   604 3771			no_spacebar
   605 3771 20 5C 39		            jsr play_sound_bat
   606 3774 20 7A 39		            jsr play_sound_edge
   607
   608 3777 A9 A7		            lda #<dli_header
   609 3779 8D 00 02		            sta VDSLST
   610 377C A9 35		            lda #>dli_header
   611 377E 8D 01 02		            sta VDSLST+1
   612
   613 3781 A9 2E		            lda #%00101110  ; enable P/M DMA
   614 3783 8D 2F 02		            sta SDMCTL
   615 3786 A9 00		            lda #0
   616 3788 85 4D		            sta 77      ; attract off
   617 378A A9 98		            lda #>rotor_font
   618 378C 8D F4 02		            sta 756
   619
   620 378F A9 30		            lda #$30
   621 3791 8D 00 D0		            sta HPOSP0
   622 3794 A9 B0		            lda #$b0
   623 3796 8D 01 D0		            sta HPOSP1
   624
   625 				; menu switching thingy
   626
   627 3799 AD 1F D0		            lda CONSOL
   628 379C C9 03		            cmp #3  ; option button
   629 379E D0 1B		            bne no_option_pressed
   630 37A0 A5 8C		            lda game_state
   631 37A2 C9 01		            cmp #STATE_IN_MENU
   632 37A4 F0 27		            beq check_game_state
   633
   634 				; prevent menu option directly after leaving in-game state
   635 37A6 A9 03		            lda #3
   636 37A8 8D 4C 3E		            sta previous_consol
   637
   638 37AB			go_menu_mode
   639 37AB 20 C7 3A		            jsr wipe_ball
   640
   641 37AE 20 FA 31		            jsr music_normal_volume
   642
   643 37B1 20 FE 36		            jsr show_menu_options
   644
   645 37B4 A9 01		            lda #STATE_IN_MENU
   646 37B6 85 8C		            sta game_state
   647 37B8 4C CD 37		            jmp check_game_state
   648
   649 37BB			no_option_pressed
   650 37BB C9 06		            cmp #6  ; start pressed
   651 37BD D0 0E		            bne check_game_state
   652
   653 				; reset game
   654
   655 37BF			reset_game
   656 37BF 20 05 32		            jsr music_low_volume
   657
   658 37C2 20 C7 3A		            jsr wipe_ball
   659 				            
   660 37C5 A9 01		            lda #1
   661 37C7 85 B6		            sta game_restart
   662
   663 37C9 A9 00		            lda #STATE_IN_GAME
   664 37CB 85 8C		            sta game_state
   665
   666 37CD			check_game_state
   667 37CD A5 8C		            lda game_state
   668 37CF D0 03		            bne no_main_game_state
   669 37D1 4C 6D 38		            jmp main_game_vbi
   670
   671 37D4			no_main_game_state
   672 37D4 C9 02		            cmp #STATE_IN_END
   673 37D6 D0 1C		            bne menu_vbi
   674
   675 				; end screen vbi
   676 37D8 A5 8F		            lda end_screen_delay
   677 37DA D0 10		            bne stay_in_end_screen
   678
   679 37DC 20 A6 31		            jsr restart_music
   680 37DF 20 FA 31		            jsr music_normal_volume
   681
   682 				; here we show the menu again
   683 37E2 20 FE 36		            jsr show_menu_options
   684
   685 37E5 A9 01		            lda #STATE_IN_MENU
   686 37E7 85 8C		            sta game_state
   687 37E9 4C F4 37		            jmp menu_vbi
   688
   689 37EC			stay_in_end_screen
   690 37EC 20 3E 39		            jsr play_sound_end_game
   691 37EF C6 8F		            dec end_screen_delay
   692 37F1 4C 39 38		            jmp wait_depressed
   693
   694 				; within menu vbi
   695
   696 37F4			menu_vbi
   697 37F4 A5 8A		            lda player_mode
   698 37F6 F0 07		            beq check_human_buttons
   699
   700 37F8 20 C1 34		            jsr is_player1_button_pressed
   701 37FB D0 C2		            bne reset_game
   702 37FD F0 05		            beq check_consol_buttons
   703
   704 37FF			check_human_buttons
   705 37FF 20 D8 34		            jsr is_both_buttons
   706 3802 D0 BB		            bne reset_game
   707
   708 3804			check_consol_buttons
   709 3804 AD 1F D0		            lda CONSOL
   710 3807 C9 05		            cmp #5          ; select
   711 3809 D0 18		            bne no_level_select
   712 				            
   713 380B AD 4C 3E		            lda previous_consol
   714 380E C9 05		            cmp #5
   715 3810 F0 27		            beq wait_depressed
   716 				            
   717 3812 20 73 3E		            jsr increase_level
   718 3815 AE 4D 3E		            ldx current_level_index
   719 3818 20 5A 3E		            jsr set_level_ball_speed            
   720
   721 381B A9 05		            lda #5
   722 381D 8D 4C 3E		            sta previous_consol
   723 3820 4C 39 38		            jmp wait_depressed
   724
   725 3823			no_level_select
   726 3823 C9 03		            cmp #3          ; option
   727 3825 D0 0F		            bne no_player_mode_select
   728
   729 3827 AD 4C 3E		            lda previous_consol
   730 382A C9 03		            cmp #3
   731 382C F0 0B		            beq wait_depressed
   732
   733 382E 20 83 3E		            jsr increase_player_mode
   734 3831 20 90 3E		            jsr show_player_mode
   735 				            
   736 3834 A9 03		            lda #3            
   737 3836			no_player_mode_select
   738 3836 8D 4C 3E		            sta previous_consol
   739
   740 3839			wait_depressed
   741 3839 A9 01		            lda #1      ; dl jump
   742 383B 8D 55 50		            sta menu_dl_hook
   743 383E A9 EE		            lda #<menu_dl_part
   744 3840 8D 56 50		            sta menu_dl_hook+1
   745 3843 A9 50		            lda #>menu_dl_part
   746 3845 8D 57 50		            sta menu_dl_hook+2
   747
   748 				; detect/show controller type (used for both players)
   749 3848 20 54 38		            jsr detect_show_driver
   750
   751 384B 20 C9 39		            jsr handle_player1
   752 384E 20 E9 39		            jsr handle_player2
   753
   754 3851 4C 13 39		            jmp exit_vbi
   755
   756 				; X = port/driver to detect
   757 3854			detect_show_driver
   758 3854 20 3B 34		            jsr driver_detect
   759 3857 A8			            tay
   760 3858 B9 38 53		            lda driver_text_lo,y
   761 385B 85 86		            sta tmp_screen
   762 385D B9 3C 53		            lda driver_text_hi,y
   763 3860 85 87		            sta tmp_screen+1
   764
   765 3862 A0 07		            ldy #7
   766 3864			show_driv
   767 3864 B1 86		            lda (tmp_screen),y
   768 3866 99 5A 52		            sta driver_screen,y
   769 3869 88			            dey
   770 386A 10 F8		            bpl show_driv
   771 386C 60			            rts
   772
   773 				; main game vbi
   774 386D			main_game_vbi
   775 386D A5 B6		            lda game_restart
   776 386F F0 2F		            beq no_restart
   777
   778 				; restart game
   779
   780 3871 20 56 39		            jsr silence_end
   781
   782 3874 A9 00		            lda #0
   783 3876 85 B6		            sta game_restart
   784 				            
   785 3878 20 16 3C		            jsr reset_score
   786 387B 20 E4 3B		            jsr show_score_p1
   787 387E 20 FD 3B		            jsr show_score_p2
   788
   789 3881 A6 9C		            ldx p1_angle
   790 3883 86 AA		            stx ball_angle_start
   791 3885 20 25 3A		            jsr ball_to_start_position
   792 3888 20 34 3A		            jsr prepare_ball_end_position
   793
   794 388B A9 00		            lda #0
   795 388D 85 A0		            sta mp_collision
   796 388F 85 A1		            sta in_collision
   797 3891 85 A3		            sta edge_delay
   798 3893 8D 1E D0		            sta HITCLR
   799
   800 3896 A9 02		            lda #2
   801 3898 85 B5		            sta player_turn
   802
   803 389A 20 F2 36		            jsr turn_color_ball
   804 389D 4C 13 39		            jmp exit_vbi
   805
   806 38A0			no_restart
   807 				; remove menu hook
   808 38A0 A9 0F		            lda #$0f        ; dl gfx 8
   809 38A2 8D 55 50		            sta menu_dl_hook
   810 38A5 8D 56 50		            sta menu_dl_hook+1
   811 38A8 8D 57 50		            sta menu_dl_hook+2
   812
   813 38AB AD 08 D0		            lda M0PL
   814 38AE 85 A0		            sta mp_collision
   815 38B0 AD 09 D0		            lda M1PL
   816 38B3 05 A0		            ora mp_collision
   817 38B5 85 A0		            sta mp_collision
   818 				 
   819 38B7 20 C9 39		            jsr handle_player1
   820 38BA 20 E9 39		            jsr handle_player2
   821
   822 				; handle ball
   823
   824 38BD 20 C7 3A		            jsr wipe_ball         
   825
   826 				; Check ball collision with bat
   827
   828 38C0 A5 A4		            lda bat_collision_delay
   829 38C2 F0 05		            beq check_allowed
   830 38C4 C6 A4		            dec bat_collision_delay
   831 38C6 4C E0 38		            jmp move_one
   832
   833 38C9			check_allowed
   834 38C9 A5 A0		            lda mp_collision
   835 38CB F0 0F		            beq reset_in_collision
   836
   837 38CD A5 A1		            lda in_collision
   838 38CF D0 0F		            bne no_first_hit
   839
   840 38D1 E6 A1		            inc in_collision            
   841 38D3 20 61 3A		            jsr bounce_bat_ball 
   842 				            
   843 38D6 20 39 39		            jsr start_sound_bat          
   844 				            
   845 38D9 4C E0 38		            jmp move_one
   846 				            
   847 38DC			reset_in_collision
   848 38DC A9 00		            lda #0
   849 38DE 85 A1		            sta in_collision        
   850
   851 38E0			move_one
   852 38E0			no_first_hit
   853 38E0 20 68 3D		            jsr move_current_xy
   854 38E3 F0 1B		            beq still_moving
   855
   856 				; edge detected
   857
   858 38E5 20 75 39		            jsr start_sound_edge
   859
   860 38E8 A5 AB		            lda ball_angle_end
   861 38EA 85 AA		            sta ball_angle_start
   862
   863 38EC 20 58 3A		            jsr ball_current_to_start_position
   864 38EF 20 34 3A		            jsr prepare_ball_end_position
   865
   866 38F2 20 95 39		            jsr update_score
   867 38F5 D0 34		            bne game_ends
   868
   869 				; switch turns
   870 38F7 A5 B5		            lda player_turn
   871 38F9 49 03		            eor #3              ; 1 => 2, 2 => 1
   872 38FB 85 B5		            sta player_turn
   873 38FD 20 F2 36		            jsr turn_color_ball
   874
   875 3900			still_moving
   876 3900 A5 EB		            lda current_x+1
   877 3902 85 A6		            sta ball_current_x
   878 3904 A5 ED		            lda current_y+1
   879 3906 85 A7		            sta ball_current_y
   880
   881 3908 20 DC 3A		            jsr show_ball
   882
   883 390B A9 00		            lda #0
   884 390D 8D 18 D0		            sta $d018           
   885
   886 				; anything in A to clear collisions
   887 3910 8D 1E D0		            sta HITCLR
   888
   889 3913			exit_vbi
   890
   891 				; always set header stuff
   892 3913 A9 03		            lda #3
   893 3915 8D 08 D0		            sta SIZEP0
   894 3918 8D 09 D0		            sta SIZEP1
   895
   896 				; background in PM0/1 for header
   897 391B A9 FF		            lda #255
   898 391D A2 07		            ldx #7
   899 391F			fill_pm_header
   900 391F 9D 00 0E		            sta p0_area,x
   901 3922 9D 80 0E		            sta p1_area,x
   902 3925 CA			            dex
   903 3926 10 F7		            bpl fill_pm_header
   904
   905 3928 4C 62 E4		            jmp $e462
   906
   907 392B			game_ends
   908 392B A9 FF		            lda #255
   909 392D 85 8F		            sta end_screen_delay
   910
   911 392F 20 1A 37		            jsr show_end_screen
   912
   913 3932 A9 02		            lda #STATE_IN_END
   914 3934 85 8C		            sta game_state
   915
   916 3936 4C 13 39		            jmp exit_vbi
   917
   918 3939			start_sound_bat
   919 3939 A9 0A		            lda #10
   920 393B 85 8D		            sta volume_hit_bat
   921 393D 60			            rts
   922
   923 393E			play_sound_end_game
   924 393E 20 60 32		            jsr music_off
   925
   926 3941 A5 8F		            lda end_screen_delay
   927 3943 C9 C0		            cmp #192
   928 3945 90 0F		            bcc silence_end
   929 3947 4A			            lsr
   930 3948 25 8F		            and end_screen_delay
   931 394A 4A			            lsr
   932 394B 09 20		            ora #$20
   933 394D 8D 73 32		            sta SHADOW+4
   934 				            ;lda end_screen_delay
   935 3950 A9 AA		            lda #$aa
   936 3952 8D 74 32		            sta SHADOW+5
   937 3955 60			            rts
   938 3956			silence_end
   939 3956 A9 00		            lda #0
   940 3958 8D 74 32		            sta SHADOW+5
   941 395B 60			            rts
   942
   943 395C			play_sound_bat
   944 395C A5 8D		            lda volume_hit_bat
   945 395E 30 14		            bmi silenced_bat
   946
   947 3960 A5 B5		            lda player_turn
   948 3962 0A			            asl
   949 3963 0A			            asl
   950 3964 69 30		            adc #$30
   951 3966 E5 B3		            sbc angle_diff_bat
   952 3968 8D 73 32		            sta SHADOW+4    ; $d204
   953 396B A5 8D		            lda volume_hit_bat
   954 396D 09 A0		            ora #$a0
   955 396F 8D 74 32		            sta SHADOW+5    ; $d205
   956 3972 C6 8D		            dec volume_hit_bat
   957 3974			silenced_bat
   958 3974 60			            rts
   959
   960 3975			start_sound_edge
   961 3975 A9 04		            lda #4
   962 3977 85 8E		            sta volume_hit_edge
   963 3979 60			            rts
   964
   965 397A			play_sound_edge
   966 397A A5 8E		            lda volume_hit_edge
   967 397C 30 16		            bmi silenced_edge
   968 397E D0 06		            bne no_silenced_edge
   969 3980 8D 74 32		            sta SHADOW+5    ; $d205
   970 3983 C6 8E		            dec volume_hit_edge
   971 3985 60			            rts            
   972
   973 3986			no_silenced_edge
   974 3986 A9 08		            lda #$08
   975 3988 8D 73 32		            sta SHADOW+4    ; $d204
   976 398B A5 8E		            lda volume_hit_edge
   977 398D 09 26		            ora #$26
   978 398F 8D 74 32		            sta SHADOW+5    ; $d205
   979 3992 C6 8E		            dec volume_hit_edge
   980 3994			silenced_edge
   981 3994 60			            rts
   982
   983 				; Update score
   984 				; Score > max score, then exit A = 1, otherwise A = 0
   985
   986 3995			update_score
   987 3995 A5 B5		            lda player_turn
   988 3997 C9 01		            cmp #1
   989 3999 D0 12		            bne was_player2_turn
   990 				; was player 1 turn, so player 2 gets a point
   991 399B 20 2B 3C		            jsr inc_score_p2
   992 399E 20 FD 3B		            jsr show_score_p2
   993
   994 39A1 AD 2F 51		            lda score_p2
   995 39A4 C9 11		            cmp #MAX_SCORE
   996 39A6 D0 17		            bne reset_edge_delay
   997
   998 39A8 A9 01		            lda #STATE_IN_MENU
   999 39AA 85 8C		            sta game_state
  1000 39AC 60			            rts
  1001
  1002 39AD			was_player2_turn
  1003 39AD 20 1F 3C		            jsr inc_score_p1
  1004 39B0 20 E4 3B		            jsr show_score_p1
  1005
  1006 39B3 AD 2E 51		            lda score_p1
  1007 39B6 C9 11		            cmp #MAX_SCORE
  1008 39B8 D0 05		            bne reset_edge_delay
  1009
  1010 39BA A9 01		            lda #STATE_IN_MENU
  1011 39BC 85 8C		            sta game_state
  1012 39BE 60			            rts
  1013
  1014 39BF			reset_edge_delay
  1015 39BF A9 0A		            lda #10
  1016 39C1 85 A3		            sta edge_delay
  1017
  1018 39C3			no_edge
  1019
  1020 39C3 A9 00		            lda #0      ; no end game
  1021 				; anything in A to clear collisions
  1022 39C5 8D 1E D0		            sta HITCLR
  1023 39C8 60			            rts
  1024
  1025 				; player 1
  1026 				; - wipe shape at previous y-position
  1027 				; - move player using controller
  1028 				; - set sprite positions
  1029
  1030 39C9			handle_player1
  1031 39C9 20 4C 3B		            jsr wipe_p1         ; wipe previous shape player 1
  1032
  1033 39CC A5 8A		            lda player_mode
  1034 39CE C9 02		            cmp #2
  1035 39D0 F0 0C		            beq do_p1_is_computer
  1036
  1037 39D2 A2 00		            ldx #0              ; player 1
  1038 39D4 20 6E 34		            jsr main_driver
  1039 39D7 20 07 3A		            jsr move_player
  1040 				            
  1041 39DA 20 00 3B		            jsr show_p1
  1042 39DD 60			            rts
  1043
  1044 				; p1 now controlled by computer
  1045 39DE			do_p1_is_computer
  1046 39DE A2 00		            ldx #0              ; player 1
  1047 39E0 E6 9C		            inc p1_angle
  1048 39E2 20 07 3A		            jsr move_player
  1049
  1050 39E5 20 00 3B		            jsr show_p1
  1051 39E8 60			            rts
  1052
  1053 				; player 2
  1054 				; - wipe shape at previous y-position
  1055 				; - move player using controller
  1056 				; - set sprite positions
  1057
  1058 39E9			handle_player2
  1059 39E9 20 61 3B		            jsr wipe_p2         ; wipe previous shape player 2
  1060
  1061 39EC A5 8A		            lda player_mode
  1062 39EE D0 0C		            bne do_p2_is_computer
  1063
  1064 39F0 A2 01		            ldx #1              ; player 2
  1065 39F2 20 6E 34		            jsr main_driver
  1066 39F5 20 07 3A		            jsr move_player
  1067 				                        
  1068 39F8 20 26 3B		            jsr show_p2
  1069 39FB 60			            rts
  1070
  1071 				; p2 now controlled by computer
  1072 39FC			do_p2_is_computer
  1073 39FC A2 01		            ldx #1              ; player 2
  1074 39FE C6 9D		            dec p2_angle
  1075 3A00 20 07 3A		            jsr move_player
  1076
  1077 3A03 20 26 3B		            jsr show_p2
  1078 3A06 60			            rts
  1079
  1080 				; move player 1/2
  1081 				; right - clockwise, left = anti-clockwise
  1082
  1083 				; X = 0, player 1
  1084 				; X = 1, player 2
  1085
  1086 				; Y = driver mode:
  1087 				; 0 : stick
  1088 				; 1 : paddle
  1089 				; 2 : driving
  1090 				; 3 : computer
  1091 				            
  1092 3A07			move_player
  1093 3A07 B5 9C		            lda p1_angle,x
  1094 3A09 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1095 3A0B 49 40		            eor #64                     ; perpendicular to the circle angle
  1096 3A0D 95 90		            sta p1_shape,x
  1097
  1098 3A0F B4 9C		            ldy p1_angle,x
  1099 3A11 B9 00 3F		            lda inner_x_tab,y
  1100 3A14 4A			            lsr
  1101 3A15 69 20		            adc #inner_x_margin/2
  1102 3A17 95 94		            sta player1_x,x
  1103 3A19 B9 00 40		            lda inner_y_tab,y
  1104 3A1C 4A			            lsr
  1105 3A1D 95 98		            sta player1_y,x
  1106
  1107 3A1F B4 90		            ldy p1_shape,x
  1108 3A21 20 9B 3B		            jsr shape_to_ptr
  1109
  1110 3A24 60			            rts
  1111
  1112 				; Set ball at start position
  1113 				; - start angle current player
  1114 				; - start position by inner table
  1115 				; - collision delay set?
  1116
  1117 				; Set ball current position to start position
  1118 				; input:
  1119 				; X = angle of start position
  1120 				; output:
  1121 				; ball position: (ball_current_x, ball_current_y)
  1122 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1123 3A25			ball_to_start_position
  1124 3A25 BD 00 3F		            lda inner_x_tab,x
  1125 3A28 85 A6		            sta ball_current_x
  1126 3A2A 85 E6		            sta tmp_x1
  1127 3A2C BD 00 40		            lda inner_y_tab,x
  1128 3A2F 85 A7		            sta ball_current_y
  1129 3A31 85 E7		            sta tmp_y1
  1130 3A33 60			            rts
  1131
  1132 				; Prepare ball end position
  1133 				; - end angle current player
  1134 				; - end position by outer table
  1135 				; - calculate step size x,y
  1136
  1137 				; Input:
  1138 				; - ball_angle_start
  1139 				; - ball speed
  1140 				; Output:
  1141 				; - ball_andle_end
  1142 				; - ball start position (tmp_x1, tmp_y1)
  1143 				; - ball end position (tmp_x2, tmp_y2)
  1144 				; - step size (step_x, step_y) for ball movement
  1145 3A34			prepare_ball_end_position
  1146 3A34 A5 AA		            lda ball_angle_start
  1147 3A36 49 80		            eor #128        ; other side
  1148 3A38 85 AB		            sta ball_angle_end
  1149 3A3A AA			            tax
  1150 3A3B 20 BC 3A		            jsr angle_to_end_position
  1151 				                        
  1152 3A3E 20 FB 3C		            jsr init_current_xy
  1153 				            
  1154 				; move current a little bit            
  1155 3A41 20 68 3D		            jsr move_current_xy
  1156 				; ignore end indicator, since we only just started
  1157
  1158
  1159 3A44 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1160 3A46 85 A4		            sta bat_collision_delay
  1161 3A48 60			            rts
  1162
  1163 				; x = angle 0..255
  1164 3A49			outer_angle_to_start_position
  1165 3A49 BD 00 10		            lda outer_x_256,x
  1166 3A4C 85 A6		            sta ball_current_x
  1167 3A4E 85 E6		            sta tmp_x1
  1168 3A50 BD 00 11		            lda outer_y_256,x
  1169 3A53 85 A7		            sta ball_current_y
  1170 3A55 85 E7		            sta tmp_y1
  1171 3A57 60			            rts
  1172
  1173 3A58			ball_current_to_start_position
  1174 3A58 A5 A6		            lda ball_current_x
  1175 3A5A 85 E6		            sta tmp_x1
  1176 3A5C A5 A7		            lda ball_current_y
  1177 3A5E 85 E7		            sta tmp_y1
  1178 3A60 60			            rts
  1179
  1180 				; Ball collides with bat
  1181 				; - start ball angle = end ball angle
  1182 				; - calculate diff between bat and ball end angle
  1183 				; - calculate new end angle
  1184 				; - Set ball at start position
  1185 				; - Prepare ball end position
  1186
  1187 3A61			bounce_bat_ball
  1188 				; set new start of ball
  1189 				; @todo check ball angles
  1190 				; set new ball start angle (= previous end angle)
  1191 3A61 A5 AB		            lda ball_angle_end
  1192 3A63 85 AA		            sta ball_angle_start
  1193 				            
  1194 				; alternative?
  1195 				            ;ldx ball_angle_start
  1196 				            ;jsr ball_to_start_position          
  1197 3A65 20 58 3A		            jsr ball_current_to_start_position
  1198
  1199 				; which player hit the ball?
  1200 				; collision bits:
  1201 				; xxxxx1x1 : 1 is player1 collision
  1202 				; xxxx1010 : 2 is player2 collision
  1203
  1204 3A68 A5 A0		            lda mp_collision
  1205 3A6A 4A			            lsr
  1206 3A6B 4A			            lsr
  1207 3A6C 05 A0		            ora mp_collision
  1208 3A6E 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1209
  1210 				; who's turn is it and who bounced the ball?
  1211
  1212 3A70 25 B5		            and player_turn
  1213 3A72 F0 06		            beq no_switch_turn
  1214
  1215 3A74 A5 B5		            lda player_turn
  1216 3A76 49 03		            eor #3              ; 1 => 2, 2 => 1
  1217 3A78 85 B5		            sta player_turn 
  1218
  1219 3A7A			no_switch_turn
  1220 3A7A 20 F2 36		            jsr turn_color_ball
  1221
  1222 3A7D A5 B5		            lda player_turn
  1223 3A7F 49 03		            eor #3
  1224 3A81 AA			            tax
  1225 3A82 CA			            dex                 ; index 0,1 (player = 1,2)
  1226 3A83 B5 9C		            lda p1_angle,x
  1227
  1228 				; Calculate diff between bat angle position and new ball start position
  1229 3A85 85 B0		            sta tmp_angle1
  1230
  1231 3A87 A5 AA		            lda ball_angle_start
  1232 3A89 85 B1		            sta tmp_angle2
  1233
  1234 3A8B 20 37 3C		            jsr calc_angle_diff
  1235
  1236 3A8E 0A			            asl
  1237 3A8F 0A			            asl
  1238 3A90 0A			            asl
  1239 3A91 85 B3		            sta angle_diff_bat
  1240
  1241 3A93 A5 B0		            lda tmp_angle1
  1242 3A95 18			            clc
  1243 3A96 65 B2		            adc add_to_angle
  1244 3A98 49 80		            eor #128            ; other side
  1245 3A9A 85 B0		            sta tmp_angle1
  1246 				            
  1247 3A9C A5 B4		            lda tmp_angle_direction
  1248 3A9E D0 0A		            bne diff_clockwise
  1249 				; diff counter clockwise
  1250 3AA0 A5 B0		            lda tmp_angle1
  1251 3AA2 18			            clc
  1252 3AA3 65 B3		            adc angle_diff_bat
  1253 3AA5 85 B0		            sta tmp_angle1
  1254 3AA7 4C B1 3A		            jmp calc_done            
  1255
  1256 3AAA			diff_clockwise
  1257 3AAA A5 B0		            lda tmp_angle1
  1258 3AAC 38			            sec
  1259 3AAD E5 B3		            sbc angle_diff_bat
  1260 3AAF 85 B0		            sta tmp_angle1
  1261 				            
  1262 				; calculation done            
  1263 3AB1			calc_done
  1264 3AB1 A5 B0		            lda tmp_angle1
  1265 3AB3 85 AB		            sta ball_angle_end
  1266 3AB5 AA			            tax
  1267 3AB6 20 BC 3A		            jsr angle_to_end_position
  1268 				                        
  1269 3AB9 4C FB 3C		            jmp init_current_xy
  1270
  1271 				; x = angle 0..255
  1272 3ABC			angle_to_end_position
  1273 3ABC BD 00 10		            lda outer_x_256,x
  1274 3ABF 85 E8		            sta tmp_x2
  1275 3AC1 BD 00 11		            lda outer_y_256,x
  1276 3AC4 85 E9		            sta tmp_y2
  1277 3AC6 60			            rts
  1278
  1279 3AC7			wipe_ball
  1280 3AC7 A5 A7		            lda ball_current_y
  1281 3AC9 4A			            lsr
  1282 3ACA 69 06		            adc #ball_top_margin
  1283 3ACC AA			            tax                 ; x = real y position on screen
  1284 3ACD A9 00		            lda #0
  1285 3ACF 9D 80 0D		            sta msl_area,x
  1286 3AD2 9D 81 0D		            sta msl_area+1,x
  1287 3AD5 9D 82 0D		            sta msl_area+2,x
  1288 3AD8 9D 83 0D		            sta msl_area+3,x
  1289 3ADB 60			            rts
  1290
  1291 3ADC			show_ball
  1292 3ADC A5 A7		            lda ball_current_y
  1293 3ADE 4A			            lsr
  1294 3ADF 69 06		            adc #ball_top_margin
  1295 3AE1 AA			            tax                 ; x = real y position on screen
  1296
  1297 3AE2 A9 02		            lda #%00000010
  1298 3AE4 9D 80 0D		            sta msl_area,x
  1299 3AE7 9D 83 0D		            sta msl_area+3,x
  1300 3AEA A9 07		            lda #%00000111
  1301 3AEC 9D 81 0D		            sta msl_area+1,x
  1302 3AEF 9D 82 0D		            sta msl_area+2,x
  1303 				            
  1304 3AF2 A5 A6		            lda ball_current_x
  1305 3AF4 4A			            lsr
  1306 3AF5 69 45		            adc #ball_left_margin
  1307 3AF7 8D 05 D0		            sta HPOSM1
  1308 3AFA 69 02		            adc #2
  1309 3AFC 8D 04 D0		            sta HPOSM0
  1310 				                        
  1311 3AFF 60			            rts
  1312 				            
  1313 3B00			show_p1
  1314 				; y position
  1315 3B00 A5 98		            lda player1_y
  1316 3B02 18			            clc
  1317 3B03 69 01		            adc #upper_margin
  1318 3B05 AA			            tax
  1319
  1320 3B06 A0 00		            ldy #0
  1321 3B08			show_shape1
  1322 3B08 B1 84		            lda (shape_ptr),y
  1323 3B0A 9D 00 0E		            sta p0_area,x 
  1324 3B0D C8			            iny
  1325 3B0E B1 84		            lda (shape_ptr),y
  1326 3B10 9D 00 0F		            sta p2_area,x
  1327 3B13 E8			            inx
  1328 3B14 C8			            iny
  1329 3B15 C0 20		            cpy #32
  1330 3B17 D0 EF		            bne show_shape1
  1331
  1332 				; x position
  1333 3B19 A5 94		            lda player1_x
  1334 3B1B 18			            clc
  1335 3B1C 69 20		            adc #left_margin
  1336 3B1E 85 81		            sta shadow_HPOSP0
  1337 3B20 69 08		            adc #8
  1338 3B22 8D 02 D0		            sta HPOSP2
  1339 3B25 60			            rts
  1340
  1341 3B26			show_p2
  1342 				; y position
  1343 3B26 A5 99		            lda player2_y
  1344 3B28 18			            clc
  1345 3B29 69 01		            adc #upper_margin
  1346 3B2B AA			            tax
  1347
  1348 3B2C A0 00		            ldy #0
  1349 3B2E			show_shape2
  1350 3B2E B1 84		            lda (shape_ptr),y
  1351 3B30 9D 80 0E		            sta p1_area,x
  1352 3B33 C8			            iny
  1353 3B34 B1 84		            lda (shape_ptr),y
  1354 3B36 9D 80 0F		            sta p3_area,x
  1355 3B39 E8			            inx
  1356 3B3A C8			            iny
  1357 3B3B C0 20		            cpy #32
  1358 3B3D D0 EF		            bne show_shape2
  1359
  1360 				; x position
  1361 3B3F A5 95		            lda player2_x
  1362 3B41 18			            clc
  1363 3B42 69 20		            adc #left_margin
  1364 3B44 85 82		            sta shadow_HPOSP1
  1365 3B46 69 08		            adc #8
  1366 3B48 8D 03 D0		            sta HPOSP3
  1367 3B4B 60			            rts
  1368
  1369 3B4C			wipe_p1
  1370 3B4C A5 98		            lda player1_y
  1371 3B4E 18			            clc
  1372 3B4F 69 01		            adc #upper_margin
  1373 3B51 AA			            tax
  1374 				            
  1375 3B52 A0 10		            ldy #16
  1376 3B54 A9 00		            lda #0
  1377 3B56			wipe_it1            
  1378 3B56 9D 00 0E		            sta p0_area,x 
  1379 3B59 9D 00 0F		            sta p2_area,x
  1380 3B5C E8			            inx
  1381 3B5D 88			            dey
  1382 3B5E D0 F6		            bne wipe_it1 
  1383 3B60 60			            rts
  1384
  1385 3B61			wipe_p2
  1386 3B61 A5 99		            lda player2_y
  1387 3B63 18			            clc
  1388 3B64 69 01		            adc #upper_margin
  1389 3B66 AA			            tax
  1390 				            
  1391 3B67 A0 10		            ldy #16
  1392 3B69 A9 00		            lda #0
  1393 3B6B			wipe_it2            
  1394 3B6B 9D 80 0E		            sta p1_area,x
  1395 3B6E 9D 80 0F		            sta p3_area,x
  1396 3B71 E8			            inx
  1397 3B72 88			            dey
  1398 3B73 D0 F6		            bne wipe_it2 
  1399 3B75 60			            rts
  1400
  1401 3B76			make_shape_index
  1402 3B76 A9 00		            lda #<pm_shapes
  1403 3B78 85 84		            sta shape_ptr
  1404 3B7A A9 60		            lda #>pm_shapes
  1405 3B7C 85 85		            sta shape_ptr+1
  1406 				            
  1407 3B7E A2 00		            ldx #0
  1408 3B80			fill_pm_tab
  1409 3B80 A5 84		            lda shape_ptr
  1410 3B82 9D 00 14		            sta pm_shape_lo,x
  1411 3B85 A5 85		            lda shape_ptr+1
  1412 3B87 9D 80 14		            sta pm_shape_hi,x
  1413 				            
  1414 3B8A A5 84		            lda shape_ptr
  1415 3B8C 18			            clc
  1416 3B8D 69 20		            adc #32
  1417 3B8F 85 84		            sta shape_ptr
  1418 3B91 A5 85		            lda shape_ptr+1
  1419 3B93 69 00		            adc #0
  1420 3B95 85 85		            sta shape_ptr+1
  1421 				            
  1422 3B97 E8			            inx
  1423 3B98 10 E6		            bpl fill_pm_tab
  1424 				            
  1425 3B9A 60			            rts
  1426 				            
  1427 				; there are 128 shapes, each 32 bytes
  1428
  1429 				; y = shape index
  1430 3B9B			shape_to_ptr
  1431 3B9B B9 00 14		            lda pm_shape_lo,y
  1432 3B9E 85 84		            sta shape_ptr
  1433 3BA0 B9 80 14		            lda pm_shape_hi,y
  1434 3BA3 85 85		            sta shape_ptr+1
  1435
  1436 3BA5 60			            rts
  1437
  1438 				; turn 1024 tables into 256 bytes for ball edge lookup
  1439 3BA6			make_outer_256
  1440 3BA6 A0 00		            ldy #0
  1441 3BA8 A2 00		            ldx #0
  1442 3BAA			conv_256
  1443 3BAA BD 00 44		            lda outer_x_tab,x
  1444 3BAD 99 00 10		            sta outer_x_256,y
  1445 3BB0 BD 00 45		            lda outer_x_tab+$100,x
  1446 3BB3 99 40 10		            sta outer_x_256+64,y
  1447 3BB6 BD 00 46		            lda outer_x_tab+$200,x
  1448 3BB9 99 80 10		            sta outer_x_256+128,y
  1449 3BBC BD 00 47		            lda outer_x_tab+$300,x
  1450 3BBF 99 C0 10		            sta outer_x_256+192,y
  1451 				            
  1452 3BC2 BD 00 48		            lda outer_y_tab,x
  1453 3BC5 99 00 11		            sta outer_y_256,y
  1454 3BC8 BD 00 49		            lda outer_y_tab+$100,x
  1455 3BCB 99 40 11		            sta outer_y_256+64,y
  1456 3BCE BD 00 4A		            lda outer_y_tab+$200,x
  1457 3BD1 99 80 11		            sta outer_y_256+128,y
  1458 3BD4 BD 00 4B		            lda outer_y_tab+$300,x
  1459 3BD7 99 C0 11		            sta outer_y_256+192,y
  1460
  1461 3BDA E8			            inx
  1462 3BDB E8			            inx
  1463 3BDC E8			            inx
  1464 3BDD E8			            inx
  1465 3BDE C8			            iny
  1466 3BDF C0 40		            cpy #64
  1467 3BE1 D0 C7		            bne conv_256            
  1468 3BE3 60			            rts
  1469
  1470 3BE4			show_score_p1
  1471 3BE4 AD 2E 51		            lda score_p1
  1472 3BE7 4A			            lsr
  1473 3BE8 4A			            lsr
  1474 3BE9 4A			            lsr
  1475 3BEA 4A			            lsr
  1476 3BEB F0 02		            beq do_space1
  1477 3BED 09 10		            ora #16
  1478 3BEF			do_space1
  1479 3BEF 8D 0B 51		            sta score_chars_p1
  1480 3BF2 AD 2E 51		            lda score_p1
  1481 3BF5 29 0F		            and #15
  1482 3BF7 09 10		            ora #16
  1483 3BF9 8D 0C 51		            sta score_chars_p1+1
  1484 3BFC 60			            rts
  1485
  1486 3BFD			show_score_p2
  1487 3BFD AD 2F 51		            lda score_p2
  1488 3C00 4A			            lsr
  1489 3C01 4A			            lsr
  1490 3C02 4A			            lsr
  1491 3C03 4A			            lsr
  1492 3C04 F0 02		            beq do_space2
  1493 3C06 09 10		            ora #16
  1494 3C08			do_space2
  1495 3C08 8D 2B 51		            sta score_chars_p2
  1496 3C0B AD 2F 51		            lda score_p2
  1497 3C0E 29 0F		            and #15
  1498 3C10 09 10		            ora #16
  1499 3C12 8D 2C 51		            sta score_chars_p2+1
  1500 3C15 60			            rts
  1501 				                        
  1502 3C16			reset_score
  1503 3C16 A9 00		            lda #0
  1504 3C18 8D 2E 51		            sta score_p1
  1505 3C1B 8D 2F 51		            sta score_p2
  1506 3C1E 60			            rts            
  1507 				         
  1508 3C1F			inc_score_p1
  1509 3C1F F8			            sed
  1510 3C20 AD 2E 51		            lda score_p1
  1511 3C23 18			            clc
  1512 3C24 69 01		            adc #1
  1513 3C26 8D 2E 51		            sta score_p1    
  1514 3C29 D8			            cld
  1515 3C2A 60			            rts
  1516
  1517 3C2B			inc_score_p2
  1518 3C2B F8			            sed
  1519 3C2C AD 2F 51		            lda score_p2
  1520 3C2F 18			            clc
  1521 3C30 69 01		            adc #1
  1522 3C32 8D 2F 51		            sta score_p2
  1523 3C35 D8			            cld
  1524 3C36 60			            rts
  1525
  1526 				; calculate the difference between angle1 and angle2
  1527
  1528 				; input:
  1529 				; tmp_angle1 (0..255)
  1530 				; tmp_angle2 (0..255)
  1531
  1532 				; output:
  1533 				; tmp_angle_diff, A: difference between angle1 and angle2
  1534 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1535
  1536 3C37			calc_angle_diff
  1537 3C37 A9 00		            lda #0
  1538 3C39 85 B2		            sta add_to_angle
  1539 3C3B 85 B4		            sta tmp_angle_direction
  1540
  1541 				; make sure we can compare angles, otherwise add $40 to angles
  1542 3C3D A5 B0		            lda tmp_angle1
  1543 3C3F C9 C0		            cmp #$c0
  1544 3C41 B0 06		            bcs too_large
  1545 3C43 A5 B1		            lda tmp_angle2
  1546 3C45 C9 C0		            cmp #$c0
  1547 3C47 90 12		            bcc not_too_large
  1548 3C49			too_large
  1549 3C49 A5 B0		            lda tmp_angle1
  1550 3C4B 38			            sec
  1551 3C4C E9 40		            sbc #$40
  1552 3C4E 85 B0		            sta tmp_angle1
  1553 				            
  1554 3C50 A5 B1		            lda tmp_angle2
  1555 3C52 38			            sec
  1556 3C53 E9 40		            sbc #$40
  1557 3C55 85 B1		            sta tmp_angle2
  1558 				            
  1559 3C57 A9 40		            lda #$40
  1560 3C59 85 B2		            sta add_to_angle
  1561
  1562 3C5B			not_too_large
  1563 3C5B A5 B1		            lda tmp_angle2
  1564 3C5D C5 B0		            cmp tmp_angle1
  1565 3C5F 90 0A		            bcc angle2_smaller_angle1
  1566 				; ball >= play
  1567 3C61 38			            sec
  1568 3C62 E5 B0		            sbc tmp_angle1
  1569 3C64 85 B7		            sta tmp_angle_diff
  1570 				            
  1571 3C66 E6 B4		            inc tmp_angle_direction
  1572 3C68 4C 72 3C		            jmp diff_calculated
  1573 				                        
  1574 3C6B			angle2_smaller_angle1
  1575 3C6B A5 B0		            lda tmp_angle1
  1576 3C6D 38			            sec
  1577 3C6E E5 B1		            sbc tmp_angle2
  1578 3C70 85 B7		            sta tmp_angle_diff
  1579
  1580 3C72			diff_calculated
  1581 3C72 A5 B7		            lda tmp_angle_diff           
  1582 3C74 60			            rts
  1583
  1584 				; X = angle
  1585 				; lookup magnitude of angle 0 to angle X
  1586 3C75			angle_to_magnitude
  1587 3C75 BD 00 4C		            lda magnitudes_lo,x
  1588 3C78 85 B8		            sta magnitude
  1589 3C7A BD 00 4D		            lda magnitudes_hi,x
  1590 3C7D 85 B9		            sta magnitude+1
  1591 3C7F 60			            rts
  1592
  1593 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1594 3C80			calc_abs_tmp_dx
  1595 3C80 A5 E8		            lda tmp_x2
  1596 3C82 38			            sec
  1597 3C83 E5 E6		            sbc tmp_x1
  1598 3C85 B0 05		            bcs x2_le
  1599 3C87 49 FF		            eor #255
  1600 3C89 18			            clc
  1601 3C8A 69 01		            adc #1
  1602 3C8C 85 F2		x2_le       sta tmp_dx
  1603
  1604 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1605 3C8E			calc_abs_tmp_dy
  1606 3C8E A5 E9		            lda tmp_y2
  1607 3C90 38			            sec
  1608 3C91 E5 E7		            sbc tmp_y1
  1609 3C93 B0 05		            bcs y2_le
  1610 3C95 49 FF		            eor #255
  1611 3C97 18			            clc
  1612 3C98 69 01		            adc #1
  1613 3C9A 85 F3		y2_le       sta tmp_dy
  1614 3C9C 60			            rts
  1615 				            
  1616 3C9D			calc_dx_div_magnitude
  1617 3C9D A9 00		            lda #0
  1618 3C9F 85 E2		            sta _dividend
  1619 3CA1 A5 F2		            lda tmp_dx
  1620 3CA3 85 E3		            sta _dividend+1
  1621
  1622 3CA5 A5 B9		            lda magnitude+1
  1623 3CA7 85 E0		            sta _divisor
  1624 3CA9 A9 00		            lda #0
  1625 3CAB 85 E1		            sta _divisor+1
  1626 				            
  1627 3CAD 20 D5 3C		            jsr _div16
  1628
  1629 				; todo multiply result with velocity            
  1630 3CB0 A5 E2		            lda _result
  1631 3CB2 85 EE		            sta step_x
  1632 3CB4 A5 E3		            lda _result+1
  1633 3CB6 85 EF		            sta step_x+1
  1634 				            
  1635 3CB8 60			            rts
  1636 				            
  1637 3CB9			calc_dy_div_magnitude
  1638 3CB9 A9 00		            lda #0
  1639 3CBB 85 E2		            sta _dividend
  1640 3CBD A5 F3		            lda tmp_dy
  1641 3CBF 85 E3		            sta _dividend+1
  1642 				            
  1643 3CC1 A5 B9		            lda magnitude+1
  1644 3CC3 85 E0		            sta _divisor
  1645 3CC5 A9 00		            lda #0
  1646 3CC7 85 E1		            sta _divisor+1
  1647
  1648 3CC9 20 D5 3C		            jsr _div16
  1649 				            
  1650 				; todo multiply result with velocity
  1651 3CCC A5 E2		            lda _result
  1652 3CCE 85 F0		            sta step_y
  1653 3CD0 A5 E3		            lda _result+1
  1654 3CD2 85 F1		            sta step_y+1
  1655 				            
  1656 3CD4 60			            rts
  1657
  1658 				; divide 16bit
  1659 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1660
  1661 				; _result = _dividend / divisor
  1662
  1663 3CD5 A9 00		_div16      lda #0          ;preset remainder to 0
  1664 3CD7 85 E4		            sta _remainder
  1665 3CD9 85 E5		            sta _remainder+1
  1666 3CDB A2 10		            ldx #16         ;repeat for each bit: ...
  1667
  1668 3CDD 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1669 3CDF 26 E3		            rol _dividend+1  
  1670 3CE1 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1671 3CE3 26 E5		            rol _remainder+1
  1672 3CE5 A5 E4		            lda _remainder
  1673 3CE7 38			            sec
  1674 3CE8 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1675 3CEA A8			            tay         ;lb result -> Y, for we may need it later
  1676 3CEB A5 E5		            lda _remainder+1
  1677 3CED E5 E1		            sbc _divisor+1
  1678 3CEF 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1679
  1680 3CF1 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1681 3CF3 84 E4		            sty _remainder   
  1682 3CF5 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1683
  1684 3CF7 CA			_div_skip   dex
  1685 3CF8 D0 E3		            bne _div_loop 
  1686 3CFA 60			            rts
  1687
  1688 				; Calculations for step size
  1689
  1690 				; not optimised for speed or size
  1691 				; step should be set according to the angle
  1692
  1693 				; move in straight line (x1,y1) to (x2,y2)
  1694
  1695 				; 1. set start/end of line
  1696 				; set (tmp_x1, tmp_y1)
  1697 				; set (tmp_x2, tmp_y2)
  1698
  1699 				; 2. init. current_x, current_y
  1700 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1701 				; - calculates step sizes for x,y
  1702 				; - calculated directions for x,y
  1703 				;            jsr init_current_xy
  1704
  1705 				; 3. use current_x, current_y to plot or set a position
  1706 				;            lda current_x+1
  1707 				;            sta x_position
  1708 				;            lda current_y+1
  1709 				;            sta y_position
  1710 				;            jsr plot_pixel
  1711
  1712 				; 4. move current_x, current_y to next position on line
  1713 				; A=0 still moving
  1714 				;           move_current_xy
  1715
  1716 3CFB			init_current_xy
  1717 3CFB A9 7F		            lda #$7f      ; was 128 for half pixel
  1718 3CFD 85 EA		            sta current_x
  1719 3CFF 85 EC		            sta current_y
  1720
  1721 3D01 A5 E6		            lda tmp_x1
  1722 3D03 85 EB		            sta current_x+1
  1723 				            
  1724 3D05 A5 E7		            lda tmp_y1
  1725 3D07 85 ED		            sta current_y+1
  1726
  1727 				; dx = abs(tmp_x1 - tmp_x2)
  1728 3D09 20 80 3C		            jsr calc_abs_tmp_dx
  1729
  1730 				; dy = abs(tmp_y1 - tmp_y2)
  1731 3D0C 20 8E 3C		            jsr calc_abs_tmp_dy
  1732
  1733 				; set directions
  1734 3D0F A5 E6		            lda tmp_x1
  1735 3D11 C5 E8		            cmp tmp_x2
  1736 3D13 90 04		            bcc x1_smaller_x2
  1737 				; x1 >= x2
  1738 3D15 A9 01		            lda #1
  1739 3D17 D0 02		            bne set_dir_x
  1740 3D19			x1_smaller_x2
  1741 3D19 A9 00		            lda #0
  1742 3D1B			set_dir_x
  1743 3D1B 85 FA		            sta dir_x
  1744 				            
  1745 3D1D A5 E7		            lda tmp_y1
  1746 3D1F C5 E9		            cmp tmp_y2
  1747 3D21 90 04		            bcc y1_smaller_y2
  1748 				; y1 >= y2
  1749 3D23 A9 01		            lda #1
  1750 3D25 D0 02		            bne set_dir_y
  1751 3D27			y1_smaller_y2
  1752 3D27 A9 00		            lda #0
  1753 3D29			set_dir_y
  1754 3D29 85 FB		            sta dir_y
  1755
  1756 				; Calculate diff between start angle and end angle
  1757
  1758 3D2B A5 AA		            lda ball_angle_start
  1759 3D2D 85 B0		            sta tmp_angle1
  1760 3D2F A5 AB		            lda ball_angle_end
  1761 3D31 85 B1		            sta tmp_angle2
  1762 				            
  1763 3D33 20 37 3C		            jsr calc_angle_diff
  1764
  1765 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1766 3D36 A6 B7		            ldx tmp_angle_diff
  1767 3D38 20 75 3C		            jsr angle_to_magnitude
  1768 				            
  1769 3D3B 20 9D 3C		            jsr calc_dx_div_magnitude
  1770 3D3E 20 B9 3C		            jsr calc_dy_div_magnitude
  1771 				            
  1772 				; Calculate step size by ball speed
  1773 				            
  1774 				; step_x = step_x * speed
  1775 				            
  1776 3D41 A5 EE		            lda step_x
  1777 3D43 85 F6		            sta _multiplicand
  1778 3D45 A5 EF		            lda step_x+1
  1779 3D47 85 F7		            sta _multiplicand+1
  1780 3D49 A5 AC		            lda ball_speed
  1781 3D4B 85 F8		            sta _multiplier
  1782
  1783 3D4D 20 8E 35		            jsr _multi8
  1784 				;result in .A (low byte, also in .X) and .Y (high byte)
  1785 3D50 85 EE		            sta step_x
  1786 3D52 84 EF		            sty step_x+1
  1787 3D54			skip_step_x_hi
  1788 				            
  1789 				; step_y = step_y * speed
  1790
  1791 3D54 A5 F0		            lda step_y
  1792 3D56 85 F6		            sta _multiplicand
  1793 3D58 A5 F1		            lda step_y+1
  1794 3D5A 85 F7		            sta _multiplicand+1
  1795 3D5C A5 AC		            lda ball_speed
  1796 3D5E 85 F8		            sta _multiplier
  1797
  1798 3D60 20 8E 35		            jsr _multi8
  1799 				;result in .A (low byte, also in .X) and .Y (high byte)
  1800 3D63 85 F0		            sta step_y
  1801 3D65 84 F1		            sty step_y+1
  1802 3D67			skip_step_y_hi
  1803
  1804 3D67 60			            rts
  1805
  1806 				; Move ball position 
  1807 				; Add one step, until end reached
  1808 				; Input:
  1809 				; - step size (step_x, step_y)
  1810 				; - current ball position (current_x, current_y)
  1811 				; - end position (tmp_x2, tmp_y2)
  1812 				; Output:
  1813 				; A (0 = still moving, 1 = end reached)
  1814 3D68			move_current_xy
  1815 3D68 A9 00		            lda #0
  1816 3D6A 85 FC		            sta line_end_x
  1817 3D6C 85 FD		            sta line_end_y
  1818
  1819 				; sets line end indicators here
  1820 3D6E 20 8B 3D		            jsr move_current_x
  1821 3D71 20 CB 3D		            jsr move_current_y
  1822
  1823 3D74 A5 FC		            lda line_end_x
  1824 3D76 25 FD		            and line_end_y
  1825 3D78 F0 10		            beq no_end_reached
  1826 				            
  1827 				; set current to (x2,y2)
  1828 3D7A A5 E8		            lda tmp_x2
  1829 3D7C 85 EB		            sta current_x+1
  1830 3D7E A5 E9		            lda tmp_y2
  1831 3D80 85 ED		            sta current_y+1
  1832 				            
  1833 3D82 A9 00		            lda #0
  1834 3D84 85 EA		            sta current_x
  1835 3D86 85 EC		            sta current_y
  1836 				            
  1837 3D88 A9 01		            lda #1 ; end reached
  1838 				            
  1839 3D8A			no_end_reached  ; A = 0
  1840 3D8A 60			            rts
  1841
  1842 3D8B			move_current_x
  1843 3D8B A5 FA		            lda dir_x
  1844 3D8D D0 18		            bne move_current_left
  1845
  1846 				; move right, add
  1847 3D8F A5 EA		            lda current_x
  1848 3D91 18			            clc
  1849 3D92 65 EE		            adc step_x
  1850 3D94 85 EA		            sta current_x
  1851 3D96 A5 EB		            lda current_x+1
  1852 3D98 65 EF		            adc step_x+1
  1853 3D9A 85 EB		            sta current_x+1
  1854
  1855 3D9C A5 EB		            lda current_x+1
  1856 3D9E C5 E8		            cmp tmp_x2
  1857 3DA0 90 04		            bcc no_line_end
  1858 3DA2			exact_end_x
  1859 3DA2 A9 01		            lda #1
  1860 3DA4 85 FC		            sta line_end_x 
  1861 3DA6			no_line_end
  1862 3DA6 60			            rts
  1863 				            
  1864 3DA7			move_current_left
  1865 3DA7 A5 EA		            lda current_x
  1866 3DA9 38			            sec
  1867 3DAA E5 EE		            sbc step_x
  1868 3DAC 90 01		            bcc clear_skip
  1869 3DAE EA			            nop
  1870 3DAF			clear_skip
  1871 3DAF 85 EA		            sta current_x
  1872 3DB1 A5 EB		            lda current_x+1
  1873 3DB3 E5 EF		            sbc step_x+1
  1874 3DB5 85 EB		            sta current_x+1
  1875 3DB7 90 0B		            bcc below_zero
  1876 				                        
  1877 3DB9 A5 E8		            lda tmp_x2
  1878 3DBB C5 EB		            cmp current_x+1
  1879 3DBD 90 E7		            bcc no_line_end
  1880 3DBF A9 01		            lda #1
  1881 3DC1 85 FC		            sta line_end_x            
  1882 3DC3 60			            rts
  1883 3DC4			below_zero            
  1884 3DC4 A9 01		            lda #1
  1885 3DC6 85 FC		            sta line_end_x
  1886 3DC8 85 FD		            sta line_end_y
  1887 3DCA 60			            rts
  1888 3DCB			move_current_y
  1889 3DCB A5 FB		            lda dir_y
  1890 3DCD D0 18		            bne move_current_up
  1891
  1892 				; move down, add
  1893 3DCF A5 EC		            lda current_y
  1894 3DD1 18			            clc
  1895 3DD2 65 F0		            adc step_y
  1896 3DD4 85 EC		            sta current_y
  1897 3DD6 A5 ED		            lda current_y+1
  1898 3DD8 65 F1		            adc step_y+1
  1899 3DDA 85 ED		            sta current_y+1
  1900 				            
  1901 3DDC A5 ED		            lda current_y+1
  1902 3DDE C5 E9		            cmp tmp_y2
  1903 3DE0 90 C4		            bcc no_line_end
  1904 3DE2			exact_end_y
  1905 3DE2 A9 01		            lda #1
  1906 3DE4 85 FD		            sta line_end_y
  1907 3DE6 60			            rts
  1908
  1909 3DE7			move_current_up
  1910 3DE7 A5 EC		            lda current_y
  1911 3DE9 38			            sec
  1912 3DEA E5 F0		            sbc step_y
  1913 3DEC 85 EC		            sta current_y
  1914 3DEE A5 ED		            lda current_y+1
  1915 3DF0 E5 F1		            sbc step_y+1
  1916 3DF2 90 D0		            bcc below_zero
  1917 3DF4 85 ED		            sta current_y+1
  1918 				            
  1919 3DF6 A5 E9		            lda tmp_y2
  1920 3DF8 C5 ED		            cmp current_y+1
  1921 3DFA 90 AA		            bcc no_line_end
  1922 3DFC A9 01		            lda #1
  1923 3DFE 85 FD		            sta line_end_y
  1924 3E00 60			            rts                            
  1925 				            
  1926 3E01			init_sprites
  1927 3E01 A2 00		            ldx #0
  1928 3E03 8A			            txa
  1929 3E04			set_p
  1930 3E04 9D 00 0E		            sta p0_area,x
  1931 3E07 9D 80 0E		            sta p1_area,x
  1932 3E0A 9D 00 0F		            sta p2_area,x
  1933 3E0D 9D 80 0F		            sta p3_area,x
  1934 3E10 E8			            inx
  1935 3E11 10 F1		            bpl set_p
  1936
  1937 3E13 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1938 3E15 8D 6F 02		            sta GPRIOR
  1939
  1940 3E18 A9 0C		            lda #>pm_area
  1941 3E1A 8D 07 D4		            sta PMBASE
  1942
  1943 3E1D A9 03		            lda #3          ; P/M both on
  1944 3E1F 8D 1D D0		            sta GRACTL
  1945
  1946 3E22 A9 90		            lda #$90
  1947 3E24 8D 02 D0		            sta HPOSP2
  1948 3E27 A9 A0		            lda #$A0
  1949 3E29 8D 03 D0		            sta HPOSP3  
  1950 3E2C 60			            rts
  1951
  1952 3E2D			init_colors
  1953 3E2D A9 5A		            lda #BASE_COLOR_P1+10
  1954 3E2F 8D C2 02		            sta PCOLR2
  1955 3E32 A9 BA		            lda #BASE_COLOR_P2+10
  1956 3E34 8D C3 02		            sta PCOLR3
  1957 				            
  1958 3E37 A9 00		            lda #0
  1959 3E39 8D C6 02		            sta COLOR2
  1960
  1961 3E3C A9 0E		            lda #HEADER_FG_COLOR
  1962 3E3E 8D C5 02		            sta COLOR1
  1963
  1964 3E41 A9 50		            lda #HEADER_P1_COLOR
  1965 3E43 8D C0 02		            sta PCOLR0
  1966 3E46 A9 B0		            lda #HEADER_P2_COLOR
  1967 3E48 8D C1 02		            sta PCOLR1
  1968
  1969 3E4B 60			            rts
  1970
  1971 3E4C			previous_consol
  1972 3E4C 00			            dta 0
  1973
  1974 3E4D			current_level_index
  1975 3E4D 00			            dta 0
  1976 = 0004			NR_OF_LEVELS = 4
  1977 = 0000			INIT_LEVEL_INDEX = 0
  1978 3E4E			level_speeds
  1979 3E4E 02 04 06 08		            dta 2,4,6,8
  1980 3E52			stick_slow_speed_tab
  1981 3E52 01 02 02 03		            dta 1,2,2,3
  1982 3E56			stick_fast_speed_tab
  1983 3E56 02 03 03 04		            dta 2,3,3,4
  1984 				            
  1985 				; X = level (0..NR_OF_LEVELS)
  1986 3E5A			set_level_ball_speed
  1987 3E5A BD 52 3E		            lda stick_slow_speed_tab,x
  1988 3E5D 85 88		            sta stick_slow_speed
  1989 3E5F BD 56 3E		            lda stick_fast_speed_tab,x
  1990 3E62 85 89		            sta stick_fast_speed
  1991
  1992 3E64 BD 4E 3E		            lda level_speeds,x
  1993 3E67 85 AC		            sta ball_speed
  1994 3E69 8A			            txa
  1995 3E6A 18			            clc
  1996 3E6B 69 01		            adc #1
  1997 3E6D 09 10		            ora #16
  1998 3E6F 8D AC 52		            sta level_char
  1999 3E72 60			            rts
  2000 				            
  2001 3E73			increase_level
  2002 3E73 EE 4D 3E		            inc current_level_index
  2003 3E76 AD 4D 3E		            lda current_level_index
  2004 3E79 C9 04		            cmp #NR_OF_LEVELS
  2005 3E7B D0 05		            bne ok_level
  2006 3E7D A9 00		            lda #INIT_LEVEL_INDEX
  2007 3E7F 8D 4D 3E		            sta current_level_index
  2008 3E82			ok_level           
  2009 3E82 60			            rts
  2010
  2011 3E83			increase_player_mode
  2012 3E83 E6 8A		            inc player_mode
  2013 3E85 A5 8A		            lda player_mode
  2014 3E87 C9 03		            cmp #NR_OF_PLAYER_MODES
  2015 3E89 D0 04		            bne ok_player_mode
  2016 3E8B A9 00		            lda #INIT_PLAYER_MODE
  2017 3E8D 85 8A		            sta player_mode
  2018 3E8F			ok_player_mode
  2019 3E8F 60			            rts
  2020
  2021 3E90			show_player_mode
  2022 3E90 A6 8A		            ldx player_mode
  2023 3E92 BD 40 53		            lda player_mode_lo,x
  2024 3E95 8D F9 50		            sta menu_line2_ptr
  2025 3E98 BD 43 53		            lda player_mode_hi,x
  2026 3E9B 8D FA 50		            sta menu_line2_ptr+1
  2027 3E9E 60			            rts
  2028
  2029 3E9F			            .align $100
  2030 3F00			inner_x_tab
  2031 = 4000			inner_y_tab = *+$100
  2032 3F00-40FF> 70 72 75 77 +             ins 'data\in210.dat'
  2033 				      
  2034 4100			            .align $400            
  2035 				; outer circle 1024 plot points on 360 degrees
  2036 4400			outer_x_tab
  2037 = 4800			outer_y_tab = *+1024
  2038 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2039 				           
  2040 4C00			            .align $400
  2041 				; table of magnitudes (length) between angle 0 and 0..255
  2042 				; fixed point 8.8 : hi.lo
  2043 4C00			magnitudes_lo
  2044 = 4D00			magnitudes_hi = *+256
  2045 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2046
  2047 4E00			            .align $400
  2048 5000			display_list
  2049 5000-512F> C2		            dta $42+128         ; dli_header
  2050 5001 06 51		            dta a(score_line)
  2051
  2052 				; 102 x 40 = 4080 bytes            
  2053 5003 4F			            dta $4f
  2054 5004 00 70		            dta a(screen_mem1)
  2055 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2056 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2057 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2058 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2059
  2060 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2061 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2062 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2063 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2064
  2065 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2066 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2067 5055			menu_dl_hook
  2068 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2069 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2070
  2071 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2072
  2073 				; 42 + 60 = 102, 4080 bytes
  2074 506B 4F			            dta $4f
  2075 506C 00 80		            dta a(screen_mem2)
  2076 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2077
  2078 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2079 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2080 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2081 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2082
  2083 5095 0F 0F		            dta $0f,$0f
  2084
  2085 				; 60 lines
  2086 5097			menu_dl_end
  2087 5097 4F			            dta $4f
  2088 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2089 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2090 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2091 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2092 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2093
  2094 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2095 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2096 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2097 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2098
  2099 				; 20 x 40 = 800
  2100 50D5 4F			            dta $4f
  2101 50D6 00 90		            dta a(screen_mem3)       
  2102 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2103 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2104 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2105 				            
  2106 50EB 41			            dta $41
  2107 50EC 00 50		            dta a(display_list)
  2108
  2109 50EE			menu_dl_part
  2110 50EE 80			            dta 128 ; dli_menu
  2111 50EF 20			            dta $20
  2112 50F0 42			            dta $42
  2113 50F1 00 52		            dta a(rotor_logo_text)
  2114 50F3 02			            dta 2
  2115 50F4 30			            dta $30
  2116 50F5 46			            dta $46
  2117 50F6			menu_line1_ptr
  2118 50F6 50 52		            dta a(controller_text)
  2119 50F8 46			            dta $46
  2120 50F9			menu_line2_ptr
  2121 50F9 64 52		            dta a(two_player_text)
  2122 50FB 46			            dta $46
  2123 50FC			menu_line3_ptr
  2124 50FC A0 52		            dta a(level_text)
  2125 50FE 30			            dta $30
  2126 50FF 42			            dta $42
  2127 5100 B4 52		            dta a(start_text)
  2128 5102 10			            dta $10
  2129 5103 01			            dta $01 ; jump
  2130 5104 97 50		            dta a(menu_dl_end)
  2131
  2132 5106			score_line  
  2133 5106 00 2F 2E 25 00	            dta d' ONE '
  2134 510B			score_chars_p1
  2135 510B 0D 0D 00		            dta d'-- '
  2136
  2137 510E 00 00 00 00 00 00 +             dta d'          '
  2138 5118 00 00 00 00 00 00 +             dta d'          '
  2139
  2140 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2141 512B			score_chars_p2
  2142 512B 0D 0D 00		            dta d'-- '
  2143
  2144 512E 00			score_p1    dta 0
  2145 512F 00			score_p2    dta 0
  2146
  2147 5130			            .align $100
  2148 5200			rotor_logo_text
  2149 5200-5345> 00 00 00 00 +             dta d'              '
  2150 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2151 521A 00 00 00 00 00 00 +             dta d'              '
  2152 5228 00 00 00 00 00 00 +             dta d'              '
  2153 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2154 5242 00 00 00 00 00 00 +             dta d'              '
  2155
  2156 5250			controller_text
  2157 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2158 525A			driver_screen
  2159 525A 00 00 00 00 00 00 +             dta d'          '
  2160
  2161 5264			two_player_text
  2162 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2163
  2164 5278			one_player_text
  2165 5278 00 00 00 00 28 35 +             dta d'    HUMAN VS CPU    '
  2166
  2167 528C			demo_player_text
  2168 528C 00 00 00 00 00 23 +             dta d'     CPU VS CPU     '
  2169
  2170 52A0			level_text
  2171 52A0 00 00 00 00 00 00 +             dta d'      LEVEL '
  2172 52AC			level_char            
  2173 52AC 11 00 00 00 00 00 +             dta d'1       '
  2174
  2175 52B4			start_text
  2176 52B4 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2177 52DC			stick_text
  2178 52DC 33 34 29 23 2B 00 +             dta d'STICK   '
  2179 52E4			paddle_text
  2180 52E4 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2181 52EC			driving_text
  2182 52EC 24 32 29 36 29 2E +             dta d'DRIVING '
  2183 52F4			computer_text
  2184 52F4 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2185
  2186 52FC			empty_text
  2187 52FC 00 00 00 00 00 00 +             dta d'                    '
  2188 5310			winner_one_text
  2189 5310 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2190 5324			winner_two_text
  2191 5324 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2192
  2193 5338			driver_text_lo
  2194 5338 DC			            dta <stick_text
  2195 5339 E4			            dta <paddle_text
  2196 533A EC			            dta <driving_text
  2197 533B F4			            dta <computer_text
  2198 				            
  2199 533C			driver_text_hi
  2200 533C 52			            dta >stick_text
  2201 533D 52			            dta >paddle_text
  2202 533E 52			            dta >driving_text
  2203 533F 52			            dta >computer_text
  2204
  2205 5340			player_mode_lo
  2206 5340 64			            dta <two_player_text
  2207 5341 78			            dta <one_player_text
  2208 5342 8C			            dta <demo_player_text
  2209
  2210 5343			player_mode_hi
  2211 5343 52			            dta >two_player_text
  2212 5344 52			            dta >one_player_text
  2213 5345 52			            dta >demo_player_text
  2214
  2215 				; 4 KB
  2216 				; 128 x 32 bytes shapes
  2217 5346			            .align $1000
  2218 6000			pm_shapes
  2219 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2220
  2221 				; 9 KB for backdrop image
  2222 7000			            .align $1000
  2223 = 7000			screen_mem1 = * ; 4K
  2224 				;            org screen_mem1
  2225 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2226
  2227 7FF0			            .align $1000
  2228 = 8000			screen_mem2 = * ; 4K
  2229 				;            org screen_mem2
  2230 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2231
  2232 8FF0			            .align $1000
  2233 = 9000			screen_mem3 = * ; 1K
  2234 				;            org screen_mem3
  2235 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2236
  2237 02E0-02E1> 08 35		            run main
