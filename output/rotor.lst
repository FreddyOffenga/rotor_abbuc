mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; ROTOR
     2 				; F#READY, 2023-07-14
     3
     4 				; version 10
     5 				; added 4 speed levels
     6 				; show levels in menu, select to change
     7 				; todo: fix bug in score (diagonal edge bounce?)
     8
     9 				; Casual game for two players
    10 				; (computer player not yet implemented)
    11
    12 				; Main idea:
    13 				; - two players red and blue move in a circle
    14 				; - the ball gets color of player to indicate who should catch it
    15 				; - when the ball hits the circle, the other player gets a point
    16
    17 				; DONE
    18 				; - test routine for magnitude and step calculations
    19 				; - moved calculations to right routines, renames and improvements
    20 				; - TEST step speed, edge detection
    21 				; - fixed nasty bug, overlapping labels in zp :(
    22 				; - fixed magnitude table (basic prog)
    23 				; - fixed dx,dy by not adding 1 pixel
    24 				; - fixed bug where M1PF was not used to detect edge (only M0PF)
    25 				; - fixed bug in menu display, corrected menu DLI length
    26 				; - fixed driver auto detect for paddles, stick, driving
    27 				; - always reset game/score from menu start
    28 				; - allow players to move even in menu (without ball)
    29 				; - end game at X points (11 points)
    30 				; - double speed for now (should be a better way to select ball velocity)
    31 				; - add sound when player1/2 hits ball
    32 				; - removed include dda_line_lib, inlined and custom for this game
    33
    34 				; TODO
    35 				; - set screen width to 40 instead of 32
    36 				; - add backdrop image
    37 				; - add music by IvoP
    38 				; - add sound when ball hits edge
    39 				; - add support for driving controllers
    40 				; - break part of outer circle when ball hits
    41 				; - allow ball to go outside circle
    42 				; - add computer player(s)
    43
    44 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    45
    46 				; must be in decimal format, so $11 is 11
    47 = 0011			MAX_SCORE   = $11
    48
    49 = 1000			pm_area     = $1000
    50 = 1180			msl_area    = pm_area+$180
    51 = 1200			p0_area     = pm_area+$200
    52 = 1280			p1_area     = pm_area+$280
    53 = 1300			p2_area     = pm_area+$300
    54 = 1380			p3_area     = pm_area+$380
    55
    56 = A000			screen_mem  = $a000
    57 = C000			screen_end  = $c000
    58
    59 				; $1400 .. $1500 is overwritten, bug?
    60
    61 				; outer tables 256 for 360 degrees
    62 = 1600			outer_x_256     = $1600
    63 = 1700			outer_y_256     = $1700
    64
    65 = 1800			screen_y_lo     = $1800
    66 = 1900			screen_y_hi     = $1900
    67
    68 = 0140			WIDTH           = 320
    69 = 00C0			HEIGHT          = 192
    70
    71 = 0020			SCREEN_WIDTH    = 32
    72
    73 = 000F			outer_x_margin  = 47-32
    74 = 0040			inner_x_margin  = 64
    75
    76 = 00A0			circle_center_x = WIDTH/2
    77 = 0060			circle_center_y = HEIGHT/2
    78
    79 = 0006			ball_top_margin     = 6
    80 = 0045			ball_left_margin    = 64+5
    81
    82 				; pm upper margin
    83 = 0001			upper_margin    = 1
    84 = 0020			left_margin     = 32
    85
    86 = 0080			table_x_ptr     = $80
    87 = 0082			table_y_ptr     = $82
    88
    89 = 0084			shape_ptr       = $84
    90
    91 = 0086			tmp_screen      = $86
    92
    93 = 0088			course_x        = $88
    94
    95 = 008A			tmp_font        = $8a
    96
    97 = 008C			mode_menu       = $8c
    98
    99 				; player vars must be in sequence for zp,x indexing
   100
   101 = 0090			p1_shape        = $90
   102 = 0091			p2_shape        = $91
   103
   104 = 0094			player1_x       = $94
   105 = 0095			player2_x       = $95
   106
   107 = 0098			player1_y       = $98
   108 = 0099			player2_y       = $99
   109
   110 = 009C			p1_angle        = $9c
   111 = 009D			p2_angle        = $9d
   112
   113 = 00A0			mp_collision    = $a0
   114 = 00A1			in_collision    = $a1
   115 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   116 = 00A3			edge_delay      = $a3
   117 = 00A4			bat_collision_delay = $a4
   118
   119 				; ball vars
   120 = 00A6			ball_current_x      = $a6
   121 = 00A7			ball_current_y      = $a7
   122 = 00AA			ball_angle_start    = $aa
   123 = 00AB			ball_angle_end      = $ab
   124 = 00AC			ball_speed          = $ac
   125
   126 = 00B0			tmp_angle1          = $b0
   127 = 00B1			tmp_angle2          = $b1
   128 = 00B2			add_to_angle        = $b2
   129 = 00B3			angle_diff_bat      = $b3
   130 = 00B4			tmp_angle_direction = $b4
   131 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   132 = 00B6			game_restart        = $b6
   133 = 00B7			tmp_angle_diff      = $b7
   134 = 00B8			magnitude           = $b8       ; word
   135
   136 				; $c0 - $cf used for drivers
   137
   138 = 00E0			DDA_ZERO_PAGE = $e0
   139
   140 = 00E0			_divisor    = $e0   ; word
   141 = 00E2			_dividend   = $e2   ; word
   142 = 00E4			_remainder  = $e4   ; word
   143 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   144
   145 = 00E6			tmp_x1      = $e6   ; byte
   146 = 00E7			tmp_y1      = $e7   ; byte
   147 = 00E8			tmp_x2      = $e8   ; byte
   148 = 00E9			tmp_y2      = $e9   ; byte
   149
   150 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   151 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   152
   153 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   154 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   155
   156 = 00F2			tmp_dx      = $f2  ; byte
   157 = 00F3			tmp_dy      = $f3  ; byte
   158
   159 = 00F6			_multiplicand   = $f6   ; word
   160 = 00F8			_multiplier     = $f8   ; byte
   161
   162 				; direction:
   163 				; 0 : x1<x2 or y1<y2 = add
   164 				; 1 ; x1>=y2 or y1>=y2 = subtract
   165
   166 = 00FA			dir_x       = $fa  ; byte
   167 = 00FB			dir_y       = $fb  ; byte
   168
   169 = 00FC			line_end_x  = $fc  ; byte
   170 = 00FD			line_end_y  = $fd  ; byte
   171
   172 				            org $2000
   173
   174 				            icl 'lib/drivers.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 				; $c0 - $cf used for drivers
     5 = 00C0			driver_tmp      = $c0   ; and $c1
     6 = 00C2			driver_mode     = $c2
     7
     8 = 00E5			paddle_vals = 229
     9 = 011F			paddle_add  = 287       ; 65536 / 229
    10
    11 				            .align $100
    12 				paddle_to_256
    13 = 2000			            .ds $100
    14
    15 				; paddle initial value
    16 				prev_paddle_value
    17 = 2100			            .ds 1
    18
    19 				driver_init
    20 FFFF> 2101-2A4D> A9 00	            lda #0  ; stick
    21 2103 85 C2		            sta driver_mode
    22
    23 2105 AD 70 02		            lda PADDL0
    24 2108 8D 00 21		            sta prev_paddle_value
    25
    26 210B A9 00		            lda #0
    27 210D 85 9C		            sta p1_angle
    28 210F A9 80		            lda #128
    29 2111 85 9D		            sta p2_angle
    30
    31 				; init paddle table
    32
    33 2113 A9 00		            lda #0
    34 2115 85 C0		            sta driver_tmp
    35 2117 85 C1		            sta driver_tmp+1
    36 				            
    37 2119 A2 00		            ldx #0
    38 211B			store_pv
    39 211B A5 C1		            lda driver_tmp+1
    40 211D 9D 00 20		            sta paddle_to_256,x
    41 				            
    42 2120 A5 C0		            lda driver_tmp
    43 2122 18			            clc
    44 2123 69 1F		            adc #<paddle_add
    45 2125 85 C0		            sta driver_tmp
    46 2127 A5 C1		            lda driver_tmp+1
    47 2129 69 01		            adc #>paddle_add
    48 212B 85 C1		            sta driver_tmp+1
    49 212D E8			            inx
    50 212E E0 E5		            cpx #paddle_vals
    51 2130 D0 E9		            bne store_pv
    52 2132 60			            rts
    53
    54 				; stick detect by using left/right
    55 				; paddle by connecting/rotate
    56 				; driving controller by rotate
    57
    58 				; return A = driver mode
    59 				; 0 = stick detected
    60 				; 1 = paddle detected
    61 				; 2 = driving detected
    62
    63 2133			driver_detect
    64 2133 AD 70 02		            lda PADDL0
    65 2136 C9 E4		            cmp #228
    66 2138 D0 07		            bne paddle_detect
    67 213A AD 71 02		            lda PADDL1
    68 213D C9 E4		            cmp #228
    69 213F F0 05		            beq no_paddle_detect
    70 2141			paddle_detect
    71 2141 A9 01		            lda #1
    72 2143 85 C2		            sta driver_mode
    73 2145 60			            rts
    74
    75 2146			no_paddle_detect
    76 2146 AD 78 02		            lda STICK0
    77 2149 C9 0C		            cmp #12
    78 214B D0 05		            bne no_driving_detect
    79 214D A9 02		            lda #2
    80 214F 85 C2		            sta driver_mode
    81 2151 60			            rts
    82
    83 2152			no_driving_detect
    84 2152 C9 07		            cmp #7      ; paddle button also gives this
    85 2154 F0 04		            beq stick_detect    
    86 2156 C9 0B		            cmp #11     ; paddle button also gives this
    87 2158 D0 05		            bne no_stick_detect
    88 215A			stick_detect
    89 215A A9 00		            lda #0
    90 215C 85 C2		            sta driver_mode
    91 215E 60			            rts
    92
    93 215F			no_stick_detect
    94 				; default is the last value
    95 215F A5 C2		            lda driver_mode
    96 2161 60			            rts
    97
    98 				; move player 1/2
    99 				; right - clockwise, left = anti-clockwise
   100
   101 				; X = 0, player 1
   102 				; X = 1, player 2
   103
   104 				; A = driver mode:
   105 				; 0 : stick
   106 				; 1 : paddle
   107 				; 2 : driving
   108 				; 3 : computer
   109
   110 2162			main_driver            
   111 2162 A4 C2		            ldy driver_mode
   112 2164 B9 73 21		            lda driver_lo,y
   113 2167 8D 71 21		            sta driver_ptr
   114 216A B9 77 21		            lda driver_hi,y
   115 216D 8D 72 21		            sta driver_ptr+1
   116
   117 = 2171			driver_ptr = *+1
   118 2170 4C FF FF		            jmp $ffff  
   119
   120 2173			driver_lo
   121 2173 7B			            dta <driver_stick
   122 2174 BF			            dta <driver_paddle
   123 2175 7B			            dta <driver_stick
   124 2176 7B			            dta <driver_stick
   125
   126 2177			driver_hi
   127 2177 21			            dta >driver_stick
   128 2178 21			            dta >driver_paddle
   129 2179 21			            dta >driver_stick
   130 217A 21			            dta >driver_stick
   131
   132 				; joystick driver
   133
   134 217B			driver_stick
   135 217B BD 78 02		            lda STICK0,x
   136 217E C9 0F		            cmp #15
   137 2180 F0 21		            beq move_done
   138 2182 C9 0B		            cmp #11
   139 2184 D0 0E		            bne no_left
   140
   141 2186 D6 9C		            dec p1_angle,x
   142 				            ;dec p1_angle,x
   143 2188 BD 84 02		            lda STRIG0,x
   144 218B D0 04		            bne no_fast
   145 218D D6 9C		            dec p1_angle,x
   146 218F D6 9C		            dec p1_angle,x
   147 2191			no_fast
   148 				            
   149 2191 4C A3 21		            jmp move_done
   150 2194 C9 07		no_left     cmp #7
   151 2196 D0 0B		            bne move_done
   152
   153 2198 F6 9C		            inc p1_angle,x
   154 				            ;inc p1_angle,x
   155 219A BD 84 02		            lda STRIG0,x
   156 219D D0 04		            bne no_fast_right
   157 219F F6 9C		            inc p1_angle,x
   158 21A1 F6 9C		            inc p1_angle,x
   159 21A3			no_fast_right
   160 21A3			move_done
   161 21A3 60			            rts
   162
   163 				; X=port number to check (paddle uses only port 1)
   164 				; check fire button (paddle uses left/right stick as fire button)
   165 				; A=0 not pressed, 1=pressed
   166
   167 21A4			is_fire_button
   168 21A4 A5 C2		            lda driver_mode
   169 21A6 C9 01		            cmp #1
   170 21A8 F0 04		            beq check_paddle_fire
   171 				            
   172 21AA BD 84 02		            lda STRIG0,x
   173 21AD 60			            rts
   174 21AE			check_paddle_fire
   175
   176 21AE AD 78 02		            lda STICK0
   177 21B1 C9 07		            cmp #7
   178 21B3 F0 07		            beq paddle_fire
   179 21B5 C9 0B		            cmp #11
   180 21B7 F0 03		            beq paddle_fire
   181 21B9 A9 00		            lda #0
   182 21BB 60			            rts
   183 21BC			paddle_fire
   184 21BC A9 01		            lda #1
   185 21BE 60			            rts
   186
   187 				; paddle driver
   188 				            
   189 21BF			driver_paddle            
   190 21BF BD 70 02		            lda PADDL0,x
   191 21C2 A8			            tay
   192 21C3 B9 00 20		            lda paddle_to_256,y
   193 21C6 5D CC 21		            eor paddle_offsets,x
   194 21C9 95 9C		            sta p1_angle,x
   195 21CB 60			            rts
   196
   197 21CC			paddle_offsets
   198 21CC 00 80		            dta 0,128
   175 				            
   176 21CE			main         
   177 21CE A9 00		            lda #0
   178 				            ;sta SDMCTL
   179 21D0 85 B6		            sta game_restart
   180
   181 21D2 20 01 21		            jsr driver_init
   182
   183 21D5 20 57 27		            jsr make_shape_index
   184 				 
   185 21D8 20 87 27		            jsr make_outer_256
   186 				 
   187 21DB A9 00		            lda #<screen_mem
   188 21DD 85 58		            sta SAVMSC
   189 21DF A9 A0		            lda #>screen_mem
   190 21E1 85 59		            sta SAVMSC+1
   191
   192 21E3 A9 00		            lda #<display_list
   193 21E5 8D 30 02		            sta SDLSTL
   194 21E8 A9 3C		            lda #>display_list
   195 21EA 8D 31 02		            sta SDLSTH
   196
   197 21ED A9 2D		            lda #%00101101  ; enable P/M DMA
   198 21EF 8D 2F 02		            sta SDMCTL
   199
   200 				;            lda #<menu_dl
   201 				;            sta SDLSTL
   202 				;            lda #>menu_dl
   203 				;            sta SDLSTH
   204 				            
   205 21F2 20 58 23		            jsr make_screen_y_tab
   206
   207 21F5 20 7D 23		            jsr clear_screen
   208
   209 21F8 20 F7 27		            jsr reset_score
   210 21FB 20 C5 27		            jsr show_score_p1
   211 21FE 20 DE 27		            jsr show_score_p2
   212
   213 				; debugging, can be removed later            
   214 				            ;jsr plot_inner
   215 				                       
   216 2201 20 E2 29		            jsr init_sprites
   217 2204 20 0E 2A		            jsr init_colors
   218
   219 				; init. game vars
   220 2207 A2 00		            ldx #INIT_LEVEL_INDEX
   221 2209 8E 2A 2A		            stx current_level_index
   222 220C 20 2F 2A		            jsr set_level_ball_speed
   223
   224 				; todo remove the test routines later
   225 				;            jmp test_ball_movements             
   226
   227 220F 20 13 27		            jsr plot_outer
   228
   229 2212 A9 01		            lda #1
   230 2214 85 8C		            sta mode_menu           ; start with menu
   231
   232 				; start vbi
   233 				            
   234 2216 A9 C9		            lda #<dli_menu
   235 2218 8D 00 02		            sta VDSLST
   236 221B A9 22		            lda #>dli_menu
   237 221D 8D 01 02		            sta VDSLST+1
   238 				            
   239 2220 A9 C0		            lda #$c0
   240 2222 8D 0E D4		            sta NMIEN
   241 				            
   242 2225 A9 07		            lda #7          ; sets VVBLKI
   243 2227 A0 E8		            ldy #<vbi
   244 2229 A2 23		            ldx #>vbi
   245 222B 20 5C E4		            jsr $e45c       ; SETVBV
   246
   247 				; we're just sitting here while VBI does all the work :)
   248 222E 4C 2E 22		loop        jmp loop
   249
   250 				; test ball movement(s) from start angle to end angle
   251
   252 				; todo draw lines
   253 				; x,y from
   254 				; outer_x_256
   255 				; outer_y_256
   256
   257 				; later
   258 				; get magnitude             
   259 				; magnitudes_lo
   260 				; magnitudes_hi
   261
   262 2231			test_ball_movements
   263 				;            jsr plot_angle_dots
   264
   265 2231 A9 80		            lda #$80
   266 2233 85 AA		            sta ball_angle_start
   267 2235 A0 81		            ldy #$81
   268
   269 2237			plot_line_loop
   270 2237 84 AB		            sty ball_angle_end
   271 2239 98			            tya
   272 223A 48			            pha
   273
   274 223B A5 AA		            lda ball_angle_start
   275 223D A8			            tay
   276 223E 20 99 22		            jsr plot_angle
   277
   278 2241 A6 AA		            ldx ball_angle_start
   279 2243 20 D4 25		            jsr outer_angle_to_start_position
   280
   281 2246 A5 AB		            lda ball_angle_end
   282 2248 A8			            tay
   283 2249 20 99 22		            jsr plot_angle
   284 				            
   285 224C A6 AB		            ldx ball_angle_end
   286 224E 20 4C 26		            jsr angle_to_end_position
   287 				                                    
   288 2251 20 DC 28		            jsr init_current_xy
   289
   290 				; do steps and plot
   291
   292 2254 A9 01		            lda #1
   293 2256 8D FB 02		            sta draw_color  
   294
   295 2259 A2 00		            ldx #0
   296 225B			plot_some            
   297 225B 8A			            txa
   298 225C 48			            pha
   299 				            
   300 225D 20 49 29		            jsr move_current_xy
   301 2260 D0 17		            bne detect_end_line
   302
   303 2262 A5 EB		            lda current_x+1
   304 2264 18			            clc
   305 2265 69 0F		            adc #outer_x_margin
   306 2267 85 55		            sta x_position
   307 2269 A9 00		            lda #0
   308 226B 85 56		            sta x_position+1
   309 				            
   310 226D A5 ED		            lda current_y+1
   311 226F 85 54		            sta y_position
   312 2271 20 97 23		            jsr plot_dot 
   313 				            
   314 2274 68			            pla
   315 2275 AA			            tax
   316 				            
   317 2276 E8			            inx
   318 2277 D0 E2		            bne plot_some
   319
   320 2279			detect_end_line
   321 2279 68			            pla
   322 227A AA			            tax
   323
   324 				; next line
   325 227B 68			            pla
   326 227C 18			            clc
   327 227D 69 01		            adc #$01
   328 227F A8			            tay
   329 2280 C9 80		            cmp #$80
   330
   331 2282 D0 B3		            bne plot_line_loop
   332
   333 2284			test_loop
   334 2284 4C 84 22		            jmp test_loop
   335
   336 				; plot dots for all 0..255 angles
   337
   338 2287			plot_angle_dots
   339 2287 A9 01		            lda #1
   340 2289 8D FB 02		            sta draw_color
   341
   342 228C A0 00		            ldy #0
   343
   344 228E			plot_256_dots            
   345 228E 98			            tya
   346 228F 48			            pha
   347
   348 2290 20 99 22		            jsr plot_angle
   349
   350 2293 68			            pla
   351 2294 A8			            tay
   352 2295 C8			            iny
   353 2296 D0 F6		            bne plot_256_dots
   354 				                     
   355 2298 60			            rts
   356
   357 2299			plot_angle
   358 2299 B9 00 16		            lda outer_x_256,y
   359 229C 18			            clc
   360 229D 69 0F		            adc #outer_x_margin
   361 229F 85 55		            sta x_position            
   362 22A1 A9 00		            lda #0
   363 22A3 69 00		            adc #0
   364 22A5 85 56		            sta x_position+1
   365
   366 22A7 B9 00 17		            lda outer_y_256,y            
   367 22AA 85 54		            sta y_position
   368
   369 22AC 20 97 23		            jsr plot_dot            
   370 				            
   371 22AF 60			            rts
   372
   373 				;------------------------
   374 				; 8bit * 8bit = 16bit multiply
   375 				; By White Flame
   376 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   377 				; uses extra zp var _multiplicand+1
   378
   379 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   380 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   381
   382 				; In this version, both inputs must be unsigned
   383 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   384
   385 22B0			_multi8
   386 22B0 A9 00		            lda #$00
   387 22B2 A8			            tay
   388 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   389 22B3 F0 0D		            beq _enter_loop
   390 22B5			_do_add
   391 22B5 18			            clc
   392 22B6 65 F6		            adc _multiplicand
   393 22B8 AA			            tax
   394
   395 22B9 98			            tya
   396 22BA 65 F7		            adc _multiplicand+1
   397 22BC A8			            tay
   398 22BD 8A			            txa
   399 22BE			_mul_loop
   400 22BE 06 F6		            asl _multiplicand
   401 22C0 26 F7		            rol _multiplicand+1
   402 22C2			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   403 22C2 46 F8		            lsr _multiplier
   404 22C4 B0 EF		            bcs _do_add
   405 22C6 D0 F6		            bne _mul_loop
   406 22C8 60			            rts
   407
   408 22C9			dli_menu
   409 22C9 48			            pha
   410 22CA 8A			            txa
   411 22CB 48			            pha
   412 				            
   413 22CC A9 00		            lda #0
   414 22CE 8D 0A D4		            sta WSYNC
   415 22D1 8D 1A D0		            sta COLBK
   416 22D4 A9 0E		            lda #$0e
   417 22D6 8D 0A D4		            sta WSYNC
   418 22D9 8D 1A D0		            sta COLBK
   419 22DC A9 0A		            lda #$0a
   420 22DE 8D 0A D4		            sta WSYNC
   421 22E1 8D 1A D0		            sta COLBK
   422 22E4 A9 00		            lda #0
   423 22E6 8D 0A D4		            sta WSYNC
   424 22E9 8D 1A D0		            sta COLBK
   425
   426 22EC A2 00		            ldx #0
   427 22EE			color_it            
   428 22EE BD 20 23		            lda menu_colpf0,x
   429 22F1 8D 0A D4		            sta WSYNC
   430 22F4 8D 16 D0		            sta COLPF0
   431 22F7 E8			            inx
   432 22F8 E0 38		            cpx #56
   433 22FA D0 F2		            bne color_it
   434
   435 22FC A9 00		            lda #0
   436 22FE 8D 0A D4		            sta WSYNC
   437 2301 8D 1A D0		            sta COLBK
   438 2304 A9 0A		            lda #$0a
   439 2306 8D 0A D4		            sta WSYNC
   440 2309 8D 1A D0		            sta COLBK
   441 230C A9 0E		            lda #$0e
   442 230E 8D 0A D4		            sta WSYNC
   443 2311 8D 1A D0		            sta COLBK
   444 2314 A9 00		            lda #0
   445 2316 8D 0A D4		            sta WSYNC
   446 2319 8D 1A D0		            sta COLBK
   447 				            
   448 231C 68			            pla
   449 231D AA			            tax
   450 231E 68			            pla
   451 231F 40			            rti
   452
   453 2320			menu_colpf0
   454 2320 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   455 2328 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   456 2330 00 00 00 00		            dta 0,0,0,0
   457 2334 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   458 233C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   459 2344 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   460 234C 00 00 00 00		            dta 0,0,0,0
   461 2350 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   462
   463 2358			make_screen_y_tab
   464 2358 A9 00		            lda #<screen_mem
   465 235A 85 86		            sta tmp_screen
   466 235C A9 A0		            lda #>screen_mem
   467 235E 85 87		            sta tmp_screen+1
   468 				            
   469 2360 A2 00		            ldx #0
   470 2362			fill_y_tab              
   471 2362 A5 86		            lda tmp_screen
   472 2364 9D 00 18		            sta screen_y_lo,x
   473 2367 A5 87		            lda tmp_screen+1
   474 2369 9D 00 19		            sta screen_y_hi,x
   475 				            
   476 236C A5 86		            lda tmp_screen
   477 236E 18			            clc
   478 236F 69 20		            adc #SCREEN_WIDTH
   479 2371 85 86		            sta tmp_screen
   480 2373 A5 87		            lda tmp_screen+1
   481 2375 69 00		            adc #0
   482 2377 85 87		            sta tmp_screen+1
   483 				            
   484 2379 E8			            inx
   485 237A D0 E6		            bne fill_y_tab
   486 237C 60			            rts
   487
   488 237D			clear_screen
   489 237D A9 00		            lda #<screen_mem
   490 237F 85 86		            sta tmp_screen
   491 2381 A9 A0		            lda #>screen_mem
   492 2383 85 87		            sta tmp_screen+1
   493 				            
   494 2385 A0 00		            ldy #0
   495 2387			wipe_all
   496 2387 A9 00		            lda #0
   497 2389			wipe_page
   498 2389 91 86		            sta (tmp_screen),y
   499 238B C8			            iny
   500 238C D0 FB		            bne wipe_page 
   501
   502 238E E6 87		            inc tmp_screen+1
   503 2390 A5 87		            lda tmp_screen+1
   504 2392 C9 C0		            cmp #>screen_end
   505 2394 D0 F1		            bne wipe_all
   506 2396 60			            rts
   507
   508 2397			plot_dot
   509 2397 A6 54		            ldx y_position
   510 2399 BD 00 18		            lda screen_y_lo,x
   511 239C 85 86		            sta tmp_screen
   512 239E BD 00 19		            lda screen_y_hi,x
   513 23A1 85 87		            sta tmp_screen+1
   514 				            
   515 23A3 A5 55		            lda x_position
   516 23A5 4A			            lsr
   517 23A6 4A			            lsr
   518 23A7 4A			            lsr
   519 23A8 85 88		            sta course_x
   520
   521 23AA A5 56		            lda x_position+1
   522 23AC F0 07		            beq x_below_256
   523 				; x >= 256, add 256/8
   524 23AE A5 88		            lda course_x
   525 23B0 18			            clc
   526 23B1 69 20		            adc #32
   527 23B3 85 88		            sta course_x
   528 				                        
   529 23B5			x_below_256
   530 23B5 A5 55		            lda x_position
   531 23B7 29 07		            and #%00000111
   532 23B9 AA			            tax
   533
   534 23BA A4 88		            ldy course_x            
   535 23BC B1 86		            lda (tmp_screen),y
   536 23BE 1D D0 23		            ora pixel_mask,x
   537 23C1 91 86		            sta (tmp_screen),y
   538 23C3 60			            rts   
   539
   540 23C4			turn_color_ball
   541 23C4 A6 B5		            ldx player_turn
   542 23C6 BD CD 23		            lda color_turn,x
   543 23C9 8D C7 02		            sta COLOR3
   544 23CC 60			            rts
   545 				            
   546 23CD 00 26 76		color_turn  dta 0,$26,$76                           
   547
   548 23D0			pixel_mask
   549 23D0 80 40 20 10		            dta $80,$40,$20,$10
   550 23D4 08 04 02 01		            dta $08,$04,$02,$01
   551
   552 23D8			outer_collision_colors
   553 23D8 06 00 00 00		            dta $06,$00,$00,$00
   554 23DC 0E 00 00 00		            dta $0e,$00,$00,$00
   555 23E0 00 00 00 00		            dta $00,$00,$00,$00
   556 23E4 00 00 00 00		            dta $00,$00,$00,$00
   557
   558 				; A, X, Y are already saved by the OS
   559 23E8			vbi                 
   560 23E8 A9 2D		            lda #%00101101  ; enable P/M DMA
   561 23EA 8D 2F 02		            sta SDMCTL
   562 23ED A9 00		            lda #0
   563 23EF 85 4D		            sta 77      ; attract off
   564
   565 				; menu switching thingy
   566
   567 23F1 AD 1F D0		            lda CONSOL
   568 23F4 C9 03		            cmp #3
   569 23F6 D0 09		            bne no_option_pressed
   570
   571 23F8			go_menu_mode            
   572 23F8 20 57 26		            jsr wipe_ball
   573 				            
   574 23FB A9 01		            lda #1
   575 23FD 85 8C		            sta mode_menu
   576 23FF D0 0F		            bne check_mode_menu
   577
   578 2401			no_option_pressed
   579 2401 C9 06		            cmp #6
   580 2403 D0 0B		            bne check_mode_menu
   581 				            
   582 				; reset game
   583
   584 2405			reset_game
   585 2405 20 57 26		            jsr wipe_ball
   586 				            
   587 2408 A9 01		            lda #1
   588 240A 85 B6		            sta game_restart
   589
   590 240C A9 00		            lda #0
   591 240E 85 8C		            sta mode_menu
   592
   593 2410			check_mode_menu
   594 2410 A5 8C		            lda mode_menu
   595 2412 F0 51		            beq main_game_vbi
   596
   597 				; within menu vbi
   598 				            
   599 2414 AD 1F D0		            lda CONSOL
   600 2417 C9 05		            cmp #5          ; select
   601 2419 D0 18		            bne no_level_select
   602 				            
   603 241B AD 29 2A		            lda previous_consol
   604 241E C9 05		            cmp #5
   605 2420 F0 14		            beq wait_depressed
   606 				            
   607 2422 20 3E 2A		            jsr increase_level
   608 2425 AE 2A 2A		            ldx current_level_index
   609 2428 20 2F 2A		            jsr set_level_ball_speed            
   610
   611 242B A9 05		            lda #5
   612 242D 8D 29 2A		            sta previous_consol
   613 2430 4C 36 24		            jmp wait_depressed
   614
   615 2433			no_level_select
   616 2433 8D 29 2A		            sta previous_consol
   617
   618 2436			wait_depressed        
   619 2436 A9 00		            lda #<menu_dl
   620 2438 8D 30 02		            sta SDLSTL
   621 243B A9 40		            lda #>menu_dl
   622 243D 8D 31 02		            sta SDLSTH
   623
   624 				; detect/show controller type (used for both players)
   625 2440 20 4C 24		            jsr detect_show_driver
   626
   627 2443 20 5D 25		            jsr handle_player1
   628 2446 20 76 25		            jsr handle_player2
   629
   630 2449 4C 06 25		            jmp exit_vbi
   631
   632 				; X = port/driver to detect
   633 244C			detect_show_driver
   634 244C 20 33 21		            jsr driver_detect
   635 244F A8			            tay
   636 2450 B9 80 41		            lda driver_text_lo,y
   637 2453 85 86		            sta tmp_screen
   638 2455 B9 84 41		            lda driver_text_hi,y
   639 2458 85 87		            sta tmp_screen+1
   640
   641 245A A0 07		            ldy #7
   642 245C			show_driv
   643 245C B1 86		            lda (tmp_screen),y
   644 245E 99 18 41		            sta driver_screen,y
   645 2461 88			            dey
   646 2462 10 F8		            bpl show_driv
   647 2464 60			            rts
   648
   649 				; main game vbi
   650 2465			main_game_vbi
   651 2465 A5 B6		            lda game_restart
   652 2467 F0 2F		            beq no_restart
   653 				            
   654 2469 A9 00		            lda #0
   655 246B 85 B6		            sta game_restart
   656 				            
   657 246D 20 09 25		            jsr sound_off
   658 				            
   659 2470 20 F7 27		            jsr reset_score
   660 2473 20 C5 27		            jsr show_score_p1
   661 2476 20 DE 27		            jsr show_score_p2
   662
   663 				; restart game code
   664 				            ; initial state of players            
   665 				;            jsr handle_player1
   666 				;            jsr handle_player2
   667
   668 2479 A6 9C		            ldx p1_angle
   669 247B 86 AA		            stx ball_angle_start
   670 247D 20 B0 25		            jsr ball_to_start_position
   671 2480 20 BF 25		            jsr prepare_ball_end_position
   672
   673 2483 A9 00		            lda #0
   674 2485 85 A0		            sta mp_collision
   675 2487 85 A1		            sta in_collision
   676 2489 85 A3		            sta edge_delay
   677 248B 8D 1E D0		            sta HITCLR
   678
   679 248E A9 02		            lda #2
   680 2490 85 B5		            sta player_turn         ; blue's turn
   681
   682 2492 20 C4 23		            jsr turn_color_ball
   683 2495 4C 06 25		            jmp exit_vbi            
   684
   685 2498			no_restart
   686 2498 A9 00		            lda #<display_list
   687 249A 8D 30 02		            sta SDLSTL
   688 249D A9 3C		            lda #>display_list
   689 249F 8D 31 02		            sta SDLSTH
   690
   691 24A2 AD 08 D0		            lda M0PL
   692 24A5 85 A0		            sta mp_collision
   693 24A7 AD 09 D0		            lda M1PL
   694 24AA 05 A0		            ora mp_collision
   695 24AC 85 A0		            sta mp_collision
   696
   697 				;            jsr handle_edge_detection
   698 				;            bne exit_vbi                ; 1 = end game
   699 				 
   700 24AE A9 26		            lda #$26
   701 24B0 8D 18 D0		            sta $d018
   702
   703 24B3 20 5D 25		            jsr handle_player1
   704
   705 24B6 20 76 25		            jsr handle_player2
   706
   707 				; handle ball
   708
   709 24B9 20 57 26		            jsr wipe_ball         
   710
   711 				; Check ball collision with bat
   712
   713 24BC A5 A4		            lda bat_collision_delay
   714 24BE F0 05		            beq check_allowed
   715 24C0 C6 A4		            dec bat_collision_delay
   716 24C2 4C DF 24		            jmp move_one
   717
   718 24C5			check_allowed
   719 24C5 A5 A0		            lda mp_collision
   720 24C7 F0 0F		            beq reset_in_collision
   721
   722 24C9 A5 A1		            lda in_collision
   723 24CB D0 12		            bne no_first_hit
   724
   725 24CD E6 A1		            inc in_collision            
   726 24CF 20 EC 25		            jsr bounce_bat_ball 
   727 				            
   728 24D2 20 18 25		            jsr sound_bat          
   729 				            
   730 24D5 4C DF 24		            jmp move_one
   731 				            
   732 24D8			reset_in_collision
   733 24D8 A9 00		            lda #0
   734 24DA 85 A1		            sta in_collision   
   735 24DC 20 09 25		            jsr sound_off         
   736
   737 24DF			move_one
   738 24DF			no_first_hit
   739 24DF 20 49 29		            jsr move_current_xy
   740 24E2 F0 0F		            beq still_moving
   741 24E4			do_reset
   742 24E4 A5 AB		            lda ball_angle_end
   743 24E6 85 AA		            sta ball_angle_start
   744
   745 24E8 20 E3 25		            jsr ball_current_to_start_position
   746 24EB 20 BF 25		            jsr prepare_ball_end_position            
   747 				        
   748 24EE 20 29 25		            jsr handle_score
   749 24F1 D0 13		            bne exit_vbi        ; end game
   750 24F3			still_moving
   751 24F3 A5 EB		            lda current_x+1
   752 24F5 85 A6		            sta ball_current_x
   753 24F7 A5 ED		            lda current_y+1
   754 24F9 85 A7		            sta ball_current_y
   755
   756 24FB 20 6C 26		            jsr show_ball
   757
   758 24FE A9 00		            lda #0
   759 2500 8D 18 D0		            sta $d018           
   760
   761 				; anything in A to clear collisions
   762 2503 8D 1E D0		            sta HITCLR
   763
   764 2506			exit_vbi
   765 2506 4C 62 E4		            jmp $e462
   766
   767 2509			sound_off
   768 2509 A9 00		            lda #0
   769 250B 8D 01 D2		            sta AUDC1
   770 250E 8D 03 D2		            sta AUDC2
   771 2511 8D 05 D2		            sta AUDC3
   772 2514 8D 05 D2		            sta AUDC3
   773 2517 60			            rts
   774
   775 2518			sound_bat
   776 2518 A5 B5		            lda player_turn
   777 251A 0A			            asl
   778 251B 0A			            asl
   779 251C 69 40		            adc #$40
   780 251E E5 B3		            sbc angle_diff_bat
   781 2520 8D 00 D2		            sta AUDF1
   782 2523 A9 A6		            lda #$a6
   783 2525 8D 01 D2		            sta AUDC1
   784 2528 60			            rts
   785
   786 				; Detect ball reaches edge
   787 				; - update score
   788 				; - score > max score, then exit A = 1, otherwise 0
   789
   790 2529			handle_edge_detection
   791 				;            lda edge_delay
   792 				;            beq check_edge
   793 				;            dec edge_delay
   794 				;            bne no_edge
   795
   796 2529			check_edge
   797 				;            lda M0PF
   798 				;            ora M1PF
   799 				;            tax
   800 				;            lda outer_collision_colors,x
   801 				;            sta 709
   802 				;            txa
   803 				;            beq no_edge
   804
   805 2529			handle_score
   806 2529 A5 B5		            lda player_turn
   807 252B C9 01		            cmp #1
   808 252D D0 12		            bne was_player2_turn
   809 				; was player 1 turn, so player 2 gets a point
   810 252F 20 0C 28		            jsr inc_score_p2
   811 2532 20 DE 27		            jsr show_score_p2
   812
   813 2535 AD 0B 3D		            lda score_p2
   814 2538 C9 11		            cmp #MAX_SCORE
   815 253A D0 17		            bne reset_edge_delay
   816
   817 253C A9 01		            lda #1
   818 253E 85 8C		            sta mode_menu
   819 2540 60			            rts
   820
   821 2541			was_player2_turn
   822 2541 20 00 28		            jsr inc_score_p1
   823 2544 20 C5 27		            jsr show_score_p1
   824
   825 2547 AD 0A 3D		            lda score_p1
   826 254A C9 11		            cmp #MAX_SCORE
   827 254C D0 05		            bne reset_edge_delay
   828
   829 254E A9 01		            lda #1
   830 2550 85 8C		            sta mode_menu
   831 2552 60			            rts
   832
   833 2553			reset_edge_delay
   834 2553 A9 0A		            lda #10
   835 2555 85 A3		            sta edge_delay
   836
   837 2557			no_edge
   838
   839 2557 A9 00		            lda #0      ; no end game
   840 				; anything in A to clear collisions
   841 2559 8D 1E D0		            sta HITCLR
   842 255C 60			            rts
   843
   844 				; player 1
   845 				; - wipe shape at previous y-position
   846 				; - move player using controller
   847 				; - set sprite positions
   848
   849 255D			handle_player1
   850 255D 20 C4 26		            jsr wipe_p1         ; wipe previous shape player 1
   851
   852 2560 A2 00		            ldx #0              ; player 1
   853 2562 20 8F 25		            jsr move_player
   854 				            
   855 2565 20 90 26		            jsr show_p1
   856
   857 2568 A5 94		            lda player1_x
   858 256A 18			            clc
   859 256B 69 20		            adc #left_margin
   860 256D 8D 00 D0		            sta HPOSP0
   861 2570 69 08		            adc #8
   862 2572 8D 01 D0		            sta HPOSP1
   863 2575 60			            rts
   864
   865 				; player 2
   866 				; - wipe shape at previous y-position
   867 				; - move player using controller
   868 				; - set sprite positions
   869
   870 2576			handle_player2
   871 2576 20 D9 26		            jsr wipe_p2         ; wipe previous shape player 2
   872
   873 2579 A2 01		            ldx #1              ; player 2
   874 257B 20 8F 25		            jsr move_player
   875 				                        
   876 257E 20 AA 26		            jsr show_p2
   877
   878 2581 A5 95		            lda player2_x
   879 2583 18			            clc
   880 2584 69 20		            adc #left_margin
   881 2586 8D 02 D0		            sta HPOSP2
   882 2589 69 08		            adc #8
   883 258B 8D 03 D0		            sta HPOSP3
   884 258E 60			            rts
   885
   886 				; move player 1/2
   887 				; right - clockwise, left = anti-clockwise
   888
   889 				; X = 0, player 1
   890 				; X = 1, player 2
   891
   892 				; Y = driver mode:
   893 				; 0 : stick
   894 				; 1 : paddle
   895 				; 2 : driving
   896 				; 3 : computer
   897 				            
   898 258F			move_player
   899 258F 20 62 21		            jsr main_driver
   900
   901 2592 B5 9C		            lda p1_angle,x
   902 2594 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   903 2596 49 40		            eor #64                     ; perpendicular to the circle angle
   904 2598 95 90		            sta p1_shape,x
   905
   906 259A B4 9C		            ldy p1_angle,x
   907 259C B9 00 2B		            lda inner_x_tab,y
   908 259F 4A			            lsr
   909 25A0 69 20		            adc #inner_x_margin/2
   910 25A2 95 94		            sta player1_x,x
   911 25A4 B9 00 2C		            lda inner_y_tab,y
   912 25A7 4A			            lsr
   913 25A8 95 98		            sta player1_y,x
   914
   915 25AA B4 90		            ldy p1_shape,x
   916 25AC 20 7C 27		            jsr shape_to_ptr
   917
   918 25AF 60			            rts
   919
   920 				; Set ball at start position
   921 				; - start angle current player
   922 				; - start position by inner table
   923 				; - collision delay set?
   924
   925 				; Set ball current position to start position
   926 				; input:
   927 				; X = angle of start position
   928 				; output:
   929 				; ball position: (ball_current_x, ball_current_y)
   930 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   931 25B0			ball_to_start_position
   932 25B0 BD 00 2B		            lda inner_x_tab,x
   933 25B3 85 A6		            sta ball_current_x
   934 25B5 85 E6		            sta tmp_x1
   935 25B7 BD 00 2C		            lda inner_y_tab,x
   936 25BA 85 A7		            sta ball_current_y
   937 25BC 85 E7		            sta tmp_y1
   938 25BE 60			            rts
   939
   940 				; Prepare ball end position
   941 				; - end angle current player
   942 				; - end position by outer table
   943 				; - calculate step size x,y
   944
   945 				; Input:
   946 				; - ball_angle_start
   947 				; - ball speed
   948 				; Output:
   949 				; - ball_andle_end
   950 				; - ball start position (tmp_x1, tmp_y1)
   951 				; - ball end position (tmp_x2, tmp_y2)
   952 				; - step size (step_x, step_y) for ball movement
   953 25BF			prepare_ball_end_position
   954 25BF A5 AA		            lda ball_angle_start
   955 25C1 49 80		            eor #128        ; other side
   956 25C3 85 AB		            sta ball_angle_end
   957 25C5 AA			            tax
   958 25C6 20 4C 26		            jsr angle_to_end_position
   959 				                        
   960 25C9 20 DC 28		            jsr init_current_xy
   961 				            
   962 				; move current a little bit            
   963 25CC 20 49 29		            jsr move_current_xy
   964 				; ignore end indicator, since we only just started
   965
   966
   967 25CF A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   968 25D1 85 A4		            sta bat_collision_delay
   969 25D3 60			            rts
   970
   971 				; x = angle 0..255
   972 25D4			outer_angle_to_start_position
   973 25D4 BD 00 16		            lda outer_x_256,x
   974 25D7 85 A6		            sta ball_current_x
   975 25D9 85 E6		            sta tmp_x1
   976 25DB BD 00 17		            lda outer_y_256,x
   977 25DE 85 A7		            sta ball_current_y
   978 25E0 85 E7		            sta tmp_y1
   979 25E2 60			            rts
   980
   981 25E3			ball_current_to_start_position
   982 25E3 A5 A6		            lda ball_current_x
   983 25E5 85 E6		            sta tmp_x1
   984 25E7 A5 A7		            lda ball_current_y
   985 25E9 85 E7		            sta tmp_y1
   986 25EB 60			            rts
   987
   988 				; Ball collides with bat
   989 				; - start ball angle = end ball angle
   990 				; - calculate diff between bat and ball end angle
   991 				; - calculate new end angle
   992 				; - Set ball at start position
   993 				; - Prepare ball end position
   994
   995 25EC			bounce_bat_ball
   996 				; set new start of ball
   997 				; @todo check ball angles
   998 				; set new ball start angle (= previous end angle)
   999 25EC A5 AB		            lda ball_angle_end
  1000 25EE 85 AA		            sta ball_angle_start
  1001 				            
  1002 				; alternative?
  1003 				            ;ldx ball_angle_start
  1004 				            ;jsr ball_to_start_position          
  1005 25F0 20 E3 25		            jsr ball_current_to_start_position
  1006
  1007 				; which player hit the ball?
  1008 25F3 A9 01		            lda #1
  1009 25F5 85 A2		            sta player_nr_hit
  1010 25F7 A5 A0		            lda mp_collision
  1011 25F9 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
  1012 25FB D0 04		            bne p1_hit
  1013 25FD A9 02		            lda #2
  1014 25FF 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
  1015 2601			p1_hit            
  1016
  1017 				; who's turn is it and who bounced the ball?
  1018
  1019 2601 A5 B5		            lda player_turn
  1020 2603 25 A2		            and player_nr_hit
  1021 2605 F0 06		            beq no_switch_turn
  1022
  1023 2607 A5 B5		            lda player_turn
  1024 2609 49 03		            eor #3              ; 1 => 2, 2 => 1
  1025 260B 85 B5		            sta player_turn 
  1026
  1027 260D			no_switch_turn
  1028 260D 20 C4 23		            jsr turn_color_ball
  1029 				            
  1030 2610 A6 A2		            ldx player_nr_hit
  1031 2612 CA			            dex                     ; index 0,1 (player = 1,2)
  1032 2613 B5 9C		            lda p1_angle,x
  1033
  1034 				; Calculate diff between bat angle position and new ball start position
  1035 2615 85 B0		            sta tmp_angle1
  1036
  1037 2617 A5 AA		            lda ball_angle_start
  1038 2619 85 B1		            sta tmp_angle2
  1039
  1040 261B 20 18 28		            jsr calc_angle_diff
  1041
  1042 261E 0A			            asl
  1043 261F 0A			            asl
  1044 2620 0A			            asl
  1045 2621 85 B3		            sta angle_diff_bat
  1046
  1047 2623 A5 B0		            lda tmp_angle1
  1048 2625 18			            clc
  1049 2626 65 B2		            adc add_to_angle
  1050 2628 49 80		            eor #128            ; other side
  1051 262A 85 B0		            sta tmp_angle1
  1052 				            
  1053 262C A5 B4		            lda tmp_angle_direction
  1054 262E D0 0A		            bne diff_clockwise
  1055 				; diff counter clockwise
  1056 2630 A5 B0		            lda tmp_angle1
  1057 2632 18			            clc
  1058 2633 65 B3		            adc angle_diff_bat
  1059 2635 85 B0		            sta tmp_angle1
  1060 2637 4C 41 26		            jmp calc_done            
  1061
  1062 263A			diff_clockwise
  1063 263A A5 B0		            lda tmp_angle1
  1064 263C 38			            sec
  1065 263D E5 B3		            sbc angle_diff_bat
  1066 263F 85 B0		            sta tmp_angle1
  1067 				            
  1068 				; calculation done            
  1069 2641			calc_done
  1070 2641 A5 B0		            lda tmp_angle1
  1071 2643 85 AB		            sta ball_angle_end
  1072 2645 AA			            tax
  1073 2646 20 4C 26		            jsr angle_to_end_position
  1074 				                        
  1075 2649 4C DC 28		            jmp init_current_xy
  1076
  1077 				; x = angle 0..255
  1078 264C			angle_to_end_position
  1079 264C BD 00 16		            lda outer_x_256,x
  1080 264F 85 E8		            sta tmp_x2
  1081 2651 BD 00 17		            lda outer_y_256,x
  1082 2654 85 E9		            sta tmp_y2
  1083 2656 60			            rts
  1084
  1085 2657			wipe_ball
  1086 2657 A5 A7		            lda ball_current_y
  1087 2659 4A			            lsr
  1088 265A 69 06		            adc #ball_top_margin
  1089 265C AA			            tax                 ; x = real y position on screen
  1090 265D A9 00		            lda #0
  1091 265F 9D 80 11		            sta msl_area,x
  1092 2662 9D 81 11		            sta msl_area+1,x
  1093 2665 9D 82 11		            sta msl_area+2,x
  1094 2668 9D 83 11		            sta msl_area+3,x
  1095 266B 60			            rts
  1096
  1097 266C			show_ball
  1098 266C A5 A7		            lda ball_current_y
  1099 266E 4A			            lsr
  1100 266F 69 06		            adc #ball_top_margin
  1101 2671 AA			            tax                 ; x = real y position on screen
  1102
  1103 2672 A9 02		            lda #%00000010
  1104 2674 9D 80 11		            sta msl_area,x
  1105 2677 9D 83 11		            sta msl_area+3,x
  1106 267A A9 07		            lda #%00000111
  1107 267C 9D 81 11		            sta msl_area+1,x
  1108 267F 9D 82 11		            sta msl_area+2,x
  1109 				            
  1110 2682 A5 A6		            lda ball_current_x
  1111 2684 4A			            lsr
  1112 2685 69 45		            adc #ball_left_margin
  1113 2687 8D 05 D0		            sta HPOSM1
  1114 268A 69 02		            adc #2
  1115 268C 8D 04 D0		            sta HPOSM0
  1116 				                        
  1117 268F 60			            rts
  1118 				            
  1119 2690			show_p1
  1120 2690 A5 98		            lda player1_y
  1121 2692 18			            clc
  1122 2693 69 01		            adc #upper_margin
  1123 2695 AA			            tax
  1124
  1125 2696 A0 00		            ldy #0
  1126 2698			show_shape1
  1127 2698 B1 84		            lda (shape_ptr),y
  1128 269A 9D 00 12		            sta p0_area,x 
  1129 269D C8			            iny
  1130 269E B1 84		            lda (shape_ptr),y
  1131 26A0 9D 80 12		            sta p1_area,x
  1132 26A3 E8			            inx
  1133 26A4 C8			            iny
  1134 26A5 C0 20		            cpy #32
  1135 26A7 D0 EF		            bne show_shape1
  1136 26A9 60			            rts
  1137
  1138 26AA			show_p2
  1139 26AA A5 99		            lda player2_y
  1140 26AC 18			            clc
  1141 26AD 69 01		            adc #upper_margin
  1142 26AF AA			            tax
  1143
  1144 26B0 A0 00		            ldy #0
  1145 26B2			show_shape2
  1146 26B2 B1 84		            lda (shape_ptr),y
  1147 26B4 9D 00 13		            sta p2_area,x 
  1148 26B7 C8			            iny
  1149 26B8 B1 84		            lda (shape_ptr),y
  1150 26BA 9D 80 13		            sta p3_area,x
  1151 26BD E8			            inx
  1152 26BE C8			            iny
  1153 26BF C0 20		            cpy #32
  1154 26C1 D0 EF		            bne show_shape2
  1155 26C3 60			            rts
  1156
  1157 26C4			wipe_p1
  1158 26C4 A5 98		            lda player1_y
  1159 26C6 18			            clc
  1160 26C7 69 01		            adc #upper_margin
  1161 26C9 AA			            tax
  1162 				            
  1163 26CA A0 10		            ldy #16
  1164 26CC A9 00		            lda #0
  1165 26CE			wipe_it1            
  1166 26CE 9D 00 12		            sta p0_area,x 
  1167 26D1 9D 80 12		            sta p1_area,x
  1168 26D4 E8			            inx
  1169 26D5 88			            dey
  1170 26D6 D0 F6		            bne wipe_it1 
  1171 26D8 60			            rts
  1172
  1173 26D9			wipe_p2
  1174 26D9 A5 99		            lda player2_y
  1175 26DB 18			            clc
  1176 26DC 69 01		            adc #upper_margin
  1177 26DE AA			            tax
  1178 				            
  1179 26DF A0 10		            ldy #16
  1180 26E1 A9 00		            lda #0
  1181 26E3			wipe_it2            
  1182 26E3 9D 00 13		            sta p2_area,x 
  1183 26E6 9D 80 13		            sta p3_area,x
  1184 26E9 E8			            inx
  1185 26EA 88			            dey
  1186 26EB D0 F6		            bne wipe_it2 
  1187 26ED 60			            rts
  1188
  1189 26EE			plot_inner
  1190 26EE A9 01		            lda #1
  1191 26F0 8D FB 02		            sta draw_color
  1192
  1193 26F3 A2 00		            ldx #0
  1194 26F5			plot_in
  1195 26F5 8A			            txa
  1196 26F6 48			            pha
  1197
  1198 26F7 BD 00 2B		            lda inner_x_tab,x                      
  1199 26FA 18			            clc
  1200 26FB 69 0F		            adc #outer_x_margin
  1201 26FD 85 55		            sta x_position
  1202 26FF A9 00		            lda #0
  1203 2701 69 00		            adc #0
  1204 2703 85 56		            sta x_position+1
  1205 				            
  1206 2705 BD 00 2C		            lda inner_y_tab,x
  1207 2708 85 54		            sta y_position
  1208 				            
  1209 270A 20 97 23		            jsr plot_dot
  1210 				;            jsr plot_pixel
  1211
  1212 270D 68			            pla
  1213 270E AA			            tax
  1214 270F E8			            inx
  1215 2710 D0 E3		            bne plot_in 
  1216 				            
  1217 2712 60			            rts
  1218 				            
  1219 2713			plot_outer
  1220 2713 A9 01		            lda #1
  1221 2715 8D FB 02		            sta draw_color
  1222
  1223 2718 A9 00		            lda #<outer_x_tab
  1224 271A 85 80		            sta table_x_ptr
  1225 271C A9 30		            lda #>outer_x_tab
  1226 271E 85 81		            sta table_x_ptr+1
  1227
  1228 2720 A9 00		            lda #<outer_y_tab
  1229 2722 85 82		            sta table_y_ptr
  1230 2724 A9 34		            lda #>outer_y_tab
  1231 2726 85 83		            sta table_y_ptr+1
  1232
  1233 2728			plot_out
  1234 2728 A0 00		            ldy #0
  1235
  1236 272A B1 80		            lda (table_x_ptr),y
  1237 272C 18			            clc
  1238 272D 69 0F		            adc #outer_x_margin
  1239 272F 85 55		            sta x_position
  1240 2731 A9 00		            lda #0
  1241 2733 69 00		            adc #0
  1242 2735 85 56		            sta x_position+1
  1243 				            
  1244 2737 B1 82		            lda (table_y_ptr),y
  1245 2739 85 54		            sta y_position
  1246 				 
  1247 273B 20 97 23		            jsr plot_dot            
  1248 				;            jsr plot_pixel
  1249
  1250 273E E6 80		            inc table_x_ptr
  1251 2740 D0 02		            bne no_xt
  1252 2742 E6 81		            inc table_x_ptr+1
  1253 2744			no_xt
  1254 				            
  1255 2744 E6 82		            inc table_y_ptr
  1256 2746 D0 02		            bne no_yt
  1257 2748 E6 83		            inc table_y_ptr+1
  1258 274A			no_yt            
  1259
  1260 274A A5 80		            lda table_x_ptr
  1261 274C C9 00		            cmp #<(outer_x_tab+1024)
  1262 274E D0 D8		            bne plot_out
  1263 2750 A5 81		            lda table_x_ptr+1
  1264 2752 C9 34		            cmp #>(outer_x_tab+1024)
  1265 2754 D0 D2		            bne plot_out
  1266 				            
  1267 2756 60			            rts
  1268
  1269 2757			make_shape_index
  1270 2757 A9 00		            lda #<pm_shapes
  1271 2759 85 84		            sta shape_ptr
  1272 275B A9 50		            lda #>pm_shapes
  1273 275D 85 85		            sta shape_ptr+1
  1274 				            
  1275 275F A2 00		            ldx #0
  1276 2761			fill_pm_tab
  1277 2761 A5 84		            lda shape_ptr
  1278 2763 9D 00 60		            sta pm_shape_lo,x
  1279 2766 A5 85		            lda shape_ptr+1
  1280 2768 9D 80 60		            sta pm_shape_hi,x
  1281 				            
  1282 276B A5 84		            lda shape_ptr
  1283 276D 18			            clc
  1284 276E 69 20		            adc #32
  1285 2770 85 84		            sta shape_ptr
  1286 2772 A5 85		            lda shape_ptr+1
  1287 2774 69 00		            adc #0
  1288 2776 85 85		            sta shape_ptr+1
  1289 				            
  1290 2778 E8			            inx
  1291 2779 10 E6		            bpl fill_pm_tab
  1292 				            
  1293 277B 60			            rts
  1294 				            
  1295 				; there are 128 shapes, each 32 bytes
  1296
  1297 				; y = shape index
  1298 277C			shape_to_ptr
  1299 277C B9 00 60		            lda pm_shape_lo,y
  1300 277F 85 84		            sta shape_ptr
  1301 2781 B9 80 60		            lda pm_shape_hi,y
  1302 2784 85 85		            sta shape_ptr+1
  1303
  1304 2786 60			            rts
  1305
  1306 				; turn 1024 tables into 256 bytes for ball edge lookup
  1307 2787			make_outer_256
  1308 2787 A0 00		            ldy #0
  1309 2789 A2 00		            ldx #0
  1310 278B			conv_256
  1311 278B BD 00 30		            lda outer_x_tab,x
  1312 278E 99 00 16		            sta outer_x_256,y
  1313 2791 BD 00 31		            lda outer_x_tab+$100,x
  1314 2794 99 40 16		            sta outer_x_256+64,y
  1315 2797 BD 00 32		            lda outer_x_tab+$200,x
  1316 279A 99 80 16		            sta outer_x_256+128,y
  1317 279D BD 00 33		            lda outer_x_tab+$300,x
  1318 27A0 99 C0 16		            sta outer_x_256+192,y
  1319 				            
  1320 27A3 BD 00 34		            lda outer_y_tab,x
  1321 27A6 99 00 17		            sta outer_y_256,y
  1322 27A9 BD 00 35		            lda outer_y_tab+$100,x
  1323 27AC 99 40 17		            sta outer_y_256+64,y
  1324 27AF BD 00 36		            lda outer_y_tab+$200,x
  1325 27B2 99 80 17		            sta outer_y_256+128,y
  1326 27B5 BD 00 37		            lda outer_y_tab+$300,x
  1327 27B8 99 C0 17		            sta outer_y_256+192,y
  1328
  1329 27BB E8			            inx
  1330 27BC E8			            inx
  1331 27BD E8			            inx
  1332 27BE E8			            inx
  1333 27BF C8			            iny
  1334 27C0 C0 40		            cpy #64
  1335 27C2 D0 C7		            bne conv_256            
  1336 27C4 60			            rts
  1337
  1338 27C5			show_score_p1
  1339 27C5 AD 0A 3D		            lda score_p1
  1340 27C8 4A			            lsr
  1341 27C9 4A			            lsr
  1342 27CA 4A			            lsr
  1343 27CB 4A			            lsr
  1344 27CC F0 02		            beq do_space1
  1345 27CE 09 10		            ora #16
  1346 27D0			do_space1
  1347 27D0 8D EF 3C		            sta score_chars_p1
  1348 27D3 AD 0A 3D		            lda score_p1
  1349 27D6 29 0F		            and #15
  1350 27D8 09 10		            ora #16
  1351 27DA 8D F0 3C		            sta score_chars_p1+1
  1352 27DD 60			            rts
  1353
  1354 27DE			show_score_p2
  1355 27DE AD 0B 3D		            lda score_p2
  1356 27E1 4A			            lsr
  1357 27E2 4A			            lsr
  1358 27E3 4A			            lsr
  1359 27E4 4A			            lsr
  1360 27E5 F0 02		            beq do_space2
  1361 27E7 09 10		            ora #16
  1362 27E9			do_space2
  1363 27E9 8D 08 3D		            sta score_chars_p2
  1364 27EC AD 0B 3D		            lda score_p2
  1365 27EF 29 0F		            and #15
  1366 27F1 09 10		            ora #16
  1367 27F3 8D 09 3D		            sta score_chars_p2+1
  1368 27F6 60			            rts
  1369 				                        
  1370 27F7			reset_score
  1371 27F7 A9 00		            lda #0
  1372 27F9 8D 0A 3D		            sta score_p1
  1373 27FC 8D 0B 3D		            sta score_p2
  1374 27FF 60			            rts            
  1375 				         
  1376 2800			inc_score_p1
  1377 2800 F8			            sed
  1378 2801 AD 0A 3D		            lda score_p1
  1379 2804 18			            clc
  1380 2805 69 01		            adc #1
  1381 2807 8D 0A 3D		            sta score_p1    
  1382 280A D8			            cld
  1383 280B 60			            rts
  1384
  1385 280C			inc_score_p2
  1386 280C F8			            sed
  1387 280D AD 0B 3D		            lda score_p2
  1388 2810 18			            clc
  1389 2811 69 01		            adc #1
  1390 2813 8D 0B 3D		            sta score_p2
  1391 2816 D8			            cld
  1392 2817 60			            rts
  1393
  1394 				; calculate the difference between angle1 and angle2
  1395
  1396 				; input:
  1397 				; tmp_angle1 (0..255)
  1398 				; tmp_angle2 (0..255)
  1399
  1400 				; output:
  1401 				; tmp_angle_diff, A: difference between angle1 and angle2
  1402 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1403
  1404 2818			calc_angle_diff
  1405 2818 A9 00		            lda #0
  1406 281A 85 B2		            sta add_to_angle
  1407 281C 85 B4		            sta tmp_angle_direction
  1408
  1409 				; make sure we can compare angles, otherwise add $40 to angles
  1410 281E A5 B0		            lda tmp_angle1
  1411 2820 C9 C0		            cmp #$c0
  1412 2822 B0 06		            bcs too_large
  1413 2824 A5 B1		            lda tmp_angle2
  1414 2826 C9 C0		            cmp #$c0
  1415 2828 90 12		            bcc not_too_large
  1416 282A			too_large
  1417 282A A5 B0		            lda tmp_angle1
  1418 282C 38			            sec
  1419 282D E9 40		            sbc #$40
  1420 282F 85 B0		            sta tmp_angle1
  1421 				            
  1422 2831 A5 B1		            lda tmp_angle2
  1423 2833 38			            sec
  1424 2834 E9 40		            sbc #$40
  1425 2836 85 B1		            sta tmp_angle2
  1426 				            
  1427 2838 A9 40		            lda #$40
  1428 283A 85 B2		            sta add_to_angle
  1429
  1430 283C			not_too_large
  1431 283C A5 B1		            lda tmp_angle2
  1432 283E C5 B0		            cmp tmp_angle1
  1433 2840 90 0A		            bcc angle2_smaller_angle1
  1434 				; ball >= play
  1435 2842 38			            sec
  1436 2843 E5 B0		            sbc tmp_angle1
  1437 2845 85 B7		            sta tmp_angle_diff
  1438 				            
  1439 2847 E6 B4		            inc tmp_angle_direction
  1440 2849 4C 53 28		            jmp diff_calculated
  1441 				                        
  1442 284C			angle2_smaller_angle1
  1443 284C A5 B0		            lda tmp_angle1
  1444 284E 38			            sec
  1445 284F E5 B1		            sbc tmp_angle2
  1446 2851 85 B7		            sta tmp_angle_diff
  1447
  1448 2853			diff_calculated
  1449 2853 A5 B7		            lda tmp_angle_diff           
  1450 2855 60			            rts
  1451
  1452 				; X = angle
  1453 				; lookup magnitude of angle 0 to angle X
  1454 2856			angle_to_magnitude
  1455 2856 BD 00 38		            lda magnitudes_lo,x
  1456 2859 85 B8		            sta magnitude
  1457 285B BD 00 39		            lda magnitudes_hi,x
  1458 285E 85 B9		            sta magnitude+1
  1459 2860 60			            rts
  1460
  1461 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1462 2861			calc_abs_tmp_dx
  1463 2861 A5 E8		            lda tmp_x2
  1464 2863 38			            sec
  1465 2864 E5 E6		            sbc tmp_x1
  1466 2866 B0 05		            bcs x2_le
  1467 2868 49 FF		            eor #255
  1468 286A 18			            clc
  1469 286B 69 01		            adc #1
  1470 286D 85 F2		x2_le       sta tmp_dx
  1471
  1472 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1473 286F			calc_abs_tmp_dy
  1474 286F A5 E9		            lda tmp_y2
  1475 2871 38			            sec
  1476 2872 E5 E7		            sbc tmp_y1
  1477 2874 B0 05		            bcs y2_le
  1478 2876 49 FF		            eor #255
  1479 2878 18			            clc
  1480 2879 69 01		            adc #1
  1481 287B 85 F3		y2_le       sta tmp_dy
  1482 287D 60			            rts
  1483 				            
  1484 287E			calc_dx_div_magnitude
  1485 287E A9 00		            lda #0
  1486 2880 85 E2		            sta _dividend
  1487 2882 A5 F2		            lda tmp_dx
  1488 				            ;clc
  1489 				            ;adc #1      ; 0..0 = 1 pixel
  1490 2884 85 E3		            sta _dividend+1
  1491
  1492 2886 A5 B9		            lda magnitude+1
  1493 2888 85 E0		            sta _divisor
  1494 288A A9 00		            lda #0
  1495 288C 85 E1		            sta _divisor+1
  1496 				            
  1497 288E 20 B6 28		            jsr _div16
  1498
  1499 				; todo multiply result with velocity            
  1500 2891 A5 E2		            lda _result
  1501 2893 85 EE		            sta step_x
  1502 2895 A5 E3		            lda _result+1
  1503 2897 85 EF		            sta step_x+1
  1504 				            
  1505 2899 60			            rts
  1506 				            
  1507 289A			calc_dy_div_magnitude
  1508 289A A9 00		            lda #0
  1509 289C 85 E2		            sta _dividend
  1510 289E A5 F3		            lda tmp_dy
  1511 				            ;clc
  1512 				            ;adc #1      ; 0..0 = 1 pixel
  1513 28A0 85 E3		            sta _dividend+1
  1514 				            
  1515 28A2 A5 B9		            lda magnitude+1
  1516 28A4 85 E0		            sta _divisor
  1517 28A6 A9 00		            lda #0
  1518 28A8 85 E1		            sta _divisor+1
  1519
  1520 28AA 20 B6 28		            jsr _div16
  1521 				            
  1522 				; todo multiply result with velocity
  1523 28AD A5 E2		            lda _result
  1524 28AF 85 F0		            sta step_y
  1525 28B1 A5 E3		            lda _result+1
  1526 28B3 85 F1		            sta step_y+1
  1527 				            
  1528 28B5 60			            rts
  1529
  1530 				; divide 16bit
  1531 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1532
  1533 				; _result = _dividend / divisor
  1534
  1535 28B6 A9 00		_div16      lda #0          ;preset remainder to 0
  1536 28B8 85 E4		            sta _remainder
  1537 28BA 85 E5		            sta _remainder+1
  1538 28BC A2 10		            ldx #16         ;repeat for each bit: ...
  1539
  1540 28BE 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1541 28C0 26 E3		            rol _dividend+1  
  1542 28C2 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1543 28C4 26 E5		            rol _remainder+1
  1544 28C6 A5 E4		            lda _remainder
  1545 28C8 38			            sec
  1546 28C9 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1547 28CB A8			            tay         ;lb result -> Y, for we may need it later
  1548 28CC A5 E5		            lda _remainder+1
  1549 28CE E5 E1		            sbc _divisor+1
  1550 28D0 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1551
  1552 28D2 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1553 28D4 84 E4		            sty _remainder   
  1554 28D6 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1555
  1556 28D8 CA			_div_skip   dex
  1557 28D9 D0 E3		            bne _div_loop 
  1558 28DB 60			            rts
  1559
  1560 				; Calculations for step size
  1561
  1562 				; not optimised for speed or size
  1563 				; step should be set according to the angle
  1564
  1565 				; move in straight line (x1,y1) to (x2,y2)
  1566
  1567 				; 1. set start/end of line
  1568 				; set (tmp_x1, tmp_y1)
  1569 				; set (tmp_x2, tmp_y2)
  1570
  1571 				; 2. init. current_x, current_y
  1572 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1573 				; @todo
  1574 				; - calculates step sizes for x,y
  1575 				; - calculated directions for x,y
  1576 				;            jsr init_current_xy
  1577
  1578 				; 4. use current_x, current_y to plot or set a position
  1579 				;            lda current_x+1
  1580 				;            sta x_position
  1581 				;            lda current_y+1
  1582 				;            sta y_position
  1583 				;            jsr plot_pixel
  1584
  1585 				; 5. move current_x, current_y to next position on line
  1586 				; A=0 still moving
  1587 				;           move_current_xy
  1588
  1589 28DC			init_current_xy
  1590 28DC A9 7F		            lda #$7f      ; was 128 for half pixel
  1591 28DE 85 EA		            sta current_x
  1592 28E0 85 EC		            sta current_y
  1593
  1594 28E2 A5 E6		            lda tmp_x1
  1595 28E4 85 EB		            sta current_x+1
  1596 				            
  1597 28E6 A5 E7		            lda tmp_y1
  1598 28E8 85 ED		            sta current_y+1
  1599
  1600 				; dx = abs(tmp_x1 - tmp_x2)
  1601 28EA 20 61 28		            jsr calc_abs_tmp_dx
  1602
  1603 				; dy = abs(tmp_y1 - tmp_y2)
  1604 28ED 20 6F 28		            jsr calc_abs_tmp_dy
  1605
  1606 				; set directions
  1607 28F0 A5 E6		            lda tmp_x1
  1608 28F2 C5 E8		            cmp tmp_x2
  1609 28F4 90 04		            bcc x1_smaller_x2
  1610 				; x1 >= x2
  1611 28F6 A9 01		            lda #1
  1612 28F8 D0 02		            bne set_dir_x
  1613 28FA			x1_smaller_x2
  1614 28FA A9 00		            lda #0
  1615 28FC			set_dir_x
  1616 28FC 85 FA		            sta dir_x
  1617 				            
  1618 28FE A5 E7		            lda tmp_y1
  1619 2900 C5 E9		            cmp tmp_y2
  1620 2902 90 04		            bcc y1_smaller_y2
  1621 				; y1 >= y2
  1622 2904 A9 01		            lda #1
  1623 2906 D0 02		            bne set_dir_y
  1624 2908			y1_smaller_y2
  1625 2908 A9 00		            lda #0
  1626 290A			set_dir_y
  1627 290A 85 FB		            sta dir_y
  1628
  1629 				; Calculate diff between start angle and end angle
  1630
  1631 290C A5 AA		            lda ball_angle_start
  1632 290E 85 B0		            sta tmp_angle1
  1633 2910 A5 AB		            lda ball_angle_end
  1634 2912 85 B1		            sta tmp_angle2
  1635 				            
  1636 2914 20 18 28		            jsr calc_angle_diff
  1637 				            
  1638 				            ;lda tmp_angle_diff
  1639 				            ;lda tmp_angle_direction
  1640
  1641 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1642 2917 A6 B7		            ldx tmp_angle_diff
  1643 2919 20 56 28		            jsr angle_to_magnitude
  1644 				            
  1645 				            ;lda magnitude       ; lo
  1646 				            ;lda magnitude+1
  1647 				            
  1648 				            ;lda tmp_dx
  1649 				            ;lda tmp_dy
  1650 				            
  1651 291C 20 7E 28		            jsr calc_dx_div_magnitude
  1652 291F 20 9A 28		            jsr calc_dy_div_magnitude
  1653 				            
  1654 				; Calculate step size by ball speed
  1655 				            
  1656 				; step_x = step_x * speed
  1657 				            
  1658 2922 A5 EE		            lda step_x
  1659 2924 85 F6		            sta _multiplicand
  1660 2926 A5 EF		            lda step_x+1
  1661 2928 85 F7		            sta _multiplicand+1
  1662 292A A5 AC		            lda ball_speed
  1663 292C 85 F8		            sta _multiplier
  1664
  1665 292E 20 B0 22		            jsr _multi8
  1666 				;result in .A (low byte, also in .X) and .Y (high byte)
  1667 2931 85 EE		            sta step_x
  1668 2933 84 EF		            sty step_x+1
  1669 2935			skip_step_x_hi
  1670 				            
  1671 				; step_y = step_y * speed
  1672
  1673 2935 A5 F0		            lda step_y
  1674 2937 85 F6		            sta _multiplicand
  1675 2939 A5 F1		            lda step_y+1
  1676 293B 85 F7		            sta _multiplicand+1
  1677 293D A5 AC		            lda ball_speed
  1678 293F 85 F8		            sta _multiplier
  1679
  1680 2941 20 B0 22		            jsr _multi8
  1681 				;result in .A (low byte, also in .X) and .Y (high byte)
  1682 2944 85 F0		            sta step_y
  1683 2946 84 F1		            sty step_y+1
  1684 2948			skip_step_y_hi
  1685
  1686 2948 60			            rts
  1687
  1688 				; Move ball position 
  1689 				; Add one step, until end reached
  1690 				; Input:
  1691 				; - step size (step_x, step_y)
  1692 				; - current ball position (current_x, current_y)
  1693 				; - end position (tmp_x2, tmp_y2)
  1694 				; Output:
  1695 				; A (0 = still moving, 1 = end reached)
  1696 2949			move_current_xy
  1697 2949 A9 00		            lda #0
  1698 294B 85 FC		            sta line_end_x
  1699 294D 85 FD		            sta line_end_y
  1700
  1701 				; sets line end indicators here
  1702 294F 20 6C 29		            jsr move_current_x
  1703 2952 20 AC 29		            jsr move_current_y
  1704
  1705 2955 A5 FC		            lda line_end_x
  1706 2957 25 FD		            and line_end_y
  1707 2959 F0 10		            beq no_end_reached
  1708 				            
  1709 				; set current to (x2,y2)
  1710 295B A5 E8		            lda tmp_x2
  1711 295D 85 EB		            sta current_x+1
  1712 295F A5 E9		            lda tmp_y2
  1713 2961 85 ED		            sta current_y+1
  1714 				            
  1715 2963 A9 00		            lda #0
  1716 2965 85 EA		            sta current_x
  1717 2967 85 EC		            sta current_y
  1718 				            
  1719 2969 A9 01		            lda #1 ; end reached
  1720 				            
  1721 296B			no_end_reached  ; A = 0
  1722 296B 60			            rts
  1723
  1724 296C			move_current_x
  1725 296C A5 FA		            lda dir_x
  1726 296E D0 18		            bne move_current_left
  1727
  1728 				; move right, add
  1729 2970 A5 EA		            lda current_x
  1730 2972 18			            clc
  1731 2973 65 EE		            adc step_x
  1732 2975 85 EA		            sta current_x
  1733 2977 A5 EB		            lda current_x+1
  1734 2979 65 EF		            adc step_x+1
  1735 297B 85 EB		            sta current_x+1
  1736
  1737 297D A5 EB		            lda current_x+1
  1738 297F C5 E8		            cmp tmp_x2
  1739 2981 90 04		            bcc no_line_end
  1740 2983			exact_end_x
  1741 2983 A9 01		            lda #1
  1742 2985 85 FC		            sta line_end_x 
  1743 2987			no_line_end
  1744 2987 60			            rts
  1745 				            
  1746 2988			move_current_left
  1747 2988 A5 EA		            lda current_x
  1748 298A 38			            sec
  1749 298B E5 EE		            sbc step_x
  1750 298D 90 01		            bcc clear_skip
  1751 298F EA			            nop
  1752 2990			clear_skip
  1753 2990 85 EA		            sta current_x
  1754 2992 A5 EB		            lda current_x+1
  1755 2994 E5 EF		            sbc step_x+1
  1756 2996 85 EB		            sta current_x+1
  1757 2998 90 0B		            bcc below_zero
  1758 				                        
  1759 299A A5 E8		            lda tmp_x2
  1760 299C C5 EB		            cmp current_x+1
  1761 299E 90 E7		            bcc no_line_end
  1762 29A0 A9 01		            lda #1
  1763 29A2 85 FC		            sta line_end_x            
  1764 29A4 60			            rts
  1765 29A5			below_zero            
  1766 29A5 A9 01		            lda #1
  1767 29A7 85 FC		            sta line_end_x
  1768 29A9 85 FD		            sta line_end_y
  1769 29AB 60			            rts
  1770 29AC			move_current_y
  1771 29AC A5 FB		            lda dir_y
  1772 29AE D0 18		            bne move_current_up
  1773
  1774 				; move down, add
  1775 29B0 A5 EC		            lda current_y
  1776 29B2 18			            clc
  1777 29B3 65 F0		            adc step_y
  1778 29B5 85 EC		            sta current_y
  1779 29B7 A5 ED		            lda current_y+1
  1780 29B9 65 F1		            adc step_y+1
  1781 29BB 85 ED		            sta current_y+1
  1782 				            
  1783 29BD A5 ED		            lda current_y+1
  1784 29BF C5 E9		            cmp tmp_y2
  1785 29C1 90 C4		            bcc no_line_end
  1786 29C3			exact_end_y
  1787 29C3 A9 01		            lda #1
  1788 29C5 85 FD		            sta line_end_y
  1789 29C7 60			            rts
  1790
  1791 29C8			move_current_up
  1792 29C8 A5 EC		            lda current_y
  1793 29CA 38			            sec
  1794 29CB E5 F0		            sbc step_y
  1795 29CD 85 EC		            sta current_y
  1796 29CF A5 ED		            lda current_y+1
  1797 29D1 E5 F1		            sbc step_y+1
  1798 29D3 90 D0		            bcc below_zero
  1799 29D5 85 ED		            sta current_y+1
  1800 				            
  1801 29D7 A5 E9		            lda tmp_y2
  1802 29D9 C5 ED		            cmp current_y+1
  1803 29DB 90 AA		            bcc no_line_end
  1804 29DD A9 01		            lda #1
  1805 29DF 85 FD		            sta line_end_y
  1806 29E1 60			            rts                            
  1807 				            
  1808 29E2			init_sprites
  1809 29E2 A2 00		            ldx #0
  1810 29E4 8A			            txa
  1811 29E5			set_p
  1812 29E5 9D 00 12		            sta p0_area,x
  1813 29E8 9D 80 12		            sta p1_area,x
  1814 29EB 9D 00 13		            sta p2_area,x
  1815 29EE 9D 80 13		            sta p3_area,x
  1816 29F1 E8			            inx
  1817 29F2 10 F1		            bpl set_p               
  1818
  1819 29F4 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1820 29F6 8D 6F 02		            sta GPRIOR
  1821 				    
  1822 29F9 A9 10		            lda #>pm_area
  1823 29FB 8D 07 D4		            sta PMBASE
  1824 				    
  1825 29FE A9 03		            lda #3          ; P/M both on
  1826 2A00 8D 1D D0		            sta GRACTL
  1827 				    
  1828 2A03 A9 90		            lda #$90
  1829 2A05 8D 02 D0		            sta HPOSP2
  1830 2A08 A9 A0		            lda #$A0
  1831 2A0A 8D 03 D0		            sta HPOSP3  
  1832 2A0D 60			            rts            
  1833
  1834 2A0E			init_colors
  1835 2A0E A9 2A		            lda #$2a
  1836 2A10 8D C0 02		            sta PCOLR0
  1837 2A13 8D C1 02		            sta PCOLR1
  1838 				            
  1839 2A16 A9 7A		            lda #$7a
  1840 2A18 8D C2 02		            sta PCOLR2
  1841 2A1B 8D C3 02		            sta PCOLR3
  1842 				            
  1843 				            ;lda #$34
  1844 				            ;sta COLOR0
  1845 2A1E A9 00		            lda #0
  1846 2A20 8D C6 02		            sta COLOR2
  1847 2A23 A9 08		            lda #8
  1848 2A25 8D C5 02		            sta COLOR1
  1849 2A28 60			            rts
  1850
  1851 2A29			previous_consol
  1852 2A29 00			            dta 0
  1853
  1854 2A2A			current_level_index
  1855 2A2A 00			            dta 0
  1856 = 0004			NR_OF_LEVELS = 4
  1857 = 0000			INIT_LEVEL_INDEX = 0
  1858 2A2B			level_speeds
  1859 2A2B 02 04 06 08		            dta 2,4,6,8
  1860 				            
  1861 				; X = level (0..NR_OF_LEVELS)
  1862 2A2F			set_level_ball_speed
  1863 2A2F BD 2B 2A		            lda level_speeds,x
  1864 2A32 85 AC		            sta ball_speed
  1865 2A34 8A			            txa
  1866 2A35 18			            clc
  1867 2A36 69 01		            adc #1
  1868 2A38 09 10		            ora #16
  1869 2A3A 8D 3A 41		            sta level_char
  1870 2A3D 60			            rts
  1871 				            
  1872 2A3E			increase_level
  1873 2A3E EE 2A 2A		            inc current_level_index
  1874 2A41 AD 2A 2A		            lda current_level_index
  1875 2A44 C9 04		            cmp #NR_OF_LEVELS
  1876 2A46 D0 05		            bne ok_level
  1877 2A48 A9 00		            lda #INIT_LEVEL_INDEX
  1878 2A4A 8D 2A 2A		            sta current_level_index
  1879 2A4D			ok_level           
  1880 2A4D 60			            rts
  1881 				            
  1882 2A4E			            .align $100
  1883 2B00			inner_x_tab
  1884 = 2C00			inner_y_tab = *+$100
  1885 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1886 				      
  1887 2D00			            .align $400            
  1888 				; outer circle 1024 plot points on 360 degrees
  1889 3000			outer_x_tab
  1890 = 3400			outer_y_tab = *+1024
  1891 3000-39FF> 70 70 71 72 +             ins 'data\out224.dat'
  1892 				           
  1893 3800			            .align $400
  1894 				; table of magnitudes (length) between angle 0 and 0..255
  1895 				; fixed point 8.8 : hi.lo
  1896 3800			magnitudes_lo
  1897 = 3900			magnitudes_hi = *+256
  1898 3800 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1899
  1900 3A00			            .align $400
  1901 3C00			display_list
  1902 3C00-3D0B> 42		            dta $42
  1903 3C01 EA 3C		            dta a(score_line)
  1904 				            
  1905 3C03 4F			            dta $4f
  1906 3C04			dl_screen_ptr1
  1907 3C04 00 A0		            dta a(screen_mem)
  1908 3C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1909 3C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1910 3C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1911 3C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1912
  1913 3C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1914 3C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1915 3C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1916 3C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1917
  1918 3C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1919 3C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1920 3C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1921 3C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1922
  1923 3C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1924 3C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1925 3C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1926 3C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1927
  1928 3C85 4F			            dta $4f
  1929 3C86			dl_screen_ptr2
  1930 3C86 00 B0		            dta a(screen_mem+(128*SCREEN_WIDTH))
  1931 3C88 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1932 3C8F 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1933 3C97 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1934 3C9F 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1935
  1936 3CA7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1937 3CAF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1938 3CB7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1939 3CBF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1940
  1941 3CC7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1942 3CCF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1943 3CD7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1944 3CDF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1945 				            
  1946 3CE7 41			            dta $41
  1947 3CE8 00 3C		            dta a(display_list)
  1948
  1949 3CEA			score_line  
  1950 3CEA 00 32 25 24 00	            dta d' RED '
  1951 3CEF			score_chars_p1
  1952 3CEF 0D 0D 00		            dta d'-- '
  1953
  1954 3CF2 00 00 00 00 00 00 +             dta d'        '
  1955 3CFA 00 00 00 00 00 00 +             dta d'        '
  1956
  1957 3D02 00 22 2C 35 25 00	            dta d' BLUE '
  1958 3D08			score_chars_p2
  1959 3D08 0D 0D		            dta d'--'
  1960
  1961 3D0A 00			score_p1    dta 0
  1962 3D0B 00			score_p2    dta 0
  1963
  1964 3D0C			            .align $400
  1965 				            
  1966 4000			menu_dl
  1967 4000-40B4> 42		            dta $42
  1968 4001 EA 3C		            dta a(score_line)
  1969 				            
  1970 4003 4F			            dta $4f
  1971 4004 00 A0		            dta a(screen_mem)
  1972 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1973 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1974 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1975 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1976
  1977 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1978 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1979 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1980 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1981
  1982 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1983 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1984
  1985 4055 30			            dta $30
  1986 4056 47			            dta $47
  1987 4057 00 41		            dta a(menu_screen)
  1988 4059 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1989
  1990 4060 4F			            dta $4f
  1991 4061 00 B2		            dta a(screen_mem+(144*SCREEN_WIDTH))
  1992 4063 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1993 406A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1994 4072 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1995 407A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1996
  1997 4082 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1998 408A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1999
  2000 4092 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2001 409A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  2002 40A2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2003 40AA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  2004 				           
  2005 40B2 41			            dta $41
  2006 				            
  2007 40B3 00 40		            dta a(menu_dl)
  2008
  2009 40B5			            .align $100
  2010 4100			menu_screen
  2011 4100-4187> 00 00 00 32 +             dta d'   R O T O R    '    
  2012
  2013 4110 23 2F 2E 34 32 2F +             dta d'CONTROL:'
  2014 4118			driver_screen
  2015 4118 00 00 00 00 00 00 +             dta d'        '
  2016 4120 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME  '
  2017 4130 00 00 00 00 2C 25 +             dta d'    LEVEL '
  2018 413A			level_char            
  2019 413A 11 00 00 00 00 00	            dta d'1     '
  2020 4140 80 B3 B4 A1 B2 B4 +             dta d' START to play | OPTION for menu'*
  2021 4160			stick_text
  2022 4160 33 34 29 23 2B 00 +             dta d'STICK   '
  2023 4168			paddle_text
  2024 4168 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2025 4170			driving_text
  2026 4170 24 32 29 36 29 2E +             dta d'DRIVING '
  2027 4178			computer_text
  2028 4178 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2029
  2030 4180			driver_text_lo
  2031 4180 60			            dta <stick_text
  2032 4181 68			            dta <paddle_text
  2033 4182 70			            dta <driving_text
  2034 4183 78			            dta <computer_text
  2035 				            
  2036 4184			driver_text_hi
  2037 4184 41			            dta >stick_text
  2038 4185 41			            dta >paddle_text
  2039 4186 41			            dta >driving_text
  2040 4187 41			            dta >computer_text
  2041
  2042 4188			            .align $1000
  2043
  2044 				; 128 x 32 bytes shapes            
  2045 5000			pm_shapes
  2046 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2047
  2048 6000			pm_shape_lo
  2049 = 6080			pm_shape_hi = *+128
  2050
  2051 02E0-02E1> CE 21		            run main
