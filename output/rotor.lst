mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-25
     4 				; Version 1.1.15
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; Optional for a later version:
    16 				; - add computer player(s)
    17 				; - add support for driving controllers
    18
    19 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    20
    21 				; color scheme
    22 = 0050			BASE_COLOR_P1   = $50   ; purple
    23 = 00B0			BASE_COLOR_P2   = $b0   ; green
    24
    25 = 000E			HEADER_FG_COLOR = 14
    26 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    27 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 0C00			pm_area     = $0c00
    33 = 0D80			msl_area    = pm_area+$180
    34 = 0E00			p0_area     = pm_area+$200
    35 = 0E80			p1_area     = pm_area+$280
    36 = 0F00			p2_area     = pm_area+$300
    37 = 0F80			p3_area     = pm_area+$380
    38
    39 				; outer tables 256 for 360 degrees
    40 = 1000			outer_x_256     = $1000
    41 = 1100			outer_y_256     = $1100
    42
    43 = 1200			screen_y_lo     = $1200
    44 = 1300			screen_y_hi     = $1300
    45
    46 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    47 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    48
    49 = 0140			WIDTH           = 320
    50 = 00C0			HEIGHT          = 192
    51
    52 = 0028			SCREEN_WIDTH    = 40
    53
    54 = 0030			outer_x_margin  = 48 ;47-32
    55 = 0040			inner_x_margin  = 64
    56
    57 = 00A0			circle_center_x = WIDTH/2
    58 = 0060			circle_center_y = HEIGHT/2
    59
    60 = 0006			ball_top_margin     = 6
    61 = 0045			ball_left_margin    = 64+5
    62
    63 				; pm upper margin
    64 = 0001			upper_margin    = 1
    65 = 0020			left_margin     = 32
    66
    67 = 0080			music_toggle    = $80
    68
    69 = 0081			shadow_HPOSP0   = $81
    70 = 0082			shadow_HPOSP1   = $82
    71
    72 = 0084			shape_ptr       = $84
    73 = 0086			tmp_screen      = $86
    74
    75 = 0088			stick_slow_speed = $88
    76 = 0089			stick_fast_speed = $89
    77
    78 = 008C			mode_menu       = $8c
    79
    80 = 008D			volume_hit_bat  = $8d
    81 = 008E			volume_hit_edge = $8e
    82
    83 				; player vars must be in sequence for zp,x indexing
    84
    85 = 0090			p1_shape        = $90
    86 = 0091			p2_shape        = $91
    87
    88 = 0094			player1_x       = $94
    89 = 0095			player2_x       = $95
    90
    91 = 0098			player1_y       = $98
    92 = 0099			player2_y       = $99
    93
    94 = 009C			p1_angle        = $9c
    95 = 009D			p2_angle        = $9d
    96
    97 = 00A0			mp_collision    = $a0
    98 = 00A1			in_collision    = $a1
    99 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   100 = 00A3			edge_delay      = $a3
   101 = 00A4			bat_collision_delay = $a4
   102
   103 				; ball vars
   104 = 00A6			ball_current_x      = $a6
   105 = 00A7			ball_current_y      = $a7
   106 = 00AA			ball_angle_start    = $aa
   107 = 00AB			ball_angle_end      = $ab
   108 = 00AC			ball_speed          = $ac
   109
   110 = 00B0			tmp_angle1          = $b0
   111 = 00B1			tmp_angle2          = $b1
   112 = 00B2			add_to_angle        = $b2
   113 = 00B3			angle_diff_bat      = $b3
   114 = 00B4			tmp_angle_direction = $b4
   115 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   116 = 00B6			game_restart        = $b6
   117 = 00B7			tmp_angle_diff      = $b7
   118 = 00B8			magnitude           = $b8       ; word
   119
   120 				; $c0 - $df free for music
   121
   122 = 00E0			_divisor    = $e0   ; word
   123 = 00E2			_dividend   = $e2   ; word
   124 = 00E4			_remainder  = $e4   ; word
   125 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   126
   127 = 00E6			tmp_x1      = $e6   ; byte
   128 = 00E7			tmp_y1      = $e7   ; byte
   129 = 00E8			tmp_x2      = $e8   ; byte
   130 = 00E9			tmp_y2      = $e9   ; byte
   131
   132 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   133 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   134
   135 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   136 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   137
   138 = 00F2			tmp_dx      = $f2  ; byte
   139 = 00F3			tmp_dy      = $f3  ; byte
   140
   141 = 00F6			_multiplicand   = $f6   ; word
   142 = 00F8			_multiplier     = $f8   ; byte
   143
   144 				; direction:
   145 				; 0 : x1<x2 or y1<y2 = add
   146 				; 1 ; x1>=y2 or y1>=y2 = subtract
   147
   148 = 00FA			dir_x       = $fa  ; byte
   149 = 00FB			dir_y       = $fb  ; byte
   150
   151 = 00FC			line_end_x  = $fc  ; byte
   152 = 00FD			line_end_y  = $fd  ; byte
   153
   154 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $9800
    17 9800			rotor_font
    18 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 9C00			intro_main
    21 9C00 A9 48		            lda #<dl_intro
    22 9C02 8D 30 02		            sta $230
    23 9C05 A9 9C		            lda #>dl_intro
    24 9C07 8D 31 02		            sta $231
    25
    26 9C0A A9 98		            lda #>rotor_font
    27 9C0C 8D F4 02		            sta 756
    28
    29 9C0F A9 00		            lda #0
    30 9C11 8D C6 02		            sta 710
    31
    32 9C14 A9 22		            lda #34
    33 9C16 8D 2F 02		            sta 559
    34
    35 				; reset clock
    36 9C19 A9 00		            lda #0
    37 9C1B 85 14		            sta 20
    38 9C1D 85 13		            sta 19
    39 				            
    40 9C1F 60			            rts
    41
    42 9C20			footer_intro
    43 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    44
    45 9C48			dl_intro
    46 9C48 70 70 70		            dta $70,$70,$70
    47
    48 9C4B 4F			            dta $4f
    49 9C4C 10 A0		            dta a(intro_image)
    50 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    51 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54
    55 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    56 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59
    60 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64
    65 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    66
    67 9CB3 4F			            dta $4f
    68 9CB4 00 B0		            dta a(intro_image+$ff0)
    69 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73
    74 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    75 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78
    79 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    81 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    82 9D0D 0F 0F		            dta $0f,$0f
    83 				            
    84 9D0F 20			            dta $20
    85 9D10 42			            dta $42
    86 9D11 20 9C		            dta a(footer_intro)
    87
    88 9D13 41			            dta $41
    89 9D14 48 9C		            dta a(dl_intro)
    90 				            
    91 9D16			            org $a010
    92 A010			intro_image
    93 A010-BE0F> 00 00 00 00 +             ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
    94
    95 02E2-02E3> 00 9C		            ini intro_main
   155
   156 				; real data is loaded at $2000 ($1700+$900)
   157 BE10			            org $1700
   158 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   159
   160 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3D79> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 DF			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 31		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 16		            bne no_left
   139
   140 3493 B5 9C		            lda p1_angle,x
   141 3495 38			            sec
   142 3496 E5 88		            sbc stick_slow_speed
   143 3498 95 9C		            sta p1_angle,x
   144
   145 349A BD 84 02		            lda STRIG0,x
   146 349D D0 07		            bne no_fast
   147
   148 349F B5 9C		            lda p1_angle,x
   149 34A1 38			            sec
   150 34A2 E5 89		            sbc stick_fast_speed
   151 34A4 95 9C		            sta p1_angle,x
   152 34A6			no_fast
   153 				            
   154 34A6 4C C0 34		            jmp move_done
   155 34A9 C9 07		no_left     cmp #7
   156 34AB D0 13		            bne move_done
   157
   158 34AD B5 9C		            lda p1_angle,x
   159 34AF 18			            clc
   160 34B0 65 88		            adc stick_slow_speed
   161 34B2 95 9C		            sta p1_angle,x
   162
   163 34B4 BD 84 02		            lda STRIG0,x
   164 34B7 D0 07		            bne no_fast_right
   165
   166 34B9 B5 9C		            lda p1_angle,x
   167 34BB 18			            clc
   168 34BC 65 89		            adc stick_fast_speed
   169 34BE 95 9C		            sta p1_angle,x
   170 34C0			no_fast_right
   171 34C0			move_done
   172 34C0 60			            rts
   173
   174 				; X=port number to check (paddle uses only port 1)
   175 				; check fire button (paddle uses left/right stick as fire button)
   176 				; A=0 not pressed, 1=pressed
   177
   178 34C1			is_both_buttons
   179 34C1 AD BE 32		            lda driver_mode
   180 34C4 C9 01		            cmp #1
   181 34C6 F0 0D		            beq check_paddle_fire
   182
   183 34C8 AD 84 02		            lda STRIG0
   184 34CB D0 0F		            bne not_both_stick
   185 34CD AD 85 02		            lda STRIG1
   186 34D0 D0 0A		            bne not_both_stick
   187
   188 34D2			both_fire
   189 34D2 A9 01		            lda #1
   190 34D4 60			            rts
   191
   192 34D5			check_paddle_fire
   193 34D5 AD 78 02		            lda STICK0
   194 34D8 C9 03		            cmp #3
   195 34DA F0 F6		            beq both_fire
   196
   197 34DC			not_both_stick
   198 34DC A9 00		            lda #0
   199 34DE 60			            rts
   200
   201 				; paddle driver
   202 				            
   203 34DF			driver_paddle            
   204 34DF BD 70 02		            lda PADDL0,x
   205 34E2 A8			            tay
   206 34E3 B9 00 33		            lda paddle_to_256,y
   207 34E6 5D EC 34		            eor paddle_offsets,x
   208 34E9 95 9C		            sta p1_angle,x
   209 34EB 60			            rts
   210
   211 34EC			paddle_offsets
   212 34EC 00 00		            dta 0,0
   161
   162 34EE			reset_pressed
   163 34EE 20 00 9C		            jsr intro_main
   164
   165 34F1			main
   166 34F1 A9 FF		            lda #255
   167 34F3 8D FC 02		            sta 764
   168
   169 				; for fast loaders, wait 10 seconds or continue with spacebar
   170 34F6			wait_a_sec
   171 34F6 AD FC 02		            lda 764
   172 34F9 C9 FF		            cmp #255
   173 34FB D0 06		            bne any_key_pressed
   174
   175 34FD A5 13		            lda 19
   176 34FF C9 02		            cmp #2
   177 3501 90 F3		            bcc wait_a_sec
   178
   179 3503			any_key_pressed
   180 3503 A9 FF		            lda #255
   181 3505 8D FC 02		            sta 764
   182
   183 				; start the game!
   184 				 
   185 3508 A9 00		            lda #0
   186 350A 8D 2F 02		            sta SDMCTL
   187 350D 85 B6		            sta game_restart
   188
   189 350F A9 80		            lda #128
   190 3511 85 8D		            sta volume_hit_bat
   191 3513 85 8E		            sta volume_hit_edge
   192 3515 85 80		            sta music_toggle        ; 128 = on, 0 = off
   193
   194 3517 A9 00		            lda #0
   195 3519 8D 44 02		            sta 580 ; coldstart
   196
   197 351C A9 01		            lda #1
   198 351E 85 09		            sta 9   ; boot
   199
   200 3520 A9 EE		            lda #<reset_pressed
   201 3522 85 0A		            sta $0a
   202 3524 A9 34		            lda #>reset_pressed
   203 3526 85 0B		            sta $0b
   204
   205 3528 20 01 34		            jsr driver_init
   206
   207 352B 20 6D 3A		            jsr make_shape_index
   208
   209 352E 20 9D 3A		            jsr make_outer_256
   210
   211 3531 20 53 36		            jsr make_screen_y_tab
   212
   213 3534 20 9E 36		            jsr invert_backdrop
   214 3537 A9 60		            lda #$60
   215 3539 8D 9E 36		            sta invert_backdrop ; dirty hack to fix warm reset :P
   216
   217 353C 20 0D 3B		            jsr reset_score
   218 353F 20 DB 3A		            jsr show_score_p1
   219 3542 20 F4 3A		            jsr show_score_p2
   220
   221 3545 20 F8 3C		            jsr init_sprites
   222 3548 20 24 3D		            jsr init_colors
   223
   224 				; init. game vars
   225 354B A2 00		            ldx #INIT_LEVEL_INDEX
   226 354D 8E 44 3D		            stx current_level_index
   227 3550 20 51 3D		            jsr set_level_ball_speed
   228
   229 3553 A9 01		            lda #1
   230 3555 85 8C		            sta mode_menu           ; start with menu
   231
   232 3557 20 6E 31		            jsr music_init
   233
   234 355A A9 00		            lda #<display_list
   235 355C 8D 30 02		            sta SDLSTL
   236 355F A9 4C		            lda #>display_list
   237 3561 8D 31 02		            sta SDLSTH
   238
   239 				; start vbi
   240
   241 3564 A9 C0		            lda #$c0
   242 3566 8D 0E D4		            sta NMIEN
   243
   244 3569 A9 07		            lda #7          ; sets VVBLKI
   245 356B A0 E3		            ldy #<vbi
   246 356D A2 36		            ldx #>vbi
   247 356F 20 5C E4		            jsr $e45c       ; SETVBV
   248
   249 				; we're just sitting here while VBI does all the work :)
   250 3572 4C 72 35		loop        jmp loop
   251
   252 				;------------------------
   253 				; 8bit * 8bit = 16bit multiply
   254 				; By White Flame
   255 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   256 				; uses extra zp var _multiplicand+1
   257
   258 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   259 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   260
   261 				; In this version, both inputs must be unsigned
   262 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   263
   264 3575			_multi8
   265 3575 A9 00		            lda #$00
   266 3577 A8			            tay
   267 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   268 3578 F0 0D		            beq _enter_loop
   269 357A			_do_add
   270 357A 18			            clc
   271 357B 65 F6		            adc _multiplicand
   272 357D AA			            tax
   273
   274 357E 98			            tya
   275 357F 65 F7		            adc _multiplicand+1
   276 3581 A8			            tay
   277 3582 8A			            txa
   278 3583			_mul_loop
   279 3583 06 F6		            asl _multiplicand
   280 3585 26 F7		            rol _multiplicand+1
   281 3587			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   282 3587 46 F8		            lsr _multiplier
   283 3589 B0 EF		            bcs _do_add
   284 358B D0 F6		            bne _mul_loop
   285 358D 60			            rts
   286
   287 				; reset PM0/1 to playfield settings
   288 358E			dli_header
   289 358E 48			            pha
   290
   291 358F A9 08		            lda #8
   292 3591 8D 17 D0		            sta COLPF1
   293
   294 3594 A5 81		            lda shadow_HPOSP0
   295 3596 8D 00 D0		            sta HPOSP0
   296 3599 A5 82		            lda shadow_HPOSP1
   297 359B 8D 01 D0		            sta HPOSP1
   298
   299 359E A9 00		            lda #0
   300 35A0 8D 08 D0		            sta SIZEP0
   301 35A3 8D 09 D0		            sta SIZEP1
   302
   303 35A6 A9 5A		            lda #BASE_COLOR_P1+10
   304 35A8 8D 12 D0		            sta COLPM0
   305 35AB A9 BA		            lda #BASE_COLOR_P2+10
   306 35AD 8D 13 D0		            sta COLPM1
   307
   308 35B0 A9 BC		            lda #<dli_menu
   309 35B2 8D 00 02		            sta VDSLST
   310 35B5 A9 35		            lda #>dli_menu
   311 35B7 8D 01 02		            sta VDSLST+1
   312
   313 35BA 68			            pla
   314 35BB 40			            rti
   315
   316 35BC			dli_menu
   317 35BC 48			            pha
   318 35BD 8A			            txa
   319 35BE 48			            pha
   320
   321 35BF A9 0E		            lda #$0e
   322 35C1 8D 0A D4		            sta WSYNC
   323 35C4 8D 1A D0		            sta COLBK
   324 35C7 A9 0A		            lda #$0a
   325 35C9 8D 0A D4		            sta WSYNC
   326 35CC 8D 1A D0		            sta COLBK
   327 35CF A9 00		            lda #0
   328 35D1 8D 0A D4		            sta WSYNC
   329 35D4 8D 1A D0		            sta COLBK
   330
   331 35D7 A2 00		            ldx #0
   332 35D9			color_it1
   333 35D9 BD 1B 36		            lda menu_colpf2,x
   334 35DC 8D 0A D4		            sta WSYNC
   335 35DF 8D 18 D0		            sta COLPF2
   336 35E2 E8			            inx
   337 35E3 E0 12		            cpx #18
   338 35E5 D0 F2		            bne color_it1
   339
   340 35E7 A2 00		            ldx #0
   341 35E9			color_it2
   342 35E9 BD 2D 36		            lda menu_colpf0,x
   343 35EC 8D 0A D4		            sta WSYNC
   344 35EF 8D 16 D0		            sta COLPF0
   345 35F2 E8			            inx
   346 35F3 E0 26		            cpx #38
   347 35F5 D0 F2		            bne color_it2
   348
   349 35F7 A9 00		            lda #0
   350 35F9 8D 0A D4		            sta WSYNC
   351 35FC 8D 1A D0		            sta COLBK
   352 35FF A9 0A		            lda #$0a
   353 3601 8D 0A D4		            sta WSYNC
   354 3604 8D 1A D0		            sta COLBK
   355 3607 A9 0E		            lda #$0e
   356 3609 8D 0A D4		            sta WSYNC
   357 360C 8D 1A D0		            sta COLBK
   358 360F A9 00		            lda #0
   359 3611 8D 0A D4		            sta WSYNC
   360 3614 8D 1A D0		            sta COLBK
   361 				            
   362 3617 68			            pla
   363 3618 AA			            tax
   364 3619 68			            pla
   365 361A 40			            rti
   366
   367 361B			menu_colpf2
   368 361B 50			            dta BASE_COLOR_P1
   369 361C 50			            dta BASE_COLOR_P1
   370 361D 50			            dta BASE_COLOR_P1
   371 361E 50			            dta BASE_COLOR_P1
   372 361F 50			            dta BASE_COLOR_P1
   373 3620 50			            dta BASE_COLOR_P1
   374 3621 50			            dta BASE_COLOR_P1
   375 3622 50			            dta BASE_COLOR_P1
   376
   377 3623 B0			            dta BASE_COLOR_P2
   378 3624 B0			            dta BASE_COLOR_P2
   379 3625 B0			            dta BASE_COLOR_P2
   380 3626 B0			            dta BASE_COLOR_P2
   381 3627 B0			            dta BASE_COLOR_P2
   382 3628 B0			            dta BASE_COLOR_P2
   383 3629 B0			            dta BASE_COLOR_P2
   384 362A B0			            dta BASE_COLOR_P2
   385
   386 362B 00 00		            dta 0,0
   387
   388 362D			menu_colpf0
   389 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   390 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   391 362D 00 00		            dta 0,0
   392 362F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   393 3637 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   394 363F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   395 3647 00 00 00 00		            dta 0,0,0,0
   396 364B 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   397
   398 				; make pointers from y-position to screen memory
   399 				; screen memory is 3 blocks
   400 				; screen_mem1 : 102 lines, 4080 bytes
   401 				; screen_mem2 : 102 lines, 4080 bytes
   402 				; screen_mem3 :  20 lines,  800 bytes
   403
   404 3653			make_screen_y_tab
   405 3653 A9 00		            lda #<screen_mem1
   406 3655 85 86		            sta tmp_screen
   407 3657 A9 60		            lda #>screen_mem1
   408 3659 85 87		            sta tmp_screen+1
   409
   410 365B A2 00		            ldx #0
   411 365D			fill_y_tab1
   412 365D 20 86 36		            jsr store_y_line
   413 3660 E8			            inx
   414 3661 E0 66		            cpx #102
   415 3663 D0 F8		            bne fill_y_tab1
   416
   417 				; x = 102
   418 3665 A9 00		            lda #<screen_mem2
   419 3667 85 86		            sta tmp_screen
   420 3669 A9 70		            lda #>screen_mem2
   421 366B 85 87		            sta tmp_screen+1
   422
   423 366D			fill_y_tab2
   424 366D 20 86 36		            jsr store_y_line
   425 3670 E8			            inx
   426 3671 E0 CC		            cpx #204
   427 3673 D0 F8		            bne fill_y_tab2
   428
   429 3675 A9 00		            lda #<screen_mem3
   430 3677 85 86		            sta tmp_screen
   431 3679 A9 80		            lda #>screen_mem3
   432 367B 85 87		            sta tmp_screen+1
   433
   434 				; x = 204
   435 367D			fill_y_tab3
   436 367D 20 86 36		            jsr store_y_line
   437 3680 E8			            inx
   438 3681 E0 E0		            cpx #224
   439 3683 D0 F8		            bne fill_y_tab3
   440 3685 60			            rts
   441
   442 3686			store_y_line
   443 3686 A5 86		            lda tmp_screen
   444 3688 9D 00 12		            sta screen_y_lo,x
   445 368B A5 87		            lda tmp_screen+1
   446 368D 9D 00 13		            sta screen_y_hi,x
   447 				            
   448 3690 A5 86		            lda tmp_screen
   449 3692 18			            clc
   450 3693 69 28		            adc #SCREEN_WIDTH
   451 3695 85 86		            sta tmp_screen
   452 3697 A5 87		            lda tmp_screen+1
   453 3699 69 00		            adc #0
   454 369B 85 87		            sta tmp_screen+1
   455 369D 60			            rts
   456
   457 				; @todo invert backdrop image
   458 				; now we have to do it here :P
   459 369E			invert_backdrop
   460 369E A9 00		            lda #<screen_mem1
   461 36A0 85 86		            sta tmp_screen
   462 36A2 A9 60		            lda #>screen_mem1
   463 36A4 85 87		            sta tmp_screen+1
   464 				            
   465 36A6 A2 10		            ldx #16     ; 16 pages = 4K
   466 36A8 20 C6 36		            jsr do_x_pages
   467 				           
   468 36AB A9 00		            lda #<screen_mem2
   469 36AD 85 86		            sta tmp_screen
   470 36AF A9 70		            lda #>screen_mem2
   471 36B1 85 87		            sta tmp_screen+1
   472 				            
   473 36B3 A2 10		            ldx #16     ; 16 pages = 4K
   474 36B5 20 C6 36		            jsr do_x_pages
   475
   476 36B8 A9 00		            lda #<screen_mem3
   477 36BA 85 86		            sta tmp_screen
   478 36BC A9 80		            lda #>screen_mem3
   479 36BE 85 87		            sta tmp_screen+1
   480 				            
   481 36C0 A2 04		            ldx #4     ; 4 pages = 1K
   482 36C2 20 C6 36		            jsr do_x_pages
   483 36C5 60			            rts
   484
   485 				; invert x pages, starting from tmp_screen
   486
   487 36C6			do_x_pages
   488 36C6 A0 00		            ldy #0
   489 36C8			do_page
   490 36C8 B1 86		            lda (tmp_screen),y
   491 36CA 49 FF		            eor #$ff
   492 36CC 91 86		            sta (tmp_screen),y
   493 36CE C8			            iny
   494 36CF D0 F7		            bne do_page 
   495
   496 36D1 E6 87		            inc tmp_screen+1
   497 36D3 CA			            dex
   498 36D4 D0 F2		            bne do_page
   499 36D6 60			            rts
   500
   501 36D7			turn_color_ball
   502 36D7 A6 B5		            ldx player_turn
   503 36D9 BD E0 36		            lda color_turn,x
   504 36DC 8D C7 02		            sta COLOR3
   505 36DF 60			            rts
   506 				            
   507 36E0 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   508
   509 				; A, X, Y are already saved by the OS
   510 36E3			vbi
   511 36E3 20 DC 31		            jsr copy_shadow
   512
   513 36E6 A5 80		            lda music_toggle
   514 36E8 F0 03		            beq skip_music
   515 36EA 20 97 31		            jsr play_song
   516 36ED			skip_music
   517
   518 				; toggle music on/off with spacebar
   519 36ED AD FC 02		            lda 764
   520 36F0 C9 21		            cmp #$21
   521 36F2 D0 10		            bne no_spacebar
   522 36F4 A5 80		            lda music_toggle
   523 36F6 49 80		            eor #128
   524 36F8 85 80		            sta music_toggle
   525 36FA D0 03		            bne music_turned_on
   526 36FC 20 60 32		            jsr music_off
   527
   528 36FF			music_turned_on
   529 36FF A9 FF		            lda #255
   530 3701 8D FC 02		            sta 764
   531
   532 3704			no_spacebar
   533 3704 20 76 38		            jsr play_sound_bat
   534 3707 20 94 38		            jsr play_sound_edge
   535
   536 370A A9 8E		            lda #<dli_header
   537 370C 8D 00 02		            sta VDSLST
   538 370F A9 35		            lda #>dli_header
   539 3711 8D 01 02		            sta VDSLST+1
   540
   541 3714 A9 2E		            lda #%00101110  ; enable P/M DMA
   542 3716 8D 2F 02		            sta SDMCTL
   543 3719 A9 00		            lda #0
   544 371B 85 4D		            sta 77      ; attract off
   545 371D A9 98		            lda #>rotor_font
   546 371F 8D F4 02		            sta 756
   547
   548 3722 A9 30		            lda #$30
   549 3724 8D 00 D0		            sta HPOSP0
   550 3727 A9 B0		            lda #$b0
   551 3729 8D 01 D0		            sta HPOSP1
   552
   553 				; menu switching thingy
   554
   555 372C AD 1F D0		            lda CONSOL
   556 372F C9 03		            cmp #3
   557 3731 D0 0C		            bne no_option_pressed
   558
   559 3733			go_menu_mode            
   560 3733 20 FA 31		            jsr music_normal_volume
   561 				            
   562 3736 20 D6 39		            jsr wipe_ball
   563 				            
   564 3739 A9 01		            lda #1
   565 373B 85 8C		            sta mode_menu
   566 373D D0 17		            bne check_mode_menu
   567
   568 373F			no_option_pressed
   569 373F C9 06		            cmp #6            
   570 3741 F0 05		            beq reset_game
   571
   572 3743 20 C1 34		            jsr is_both_buttons
   573 3746 F0 0E		            beq check_mode_menu
   574
   575 				; reset game
   576
   577 3748			reset_game
   578 3748 20 05 32		            jsr music_low_volume
   579
   580 374B 20 D6 39		            jsr wipe_ball
   581 				            
   582 374E A9 01		            lda #1
   583 3750 85 B6		            sta game_restart
   584
   585 3752 A9 00		            lda #0
   586 3754 85 8C		            sta mode_menu
   587
   588 3756			check_mode_menu
   589 3756 A5 8C		            lda mode_menu
   590 3758 F0 56		            beq main_game_vbi
   591
   592 				; within menu vbi
   593 				            
   594 375A AD 1F D0		            lda CONSOL
   595 375D C9 05		            cmp #5          ; select
   596 375F D0 18		            bne no_level_select
   597 				            
   598 3761 AD 43 3D		            lda previous_consol
   599 3764 C9 05		            cmp #5
   600 3766 F0 14		            beq wait_depressed
   601 				            
   602 3768 20 6A 3D		            jsr increase_level
   603 376B AE 44 3D		            ldx current_level_index
   604 376E 20 51 3D		            jsr set_level_ball_speed            
   605
   606 3771 A9 05		            lda #5
   607 3773 8D 43 3D		            sta previous_consol
   608 3776 4C 7C 37		            jmp wait_depressed
   609
   610 3779			no_level_select
   611 3779 8D 43 3D		            sta previous_consol
   612
   613 377C			wait_depressed
   614 377C A9 01		            lda #1      ; dl jump
   615 377E 8D 55 4C		            sta menu_dl_hook
   616 3781 A9 EE		            lda #<menu_dl_part
   617 3783 8D 56 4C		            sta menu_dl_hook+1
   618 3786 A9 4C		            lda #>menu_dl_part
   619 3788 8D 57 4C		            sta menu_dl_hook+2
   620
   621 				; detect/show controller type (used for both players)
   622 378B 20 97 37		            jsr detect_show_driver
   623
   624 378E 20 E3 38		            jsr handle_player1
   625 3791 20 FB 38		            jsr handle_player2
   626
   627 3794 4C 53 38		            jmp exit_vbi
   628
   629 				; X = port/driver to detect
   630 3797			detect_show_driver
   631 3797 20 3B 34		            jsr driver_detect
   632 379A A8			            tay
   633 379B B9 D4 4E		            lda driver_text_lo,y
   634 379E 85 86		            sta tmp_screen
   635 37A0 B9 D8 4E		            lda driver_text_hi,y
   636 37A3 85 87		            sta tmp_screen+1
   637
   638 37A5 A0 07		            ldy #7
   639 37A7			show_driv
   640 37A7 B1 86		            lda (tmp_screen),y
   641 37A9 99 5A 4E		            sta driver_screen,y
   642 37AC 88			            dey
   643 37AD 10 F8		            bpl show_driv
   644 37AF 60			            rts
   645
   646 				; main game vbi
   647 37B0			main_game_vbi
   648 37B0 A5 B6		            lda game_restart
   649 37B2 F0 2C		            beq no_restart
   650
   651 				; restart game
   652 				            
   653 37B4 A9 00		            lda #0
   654 37B6 85 B6		            sta game_restart
   655 				            
   656 37B8 20 0D 3B		            jsr reset_score
   657 37BB 20 DB 3A		            jsr show_score_p1
   658 37BE 20 F4 3A		            jsr show_score_p2
   659
   660 37C1 A6 9C		            ldx p1_angle
   661 37C3 86 AA		            stx ball_angle_start
   662 37C5 20 34 39		            jsr ball_to_start_position
   663 37C8 20 43 39		            jsr prepare_ball_end_position
   664
   665 37CB A9 00		            lda #0
   666 37CD 85 A0		            sta mp_collision
   667 37CF 85 A1		            sta in_collision
   668 37D1 85 A3		            sta edge_delay
   669 37D3 8D 1E D0		            sta HITCLR
   670
   671 37D6 A9 02		            lda #2
   672 37D8 85 B5		            sta player_turn
   673
   674 37DA 20 D7 36		            jsr turn_color_ball
   675 37DD 4C 53 38		            jmp exit_vbi            
   676
   677 37E0			no_restart
   678 				; remove menu hook
   679 37E0 A9 0F		            lda #$0f        ; dl gfx 8
   680 37E2 8D 55 4C		            sta menu_dl_hook
   681 37E5 8D 56 4C		            sta menu_dl_hook+1
   682 37E8 8D 57 4C		            sta menu_dl_hook+2
   683
   684 37EB AD 08 D0		            lda M0PL
   685 37EE 85 A0		            sta mp_collision
   686 37F0 AD 09 D0		            lda M1PL
   687 37F3 05 A0		            ora mp_collision
   688 37F5 85 A0		            sta mp_collision
   689 				 
   690 37F7 20 E3 38		            jsr handle_player1
   691 37FA 20 FB 38		            jsr handle_player2
   692
   693 				; handle ball
   694
   695 37FD 20 D6 39		            jsr wipe_ball         
   696
   697 				; Check ball collision with bat
   698
   699 3800 A5 A4		            lda bat_collision_delay
   700 3802 F0 05		            beq check_allowed
   701 3804 C6 A4		            dec bat_collision_delay
   702 3806 4C 20 38		            jmp move_one
   703
   704 3809			check_allowed
   705 3809 A5 A0		            lda mp_collision
   706 380B F0 0F		            beq reset_in_collision
   707
   708 380D A5 A1		            lda in_collision
   709 380F D0 0F		            bne no_first_hit
   710
   711 3811 E6 A1		            inc in_collision            
   712 3813 20 70 39		            jsr bounce_bat_ball 
   713 				            
   714 3816 20 71 38		            jsr start_sound_bat          
   715 				            
   716 3819 4C 20 38		            jmp move_one
   717 				            
   718 381C			reset_in_collision
   719 381C A9 00		            lda #0
   720 381E 85 A1		            sta in_collision        
   721
   722 3820			move_one
   723 3820			no_first_hit
   724 3820 20 5F 3C		            jsr move_current_xy
   725 3823 F0 1B		            beq still_moving
   726
   727 				; edge detected
   728
   729 3825 20 8F 38		            jsr start_sound_edge
   730
   731 3828 A5 AB		            lda ball_angle_end
   732 382A 85 AA		            sta ball_angle_start
   733
   734 382C 20 67 39		            jsr ball_current_to_start_position
   735 382F 20 43 39		            jsr prepare_ball_end_position
   736
   737 3832 20 AF 38		            jsr update_score
   738 3835 D0 34		            bne game_ends
   739
   740 				; switch turns
   741 3837 A5 B5		            lda player_turn
   742 3839 49 03		            eor #3              ; 1 => 2, 2 => 1
   743 383B 85 B5		            sta player_turn
   744 383D 20 D7 36		            jsr turn_color_ball
   745
   746 3840			still_moving
   747 3840 A5 EB		            lda current_x+1
   748 3842 85 A6		            sta ball_current_x
   749 3844 A5 ED		            lda current_y+1
   750 3846 85 A7		            sta ball_current_y
   751
   752 3848 20 EB 39		            jsr show_ball
   753
   754 384B A9 00		            lda #0
   755 384D 8D 18 D0		            sta $d018           
   756
   757 				; anything in A to clear collisions
   758 3850 8D 1E D0		            sta HITCLR
   759
   760 3853			exit_vbi
   761
   762 				; always set header stuff
   763 3853 A9 03		            lda #3
   764 3855 8D 08 D0		            sta SIZEP0
   765 3858 8D 09 D0		            sta SIZEP1
   766
   767 				; background in PM0/1 for header
   768 385B A9 FF		            lda #255
   769 385D A2 07		            ldx #7
   770 385F			fill_pm_header
   771 385F 9D 00 0E		            sta p0_area,x
   772 3862 9D 80 0E		            sta p1_area,x
   773 3865 CA			            dex
   774 3866 10 F7		            bpl fill_pm_header
   775
   776 3868 4C 62 E4		            jmp $e462
   777
   778 386B			game_ends
   779 386B 20 FA 31		            jsr music_normal_volume
   780 386E 4C 62 E4		            jmp $e462            
   781
   782 3871			start_sound_bat
   783 3871 A9 0A		            lda #10
   784 3873 85 8D		            sta volume_hit_bat
   785 3875 60			            rts
   786
   787 3876			play_sound_bat
   788 3876 A5 8D		            lda volume_hit_bat
   789 3878 30 14		            bmi silenced_bat
   790
   791 387A A5 B5		            lda player_turn
   792 387C 0A			            asl
   793 387D 0A			            asl
   794 387E 69 30		            adc #$30
   795 3880 E5 B3		            sbc angle_diff_bat
   796 3882 8D 73 32		            sta SHADOW+4    ; $d204
   797 3885 A5 8D		            lda volume_hit_bat
   798 3887 09 A0		            ora #$a0
   799 3889 8D 74 32		            sta SHADOW+5    ; $d205
   800 388C C6 8D		            dec volume_hit_bat
   801 388E			silenced_bat
   802 388E 60			            rts
   803
   804 388F			start_sound_edge
   805 388F A9 04		            lda #4
   806 3891 85 8E		            sta volume_hit_edge
   807 3893 60			            rts
   808
   809 3894			play_sound_edge
   810 3894 A5 8E		            lda volume_hit_edge
   811 3896 30 16		            bmi silenced_edge
   812 3898 D0 06		            bne no_silenced_edge
   813 389A 8D 74 32		            sta SHADOW+5    ; $d205
   814 389D C6 8E		            dec volume_hit_edge
   815 389F 60			            rts            
   816
   817 38A0			no_silenced_edge
   818 38A0 A9 08		            lda #$08
   819 38A2 8D 73 32		            sta SHADOW+4    ; $d204
   820 38A5 A5 8E		            lda volume_hit_edge
   821 38A7 09 26		            ora #$26
   822 38A9 8D 74 32		            sta SHADOW+5    ; $d205
   823 38AC C6 8E		            dec volume_hit_edge
   824 38AE			silenced_edge
   825 38AE 60			            rts
   826
   827 				; Update score
   828 				; Score > max score, then exit A = 1, otherwise A = 0
   829
   830 38AF			update_score
   831 38AF A5 B5		            lda player_turn
   832 38B1 C9 01		            cmp #1
   833 38B3 D0 12		            bne was_player2_turn
   834 				; was player 1 turn, so player 2 gets a point
   835 38B5 20 22 3B		            jsr inc_score_p2
   836 38B8 20 F4 3A		            jsr show_score_p2
   837
   838 38BB AD 27 4D		            lda score_p2
   839 38BE C9 11		            cmp #MAX_SCORE
   840 38C0 D0 17		            bne reset_edge_delay
   841
   842 38C2 A9 01		            lda #1
   843 38C4 85 8C		            sta mode_menu
   844 38C6 60			            rts
   845
   846 38C7			was_player2_turn
   847 38C7 20 16 3B		            jsr inc_score_p1
   848 38CA 20 DB 3A		            jsr show_score_p1
   849
   850 38CD AD 26 4D		            lda score_p1
   851 38D0 C9 11		            cmp #MAX_SCORE
   852 38D2 D0 05		            bne reset_edge_delay
   853
   854 38D4 A9 01		            lda #1
   855 38D6 85 8C		            sta mode_menu
   856 38D8 60			            rts
   857
   858 38D9			reset_edge_delay
   859 38D9 A9 0A		            lda #10
   860 38DB 85 A3		            sta edge_delay
   861
   862 38DD			no_edge
   863
   864 38DD A9 00		            lda #0      ; no end game
   865 				; anything in A to clear collisions
   866 38DF 8D 1E D0		            sta HITCLR
   867 38E2 60			            rts
   868
   869 				; player 1
   870 				; - wipe shape at previous y-position
   871 				; - move player using controller
   872 				; - set sprite positions
   873
   874 38E3			handle_player1
   875 38E3 20 43 3A		            jsr wipe_p1         ; wipe previous shape player 1
   876
   877 38E6 A2 00		            ldx #0              ; player 1
   878 38E8 20 13 39		            jsr move_player
   879 				            
   880 38EB 20 0F 3A		            jsr show_p1
   881
   882 38EE A5 94		            lda player1_x
   883 38F0 18			            clc
   884 38F1 69 20		            adc #left_margin
   885 38F3 85 81		            sta shadow_HPOSP0
   886 38F5 69 08		            adc #8
   887 38F7 8D 02 D0		            sta HPOSP2
   888 38FA 60			            rts
   889
   890 				; player 2
   891 				; - wipe shape at previous y-position
   892 				; - move player using controller
   893 				; - set sprite positions
   894
   895 38FB			handle_player2
   896 38FB 20 58 3A		            jsr wipe_p2         ; wipe previous shape player 2
   897
   898 38FE A2 01		            ldx #1              ; player 2
   899 3900 20 13 39		            jsr move_player
   900 				                        
   901 3903 20 29 3A		            jsr show_p2
   902
   903 3906 A5 95		            lda player2_x
   904 3908 18			            clc
   905 3909 69 20		            adc #left_margin
   906 390B 85 82		            sta shadow_HPOSP1
   907 390D 69 08		            adc #8
   908 390F 8D 03 D0		            sta HPOSP3
   909 3912 60			            rts
   910
   911 				; move player 1/2
   912 				; right - clockwise, left = anti-clockwise
   913
   914 				; X = 0, player 1
   915 				; X = 1, player 2
   916
   917 				; Y = driver mode:
   918 				; 0 : stick
   919 				; 1 : paddle
   920 				; 2 : driving
   921 				; 3 : computer
   922 				            
   923 3913			move_player
   924 3913 20 6E 34		            jsr main_driver
   925
   926 3916 B5 9C		            lda p1_angle,x
   927 3918 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   928 391A 49 40		            eor #64                     ; perpendicular to the circle angle
   929 391C 95 90		            sta p1_shape,x
   930
   931 391E B4 9C		            ldy p1_angle,x
   932 3920 B9 00 3E		            lda inner_x_tab,y
   933 3923 4A			            lsr
   934 3924 69 20		            adc #inner_x_margin/2
   935 3926 95 94		            sta player1_x,x
   936 3928 B9 00 3F		            lda inner_y_tab,y
   937 392B 4A			            lsr
   938 392C 95 98		            sta player1_y,x
   939
   940 392E B4 90		            ldy p1_shape,x
   941 3930 20 92 3A		            jsr shape_to_ptr
   942
   943 3933 60			            rts
   944
   945 				; Set ball at start position
   946 				; - start angle current player
   947 				; - start position by inner table
   948 				; - collision delay set?
   949
   950 				; Set ball current position to start position
   951 				; input:
   952 				; X = angle of start position
   953 				; output:
   954 				; ball position: (ball_current_x, ball_current_y)
   955 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   956 3934			ball_to_start_position
   957 3934 BD 00 3E		            lda inner_x_tab,x
   958 3937 85 A6		            sta ball_current_x
   959 3939 85 E6		            sta tmp_x1
   960 393B BD 00 3F		            lda inner_y_tab,x
   961 393E 85 A7		            sta ball_current_y
   962 3940 85 E7		            sta tmp_y1
   963 3942 60			            rts
   964
   965 				; Prepare ball end position
   966 				; - end angle current player
   967 				; - end position by outer table
   968 				; - calculate step size x,y
   969
   970 				; Input:
   971 				; - ball_angle_start
   972 				; - ball speed
   973 				; Output:
   974 				; - ball_andle_end
   975 				; - ball start position (tmp_x1, tmp_y1)
   976 				; - ball end position (tmp_x2, tmp_y2)
   977 				; - step size (step_x, step_y) for ball movement
   978 3943			prepare_ball_end_position
   979 3943 A5 AA		            lda ball_angle_start
   980 3945 49 80		            eor #128        ; other side
   981 3947 85 AB		            sta ball_angle_end
   982 3949 AA			            tax
   983 394A 20 CB 39		            jsr angle_to_end_position
   984 				                        
   985 394D 20 F2 3B		            jsr init_current_xy
   986 				            
   987 				; move current a little bit            
   988 3950 20 5F 3C		            jsr move_current_xy
   989 				; ignore end indicator, since we only just started
   990
   991
   992 3953 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   993 3955 85 A4		            sta bat_collision_delay
   994 3957 60			            rts
   995
   996 				; x = angle 0..255
   997 3958			outer_angle_to_start_position
   998 3958 BD 00 10		            lda outer_x_256,x
   999 395B 85 A6		            sta ball_current_x
  1000 395D 85 E6		            sta tmp_x1
  1001 395F BD 00 11		            lda outer_y_256,x
  1002 3962 85 A7		            sta ball_current_y
  1003 3964 85 E7		            sta tmp_y1
  1004 3966 60			            rts
  1005
  1006 3967			ball_current_to_start_position
  1007 3967 A5 A6		            lda ball_current_x
  1008 3969 85 E6		            sta tmp_x1
  1009 396B A5 A7		            lda ball_current_y
  1010 396D 85 E7		            sta tmp_y1
  1011 396F 60			            rts
  1012
  1013 				; Ball collides with bat
  1014 				; - start ball angle = end ball angle
  1015 				; - calculate diff between bat and ball end angle
  1016 				; - calculate new end angle
  1017 				; - Set ball at start position
  1018 				; - Prepare ball end position
  1019
  1020 3970			bounce_bat_ball
  1021 				; set new start of ball
  1022 				; @todo check ball angles
  1023 				; set new ball start angle (= previous end angle)
  1024 3970 A5 AB		            lda ball_angle_end
  1025 3972 85 AA		            sta ball_angle_start
  1026 				            
  1027 				; alternative?
  1028 				            ;ldx ball_angle_start
  1029 				            ;jsr ball_to_start_position          
  1030 3974 20 67 39		            jsr ball_current_to_start_position
  1031
  1032 				; which player hit the ball?
  1033 				; collision bits:
  1034 				; xxxxx1x1 : 1 is player1 collision
  1035 				; xxxx1010 : 2 is player2 collision
  1036
  1037 3977 A5 A0		            lda mp_collision
  1038 3979 4A			            lsr
  1039 397A 4A			            lsr
  1040 397B 05 A0		            ora mp_collision
  1041 397D 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1042
  1043 				; who's turn is it and who bounced the ball?
  1044
  1045 397F 25 B5		            and player_turn
  1046 3981 F0 06		            beq no_switch_turn
  1047
  1048 3983 A5 B5		            lda player_turn
  1049 3985 49 03		            eor #3              ; 1 => 2, 2 => 1
  1050 3987 85 B5		            sta player_turn 
  1051
  1052 3989			no_switch_turn
  1053 3989 20 D7 36		            jsr turn_color_ball
  1054
  1055 398C A5 B5		            lda player_turn
  1056 398E 49 03		            eor #3
  1057 3990 AA			            tax
  1058 3991 CA			            dex                 ; index 0,1 (player = 1,2)
  1059 3992 B5 9C		            lda p1_angle,x
  1060
  1061 				; Calculate diff between bat angle position and new ball start position
  1062 3994 85 B0		            sta tmp_angle1
  1063
  1064 3996 A5 AA		            lda ball_angle_start
  1065 3998 85 B1		            sta tmp_angle2
  1066
  1067 399A 20 2E 3B		            jsr calc_angle_diff
  1068
  1069 399D 0A			            asl
  1070 399E 0A			            asl
  1071 399F 0A			            asl
  1072 39A0 85 B3		            sta angle_diff_bat
  1073
  1074 39A2 A5 B0		            lda tmp_angle1
  1075 39A4 18			            clc
  1076 39A5 65 B2		            adc add_to_angle
  1077 39A7 49 80		            eor #128            ; other side
  1078 39A9 85 B0		            sta tmp_angle1
  1079 				            
  1080 39AB A5 B4		            lda tmp_angle_direction
  1081 39AD D0 0A		            bne diff_clockwise
  1082 				; diff counter clockwise
  1083 39AF A5 B0		            lda tmp_angle1
  1084 39B1 18			            clc
  1085 39B2 65 B3		            adc angle_diff_bat
  1086 39B4 85 B0		            sta tmp_angle1
  1087 39B6 4C C0 39		            jmp calc_done            
  1088
  1089 39B9			diff_clockwise
  1090 39B9 A5 B0		            lda tmp_angle1
  1091 39BB 38			            sec
  1092 39BC E5 B3		            sbc angle_diff_bat
  1093 39BE 85 B0		            sta tmp_angle1
  1094 				            
  1095 				; calculation done            
  1096 39C0			calc_done
  1097 39C0 A5 B0		            lda tmp_angle1
  1098 39C2 85 AB		            sta ball_angle_end
  1099 39C4 AA			            tax
  1100 39C5 20 CB 39		            jsr angle_to_end_position
  1101 				                        
  1102 39C8 4C F2 3B		            jmp init_current_xy
  1103
  1104 				; x = angle 0..255
  1105 39CB			angle_to_end_position
  1106 39CB BD 00 10		            lda outer_x_256,x
  1107 39CE 85 E8		            sta tmp_x2
  1108 39D0 BD 00 11		            lda outer_y_256,x
  1109 39D3 85 E9		            sta tmp_y2
  1110 39D5 60			            rts
  1111
  1112 39D6			wipe_ball
  1113 39D6 A5 A7		            lda ball_current_y
  1114 39D8 4A			            lsr
  1115 39D9 69 06		            adc #ball_top_margin
  1116 39DB AA			            tax                 ; x = real y position on screen
  1117 39DC A9 00		            lda #0
  1118 39DE 9D 80 0D		            sta msl_area,x
  1119 39E1 9D 81 0D		            sta msl_area+1,x
  1120 39E4 9D 82 0D		            sta msl_area+2,x
  1121 39E7 9D 83 0D		            sta msl_area+3,x
  1122 39EA 60			            rts
  1123
  1124 39EB			show_ball
  1125 39EB A5 A7		            lda ball_current_y
  1126 39ED 4A			            lsr
  1127 39EE 69 06		            adc #ball_top_margin
  1128 39F0 AA			            tax                 ; x = real y position on screen
  1129
  1130 39F1 A9 02		            lda #%00000010
  1131 39F3 9D 80 0D		            sta msl_area,x
  1132 39F6 9D 83 0D		            sta msl_area+3,x
  1133 39F9 A9 07		            lda #%00000111
  1134 39FB 9D 81 0D		            sta msl_area+1,x
  1135 39FE 9D 82 0D		            sta msl_area+2,x
  1136 				            
  1137 3A01 A5 A6		            lda ball_current_x
  1138 3A03 4A			            lsr
  1139 3A04 69 45		            adc #ball_left_margin
  1140 3A06 8D 05 D0		            sta HPOSM1
  1141 3A09 69 02		            adc #2
  1142 3A0B 8D 04 D0		            sta HPOSM0
  1143 				                        
  1144 3A0E 60			            rts
  1145 				            
  1146 3A0F			show_p1
  1147 3A0F A5 98		            lda player1_y
  1148 3A11 18			            clc
  1149 3A12 69 01		            adc #upper_margin
  1150 3A14 AA			            tax
  1151
  1152 3A15 A0 00		            ldy #0
  1153 3A17			show_shape1
  1154 3A17 B1 84		            lda (shape_ptr),y
  1155 3A19 9D 00 0E		            sta p0_area,x 
  1156 3A1C C8			            iny
  1157 3A1D B1 84		            lda (shape_ptr),y
  1158 3A1F 9D 00 0F		            sta p2_area,x
  1159 3A22 E8			            inx
  1160 3A23 C8			            iny
  1161 3A24 C0 20		            cpy #32
  1162 3A26 D0 EF		            bne show_shape1
  1163 3A28 60			            rts
  1164
  1165 3A29			show_p2
  1166 3A29 A5 99		            lda player2_y
  1167 3A2B 18			            clc
  1168 3A2C 69 01		            adc #upper_margin
  1169 3A2E AA			            tax
  1170
  1171 3A2F A0 00		            ldy #0
  1172 3A31			show_shape2
  1173 3A31 B1 84		            lda (shape_ptr),y
  1174 3A33 9D 80 0E		            sta p1_area,x
  1175 3A36 C8			            iny
  1176 3A37 B1 84		            lda (shape_ptr),y
  1177 3A39 9D 80 0F		            sta p3_area,x
  1178 3A3C E8			            inx
  1179 3A3D C8			            iny
  1180 3A3E C0 20		            cpy #32
  1181 3A40 D0 EF		            bne show_shape2
  1182 3A42 60			            rts
  1183
  1184 3A43			wipe_p1
  1185 3A43 A5 98		            lda player1_y
  1186 3A45 18			            clc
  1187 3A46 69 01		            adc #upper_margin
  1188 3A48 AA			            tax
  1189 				            
  1190 3A49 A0 10		            ldy #16
  1191 3A4B A9 00		            lda #0
  1192 3A4D			wipe_it1            
  1193 3A4D 9D 00 0E		            sta p0_area,x 
  1194 3A50 9D 00 0F		            sta p2_area,x
  1195 3A53 E8			            inx
  1196 3A54 88			            dey
  1197 3A55 D0 F6		            bne wipe_it1 
  1198 3A57 60			            rts
  1199
  1200 3A58			wipe_p2
  1201 3A58 A5 99		            lda player2_y
  1202 3A5A 18			            clc
  1203 3A5B 69 01		            adc #upper_margin
  1204 3A5D AA			            tax
  1205 				            
  1206 3A5E A0 10		            ldy #16
  1207 3A60 A9 00		            lda #0
  1208 3A62			wipe_it2            
  1209 3A62 9D 80 0E		            sta p1_area,x
  1210 3A65 9D 80 0F		            sta p3_area,x
  1211 3A68 E8			            inx
  1212 3A69 88			            dey
  1213 3A6A D0 F6		            bne wipe_it2 
  1214 3A6C 60			            rts
  1215
  1216 3A6D			make_shape_index
  1217 3A6D A9 00		            lda #<pm_shapes
  1218 3A6F 85 84		            sta shape_ptr
  1219 3A71 A9 50		            lda #>pm_shapes
  1220 3A73 85 85		            sta shape_ptr+1
  1221 				            
  1222 3A75 A2 00		            ldx #0
  1223 3A77			fill_pm_tab
  1224 3A77 A5 84		            lda shape_ptr
  1225 3A79 9D 00 14		            sta pm_shape_lo,x
  1226 3A7C A5 85		            lda shape_ptr+1
  1227 3A7E 9D 80 14		            sta pm_shape_hi,x
  1228 				            
  1229 3A81 A5 84		            lda shape_ptr
  1230 3A83 18			            clc
  1231 3A84 69 20		            adc #32
  1232 3A86 85 84		            sta shape_ptr
  1233 3A88 A5 85		            lda shape_ptr+1
  1234 3A8A 69 00		            adc #0
  1235 3A8C 85 85		            sta shape_ptr+1
  1236 				            
  1237 3A8E E8			            inx
  1238 3A8F 10 E6		            bpl fill_pm_tab
  1239 				            
  1240 3A91 60			            rts
  1241 				            
  1242 				; there are 128 shapes, each 32 bytes
  1243
  1244 				; y = shape index
  1245 3A92			shape_to_ptr
  1246 3A92 B9 00 14		            lda pm_shape_lo,y
  1247 3A95 85 84		            sta shape_ptr
  1248 3A97 B9 80 14		            lda pm_shape_hi,y
  1249 3A9A 85 85		            sta shape_ptr+1
  1250
  1251 3A9C 60			            rts
  1252
  1253 				; turn 1024 tables into 256 bytes for ball edge lookup
  1254 3A9D			make_outer_256
  1255 3A9D A0 00		            ldy #0
  1256 3A9F A2 00		            ldx #0
  1257 3AA1			conv_256
  1258 3AA1 BD 00 40		            lda outer_x_tab,x
  1259 3AA4 99 00 10		            sta outer_x_256,y
  1260 3AA7 BD 00 41		            lda outer_x_tab+$100,x
  1261 3AAA 99 40 10		            sta outer_x_256+64,y
  1262 3AAD BD 00 42		            lda outer_x_tab+$200,x
  1263 3AB0 99 80 10		            sta outer_x_256+128,y
  1264 3AB3 BD 00 43		            lda outer_x_tab+$300,x
  1265 3AB6 99 C0 10		            sta outer_x_256+192,y
  1266 				            
  1267 3AB9 BD 00 44		            lda outer_y_tab,x
  1268 3ABC 99 00 11		            sta outer_y_256,y
  1269 3ABF BD 00 45		            lda outer_y_tab+$100,x
  1270 3AC2 99 40 11		            sta outer_y_256+64,y
  1271 3AC5 BD 00 46		            lda outer_y_tab+$200,x
  1272 3AC8 99 80 11		            sta outer_y_256+128,y
  1273 3ACB BD 00 47		            lda outer_y_tab+$300,x
  1274 3ACE 99 C0 11		            sta outer_y_256+192,y
  1275
  1276 3AD1 E8			            inx
  1277 3AD2 E8			            inx
  1278 3AD3 E8			            inx
  1279 3AD4 E8			            inx
  1280 3AD5 C8			            iny
  1281 3AD6 C0 40		            cpy #64
  1282 3AD8 D0 C7		            bne conv_256            
  1283 3ADA 60			            rts
  1284
  1285 3ADB			show_score_p1
  1286 3ADB AD 26 4D		            lda score_p1
  1287 3ADE 4A			            lsr
  1288 3ADF 4A			            lsr
  1289 3AE0 4A			            lsr
  1290 3AE1 4A			            lsr
  1291 3AE2 F0 02		            beq do_space1
  1292 3AE4 09 10		            ora #16
  1293 3AE6			do_space1
  1294 3AE6 8D 03 4D		            sta score_chars_p1
  1295 3AE9 AD 26 4D		            lda score_p1
  1296 3AEC 29 0F		            and #15
  1297 3AEE 09 10		            ora #16
  1298 3AF0 8D 04 4D		            sta score_chars_p1+1
  1299 3AF3 60			            rts
  1300
  1301 3AF4			show_score_p2
  1302 3AF4 AD 27 4D		            lda score_p2
  1303 3AF7 4A			            lsr
  1304 3AF8 4A			            lsr
  1305 3AF9 4A			            lsr
  1306 3AFA 4A			            lsr
  1307 3AFB F0 02		            beq do_space2
  1308 3AFD 09 10		            ora #16
  1309 3AFF			do_space2
  1310 3AFF 8D 23 4D		            sta score_chars_p2
  1311 3B02 AD 27 4D		            lda score_p2
  1312 3B05 29 0F		            and #15
  1313 3B07 09 10		            ora #16
  1314 3B09 8D 24 4D		            sta score_chars_p2+1
  1315 3B0C 60			            rts
  1316 				                        
  1317 3B0D			reset_score
  1318 3B0D A9 00		            lda #0
  1319 3B0F 8D 26 4D		            sta score_p1
  1320 3B12 8D 27 4D		            sta score_p2
  1321 3B15 60			            rts            
  1322 				         
  1323 3B16			inc_score_p1
  1324 3B16 F8			            sed
  1325 3B17 AD 26 4D		            lda score_p1
  1326 3B1A 18			            clc
  1327 3B1B 69 01		            adc #1
  1328 3B1D 8D 26 4D		            sta score_p1    
  1329 3B20 D8			            cld
  1330 3B21 60			            rts
  1331
  1332 3B22			inc_score_p2
  1333 3B22 F8			            sed
  1334 3B23 AD 27 4D		            lda score_p2
  1335 3B26 18			            clc
  1336 3B27 69 01		            adc #1
  1337 3B29 8D 27 4D		            sta score_p2
  1338 3B2C D8			            cld
  1339 3B2D 60			            rts
  1340
  1341 				; calculate the difference between angle1 and angle2
  1342
  1343 				; input:
  1344 				; tmp_angle1 (0..255)
  1345 				; tmp_angle2 (0..255)
  1346
  1347 				; output:
  1348 				; tmp_angle_diff, A: difference between angle1 and angle2
  1349 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1350
  1351 3B2E			calc_angle_diff
  1352 3B2E A9 00		            lda #0
  1353 3B30 85 B2		            sta add_to_angle
  1354 3B32 85 B4		            sta tmp_angle_direction
  1355
  1356 				; make sure we can compare angles, otherwise add $40 to angles
  1357 3B34 A5 B0		            lda tmp_angle1
  1358 3B36 C9 C0		            cmp #$c0
  1359 3B38 B0 06		            bcs too_large
  1360 3B3A A5 B1		            lda tmp_angle2
  1361 3B3C C9 C0		            cmp #$c0
  1362 3B3E 90 12		            bcc not_too_large
  1363 3B40			too_large
  1364 3B40 A5 B0		            lda tmp_angle1
  1365 3B42 38			            sec
  1366 3B43 E9 40		            sbc #$40
  1367 3B45 85 B0		            sta tmp_angle1
  1368 				            
  1369 3B47 A5 B1		            lda tmp_angle2
  1370 3B49 38			            sec
  1371 3B4A E9 40		            sbc #$40
  1372 3B4C 85 B1		            sta tmp_angle2
  1373 				            
  1374 3B4E A9 40		            lda #$40
  1375 3B50 85 B2		            sta add_to_angle
  1376
  1377 3B52			not_too_large
  1378 3B52 A5 B1		            lda tmp_angle2
  1379 3B54 C5 B0		            cmp tmp_angle1
  1380 3B56 90 0A		            bcc angle2_smaller_angle1
  1381 				; ball >= play
  1382 3B58 38			            sec
  1383 3B59 E5 B0		            sbc tmp_angle1
  1384 3B5B 85 B7		            sta tmp_angle_diff
  1385 				            
  1386 3B5D E6 B4		            inc tmp_angle_direction
  1387 3B5F 4C 69 3B		            jmp diff_calculated
  1388 				                        
  1389 3B62			angle2_smaller_angle1
  1390 3B62 A5 B0		            lda tmp_angle1
  1391 3B64 38			            sec
  1392 3B65 E5 B1		            sbc tmp_angle2
  1393 3B67 85 B7		            sta tmp_angle_diff
  1394
  1395 3B69			diff_calculated
  1396 3B69 A5 B7		            lda tmp_angle_diff           
  1397 3B6B 60			            rts
  1398
  1399 				; X = angle
  1400 				; lookup magnitude of angle 0 to angle X
  1401 3B6C			angle_to_magnitude
  1402 3B6C BD 00 48		            lda magnitudes_lo,x
  1403 3B6F 85 B8		            sta magnitude
  1404 3B71 BD 00 49		            lda magnitudes_hi,x
  1405 3B74 85 B9		            sta magnitude+1
  1406 3B76 60			            rts
  1407
  1408 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1409 3B77			calc_abs_tmp_dx
  1410 3B77 A5 E8		            lda tmp_x2
  1411 3B79 38			            sec
  1412 3B7A E5 E6		            sbc tmp_x1
  1413 3B7C B0 05		            bcs x2_le
  1414 3B7E 49 FF		            eor #255
  1415 3B80 18			            clc
  1416 3B81 69 01		            adc #1
  1417 3B83 85 F2		x2_le       sta tmp_dx
  1418
  1419 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1420 3B85			calc_abs_tmp_dy
  1421 3B85 A5 E9		            lda tmp_y2
  1422 3B87 38			            sec
  1423 3B88 E5 E7		            sbc tmp_y1
  1424 3B8A B0 05		            bcs y2_le
  1425 3B8C 49 FF		            eor #255
  1426 3B8E 18			            clc
  1427 3B8F 69 01		            adc #1
  1428 3B91 85 F3		y2_le       sta tmp_dy
  1429 3B93 60			            rts
  1430 				            
  1431 3B94			calc_dx_div_magnitude
  1432 3B94 A9 00		            lda #0
  1433 3B96 85 E2		            sta _dividend
  1434 3B98 A5 F2		            lda tmp_dx
  1435 3B9A 85 E3		            sta _dividend+1
  1436
  1437 3B9C A5 B9		            lda magnitude+1
  1438 3B9E 85 E0		            sta _divisor
  1439 3BA0 A9 00		            lda #0
  1440 3BA2 85 E1		            sta _divisor+1
  1441 				            
  1442 3BA4 20 CC 3B		            jsr _div16
  1443
  1444 				; todo multiply result with velocity            
  1445 3BA7 A5 E2		            lda _result
  1446 3BA9 85 EE		            sta step_x
  1447 3BAB A5 E3		            lda _result+1
  1448 3BAD 85 EF		            sta step_x+1
  1449 				            
  1450 3BAF 60			            rts
  1451 				            
  1452 3BB0			calc_dy_div_magnitude
  1453 3BB0 A9 00		            lda #0
  1454 3BB2 85 E2		            sta _dividend
  1455 3BB4 A5 F3		            lda tmp_dy
  1456 3BB6 85 E3		            sta _dividend+1
  1457 				            
  1458 3BB8 A5 B9		            lda magnitude+1
  1459 3BBA 85 E0		            sta _divisor
  1460 3BBC A9 00		            lda #0
  1461 3BBE 85 E1		            sta _divisor+1
  1462
  1463 3BC0 20 CC 3B		            jsr _div16
  1464 				            
  1465 				; todo multiply result with velocity
  1466 3BC3 A5 E2		            lda _result
  1467 3BC5 85 F0		            sta step_y
  1468 3BC7 A5 E3		            lda _result+1
  1469 3BC9 85 F1		            sta step_y+1
  1470 				            
  1471 3BCB 60			            rts
  1472
  1473 				; divide 16bit
  1474 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1475
  1476 				; _result = _dividend / divisor
  1477
  1478 3BCC A9 00		_div16      lda #0          ;preset remainder to 0
  1479 3BCE 85 E4		            sta _remainder
  1480 3BD0 85 E5		            sta _remainder+1
  1481 3BD2 A2 10		            ldx #16         ;repeat for each bit: ...
  1482
  1483 3BD4 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1484 3BD6 26 E3		            rol _dividend+1  
  1485 3BD8 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1486 3BDA 26 E5		            rol _remainder+1
  1487 3BDC A5 E4		            lda _remainder
  1488 3BDE 38			            sec
  1489 3BDF E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1490 3BE1 A8			            tay         ;lb result -> Y, for we may need it later
  1491 3BE2 A5 E5		            lda _remainder+1
  1492 3BE4 E5 E1		            sbc _divisor+1
  1493 3BE6 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1494
  1495 3BE8 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1496 3BEA 84 E4		            sty _remainder   
  1497 3BEC E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1498
  1499 3BEE CA			_div_skip   dex
  1500 3BEF D0 E3		            bne _div_loop 
  1501 3BF1 60			            rts
  1502
  1503 				; Calculations for step size
  1504
  1505 				; not optimised for speed or size
  1506 				; step should be set according to the angle
  1507
  1508 				; move in straight line (x1,y1) to (x2,y2)
  1509
  1510 				; 1. set start/end of line
  1511 				; set (tmp_x1, tmp_y1)
  1512 				; set (tmp_x2, tmp_y2)
  1513
  1514 				; 2. init. current_x, current_y
  1515 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1516 				; - calculates step sizes for x,y
  1517 				; - calculated directions for x,y
  1518 				;            jsr init_current_xy
  1519
  1520 				; 3. use current_x, current_y to plot or set a position
  1521 				;            lda current_x+1
  1522 				;            sta x_position
  1523 				;            lda current_y+1
  1524 				;            sta y_position
  1525 				;            jsr plot_pixel
  1526
  1527 				; 4. move current_x, current_y to next position on line
  1528 				; A=0 still moving
  1529 				;           move_current_xy
  1530
  1531 3BF2			init_current_xy
  1532 3BF2 A9 7F		            lda #$7f      ; was 128 for half pixel
  1533 3BF4 85 EA		            sta current_x
  1534 3BF6 85 EC		            sta current_y
  1535
  1536 3BF8 A5 E6		            lda tmp_x1
  1537 3BFA 85 EB		            sta current_x+1
  1538 				            
  1539 3BFC A5 E7		            lda tmp_y1
  1540 3BFE 85 ED		            sta current_y+1
  1541
  1542 				; dx = abs(tmp_x1 - tmp_x2)
  1543 3C00 20 77 3B		            jsr calc_abs_tmp_dx
  1544
  1545 				; dy = abs(tmp_y1 - tmp_y2)
  1546 3C03 20 85 3B		            jsr calc_abs_tmp_dy
  1547
  1548 				; set directions
  1549 3C06 A5 E6		            lda tmp_x1
  1550 3C08 C5 E8		            cmp tmp_x2
  1551 3C0A 90 04		            bcc x1_smaller_x2
  1552 				; x1 >= x2
  1553 3C0C A9 01		            lda #1
  1554 3C0E D0 02		            bne set_dir_x
  1555 3C10			x1_smaller_x2
  1556 3C10 A9 00		            lda #0
  1557 3C12			set_dir_x
  1558 3C12 85 FA		            sta dir_x
  1559 				            
  1560 3C14 A5 E7		            lda tmp_y1
  1561 3C16 C5 E9		            cmp tmp_y2
  1562 3C18 90 04		            bcc y1_smaller_y2
  1563 				; y1 >= y2
  1564 3C1A A9 01		            lda #1
  1565 3C1C D0 02		            bne set_dir_y
  1566 3C1E			y1_smaller_y2
  1567 3C1E A9 00		            lda #0
  1568 3C20			set_dir_y
  1569 3C20 85 FB		            sta dir_y
  1570
  1571 				; Calculate diff between start angle and end angle
  1572
  1573 3C22 A5 AA		            lda ball_angle_start
  1574 3C24 85 B0		            sta tmp_angle1
  1575 3C26 A5 AB		            lda ball_angle_end
  1576 3C28 85 B1		            sta tmp_angle2
  1577 				            
  1578 3C2A 20 2E 3B		            jsr calc_angle_diff
  1579
  1580 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1581 3C2D A6 B7		            ldx tmp_angle_diff
  1582 3C2F 20 6C 3B		            jsr angle_to_magnitude
  1583 				            
  1584 3C32 20 94 3B		            jsr calc_dx_div_magnitude
  1585 3C35 20 B0 3B		            jsr calc_dy_div_magnitude
  1586 				            
  1587 				; Calculate step size by ball speed
  1588 				            
  1589 				; step_x = step_x * speed
  1590 				            
  1591 3C38 A5 EE		            lda step_x
  1592 3C3A 85 F6		            sta _multiplicand
  1593 3C3C A5 EF		            lda step_x+1
  1594 3C3E 85 F7		            sta _multiplicand+1
  1595 3C40 A5 AC		            lda ball_speed
  1596 3C42 85 F8		            sta _multiplier
  1597
  1598 3C44 20 75 35		            jsr _multi8
  1599 				;result in .A (low byte, also in .X) and .Y (high byte)
  1600 3C47 85 EE		            sta step_x
  1601 3C49 84 EF		            sty step_x+1
  1602 3C4B			skip_step_x_hi
  1603 				            
  1604 				; step_y = step_y * speed
  1605
  1606 3C4B A5 F0		            lda step_y
  1607 3C4D 85 F6		            sta _multiplicand
  1608 3C4F A5 F1		            lda step_y+1
  1609 3C51 85 F7		            sta _multiplicand+1
  1610 3C53 A5 AC		            lda ball_speed
  1611 3C55 85 F8		            sta _multiplier
  1612
  1613 3C57 20 75 35		            jsr _multi8
  1614 				;result in .A (low byte, also in .X) and .Y (high byte)
  1615 3C5A 85 F0		            sta step_y
  1616 3C5C 84 F1		            sty step_y+1
  1617 3C5E			skip_step_y_hi
  1618
  1619 3C5E 60			            rts
  1620
  1621 				; Move ball position 
  1622 				; Add one step, until end reached
  1623 				; Input:
  1624 				; - step size (step_x, step_y)
  1625 				; - current ball position (current_x, current_y)
  1626 				; - end position (tmp_x2, tmp_y2)
  1627 				; Output:
  1628 				; A (0 = still moving, 1 = end reached)
  1629 3C5F			move_current_xy
  1630 3C5F A9 00		            lda #0
  1631 3C61 85 FC		            sta line_end_x
  1632 3C63 85 FD		            sta line_end_y
  1633
  1634 				; sets line end indicators here
  1635 3C65 20 82 3C		            jsr move_current_x
  1636 3C68 20 C2 3C		            jsr move_current_y
  1637
  1638 3C6B A5 FC		            lda line_end_x
  1639 3C6D 25 FD		            and line_end_y
  1640 3C6F F0 10		            beq no_end_reached
  1641 				            
  1642 				; set current to (x2,y2)
  1643 3C71 A5 E8		            lda tmp_x2
  1644 3C73 85 EB		            sta current_x+1
  1645 3C75 A5 E9		            lda tmp_y2
  1646 3C77 85 ED		            sta current_y+1
  1647 				            
  1648 3C79 A9 00		            lda #0
  1649 3C7B 85 EA		            sta current_x
  1650 3C7D 85 EC		            sta current_y
  1651 				            
  1652 3C7F A9 01		            lda #1 ; end reached
  1653 				            
  1654 3C81			no_end_reached  ; A = 0
  1655 3C81 60			            rts
  1656
  1657 3C82			move_current_x
  1658 3C82 A5 FA		            lda dir_x
  1659 3C84 D0 18		            bne move_current_left
  1660
  1661 				; move right, add
  1662 3C86 A5 EA		            lda current_x
  1663 3C88 18			            clc
  1664 3C89 65 EE		            adc step_x
  1665 3C8B 85 EA		            sta current_x
  1666 3C8D A5 EB		            lda current_x+1
  1667 3C8F 65 EF		            adc step_x+1
  1668 3C91 85 EB		            sta current_x+1
  1669
  1670 3C93 A5 EB		            lda current_x+1
  1671 3C95 C5 E8		            cmp tmp_x2
  1672 3C97 90 04		            bcc no_line_end
  1673 3C99			exact_end_x
  1674 3C99 A9 01		            lda #1
  1675 3C9B 85 FC		            sta line_end_x 
  1676 3C9D			no_line_end
  1677 3C9D 60			            rts
  1678 				            
  1679 3C9E			move_current_left
  1680 3C9E A5 EA		            lda current_x
  1681 3CA0 38			            sec
  1682 3CA1 E5 EE		            sbc step_x
  1683 3CA3 90 01		            bcc clear_skip
  1684 3CA5 EA			            nop
  1685 3CA6			clear_skip
  1686 3CA6 85 EA		            sta current_x
  1687 3CA8 A5 EB		            lda current_x+1
  1688 3CAA E5 EF		            sbc step_x+1
  1689 3CAC 85 EB		            sta current_x+1
  1690 3CAE 90 0B		            bcc below_zero
  1691 				                        
  1692 3CB0 A5 E8		            lda tmp_x2
  1693 3CB2 C5 EB		            cmp current_x+1
  1694 3CB4 90 E7		            bcc no_line_end
  1695 3CB6 A9 01		            lda #1
  1696 3CB8 85 FC		            sta line_end_x            
  1697 3CBA 60			            rts
  1698 3CBB			below_zero            
  1699 3CBB A9 01		            lda #1
  1700 3CBD 85 FC		            sta line_end_x
  1701 3CBF 85 FD		            sta line_end_y
  1702 3CC1 60			            rts
  1703 3CC2			move_current_y
  1704 3CC2 A5 FB		            lda dir_y
  1705 3CC4 D0 18		            bne move_current_up
  1706
  1707 				; move down, add
  1708 3CC6 A5 EC		            lda current_y
  1709 3CC8 18			            clc
  1710 3CC9 65 F0		            adc step_y
  1711 3CCB 85 EC		            sta current_y
  1712 3CCD A5 ED		            lda current_y+1
  1713 3CCF 65 F1		            adc step_y+1
  1714 3CD1 85 ED		            sta current_y+1
  1715 				            
  1716 3CD3 A5 ED		            lda current_y+1
  1717 3CD5 C5 E9		            cmp tmp_y2
  1718 3CD7 90 C4		            bcc no_line_end
  1719 3CD9			exact_end_y
  1720 3CD9 A9 01		            lda #1
  1721 3CDB 85 FD		            sta line_end_y
  1722 3CDD 60			            rts
  1723
  1724 3CDE			move_current_up
  1725 3CDE A5 EC		            lda current_y
  1726 3CE0 38			            sec
  1727 3CE1 E5 F0		            sbc step_y
  1728 3CE3 85 EC		            sta current_y
  1729 3CE5 A5 ED		            lda current_y+1
  1730 3CE7 E5 F1		            sbc step_y+1
  1731 3CE9 90 D0		            bcc below_zero
  1732 3CEB 85 ED		            sta current_y+1
  1733 				            
  1734 3CED A5 E9		            lda tmp_y2
  1735 3CEF C5 ED		            cmp current_y+1
  1736 3CF1 90 AA		            bcc no_line_end
  1737 3CF3 A9 01		            lda #1
  1738 3CF5 85 FD		            sta line_end_y
  1739 3CF7 60			            rts                            
  1740 				            
  1741 3CF8			init_sprites
  1742 3CF8 A2 00		            ldx #0
  1743 3CFA 8A			            txa
  1744 3CFB			set_p
  1745 3CFB 9D 00 0E		            sta p0_area,x
  1746 3CFE 9D 80 0E		            sta p1_area,x
  1747 3D01 9D 00 0F		            sta p2_area,x
  1748 3D04 9D 80 0F		            sta p3_area,x
  1749 3D07 E8			            inx
  1750 3D08 10 F1		            bpl set_p
  1751
  1752 3D0A A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1753 3D0C 8D 6F 02		            sta GPRIOR
  1754
  1755 3D0F A9 0C		            lda #>pm_area
  1756 3D11 8D 07 D4		            sta PMBASE
  1757
  1758 3D14 A9 03		            lda #3          ; P/M both on
  1759 3D16 8D 1D D0		            sta GRACTL
  1760
  1761 3D19 A9 90		            lda #$90
  1762 3D1B 8D 02 D0		            sta HPOSP2
  1763 3D1E A9 A0		            lda #$A0
  1764 3D20 8D 03 D0		            sta HPOSP3  
  1765 3D23 60			            rts
  1766
  1767 3D24			init_colors
  1768 3D24 A9 5A		            lda #BASE_COLOR_P1+10
  1769 3D26 8D C2 02		            sta PCOLR2
  1770 3D29 A9 BA		            lda #BASE_COLOR_P2+10
  1771 3D2B 8D C3 02		            sta PCOLR3
  1772 				            
  1773 3D2E A9 00		            lda #0
  1774 3D30 8D C6 02		            sta COLOR2
  1775
  1776 3D33 A9 0E		            lda #HEADER_FG_COLOR
  1777 3D35 8D C5 02		            sta COLOR1
  1778
  1779 3D38 A9 50		            lda #HEADER_P1_COLOR
  1780 3D3A 8D C0 02		            sta PCOLR0
  1781 3D3D A9 B0		            lda #HEADER_P2_COLOR
  1782 3D3F 8D C1 02		            sta PCOLR1
  1783
  1784 3D42 60			            rts
  1785
  1786 3D43			previous_consol
  1787 3D43 00			            dta 0
  1788
  1789 3D44			current_level_index
  1790 3D44 00			            dta 0
  1791 = 0004			NR_OF_LEVELS = 4
  1792 = 0000			INIT_LEVEL_INDEX = 0
  1793 3D45			level_speeds
  1794 3D45 02 04 06 08		            dta 2,4,6,8
  1795 3D49			stick_slow_speed_tab
  1796 3D49 01 02 02 03		            dta 1,2,2,3
  1797 3D4D			stick_fast_speed_tab
  1798 3D4D 02 03 03 04		            dta 2,3,3,4
  1799 				            
  1800 				; X = level (0..NR_OF_LEVELS)
  1801 3D51			set_level_ball_speed
  1802 3D51 BD 49 3D		            lda stick_slow_speed_tab,x
  1803 3D54 85 88		            sta stick_slow_speed
  1804 3D56 BD 4D 3D		            lda stick_fast_speed_tab,x
  1805 3D59 85 89		            sta stick_fast_speed
  1806
  1807 3D5B BD 45 3D		            lda level_speeds,x
  1808 3D5E 85 AC		            sta ball_speed
  1809 3D60 8A			            txa
  1810 3D61 18			            clc
  1811 3D62 69 01		            adc #1
  1812 3D64 09 10		            ora #16
  1813 3D66 8D 84 4E		            sta level_char
  1814 3D69 60			            rts
  1815 				            
  1816 3D6A			increase_level
  1817 3D6A EE 44 3D		            inc current_level_index
  1818 3D6D AD 44 3D		            lda current_level_index
  1819 3D70 C9 04		            cmp #NR_OF_LEVELS
  1820 3D72 D0 05		            bne ok_level
  1821 3D74 A9 00		            lda #INIT_LEVEL_INDEX
  1822 3D76 8D 44 3D		            sta current_level_index
  1823 3D79			ok_level           
  1824 3D79 60			            rts
  1825 				            
  1826 3D7A			            .align $100
  1827 3E00			inner_x_tab
  1828 = 3F00			inner_y_tab = *+$100
  1829 3E00-49FF> 70 72 75 77 +             ins 'data\in210.dat'
  1830 				      
  1831 4000			            .align $400            
  1832 				; outer circle 1024 plot points on 360 degrees
  1833 4000			outer_x_tab
  1834 = 4400			outer_y_tab = *+1024
  1835 4000 70 70 71 72 72 73 +             ins 'data\out224.dat'
  1836 				           
  1837 4800			            .align $400
  1838 				; table of magnitudes (length) between angle 0 and 0..255
  1839 				; fixed point 8.8 : hi.lo
  1840 4800			magnitudes_lo
  1841 = 4900			magnitudes_hi = *+256
  1842 4800 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1843
  1844 4A00			            .align $400
  1845 4C00			display_list
  1846 4C00-4D27> C2		            dta $42+128         ; dli_header
  1847 4C01 FE 4C		            dta a(score_line)
  1848
  1849 				; 102 x 40 = 4080 bytes            
  1850 4C03 4F			            dta $4f
  1851 4C04 00 60		            dta a(screen_mem1)
  1852 4C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1853 4C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1854 4C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1855 4C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1856
  1857 4C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1858 4C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1859 4C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1860 4C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1861
  1862 4C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1863 4C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1864 4C55			menu_dl_hook
  1865 4C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1866 4C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1867
  1868 4C65 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1869
  1870 				; 42 + 60 = 102, 4080 bytes
  1871 4C6B 4F			            dta $4f
  1872 4C6C 00 70		            dta a(screen_mem2)
  1873 4C6E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1874
  1875 4C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1876 4C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1877 4C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1878 4C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1879
  1880 4C95 0F 0F		            dta $0f,$0f
  1881
  1882 				; 60 lines
  1883 4C97			menu_dl_end
  1884 4C97 4F			            dta $4f
  1885 4C98 90 76		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1886 4C9A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1887 4CA1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1888 4CA9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1889 4CB1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1890
  1891 4CB9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1892 4CC1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1893 4CC9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1894 4CD1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1895
  1896 				; 20 x 40 = 800
  1897 4CD5 4F			            dta $4f
  1898 4CD6 00 80		            dta a(screen_mem3)       
  1899 4CD8 0F 0F 0F		            dta $0f,$0f,$0f
  1900 4CDB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1901 4CE3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1902 				            
  1903 4CEB 41			            dta $41
  1904 4CEC 00 4C		            dta a(display_list)
  1905
  1906 4CEE			menu_dl_part
  1907 4CEE 80			            dta 128 ; dli_menu
  1908 4CEF 20			            dta $20
  1909 4CF0 42			            dta $42
  1910 4CF1 00 4E		            dta a(menu_screen)
  1911 4CF3 02			            dta 2
  1912 4CF4 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$10
  1913 4CFB 01			            dta $01 ; jump
  1914 4CFC 97 4C		            dta a(menu_dl_end)
  1915
  1916 4CFE			score_line  
  1917 4CFE 00 2F 2E 25 00	            dta d' ONE '
  1918 4D03			score_chars_p1
  1919 4D03 0D 0D 00		            dta d'-- '
  1920
  1921 4D06 00 00 00 00 00 00 +             dta d'          '
  1922 4D10 00 00 00 00 00 00 +             dta d'          '
  1923
  1924 4D1A 00 00 00 00 00 34 +             dta d'     TWO '
  1925 4D23			score_chars_p2
  1926 4D23 0D 0D 00		            dta d'-- '
  1927
  1928 4D26 00			score_p1    dta 0
  1929 4D27 00			score_p2    dta 0
  1930
  1931 4D28			            .align $100
  1932 4E00			menu_screen
  1933 4E00-4EDB> 00 00 00 00 +             dta d'              '
  1934 4E0E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  1935 4E1A 00 00 00 00 00 00 +             dta d'              '
  1936 4E28 00 00 00 00 00 00 +             dta d'              '
  1937 4E36 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  1938 4E42 00 00 00 00 00 00 +             dta d'              '
  1939
  1940 4E50 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1941 4E5A			driver_screen
  1942 4E5A 00 00 00 00 00 00 +             dta d'            '
  1943 4E66 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1944 4E78 00 00 00 00 00 00 +             dta d'      LEVEL '
  1945 4E84			level_char            
  1946 4E84 11 00 00 00 00 00 +             dta d'1       '
  1947 4E8C 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  1948 4EB4			stick_text
  1949 4EB4 33 34 29 23 2B 00 +             dta d'STICK   '
  1950 4EBC			paddle_text
  1951 4EBC 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1952 4EC4			driving_text
  1953 4EC4 24 32 29 36 29 2E +             dta d'DRIVING '
  1954 4ECC			computer_text
  1955 4ECC 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1956
  1957 4ED4			driver_text_lo
  1958 4ED4 B4			            dta <stick_text
  1959 4ED5 BC			            dta <paddle_text
  1960 4ED6 C4			            dta <driving_text
  1961 4ED7 CC			            dta <computer_text
  1962 				            
  1963 4ED8			driver_text_hi
  1964 4ED8 4E			            dta >stick_text
  1965 4ED9 4E			            dta >paddle_text
  1966 4EDA 4E			            dta >driving_text
  1967 4EDB 4E			            dta >computer_text
  1968
  1969 				; 4 KB
  1970 				; 128 x 32 bytes shapes
  1971 4EDC			            .align $1000
  1972 5000			pm_shapes
  1973 5000-6FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1974
  1975 				; 9 KB for backdrop image
  1976 6000			            .align $1000
  1977 = 6000			screen_mem1 = * ; 4K
  1978 				;            org screen_mem1
  1979 6000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1980
  1981 6FF0			            .align $1000
  1982 = 7000			screen_mem2 = * ; 4K
  1983 				;            org screen_mem2
  1984 7000-7FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1985
  1986 7FF0			            .align $1000
  1987 = 8000			screen_mem3 = * ; 1K
  1988 				;            org screen_mem3
  1989 8000-831F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1990
  1991 02E0-02E1> F1 34		            run main
