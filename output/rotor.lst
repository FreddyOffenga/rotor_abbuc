mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-16
     4 				; Version 1.0.0
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players red and blue move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - add music by IvoP
    17 				; - add sound when ball hits edge
    18
    19 				; Optional for a later version:
    20 				; - add computer player(s)
    21 				; - add support for driving controllers
    22 				; - break part of outer circle when ball hits
    23
    24 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    25
    26 				; must be in decimal format, so $11 is 11
    27 = 0011			MAX_SCORE   = $11
    28
    29 = 1000			pm_area     = $1000
    30 = 1180			msl_area    = pm_area+$180
    31 = 1200			p0_area     = pm_area+$200
    32 = 1280			p1_area     = pm_area+$280
    33 = 1300			p2_area     = pm_area+$300
    34 = 1380			p3_area     = pm_area+$380
    35
    36 				; $1400 .. $1500 is overwritten, bug?
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1600			outer_x_256     = $1600
    40 = 1700			outer_y_256     = $1700
    41
    42 = 1800			screen_y_lo     = $1800
    43 = 1900			screen_y_hi     = $1900
    44
    45 = 0140			WIDTH           = 320
    46 = 00C0			HEIGHT          = 192
    47
    48 = 0028			SCREEN_WIDTH    = 40
    49
    50 = 0030			outer_x_margin  = 48 ;47-32
    51 = 0040			inner_x_margin  = 64
    52
    53 = 00A0			circle_center_x = WIDTH/2
    54 = 0060			circle_center_y = HEIGHT/2
    55
    56 = 0006			ball_top_margin     = 6
    57 = 0045			ball_left_margin    = 64+5
    58
    59 				; pm upper margin
    60 = 0001			upper_margin    = 1
    61 = 0020			left_margin     = 32
    62
    63 = 0084			shape_ptr       = $84
    64 = 0086			tmp_screen      = $86
    65
    66 = 008C			mode_menu       = $8c
    67
    68 				; player vars must be in sequence for zp,x indexing
    69
    70 = 0090			p1_shape        = $90
    71 = 0091			p2_shape        = $91
    72
    73 = 0094			player1_x       = $94
    74 = 0095			player2_x       = $95
    75
    76 = 0098			player1_y       = $98
    77 = 0099			player2_y       = $99
    78
    79 = 009C			p1_angle        = $9c
    80 = 009D			p2_angle        = $9d
    81
    82 = 00A0			mp_collision    = $a0
    83 = 00A1			in_collision    = $a1
    84 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    85 = 00A3			edge_delay      = $a3
    86 = 00A4			bat_collision_delay = $a4
    87
    88 				; ball vars
    89 = 00A6			ball_current_x      = $a6
    90 = 00A7			ball_current_y      = $a7
    91 = 00AA			ball_angle_start    = $aa
    92 = 00AB			ball_angle_end      = $ab
    93 = 00AC			ball_speed          = $ac
    94
    95 = 00B0			tmp_angle1          = $b0
    96 = 00B1			tmp_angle2          = $b1
    97 = 00B2			add_to_angle        = $b2
    98 = 00B3			angle_diff_bat      = $b3
    99 = 00B4			tmp_angle_direction = $b4
   100 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   101 = 00B6			game_restart        = $b6
   102 = 00B7			tmp_angle_diff      = $b7
   103 = 00B8			magnitude           = $b8       ; word
   104
   105 				; $c0 - $df free for music
   106
   107 = 00E0			_divisor    = $e0   ; word
   108 = 00E2			_dividend   = $e2   ; word
   109 = 00E4			_remainder  = $e4   ; word
   110 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   111
   112 = 00E6			tmp_x1      = $e6   ; byte
   113 = 00E7			tmp_y1      = $e7   ; byte
   114 = 00E8			tmp_x2      = $e8   ; byte
   115 = 00E9			tmp_y2      = $e9   ; byte
   116
   117 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   118 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   119
   120 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   121 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   122
   123 = 00F2			tmp_dx      = $f2  ; byte
   124 = 00F3			tmp_dy      = $f3  ; byte
   125
   126 = 00F6			_multiplicand   = $f6   ; word
   127 = 00F8			_multiplier     = $f8   ; byte
   128
   129 				; direction:
   130 				; 0 : x1<x2 or y1<y2 = add
   131 				; 1 ; x1>=y2 or y1>=y2 = subtract
   132
   133 = 00FA			dir_x       = $fa  ; byte
   134 = 00FB			dir_y       = $fb  ; byte
   135
   136 = 00FC			line_end_x  = $fc  ; byte
   137 = 00FD			line_end_y  = $fd  ; byte
   138
   139 				            org $2000
   140
   141 				            icl 'lib/drivers.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2000			driver_tmp      .ds 2
     5 = 2002			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 				            .align $100
    11 				paddle_to_256
    12 = 2100			            .ds $100
    13
    14 				; paddle initial value
    15 				prev_paddle_value
    16 = 2200			            .ds 1
    17
    18 				driver_init
    19 FFFF> 2201-2A61> A9 00	            lda #0  ; stick
    20 2203 8D 02 20		            sta driver_mode
    21
    22 2206 AD 70 02		            lda PADDL0
    23 2209 8D 00 22		            sta prev_paddle_value
    24
    25 220C A9 00		            lda #0
    26 220E 85 9C		            sta p1_angle
    27 2210 A9 80		            lda #128
    28 2212 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2214 A9 00		            lda #0
    33 2216 8D 00 20		            sta driver_tmp
    34 2219 8D 01 20		            sta driver_tmp+1
    35 				            
    36 221C A2 00		            ldx #0
    37 221E			store_pv
    38 221E AD 01 20		            lda driver_tmp+1
    39 2221 9D 00 21		            sta paddle_to_256,x
    40 				            
    41 2224 AD 00 20		            lda driver_tmp
    42 2227 18			            clc
    43 2228 69 1F		            adc #<paddle_add
    44 222A 8D 00 20		            sta driver_tmp
    45 222D AD 01 20		            lda driver_tmp+1
    46 2230 69 01		            adc #>paddle_add
    47 2232 8D 01 20		            sta driver_tmp+1
    48 2235 E8			            inx
    49 2236 E0 E5		            cpx #paddle_vals
    50 2238 D0 E4		            bne store_pv
    51 223A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 223B			driver_detect
    63 223B AD 70 02		            lda PADDL0
    64 223E C9 E4		            cmp #228
    65 2240 D0 07		            bne paddle_detect
    66 2242 AD 71 02		            lda PADDL1
    67 2245 C9 E4		            cmp #228
    68 2247 F0 06		            beq no_paddle_detect
    69 2249			paddle_detect
    70 2249 A9 01		            lda #1
    71 224B 8D 02 20		            sta driver_mode
    72 224E 60			            rts
    73
    74 224F			no_paddle_detect
    75 224F AD 78 02		            lda STICK0
    76 2252 C9 0C		            cmp #12
    77 2254 D0 06		            bne no_driving_detect
    78 2256 A9 02		            lda #2
    79 2258 8D 02 20		            sta driver_mode
    80 225B 60			            rts
    81
    82 225C			no_driving_detect
    83 225C C9 07		            cmp #7      ; paddle button also gives this
    84 225E F0 04		            beq stick_detect    
    85 2260 C9 0B		            cmp #11     ; paddle button also gives this
    86 2262 D0 06		            bne no_stick_detect
    87 2264			stick_detect
    88 2264 A9 00		            lda #0
    89 2266 8D 02 20		            sta driver_mode
    90 2269 60			            rts
    91
    92 226A			no_stick_detect
    93 				; default is the last value
    94 226A AD 02 20		            lda driver_mode
    95 226D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 226E			main_driver            
   110 226E AC 02 20		            ldy driver_mode
   111 2271 B9 80 22		            lda driver_lo,y
   112 2274 8D 7E 22		            sta driver_ptr
   113 2277 B9 84 22		            lda driver_hi,y
   114 227A 8D 7F 22		            sta driver_ptr+1
   115
   116 = 227E			driver_ptr = *+1
   117 227D 4C FF FF		            jmp $ffff  
   118
   119 2280			driver_lo
   120 2280 88			            dta <driver_stick
   121 2281 CD			            dta <driver_paddle
   122 2282 88			            dta <driver_stick
   123 2283 88			            dta <driver_stick
   124
   125 2284			driver_hi
   126 2284 22			            dta >driver_stick
   127 2285 22			            dta >driver_paddle
   128 2286 22			            dta >driver_stick
   129 2287 22			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2288			driver_stick
   134 2288 BD 78 02		            lda STICK0,x
   135 228B C9 0F		            cmp #15
   136 228D F0 21		            beq move_done
   137 228F C9 0B		            cmp #11
   138 2291 D0 0E		            bne no_left
   139
   140 2293 D6 9C		            dec p1_angle,x
   141 2295 BD 84 02		            lda STRIG0,x
   142 2298 D0 04		            bne no_fast
   143 229A D6 9C		            dec p1_angle,x
   144 229C D6 9C		            dec p1_angle,x
   145 229E			no_fast
   146 				            
   147 229E 4C B0 22		            jmp move_done
   148 22A1 C9 07		no_left     cmp #7
   149 22A3 D0 0B		            bne move_done
   150
   151 22A5 F6 9C		            inc p1_angle,x
   152 22A7 BD 84 02		            lda STRIG0,x
   153 22AA D0 04		            bne no_fast_right
   154 22AC F6 9C		            inc p1_angle,x
   155 22AE F6 9C		            inc p1_angle,x
   156 22B0			no_fast_right
   157 22B0			move_done
   158 22B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 22B1			is_fire_button
   165 22B1 AD 02 20		            lda driver_mode
   166 22B4 C9 01		            cmp #1
   167 22B6 F0 04		            beq check_paddle_fire
   168 				            
   169 22B8 BD 84 02		            lda STRIG0,x
   170 22BB 60			            rts
   171 22BC			check_paddle_fire
   172
   173 22BC AD 78 02		            lda STICK0
   174 22BF C9 07		            cmp #7
   175 22C1 F0 07		            beq paddle_fire
   176 22C3 C9 0B		            cmp #11
   177 22C5 F0 03		            beq paddle_fire
   178 22C7 A9 00		            lda #0
   179 22C9 60			            rts
   180 22CA			paddle_fire
   181 22CA A9 01		            lda #1
   182 22CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 22CD			driver_paddle            
   187 22CD BD 70 02		            lda PADDL0,x
   188 22D0 A8			            tay
   189 22D1 B9 00 21		            lda paddle_to_256,y
   190 22D4 5D DA 22		            eor paddle_offsets,x
   191 22D7 95 9C		            sta p1_angle,x
   192 22D9 60			            rts
   193
   194 22DA			paddle_offsets
   195 22DA 00 80		            dta 0,128
   142 				            
   143 22DC			main         
   144 22DC A9 00		            lda #0
   145 22DE 8D 2F 02		            sta SDMCTL
   146 22E1 85 B6		            sta game_restart
   147 22E3 A5 01		            lda 1
   148 22E5 8D 44 02		            sta 580 ; coldstart
   149
   150 22E8 20 01 22		            jsr driver_init
   151
   152 22EB 20 6B 27		            jsr make_shape_index
   153 				 
   154 22EE 20 9B 27		            jsr make_outer_256
   155 				            
   156 22F1 20 D5 23		            jsr make_screen_y_tab
   157
   158 22F4 20 20 24		            jsr invert_backdrop
   159
   160 22F7 20 0B 28		            jsr reset_score
   161 22FA 20 D9 27		            jsr show_score_p1
   162 22FD 20 F2 27		            jsr show_score_p2
   163 				                       
   164 2300 20 F6 29		            jsr init_sprites
   165 2303 20 22 2A		            jsr init_colors
   166
   167 				; init. game vars
   168 2306 A2 00		            ldx #INIT_LEVEL_INDEX
   169 2308 8E 3E 2A		            stx current_level_index
   170 230B 20 43 2A		            jsr set_level_ball_speed
   171
   172 230E A9 01		            lda #1
   173 2310 85 8C		            sta mode_menu           ; start with menu
   174
   175 				; start vbi
   176 				            
   177 2312 A9 46		            lda #<dli_menu
   178 2314 8D 00 02		            sta VDSLST
   179 2317 A9 23		            lda #>dli_menu
   180 2319 8D 01 02		            sta VDSLST+1
   181 				            
   182 231C A9 C0		            lda #$c0
   183 231E 8D 0E D4		            sta NMIEN
   184 				            
   185 2321 A9 07		            lda #7          ; sets VVBLKI
   186 2323 A0 65		            ldy #<vbi
   187 2325 A2 24		            ldx #>vbi
   188 2327 20 5C E4		            jsr $e45c       ; SETVBV
   189
   190 				; we're just sitting here while VBI does all the work :)
   191 232A 4C 2A 23		loop        jmp loop
   192
   193 				;------------------------
   194 				; 8bit * 8bit = 16bit multiply
   195 				; By White Flame
   196 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   197 				; uses extra zp var _multiplicand+1
   198
   199 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   200 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   201
   202 				; In this version, both inputs must be unsigned
   203 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   204
   205 232D			_multi8
   206 232D A9 00		            lda #$00
   207 232F A8			            tay
   208 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   209 2330 F0 0D		            beq _enter_loop
   210 2332			_do_add
   211 2332 18			            clc
   212 2333 65 F6		            adc _multiplicand
   213 2335 AA			            tax
   214
   215 2336 98			            tya
   216 2337 65 F7		            adc _multiplicand+1
   217 2339 A8			            tay
   218 233A 8A			            txa
   219 233B			_mul_loop
   220 233B 06 F6		            asl _multiplicand
   221 233D 26 F7		            rol _multiplicand+1
   222 233F			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   223 233F 46 F8		            lsr _multiplier
   224 2341 B0 EF		            bcs _do_add
   225 2343 D0 F6		            bne _mul_loop
   226 2345 60			            rts
   227
   228 2346			dli_menu
   229 2346 48			            pha
   230 2347 8A			            txa
   231 2348 48			            pha
   232 				            
   233 2349 A9 00		            lda #0
   234 234B 8D 0A D4		            sta WSYNC
   235 234E 8D 1A D0		            sta COLBK
   236 2351 A9 0E		            lda #$0e
   237 2353 8D 0A D4		            sta WSYNC
   238 2356 8D 1A D0		            sta COLBK
   239 2359 A9 0A		            lda #$0a
   240 235B 8D 0A D4		            sta WSYNC
   241 235E 8D 1A D0		            sta COLBK
   242 2361 A9 00		            lda #0
   243 2363 8D 0A D4		            sta WSYNC
   244 2366 8D 1A D0		            sta COLBK
   245
   246 2369 A2 00		            ldx #0
   247 236B			color_it            
   248 236B BD 9D 23		            lda menu_colpf0,x
   249 236E 8D 0A D4		            sta WSYNC
   250 2371 8D 16 D0		            sta COLPF0
   251 2374 E8			            inx
   252 2375 E0 38		            cpx #56
   253 2377 D0 F2		            bne color_it
   254
   255 2379 A9 00		            lda #0
   256 237B 8D 0A D4		            sta WSYNC
   257 237E 8D 1A D0		            sta COLBK
   258 2381 A9 0A		            lda #$0a
   259 2383 8D 0A D4		            sta WSYNC
   260 2386 8D 1A D0		            sta COLBK
   261 2389 A9 0E		            lda #$0e
   262 238B 8D 0A D4		            sta WSYNC
   263 238E 8D 1A D0		            sta COLBK
   264 2391 A9 00		            lda #0
   265 2393 8D 0A D4		            sta WSYNC
   266 2396 8D 1A D0		            sta COLBK
   267 				            
   268 2399 68			            pla
   269 239A AA			            tax
   270 239B 68			            pla
   271 239C 40			            rti
   272
   273 239D			menu_colpf0
   274 239D 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   275 23A5 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   276 23AD 00 00 00 00		            dta 0,0,0,0
   277 23B1 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   278 23B9 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   279 23C1 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   280 23C9 00 00 00 00		            dta 0,0,0,0
   281 23CD 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   282
   283 				; make pointers from y-position to screen memory
   284 				; screen memory is 3 blocks
   285 				; screen_mem1 : 102 lines, 4080 bytes
   286 				; screen_mem2 : 102 lines, 4080 bytes
   287 				; screen_mem3 :  20 lines,  800 bytes
   288
   289 23D5			make_screen_y_tab
   290 23D5 A9 00		            lda #<screen_mem1
   291 23D7 85 86		            sta tmp_screen
   292 23D9 A9 70		            lda #>screen_mem1
   293 23DB 85 87		            sta tmp_screen+1
   294
   295 23DD A2 00		            ldx #0
   296 23DF			fill_y_tab1
   297 23DF 20 08 24		            jsr store_y_line
   298 23E2 E8			            inx
   299 23E3 E0 66		            cpx #102
   300 23E5 D0 F8		            bne fill_y_tab1
   301
   302 				; x = 102
   303 23E7 A9 00		            lda #<screen_mem2
   304 23E9 85 86		            sta tmp_screen
   305 23EB A9 80		            lda #>screen_mem2
   306 23ED 85 87		            sta tmp_screen+1
   307
   308 23EF			fill_y_tab2
   309 23EF 20 08 24		            jsr store_y_line
   310 23F2 E8			            inx
   311 23F3 E0 CC		            cpx #204
   312 23F5 D0 F8		            bne fill_y_tab2
   313
   314 23F7 A9 00		            lda #<screen_mem3
   315 23F9 85 86		            sta tmp_screen
   316 23FB A9 90		            lda #>screen_mem3
   317 23FD 85 87		            sta tmp_screen+1
   318
   319 				; x = 204
   320 23FF			fill_y_tab3
   321 23FF 20 08 24		            jsr store_y_line
   322 2402 E8			            inx
   323 2403 E0 E0		            cpx #224
   324 2405 D0 F8		            bne fill_y_tab3
   325 2407 60			            rts
   326
   327 2408			store_y_line
   328 2408 A5 86		            lda tmp_screen
   329 240A 9D 00 18		            sta screen_y_lo,x
   330 240D A5 87		            lda tmp_screen+1
   331 240F 9D 00 19		            sta screen_y_hi,x
   332 				            
   333 2412 A5 86		            lda tmp_screen
   334 2414 18			            clc
   335 2415 69 28		            adc #SCREEN_WIDTH
   336 2417 85 86		            sta tmp_screen
   337 2419 A5 87		            lda tmp_screen+1
   338 241B 69 00		            adc #0
   339 241D 85 87		            sta tmp_screen+1
   340 241F 60			            rts
   341
   342 				; @todo invert backdrop image
   343 				; now we have to do it here :P
   344 2420			invert_backdrop
   345 2420 A9 00		            lda #<screen_mem1
   346 2422 85 86		            sta tmp_screen
   347 2424 A9 70		            lda #>screen_mem1
   348 2426 85 87		            sta tmp_screen+1
   349 				            
   350 2428 A2 10		            ldx #16     ; 16 pages = 4K
   351 242A 20 48 24		            jsr do_x_pages
   352 				           
   353 242D A9 00		            lda #<screen_mem2
   354 242F 85 86		            sta tmp_screen
   355 2431 A9 80		            lda #>screen_mem2
   356 2433 85 87		            sta tmp_screen+1
   357 				            
   358 2435 A2 10		            ldx #16     ; 16 pages = 4K
   359 2437 20 48 24		            jsr do_x_pages
   360
   361 243A A9 00		            lda #<screen_mem3
   362 243C 85 86		            sta tmp_screen
   363 243E A9 90		            lda #>screen_mem3
   364 2440 85 87		            sta tmp_screen+1
   365 				            
   366 2442 A2 04		            ldx #4     ; 4 pages = 1K
   367 2444 20 48 24		            jsr do_x_pages
   368 2447 60			            rts
   369
   370 				; invert x pages, starting from tmp_screen
   371
   372 2448			do_x_pages
   373 2448 A0 00		            ldy #0
   374 244A			do_page
   375 244A B1 86		            lda (tmp_screen),y
   376 244C 49 FF		            eor #$ff
   377 244E 91 86		            sta (tmp_screen),y
   378 2450 C8			            iny
   379 2451 D0 F7		            bne do_page 
   380
   381 2453 E6 87		            inc tmp_screen+1
   382 2455 CA			            dex
   383 2456 D0 F2		            bne do_page
   384 2458 60			            rts
   385
   386 2459			turn_color_ball
   387 2459 A6 B5		            ldx player_turn
   388 245B BD 62 24		            lda color_turn,x
   389 245E 8D C7 02		            sta COLOR3
   390 2461 60			            rts
   391 				            
   392 2462 00 26 76		color_turn  dta 0,$26,$76                           
   393
   394 				; A, X, Y are already saved by the OS
   395 2465			vbi                 
   396 2465 A9 2E		            lda #%00101110  ; enable P/M DMA
   397 2467 8D 2F 02		            sta SDMCTL
   398 246A A9 00		            lda #0
   399 246C 85 4D		            sta 77      ; attract off
   400 246E A9 38		            lda #>rotor_font
   401 2470 8D F4 02		            sta 756
   402
   403 				; menu switching thingy
   404
   405 2473 AD 1F D0		            lda CONSOL
   406 2476 C9 03		            cmp #3
   407 2478 D0 09		            bne no_option_pressed
   408
   409 247A			go_menu_mode            
   410 247A 20 D4 26		            jsr wipe_ball
   411 				            
   412 247D A9 01		            lda #1
   413 247F 85 8C		            sta mode_menu
   414 2481 D0 0F		            bne check_mode_menu
   415
   416 2483			no_option_pressed
   417 2483 C9 06		            cmp #6
   418 2485 D0 0B		            bne check_mode_menu
   419 				            
   420 				; reset game
   421
   422 2487			reset_game
   423 2487 20 D4 26		            jsr wipe_ball
   424 				            
   425 248A A9 01		            lda #1
   426 248C 85 B6		            sta game_restart
   427
   428 248E A9 00		            lda #0
   429 2490 85 8C		            sta mode_menu
   430
   431 2492			check_mode_menu
   432 2492 A5 8C		            lda mode_menu
   433 2494 F0 51		            beq main_game_vbi
   434
   435 				; within menu vbi
   436 				            
   437 2496 AD 1F D0		            lda CONSOL
   438 2499 C9 05		            cmp #5          ; select
   439 249B D0 18		            bne no_level_select
   440 				            
   441 249D AD 3D 2A		            lda previous_consol
   442 24A0 C9 05		            cmp #5
   443 24A2 F0 14		            beq wait_depressed
   444 				            
   445 24A4 20 52 2A		            jsr increase_level
   446 24A7 AE 3E 2A		            ldx current_level_index
   447 24AA 20 43 2A		            jsr set_level_ball_speed            
   448
   449 24AD A9 05		            lda #5
   450 24AF 8D 3D 2A		            sta previous_consol
   451 24B2 4C B8 24		            jmp wait_depressed
   452
   453 24B5			no_level_select
   454 24B5 8D 3D 2A		            sta previous_consol
   455
   456 24B8			wait_depressed        
   457 24B8 A9 16		            lda #<menu_dl
   458 24BA 8D 30 02		            sta SDLSTL
   459 24BD A9 41		            lda #>menu_dl
   460 24BF 8D 31 02		            sta SDLSTH
   461
   462 				; detect/show controller type (used for both players)
   463 24C2 20 CE 24		            jsr detect_show_driver
   464
   465 24C5 20 DA 25		            jsr handle_player1
   466 24C8 20 F3 25		            jsr handle_player2
   467
   468 24CB 4C 83 25		            jmp exit_vbi
   469
   470 				; X = port/driver to detect
   471 24CE			detect_show_driver
   472 24CE 20 3B 22		            jsr driver_detect
   473 24D1 A8			            tay
   474 24D2 B9 98 42		            lda driver_text_lo,y
   475 24D5 85 86		            sta tmp_screen
   476 24D7 B9 9C 42		            lda driver_text_hi,y
   477 24DA 85 87		            sta tmp_screen+1
   478
   479 24DC A0 07		            ldy #7
   480 24DE			show_driv
   481 24DE B1 86		            lda (tmp_screen),y
   482 24E0 99 1E 42		            sta driver_screen,y
   483 24E3 88			            dey
   484 24E4 10 F8		            bpl show_driv
   485 24E6 60			            rts
   486
   487 				; main game vbi
   488 24E7			main_game_vbi
   489 24E7 A5 B6		            lda game_restart
   490 24E9 F0 2F		            beq no_restart
   491
   492 				; restart game
   493 				            
   494 24EB A9 00		            lda #0
   495 24ED 85 B6		            sta game_restart
   496 				            
   497 24EF 20 86 25		            jsr sound_off
   498 				            
   499 24F2 20 0B 28		            jsr reset_score
   500 24F5 20 D9 27		            jsr show_score_p1
   501 24F8 20 F2 27		            jsr show_score_p2
   502
   503 24FB A6 9C		            ldx p1_angle
   504 24FD 86 AA		            stx ball_angle_start
   505 24FF 20 2D 26		            jsr ball_to_start_position
   506 2502 20 3C 26		            jsr prepare_ball_end_position
   507
   508 2505 A9 00		            lda #0
   509 2507 85 A0		            sta mp_collision
   510 2509 85 A1		            sta in_collision
   511 250B 85 A3		            sta edge_delay
   512 250D 8D 1E D0		            sta HITCLR
   513
   514 2510 A9 02		            lda #2
   515 2512 85 B5		            sta player_turn         ; blue's turn
   516
   517 2514 20 59 24		            jsr turn_color_ball
   518 2517 4C 83 25		            jmp exit_vbi            
   519
   520 251A			no_restart
   521 251A A9 00		            lda #<display_list
   522 251C 8D 30 02		            sta SDLSTL
   523 251F A9 40		            lda #>display_list
   524 2521 8D 31 02		            sta SDLSTH
   525
   526 2524 AD 08 D0		            lda M0PL
   527 2527 85 A0		            sta mp_collision
   528 2529 AD 09 D0		            lda M1PL
   529 252C 05 A0		            ora mp_collision
   530 252E 85 A0		            sta mp_collision
   531 				 
   532 2530 20 DA 25		            jsr handle_player1
   533 2533 20 F3 25		            jsr handle_player2
   534
   535 				; handle ball
   536
   537 2536 20 D4 26		            jsr wipe_ball         
   538
   539 				; Check ball collision with bat
   540
   541 2539 A5 A4		            lda bat_collision_delay
   542 253B F0 05		            beq check_allowed
   543 253D C6 A4		            dec bat_collision_delay
   544 253F 4C 5C 25		            jmp move_one
   545
   546 2542			check_allowed
   547 2542 A5 A0		            lda mp_collision
   548 2544 F0 0F		            beq reset_in_collision
   549
   550 2546 A5 A1		            lda in_collision
   551 2548 D0 12		            bne no_first_hit
   552
   553 254A E6 A1		            inc in_collision            
   554 254C 20 69 26		            jsr bounce_bat_ball 
   555 				            
   556 254F 20 95 25		            jsr sound_bat          
   557 				            
   558 2552 4C 5C 25		            jmp move_one
   559 				            
   560 2555			reset_in_collision
   561 2555 A9 00		            lda #0
   562 2557 85 A1		            sta in_collision   
   563 2559 20 86 25		            jsr sound_off         
   564
   565 255C			move_one
   566 255C			no_first_hit
   567 255C 20 5D 29		            jsr move_current_xy
   568 255F F0 0F		            beq still_moving
   569 2561			do_reset
   570 2561 A5 AB		            lda ball_angle_end
   571 2563 85 AA		            sta ball_angle_start
   572
   573 2565 20 60 26		            jsr ball_current_to_start_position
   574 2568 20 3C 26		            jsr prepare_ball_end_position
   575
   576 256B 20 A6 25		            jsr update_score
   577 256E D0 13		            bne exit_vbi        ; end game
   578 2570			still_moving
   579 2570 A5 EB		            lda current_x+1
   580 2572 85 A6		            sta ball_current_x
   581 2574 A5 ED		            lda current_y+1
   582 2576 85 A7		            sta ball_current_y
   583
   584 2578 20 E9 26		            jsr show_ball
   585
   586 257B A9 00		            lda #0
   587 257D 8D 18 D0		            sta $d018           
   588
   589 				; anything in A to clear collisions
   590 2580 8D 1E D0		            sta HITCLR
   591
   592 2583			exit_vbi
   593 2583 4C 62 E4		            jmp $e462
   594
   595 2586			sound_off
   596 2586 A9 00		            lda #0
   597 2588 8D 01 D2		            sta AUDC1
   598 258B 8D 03 D2		            sta AUDC2
   599 258E 8D 05 D2		            sta AUDC3
   600 2591 8D 05 D2		            sta AUDC3
   601 2594 60			            rts
   602
   603 2595			sound_bat
   604 2595 A5 B5		            lda player_turn
   605 2597 0A			            asl
   606 2598 0A			            asl
   607 2599 69 40		            adc #$40
   608 259B E5 B3		            sbc angle_diff_bat
   609 259D 8D 00 D2		            sta AUDF1
   610 25A0 A9 A6		            lda #$a6
   611 25A2 8D 01 D2		            sta AUDC1
   612 25A5 60			            rts
   613
   614 				; Update score
   615 				; Score > max score, then exit A = 1, otherwise A = 0
   616
   617 25A6			update_score
   618 25A6 A5 B5		            lda player_turn
   619 25A8 C9 01		            cmp #1
   620 25AA D0 12		            bne was_player2_turn
   621 				; was player 1 turn, so player 2 gets a point
   622 25AC 20 20 28		            jsr inc_score_p2
   623 25AF 20 F2 27		            jsr show_score_p2
   624
   625 25B2 AD 15 41		            lda score_p2
   626 25B5 C9 11		            cmp #MAX_SCORE
   627 25B7 D0 17		            bne reset_edge_delay
   628
   629 25B9 A9 01		            lda #1
   630 25BB 85 8C		            sta mode_menu
   631 25BD 60			            rts
   632
   633 25BE			was_player2_turn
   634 25BE 20 14 28		            jsr inc_score_p1
   635 25C1 20 D9 27		            jsr show_score_p1
   636
   637 25C4 AD 14 41		            lda score_p1
   638 25C7 C9 11		            cmp #MAX_SCORE
   639 25C9 D0 05		            bne reset_edge_delay
   640
   641 25CB A9 01		            lda #1
   642 25CD 85 8C		            sta mode_menu
   643 25CF 60			            rts
   644
   645 25D0			reset_edge_delay
   646 25D0 A9 0A		            lda #10
   647 25D2 85 A3		            sta edge_delay
   648
   649 25D4			no_edge
   650
   651 25D4 A9 00		            lda #0      ; no end game
   652 				; anything in A to clear collisions
   653 25D6 8D 1E D0		            sta HITCLR
   654 25D9 60			            rts
   655
   656 				; player 1
   657 				; - wipe shape at previous y-position
   658 				; - move player using controller
   659 				; - set sprite positions
   660
   661 25DA			handle_player1
   662 25DA 20 41 27		            jsr wipe_p1         ; wipe previous shape player 1
   663
   664 25DD A2 00		            ldx #0              ; player 1
   665 25DF 20 0C 26		            jsr move_player
   666 				            
   667 25E2 20 0D 27		            jsr show_p1
   668
   669 25E5 A5 94		            lda player1_x
   670 25E7 18			            clc
   671 25E8 69 20		            adc #left_margin
   672 25EA 8D 00 D0		            sta HPOSP0
   673 25ED 69 08		            adc #8
   674 25EF 8D 01 D0		            sta HPOSP1
   675 25F2 60			            rts
   676
   677 				; player 2
   678 				; - wipe shape at previous y-position
   679 				; - move player using controller
   680 				; - set sprite positions
   681
   682 25F3			handle_player2
   683 25F3 20 56 27		            jsr wipe_p2         ; wipe previous shape player 2
   684
   685 25F6 A2 01		            ldx #1              ; player 2
   686 25F8 20 0C 26		            jsr move_player
   687 				                        
   688 25FB 20 27 27		            jsr show_p2
   689
   690 25FE A5 95		            lda player2_x
   691 2600 18			            clc
   692 2601 69 20		            adc #left_margin
   693 2603 8D 02 D0		            sta HPOSP2
   694 2606 69 08		            adc #8
   695 2608 8D 03 D0		            sta HPOSP3
   696 260B 60			            rts
   697
   698 				; move player 1/2
   699 				; right - clockwise, left = anti-clockwise
   700
   701 				; X = 0, player 1
   702 				; X = 1, player 2
   703
   704 				; Y = driver mode:
   705 				; 0 : stick
   706 				; 1 : paddle
   707 				; 2 : driving
   708 				; 3 : computer
   709 				            
   710 260C			move_player
   711 260C 20 6E 22		            jsr main_driver
   712
   713 260F B5 9C		            lda p1_angle,x
   714 2611 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   715 2613 49 40		            eor #64                     ; perpendicular to the circle angle
   716 2615 95 90		            sta p1_shape,x
   717
   718 2617 B4 9C		            ldy p1_angle,x
   719 2619 B9 00 2B		            lda inner_x_tab,y
   720 261C 4A			            lsr
   721 261D 69 20		            adc #inner_x_margin/2
   722 261F 95 94		            sta player1_x,x
   723 2621 B9 00 2C		            lda inner_y_tab,y
   724 2624 4A			            lsr
   725 2625 95 98		            sta player1_y,x
   726
   727 2627 B4 90		            ldy p1_shape,x
   728 2629 20 90 27		            jsr shape_to_ptr
   729
   730 262C 60			            rts
   731
   732 				; Set ball at start position
   733 				; - start angle current player
   734 				; - start position by inner table
   735 				; - collision delay set?
   736
   737 				; Set ball current position to start position
   738 				; input:
   739 				; X = angle of start position
   740 				; output:
   741 				; ball position: (ball_current_x, ball_current_y)
   742 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   743 262D			ball_to_start_position
   744 262D BD 00 2B		            lda inner_x_tab,x
   745 2630 85 A6		            sta ball_current_x
   746 2632 85 E6		            sta tmp_x1
   747 2634 BD 00 2C		            lda inner_y_tab,x
   748 2637 85 A7		            sta ball_current_y
   749 2639 85 E7		            sta tmp_y1
   750 263B 60			            rts
   751
   752 				; Prepare ball end position
   753 				; - end angle current player
   754 				; - end position by outer table
   755 				; - calculate step size x,y
   756
   757 				; Input:
   758 				; - ball_angle_start
   759 				; - ball speed
   760 				; Output:
   761 				; - ball_andle_end
   762 				; - ball start position (tmp_x1, tmp_y1)
   763 				; - ball end position (tmp_x2, tmp_y2)
   764 				; - step size (step_x, step_y) for ball movement
   765 263C			prepare_ball_end_position
   766 263C A5 AA		            lda ball_angle_start
   767 263E 49 80		            eor #128        ; other side
   768 2640 85 AB		            sta ball_angle_end
   769 2642 AA			            tax
   770 2643 20 C9 26		            jsr angle_to_end_position
   771 				                        
   772 2646 20 F0 28		            jsr init_current_xy
   773 				            
   774 				; move current a little bit            
   775 2649 20 5D 29		            jsr move_current_xy
   776 				; ignore end indicator, since we only just started
   777
   778
   779 264C A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   780 264E 85 A4		            sta bat_collision_delay
   781 2650 60			            rts
   782
   783 				; x = angle 0..255
   784 2651			outer_angle_to_start_position
   785 2651 BD 00 16		            lda outer_x_256,x
   786 2654 85 A6		            sta ball_current_x
   787 2656 85 E6		            sta tmp_x1
   788 2658 BD 00 17		            lda outer_y_256,x
   789 265B 85 A7		            sta ball_current_y
   790 265D 85 E7		            sta tmp_y1
   791 265F 60			            rts
   792
   793 2660			ball_current_to_start_position
   794 2660 A5 A6		            lda ball_current_x
   795 2662 85 E6		            sta tmp_x1
   796 2664 A5 A7		            lda ball_current_y
   797 2666 85 E7		            sta tmp_y1
   798 2668 60			            rts
   799
   800 				; Ball collides with bat
   801 				; - start ball angle = end ball angle
   802 				; - calculate diff between bat and ball end angle
   803 				; - calculate new end angle
   804 				; - Set ball at start position
   805 				; - Prepare ball end position
   806
   807 2669			bounce_bat_ball
   808 				; set new start of ball
   809 				; @todo check ball angles
   810 				; set new ball start angle (= previous end angle)
   811 2669 A5 AB		            lda ball_angle_end
   812 266B 85 AA		            sta ball_angle_start
   813 				            
   814 				; alternative?
   815 				            ;ldx ball_angle_start
   816 				            ;jsr ball_to_start_position          
   817 266D 20 60 26		            jsr ball_current_to_start_position
   818
   819 				; which player hit the ball?
   820 2670 A9 01		            lda #1
   821 2672 85 A2		            sta player_nr_hit
   822 2674 A5 A0		            lda mp_collision
   823 2676 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   824 2678 D0 04		            bne p1_hit
   825 267A A9 02		            lda #2
   826 267C 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   827 267E			p1_hit            
   828
   829 				; who's turn is it and who bounced the ball?
   830
   831 267E A5 B5		            lda player_turn
   832 2680 25 A2		            and player_nr_hit
   833 2682 F0 06		            beq no_switch_turn
   834
   835 2684 A5 B5		            lda player_turn
   836 2686 49 03		            eor #3              ; 1 => 2, 2 => 1
   837 2688 85 B5		            sta player_turn 
   838
   839 268A			no_switch_turn
   840 268A 20 59 24		            jsr turn_color_ball
   841 				            
   842 268D A6 A2		            ldx player_nr_hit
   843 268F CA			            dex                     ; index 0,1 (player = 1,2)
   844 2690 B5 9C		            lda p1_angle,x
   845
   846 				; Calculate diff between bat angle position and new ball start position
   847 2692 85 B0		            sta tmp_angle1
   848
   849 2694 A5 AA		            lda ball_angle_start
   850 2696 85 B1		            sta tmp_angle2
   851
   852 2698 20 2C 28		            jsr calc_angle_diff
   853
   854 269B 0A			            asl
   855 269C 0A			            asl
   856 269D 0A			            asl
   857 269E 85 B3		            sta angle_diff_bat
   858
   859 26A0 A5 B0		            lda tmp_angle1
   860 26A2 18			            clc
   861 26A3 65 B2		            adc add_to_angle
   862 26A5 49 80		            eor #128            ; other side
   863 26A7 85 B0		            sta tmp_angle1
   864 				            
   865 26A9 A5 B4		            lda tmp_angle_direction
   866 26AB D0 0A		            bne diff_clockwise
   867 				; diff counter clockwise
   868 26AD A5 B0		            lda tmp_angle1
   869 26AF 18			            clc
   870 26B0 65 B3		            adc angle_diff_bat
   871 26B2 85 B0		            sta tmp_angle1
   872 26B4 4C BE 26		            jmp calc_done            
   873
   874 26B7			diff_clockwise
   875 26B7 A5 B0		            lda tmp_angle1
   876 26B9 38			            sec
   877 26BA E5 B3		            sbc angle_diff_bat
   878 26BC 85 B0		            sta tmp_angle1
   879 				            
   880 				; calculation done            
   881 26BE			calc_done
   882 26BE A5 B0		            lda tmp_angle1
   883 26C0 85 AB		            sta ball_angle_end
   884 26C2 AA			            tax
   885 26C3 20 C9 26		            jsr angle_to_end_position
   886 				                        
   887 26C6 4C F0 28		            jmp init_current_xy
   888
   889 				; x = angle 0..255
   890 26C9			angle_to_end_position
   891 26C9 BD 00 16		            lda outer_x_256,x
   892 26CC 85 E8		            sta tmp_x2
   893 26CE BD 00 17		            lda outer_y_256,x
   894 26D1 85 E9		            sta tmp_y2
   895 26D3 60			            rts
   896
   897 26D4			wipe_ball
   898 26D4 A5 A7		            lda ball_current_y
   899 26D6 4A			            lsr
   900 26D7 69 06		            adc #ball_top_margin
   901 26D9 AA			            tax                 ; x = real y position on screen
   902 26DA A9 00		            lda #0
   903 26DC 9D 80 11		            sta msl_area,x
   904 26DF 9D 81 11		            sta msl_area+1,x
   905 26E2 9D 82 11		            sta msl_area+2,x
   906 26E5 9D 83 11		            sta msl_area+3,x
   907 26E8 60			            rts
   908
   909 26E9			show_ball
   910 26E9 A5 A7		            lda ball_current_y
   911 26EB 4A			            lsr
   912 26EC 69 06		            adc #ball_top_margin
   913 26EE AA			            tax                 ; x = real y position on screen
   914
   915 26EF A9 02		            lda #%00000010
   916 26F1 9D 80 11		            sta msl_area,x
   917 26F4 9D 83 11		            sta msl_area+3,x
   918 26F7 A9 07		            lda #%00000111
   919 26F9 9D 81 11		            sta msl_area+1,x
   920 26FC 9D 82 11		            sta msl_area+2,x
   921 				            
   922 26FF A5 A6		            lda ball_current_x
   923 2701 4A			            lsr
   924 2702 69 45		            adc #ball_left_margin
   925 2704 8D 05 D0		            sta HPOSM1
   926 2707 69 02		            adc #2
   927 2709 8D 04 D0		            sta HPOSM0
   928 				                        
   929 270C 60			            rts
   930 				            
   931 270D			show_p1
   932 270D A5 98		            lda player1_y
   933 270F 18			            clc
   934 2710 69 01		            adc #upper_margin
   935 2712 AA			            tax
   936
   937 2713 A0 00		            ldy #0
   938 2715			show_shape1
   939 2715 B1 84		            lda (shape_ptr),y
   940 2717 9D 00 12		            sta p0_area,x 
   941 271A C8			            iny
   942 271B B1 84		            lda (shape_ptr),y
   943 271D 9D 80 12		            sta p1_area,x
   944 2720 E8			            inx
   945 2721 C8			            iny
   946 2722 C0 20		            cpy #32
   947 2724 D0 EF		            bne show_shape1
   948 2726 60			            rts
   949
   950 2727			show_p2
   951 2727 A5 99		            lda player2_y
   952 2729 18			            clc
   953 272A 69 01		            adc #upper_margin
   954 272C AA			            tax
   955
   956 272D A0 00		            ldy #0
   957 272F			show_shape2
   958 272F B1 84		            lda (shape_ptr),y
   959 2731 9D 00 13		            sta p2_area,x 
   960 2734 C8			            iny
   961 2735 B1 84		            lda (shape_ptr),y
   962 2737 9D 80 13		            sta p3_area,x
   963 273A E8			            inx
   964 273B C8			            iny
   965 273C C0 20		            cpy #32
   966 273E D0 EF		            bne show_shape2
   967 2740 60			            rts
   968
   969 2741			wipe_p1
   970 2741 A5 98		            lda player1_y
   971 2743 18			            clc
   972 2744 69 01		            adc #upper_margin
   973 2746 AA			            tax
   974 				            
   975 2747 A0 10		            ldy #16
   976 2749 A9 00		            lda #0
   977 274B			wipe_it1            
   978 274B 9D 00 12		            sta p0_area,x 
   979 274E 9D 80 12		            sta p1_area,x
   980 2751 E8			            inx
   981 2752 88			            dey
   982 2753 D0 F6		            bne wipe_it1 
   983 2755 60			            rts
   984
   985 2756			wipe_p2
   986 2756 A5 99		            lda player2_y
   987 2758 18			            clc
   988 2759 69 01		            adc #upper_margin
   989 275B AA			            tax
   990 				            
   991 275C A0 10		            ldy #16
   992 275E A9 00		            lda #0
   993 2760			wipe_it2            
   994 2760 9D 00 13		            sta p2_area,x 
   995 2763 9D 80 13		            sta p3_area,x
   996 2766 E8			            inx
   997 2767 88			            dey
   998 2768 D0 F6		            bne wipe_it2 
   999 276A 60			            rts
  1000
  1001 276B			make_shape_index
  1002 276B A9 00		            lda #<pm_shapes
  1003 276D 85 84		            sta shape_ptr
  1004 276F A9 50		            lda #>pm_shapes
  1005 2771 85 85		            sta shape_ptr+1
  1006 				            
  1007 2773 A2 00		            ldx #0
  1008 2775			fill_pm_tab
  1009 2775 A5 84		            lda shape_ptr
  1010 2777 9D 00 60		            sta pm_shape_lo,x
  1011 277A A5 85		            lda shape_ptr+1
  1012 277C 9D 80 60		            sta pm_shape_hi,x
  1013 				            
  1014 277F A5 84		            lda shape_ptr
  1015 2781 18			            clc
  1016 2782 69 20		            adc #32
  1017 2784 85 84		            sta shape_ptr
  1018 2786 A5 85		            lda shape_ptr+1
  1019 2788 69 00		            adc #0
  1020 278A 85 85		            sta shape_ptr+1
  1021 				            
  1022 278C E8			            inx
  1023 278D 10 E6		            bpl fill_pm_tab
  1024 				            
  1025 278F 60			            rts
  1026 				            
  1027 				; there are 128 shapes, each 32 bytes
  1028
  1029 				; y = shape index
  1030 2790			shape_to_ptr
  1031 2790 B9 00 60		            lda pm_shape_lo,y
  1032 2793 85 84		            sta shape_ptr
  1033 2795 B9 80 60		            lda pm_shape_hi,y
  1034 2798 85 85		            sta shape_ptr+1
  1035
  1036 279A 60			            rts
  1037
  1038 				; turn 1024 tables into 256 bytes for ball edge lookup
  1039 279B			make_outer_256
  1040 279B A0 00		            ldy #0
  1041 279D A2 00		            ldx #0
  1042 279F			conv_256
  1043 279F BD 00 30		            lda outer_x_tab,x
  1044 27A2 99 00 16		            sta outer_x_256,y
  1045 27A5 BD 00 31		            lda outer_x_tab+$100,x
  1046 27A8 99 40 16		            sta outer_x_256+64,y
  1047 27AB BD 00 32		            lda outer_x_tab+$200,x
  1048 27AE 99 80 16		            sta outer_x_256+128,y
  1049 27B1 BD 00 33		            lda outer_x_tab+$300,x
  1050 27B4 99 C0 16		            sta outer_x_256+192,y
  1051 				            
  1052 27B7 BD 00 34		            lda outer_y_tab,x
  1053 27BA 99 00 17		            sta outer_y_256,y
  1054 27BD BD 00 35		            lda outer_y_tab+$100,x
  1055 27C0 99 40 17		            sta outer_y_256+64,y
  1056 27C3 BD 00 36		            lda outer_y_tab+$200,x
  1057 27C6 99 80 17		            sta outer_y_256+128,y
  1058 27C9 BD 00 37		            lda outer_y_tab+$300,x
  1059 27CC 99 C0 17		            sta outer_y_256+192,y
  1060
  1061 27CF E8			            inx
  1062 27D0 E8			            inx
  1063 27D1 E8			            inx
  1064 27D2 E8			            inx
  1065 27D3 C8			            iny
  1066 27D4 C0 40		            cpy #64
  1067 27D6 D0 C7		            bne conv_256            
  1068 27D8 60			            rts
  1069
  1070 27D9			show_score_p1
  1071 27D9 AD 14 41		            lda score_p1
  1072 27DC 4A			            lsr
  1073 27DD 4A			            lsr
  1074 27DE 4A			            lsr
  1075 27DF 4A			            lsr
  1076 27E0 F0 02		            beq do_space1
  1077 27E2 09 10		            ora #16
  1078 27E4			do_space1
  1079 27E4 8D F1 40		            sta score_chars_p1
  1080 27E7 AD 14 41		            lda score_p1
  1081 27EA 29 0F		            and #15
  1082 27EC 09 10		            ora #16
  1083 27EE 8D F2 40		            sta score_chars_p1+1
  1084 27F1 60			            rts
  1085
  1086 27F2			show_score_p2
  1087 27F2 AD 15 41		            lda score_p2
  1088 27F5 4A			            lsr
  1089 27F6 4A			            lsr
  1090 27F7 4A			            lsr
  1091 27F8 4A			            lsr
  1092 27F9 F0 02		            beq do_space2
  1093 27FB 09 10		            ora #16
  1094 27FD			do_space2
  1095 27FD 8D 11 41		            sta score_chars_p2
  1096 2800 AD 15 41		            lda score_p2
  1097 2803 29 0F		            and #15
  1098 2805 09 10		            ora #16
  1099 2807 8D 12 41		            sta score_chars_p2+1
  1100 280A 60			            rts
  1101 				                        
  1102 280B			reset_score
  1103 280B A9 00		            lda #0
  1104 280D 8D 14 41		            sta score_p1
  1105 2810 8D 15 41		            sta score_p2
  1106 2813 60			            rts            
  1107 				         
  1108 2814			inc_score_p1
  1109 2814 F8			            sed
  1110 2815 AD 14 41		            lda score_p1
  1111 2818 18			            clc
  1112 2819 69 01		            adc #1
  1113 281B 8D 14 41		            sta score_p1    
  1114 281E D8			            cld
  1115 281F 60			            rts
  1116
  1117 2820			inc_score_p2
  1118 2820 F8			            sed
  1119 2821 AD 15 41		            lda score_p2
  1120 2824 18			            clc
  1121 2825 69 01		            adc #1
  1122 2827 8D 15 41		            sta score_p2
  1123 282A D8			            cld
  1124 282B 60			            rts
  1125
  1126 				; calculate the difference between angle1 and angle2
  1127
  1128 				; input:
  1129 				; tmp_angle1 (0..255)
  1130 				; tmp_angle2 (0..255)
  1131
  1132 				; output:
  1133 				; tmp_angle_diff, A: difference between angle1 and angle2
  1134 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1135
  1136 282C			calc_angle_diff
  1137 282C A9 00		            lda #0
  1138 282E 85 B2		            sta add_to_angle
  1139 2830 85 B4		            sta tmp_angle_direction
  1140
  1141 				; make sure we can compare angles, otherwise add $40 to angles
  1142 2832 A5 B0		            lda tmp_angle1
  1143 2834 C9 C0		            cmp #$c0
  1144 2836 B0 06		            bcs too_large
  1145 2838 A5 B1		            lda tmp_angle2
  1146 283A C9 C0		            cmp #$c0
  1147 283C 90 12		            bcc not_too_large
  1148 283E			too_large
  1149 283E A5 B0		            lda tmp_angle1
  1150 2840 38			            sec
  1151 2841 E9 40		            sbc #$40
  1152 2843 85 B0		            sta tmp_angle1
  1153 				            
  1154 2845 A5 B1		            lda tmp_angle2
  1155 2847 38			            sec
  1156 2848 E9 40		            sbc #$40
  1157 284A 85 B1		            sta tmp_angle2
  1158 				            
  1159 284C A9 40		            lda #$40
  1160 284E 85 B2		            sta add_to_angle
  1161
  1162 2850			not_too_large
  1163 2850 A5 B1		            lda tmp_angle2
  1164 2852 C5 B0		            cmp tmp_angle1
  1165 2854 90 0A		            bcc angle2_smaller_angle1
  1166 				; ball >= play
  1167 2856 38			            sec
  1168 2857 E5 B0		            sbc tmp_angle1
  1169 2859 85 B7		            sta tmp_angle_diff
  1170 				            
  1171 285B E6 B4		            inc tmp_angle_direction
  1172 285D 4C 67 28		            jmp diff_calculated
  1173 				                        
  1174 2860			angle2_smaller_angle1
  1175 2860 A5 B0		            lda tmp_angle1
  1176 2862 38			            sec
  1177 2863 E5 B1		            sbc tmp_angle2
  1178 2865 85 B7		            sta tmp_angle_diff
  1179
  1180 2867			diff_calculated
  1181 2867 A5 B7		            lda tmp_angle_diff           
  1182 2869 60			            rts
  1183
  1184 				; X = angle
  1185 				; lookup magnitude of angle 0 to angle X
  1186 286A			angle_to_magnitude
  1187 286A BD 00 3C		            lda magnitudes_lo,x
  1188 286D 85 B8		            sta magnitude
  1189 286F BD 00 3D		            lda magnitudes_hi,x
  1190 2872 85 B9		            sta magnitude+1
  1191 2874 60			            rts
  1192
  1193 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1194 2875			calc_abs_tmp_dx
  1195 2875 A5 E8		            lda tmp_x2
  1196 2877 38			            sec
  1197 2878 E5 E6		            sbc tmp_x1
  1198 287A B0 05		            bcs x2_le
  1199 287C 49 FF		            eor #255
  1200 287E 18			            clc
  1201 287F 69 01		            adc #1
  1202 2881 85 F2		x2_le       sta tmp_dx
  1203
  1204 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1205 2883			calc_abs_tmp_dy
  1206 2883 A5 E9		            lda tmp_y2
  1207 2885 38			            sec
  1208 2886 E5 E7		            sbc tmp_y1
  1209 2888 B0 05		            bcs y2_le
  1210 288A 49 FF		            eor #255
  1211 288C 18			            clc
  1212 288D 69 01		            adc #1
  1213 288F 85 F3		y2_le       sta tmp_dy
  1214 2891 60			            rts
  1215 				            
  1216 2892			calc_dx_div_magnitude
  1217 2892 A9 00		            lda #0
  1218 2894 85 E2		            sta _dividend
  1219 2896 A5 F2		            lda tmp_dx
  1220 2898 85 E3		            sta _dividend+1
  1221
  1222 289A A5 B9		            lda magnitude+1
  1223 289C 85 E0		            sta _divisor
  1224 289E A9 00		            lda #0
  1225 28A0 85 E1		            sta _divisor+1
  1226 				            
  1227 28A2 20 CA 28		            jsr _div16
  1228
  1229 				; todo multiply result with velocity            
  1230 28A5 A5 E2		            lda _result
  1231 28A7 85 EE		            sta step_x
  1232 28A9 A5 E3		            lda _result+1
  1233 28AB 85 EF		            sta step_x+1
  1234 				            
  1235 28AD 60			            rts
  1236 				            
  1237 28AE			calc_dy_div_magnitude
  1238 28AE A9 00		            lda #0
  1239 28B0 85 E2		            sta _dividend
  1240 28B2 A5 F3		            lda tmp_dy
  1241 28B4 85 E3		            sta _dividend+1
  1242 				            
  1243 28B6 A5 B9		            lda magnitude+1
  1244 28B8 85 E0		            sta _divisor
  1245 28BA A9 00		            lda #0
  1246 28BC 85 E1		            sta _divisor+1
  1247
  1248 28BE 20 CA 28		            jsr _div16
  1249 				            
  1250 				; todo multiply result with velocity
  1251 28C1 A5 E2		            lda _result
  1252 28C3 85 F0		            sta step_y
  1253 28C5 A5 E3		            lda _result+1
  1254 28C7 85 F1		            sta step_y+1
  1255 				            
  1256 28C9 60			            rts
  1257
  1258 				; divide 16bit
  1259 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1260
  1261 				; _result = _dividend / divisor
  1262
  1263 28CA A9 00		_div16      lda #0          ;preset remainder to 0
  1264 28CC 85 E4		            sta _remainder
  1265 28CE 85 E5		            sta _remainder+1
  1266 28D0 A2 10		            ldx #16         ;repeat for each bit: ...
  1267
  1268 28D2 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1269 28D4 26 E3		            rol _dividend+1  
  1270 28D6 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1271 28D8 26 E5		            rol _remainder+1
  1272 28DA A5 E4		            lda _remainder
  1273 28DC 38			            sec
  1274 28DD E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1275 28DF A8			            tay         ;lb result -> Y, for we may need it later
  1276 28E0 A5 E5		            lda _remainder+1
  1277 28E2 E5 E1		            sbc _divisor+1
  1278 28E4 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1279
  1280 28E6 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1281 28E8 84 E4		            sty _remainder   
  1282 28EA E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1283
  1284 28EC CA			_div_skip   dex
  1285 28ED D0 E3		            bne _div_loop 
  1286 28EF 60			            rts
  1287
  1288 				; Calculations for step size
  1289
  1290 				; not optimised for speed or size
  1291 				; step should be set according to the angle
  1292
  1293 				; move in straight line (x1,y1) to (x2,y2)
  1294
  1295 				; 1. set start/end of line
  1296 				; set (tmp_x1, tmp_y1)
  1297 				; set (tmp_x2, tmp_y2)
  1298
  1299 				; 2. init. current_x, current_y
  1300 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1301 				; - calculates step sizes for x,y
  1302 				; - calculated directions for x,y
  1303 				;            jsr init_current_xy
  1304
  1305 				; 3. use current_x, current_y to plot or set a position
  1306 				;            lda current_x+1
  1307 				;            sta x_position
  1308 				;            lda current_y+1
  1309 				;            sta y_position
  1310 				;            jsr plot_pixel
  1311
  1312 				; 4. move current_x, current_y to next position on line
  1313 				; A=0 still moving
  1314 				;           move_current_xy
  1315
  1316 28F0			init_current_xy
  1317 28F0 A9 7F		            lda #$7f      ; was 128 for half pixel
  1318 28F2 85 EA		            sta current_x
  1319 28F4 85 EC		            sta current_y
  1320
  1321 28F6 A5 E6		            lda tmp_x1
  1322 28F8 85 EB		            sta current_x+1
  1323 				            
  1324 28FA A5 E7		            lda tmp_y1
  1325 28FC 85 ED		            sta current_y+1
  1326
  1327 				; dx = abs(tmp_x1 - tmp_x2)
  1328 28FE 20 75 28		            jsr calc_abs_tmp_dx
  1329
  1330 				; dy = abs(tmp_y1 - tmp_y2)
  1331 2901 20 83 28		            jsr calc_abs_tmp_dy
  1332
  1333 				; set directions
  1334 2904 A5 E6		            lda tmp_x1
  1335 2906 C5 E8		            cmp tmp_x2
  1336 2908 90 04		            bcc x1_smaller_x2
  1337 				; x1 >= x2
  1338 290A A9 01		            lda #1
  1339 290C D0 02		            bne set_dir_x
  1340 290E			x1_smaller_x2
  1341 290E A9 00		            lda #0
  1342 2910			set_dir_x
  1343 2910 85 FA		            sta dir_x
  1344 				            
  1345 2912 A5 E7		            lda tmp_y1
  1346 2914 C5 E9		            cmp tmp_y2
  1347 2916 90 04		            bcc y1_smaller_y2
  1348 				; y1 >= y2
  1349 2918 A9 01		            lda #1
  1350 291A D0 02		            bne set_dir_y
  1351 291C			y1_smaller_y2
  1352 291C A9 00		            lda #0
  1353 291E			set_dir_y
  1354 291E 85 FB		            sta dir_y
  1355
  1356 				; Calculate diff between start angle and end angle
  1357
  1358 2920 A5 AA		            lda ball_angle_start
  1359 2922 85 B0		            sta tmp_angle1
  1360 2924 A5 AB		            lda ball_angle_end
  1361 2926 85 B1		            sta tmp_angle2
  1362 				            
  1363 2928 20 2C 28		            jsr calc_angle_diff
  1364
  1365 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1366 292B A6 B7		            ldx tmp_angle_diff
  1367 292D 20 6A 28		            jsr angle_to_magnitude
  1368 				            
  1369 2930 20 92 28		            jsr calc_dx_div_magnitude
  1370 2933 20 AE 28		            jsr calc_dy_div_magnitude
  1371 				            
  1372 				; Calculate step size by ball speed
  1373 				            
  1374 				; step_x = step_x * speed
  1375 				            
  1376 2936 A5 EE		            lda step_x
  1377 2938 85 F6		            sta _multiplicand
  1378 293A A5 EF		            lda step_x+1
  1379 293C 85 F7		            sta _multiplicand+1
  1380 293E A5 AC		            lda ball_speed
  1381 2940 85 F8		            sta _multiplier
  1382
  1383 2942 20 2D 23		            jsr _multi8
  1384 				;result in .A (low byte, also in .X) and .Y (high byte)
  1385 2945 85 EE		            sta step_x
  1386 2947 84 EF		            sty step_x+1
  1387 2949			skip_step_x_hi
  1388 				            
  1389 				; step_y = step_y * speed
  1390
  1391 2949 A5 F0		            lda step_y
  1392 294B 85 F6		            sta _multiplicand
  1393 294D A5 F1		            lda step_y+1
  1394 294F 85 F7		            sta _multiplicand+1
  1395 2951 A5 AC		            lda ball_speed
  1396 2953 85 F8		            sta _multiplier
  1397
  1398 2955 20 2D 23		            jsr _multi8
  1399 				;result in .A (low byte, also in .X) and .Y (high byte)
  1400 2958 85 F0		            sta step_y
  1401 295A 84 F1		            sty step_y+1
  1402 295C			skip_step_y_hi
  1403
  1404 295C 60			            rts
  1405
  1406 				; Move ball position 
  1407 				; Add one step, until end reached
  1408 				; Input:
  1409 				; - step size (step_x, step_y)
  1410 				; - current ball position (current_x, current_y)
  1411 				; - end position (tmp_x2, tmp_y2)
  1412 				; Output:
  1413 				; A (0 = still moving, 1 = end reached)
  1414 295D			move_current_xy
  1415 295D A9 00		            lda #0
  1416 295F 85 FC		            sta line_end_x
  1417 2961 85 FD		            sta line_end_y
  1418
  1419 				; sets line end indicators here
  1420 2963 20 80 29		            jsr move_current_x
  1421 2966 20 C0 29		            jsr move_current_y
  1422
  1423 2969 A5 FC		            lda line_end_x
  1424 296B 25 FD		            and line_end_y
  1425 296D F0 10		            beq no_end_reached
  1426 				            
  1427 				; set current to (x2,y2)
  1428 296F A5 E8		            lda tmp_x2
  1429 2971 85 EB		            sta current_x+1
  1430 2973 A5 E9		            lda tmp_y2
  1431 2975 85 ED		            sta current_y+1
  1432 				            
  1433 2977 A9 00		            lda #0
  1434 2979 85 EA		            sta current_x
  1435 297B 85 EC		            sta current_y
  1436 				            
  1437 297D A9 01		            lda #1 ; end reached
  1438 				            
  1439 297F			no_end_reached  ; A = 0
  1440 297F 60			            rts
  1441
  1442 2980			move_current_x
  1443 2980 A5 FA		            lda dir_x
  1444 2982 D0 18		            bne move_current_left
  1445
  1446 				; move right, add
  1447 2984 A5 EA		            lda current_x
  1448 2986 18			            clc
  1449 2987 65 EE		            adc step_x
  1450 2989 85 EA		            sta current_x
  1451 298B A5 EB		            lda current_x+1
  1452 298D 65 EF		            adc step_x+1
  1453 298F 85 EB		            sta current_x+1
  1454
  1455 2991 A5 EB		            lda current_x+1
  1456 2993 C5 E8		            cmp tmp_x2
  1457 2995 90 04		            bcc no_line_end
  1458 2997			exact_end_x
  1459 2997 A9 01		            lda #1
  1460 2999 85 FC		            sta line_end_x 
  1461 299B			no_line_end
  1462 299B 60			            rts
  1463 				            
  1464 299C			move_current_left
  1465 299C A5 EA		            lda current_x
  1466 299E 38			            sec
  1467 299F E5 EE		            sbc step_x
  1468 29A1 90 01		            bcc clear_skip
  1469 29A3 EA			            nop
  1470 29A4			clear_skip
  1471 29A4 85 EA		            sta current_x
  1472 29A6 A5 EB		            lda current_x+1
  1473 29A8 E5 EF		            sbc step_x+1
  1474 29AA 85 EB		            sta current_x+1
  1475 29AC 90 0B		            bcc below_zero
  1476 				                        
  1477 29AE A5 E8		            lda tmp_x2
  1478 29B0 C5 EB		            cmp current_x+1
  1479 29B2 90 E7		            bcc no_line_end
  1480 29B4 A9 01		            lda #1
  1481 29B6 85 FC		            sta line_end_x            
  1482 29B8 60			            rts
  1483 29B9			below_zero            
  1484 29B9 A9 01		            lda #1
  1485 29BB 85 FC		            sta line_end_x
  1486 29BD 85 FD		            sta line_end_y
  1487 29BF 60			            rts
  1488 29C0			move_current_y
  1489 29C0 A5 FB		            lda dir_y
  1490 29C2 D0 18		            bne move_current_up
  1491
  1492 				; move down, add
  1493 29C4 A5 EC		            lda current_y
  1494 29C6 18			            clc
  1495 29C7 65 F0		            adc step_y
  1496 29C9 85 EC		            sta current_y
  1497 29CB A5 ED		            lda current_y+1
  1498 29CD 65 F1		            adc step_y+1
  1499 29CF 85 ED		            sta current_y+1
  1500 				            
  1501 29D1 A5 ED		            lda current_y+1
  1502 29D3 C5 E9		            cmp tmp_y2
  1503 29D5 90 C4		            bcc no_line_end
  1504 29D7			exact_end_y
  1505 29D7 A9 01		            lda #1
  1506 29D9 85 FD		            sta line_end_y
  1507 29DB 60			            rts
  1508
  1509 29DC			move_current_up
  1510 29DC A5 EC		            lda current_y
  1511 29DE 38			            sec
  1512 29DF E5 F0		            sbc step_y
  1513 29E1 85 EC		            sta current_y
  1514 29E3 A5 ED		            lda current_y+1
  1515 29E5 E5 F1		            sbc step_y+1
  1516 29E7 90 D0		            bcc below_zero
  1517 29E9 85 ED		            sta current_y+1
  1518 				            
  1519 29EB A5 E9		            lda tmp_y2
  1520 29ED C5 ED		            cmp current_y+1
  1521 29EF 90 AA		            bcc no_line_end
  1522 29F1 A9 01		            lda #1
  1523 29F3 85 FD		            sta line_end_y
  1524 29F5 60			            rts                            
  1525 				            
  1526 29F6			init_sprites
  1527 29F6 A2 00		            ldx #0
  1528 29F8 8A			            txa
  1529 29F9			set_p
  1530 29F9 9D 00 12		            sta p0_area,x
  1531 29FC 9D 80 12		            sta p1_area,x
  1532 29FF 9D 00 13		            sta p2_area,x
  1533 2A02 9D 80 13		            sta p3_area,x
  1534 2A05 E8			            inx
  1535 2A06 10 F1		            bpl set_p               
  1536
  1537 2A08 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1538 2A0A 8D 6F 02		            sta GPRIOR
  1539 				    
  1540 2A0D A9 10		            lda #>pm_area
  1541 2A0F 8D 07 D4		            sta PMBASE
  1542 				    
  1543 2A12 A9 03		            lda #3          ; P/M both on
  1544 2A14 8D 1D D0		            sta GRACTL
  1545 				    
  1546 2A17 A9 90		            lda #$90
  1547 2A19 8D 02 D0		            sta HPOSP2
  1548 2A1C A9 A0		            lda #$A0
  1549 2A1E 8D 03 D0		            sta HPOSP3  
  1550 2A21 60			            rts            
  1551
  1552 2A22			init_colors
  1553 2A22 A9 2A		            lda #$2a
  1554 2A24 8D C0 02		            sta PCOLR0
  1555 2A27 8D C1 02		            sta PCOLR1
  1556 				            
  1557 2A2A A9 7A		            lda #$7a
  1558 2A2C 8D C2 02		            sta PCOLR2
  1559 2A2F 8D C3 02		            sta PCOLR3
  1560 				            
  1561 2A32 A9 00		            lda #0
  1562 2A34 8D C6 02		            sta COLOR2
  1563 2A37 A9 08		            lda #8
  1564 2A39 8D C5 02		            sta COLOR1
  1565 2A3C 60			            rts
  1566
  1567 2A3D			previous_consol
  1568 2A3D 00			            dta 0
  1569
  1570 2A3E			current_level_index
  1571 2A3E 00			            dta 0
  1572 = 0004			NR_OF_LEVELS = 4
  1573 = 0000			INIT_LEVEL_INDEX = 0
  1574 2A3F			level_speeds
  1575 2A3F 02 04 06 08		            dta 2,4,6,8
  1576 				            
  1577 				; X = level (0..NR_OF_LEVELS)
  1578 2A43			set_level_ball_speed
  1579 2A43 BD 3F 2A		            lda level_speeds,x
  1580 2A46 85 AC		            sta ball_speed
  1581 2A48 8A			            txa
  1582 2A49 18			            clc
  1583 2A4A 69 01		            adc #1
  1584 2A4C 09 10		            ora #16
  1585 2A4E 8D 48 42		            sta level_char
  1586 2A51 60			            rts
  1587 				            
  1588 2A52			increase_level
  1589 2A52 EE 3E 2A		            inc current_level_index
  1590 2A55 AD 3E 2A		            lda current_level_index
  1591 2A58 C9 04		            cmp #NR_OF_LEVELS
  1592 2A5A D0 05		            bne ok_level
  1593 2A5C A9 00		            lda #INIT_LEVEL_INDEX
  1594 2A5E 8D 3E 2A		            sta current_level_index
  1595 2A61			ok_level           
  1596 2A61 60			            rts
  1597 				            
  1598 2A62			            .align $100
  1599 2B00			inner_x_tab
  1600 = 2C00			inner_y_tab = *+$100
  1601 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1602 				      
  1603 2D00			            .align $400            
  1604 				; outer circle 1024 plot points on 360 degrees
  1605 3000			outer_x_tab
  1606 = 3400			outer_y_tab = *+1024
  1607 3000-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1608
  1609 3800			            .align $400
  1610 3800			rotor_font
  1611 3800 00 00 00 00 00 00 +             ins 'font\rotor.fnt'
  1612 				           
  1613 3C00			            .align $400
  1614 				; table of magnitudes (length) between angle 0 and 0..255
  1615 				; fixed point 8.8 : hi.lo
  1616 3C00			magnitudes_lo
  1617 = 3D00			magnitudes_hi = *+256
  1618 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1619
  1620 3E00			            .align $400
  1621 4000			display_list
  1622 4000-41CC> 42		            dta $42
  1623 4001 EC 40		            dta a(score_line)
  1624
  1625 				; 102 x 40 = 4080 bytes            
  1626 4003 4F			            dta $4f
  1627 4004			dl_screen_ptr1
  1628 4004 00 70		            dta a(screen_mem1)
  1629 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1630 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1631 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1632 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1633
  1634 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1635 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1636 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1637 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1638
  1639 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1640 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1641 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1642 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1643
  1644 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1645
  1646 				; 102 x 40 = 4080 bytes
  1647 406B 4F			            dta $4f
  1648 406C			dl_screen_ptr2
  1649 406C 00 80		            dta a(screen_mem2)
  1650 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1651 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1652 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1653 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1654
  1655 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1656 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1657 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1658 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1659
  1660 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1661 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1662 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1663 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1664
  1665 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1666
  1667 				; 20 x 40 = 800
  1668 40D3 4F			            dta $4f
  1669 40D4 00 90		            dta a(screen_mem3)       
  1670 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1671 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1672 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1673 				            
  1674 40E9 41			            dta $41
  1675 40EA 00 40		            dta a(display_list)
  1676
  1677 40EC			score_line  
  1678 40EC 00 32 25 24 00	            dta d' RED '
  1679 40F1			score_chars_p1
  1680 40F1 0D 0D 00		            dta d'-- '
  1681
  1682 40F4 00 00 00 00 00 00 +             dta d'          '
  1683 40FE 00 00 00 00 00 00 +             dta d'          '
  1684
  1685 4108 00 00 00 00 22 2C +             dta d'    BLUE '
  1686 4111			score_chars_p2
  1687 4111 0D 0D 00		            dta d'-- '
  1688
  1689 4114 00			score_p1    dta 0
  1690 4115 00			score_p2    dta 0
  1691
  1692 				            ;.align $400
  1693 				            
  1694 4116			menu_dl
  1695 4116 42			            dta $42
  1696 4117 EC 40		            dta a(score_line)
  1697 				            
  1698 4119 4F			            dta $4f
  1699 411A 00 70		            dta a(screen_mem1)
  1700 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1701 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1702 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1703 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1704
  1705 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1706 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1707 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1708 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1709
  1710 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1711 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1712
  1713 				; 64 scanlines
  1714 416B 30			            dta $30
  1715 416C 47			            dta $47
  1716 416D 00 42		            dta a(menu_screen)
  1717 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1718
  1719 				; 60 lines
  1720 4176 4F			            dta $4f
  1721 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1722 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1723 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1724 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1725 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1726
  1727 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1728 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1729 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1730 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1731
  1732 				; 20 lines            
  1733 41B4 4F			            dta $4f
  1734 41B5 00 90		            dta a(screen_mem3)
  1735 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1736 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1737 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1738 				           
  1739 41CA 41			            dta $41
  1740 41CB 16 41		            dta a(menu_dl)
  1741
  1742 41CD			            .align $100
  1743 4200			menu_screen
  1744 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1745
  1746 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1747 421E			driver_screen
  1748 421E 00 00 00 00 00 00 +             dta d'            '
  1749 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1750 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1751 4248			level_char            
  1752 4248 11 00 00 00 00 00 +             dta d'1       '
  1753 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1754 4278			stick_text
  1755 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1756 4280			paddle_text
  1757 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1758 4288			driving_text
  1759 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1760 4290			computer_text
  1761 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1762
  1763 4298			driver_text_lo
  1764 4298 78			            dta <stick_text
  1765 4299 80			            dta <paddle_text
  1766 429A 88			            dta <driving_text
  1767 429B 90			            dta <computer_text
  1768 				            
  1769 429C			driver_text_hi
  1770 429C 42			            dta >stick_text
  1771 429D 42			            dta >paddle_text
  1772 429E 42			            dta >driving_text
  1773 429F 42			            dta >computer_text
  1774
  1775 42A0			            .align $1000
  1776
  1777 				; 128 x 32 bytes shapes            
  1778 5000			pm_shapes
  1779 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1780
  1781 = 6000			pm_shape_lo .ds 128
  1782 = 6080			pm_shape_hi .ds 128
  1783
  1784 6100			            .align $1000
  1785 = 7000			screen_mem1 = * ; $9000     ; 4K
  1786 				;            org screen_mem1
  1787 7000-7FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1788
  1789 7FF0			            .align $1000                        
  1790 = 8000			screen_mem2 = * ; $a000     ; 4K
  1791 				;            org screen_mem2
  1792 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1793
  1794 8FF0			            .align $1000                        
  1795 = 9000			screen_mem3 = * ; $b000     ; 1K
  1796 				;            org screen_mem3
  1797 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1798
  1799 02E0-02E1> DC 22		            run main
