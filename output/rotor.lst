mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-09-26
     4 				; Version 2.2.0
     5 				; For cartridge release
     6
     7 				; Casual game for two players
     8
     9 				; Main idea:
    10 				; - two players ONE and TWO move in a circle
    11 				; - the ball gets color of player to indicate who should catch it
    12 				; - when the ball hits the circle, the other player gets a point
    13
    14 				; TODO
    15 				; - new score system; ball hit = point?
    16
    17 				; Optional for a later version:
    18 				; - add support for driving controllers
    19
    20 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    21
    22 				; color scheme
    23 = 0050			BASE_COLOR_P1   = $50   ; purple
    24 = 00B0			BASE_COLOR_P2   = $b0   ; green
    25
    26 = 000E			HEADER_FG_COLOR = 14
    27 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    28 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    29
    30 				; must be in decimal format, so $11 is 11
    31 = 0011			MAX_SCORE   = $11
    32
    33 = 0C00			pm_area     = $0c00
    34 = 0D80			msl_area    = pm_area+$180
    35 = 0E00			p0_area     = pm_area+$200
    36 = 0E80			p1_area     = pm_area+$280
    37 = 0F00			p2_area     = pm_area+$300
    38 = 0F80			p3_area     = pm_area+$380
    39
    40 				; outer tables 256 for 360 degrees
    41 = 1000			outer_x_256     = $1000
    42 = 1100			outer_y_256     = $1100
    43
    44 = 1200			screen_y_lo     = $1200
    45 = 1300			screen_y_hi     = $1300
    46
    47 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    48 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    49
    50 = 0140			WIDTH           = 320
    51 = 00C0			HEIGHT          = 192
    52
    53 = 0028			SCREEN_WIDTH    = 40
    54
    55 = 0030			outer_x_margin  = 48 ;47-32
    56 = 0040			inner_x_margin  = 64
    57
    58 = 00A0			circle_center_x = WIDTH/2
    59 = 0060			circle_center_y = HEIGHT/2
    60
    61 = 0006			ball_top_margin     = 6
    62 = 0045			ball_left_margin    = 64+5
    63
    64 				; pm upper margin
    65 = 0001			upper_margin    = 1
    66 = 0020			left_margin     = 32
    67
    68 = 0080			music_toggle    = $80
    69
    70 = 0081			shadow_HPOSP0   = $81
    71 = 0082			shadow_HPOSP1   = $82
    72
    73 = 0083			winner_color    = $83
    74
    75 = 0084			shape_ptr       = $84
    76 = 0086			tmp_screen      = $86
    77
    78 = 0088			stick_slow_speed = $88
    79 = 0089			stick_fast_speed = $89
    80
    81 = 008A			player_mode     = $8a
    82 = 0000			MODE_2_PLAYER   = 0
    83 = 0001			MODE_1_PLAYER   = 1
    84 = 0002			MODE_DEMO       = 2
    85 = 0003			NR_OF_PLAYER_MODES = 3
    86 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00AD			edge_collision      = $ad
   126 = 00AE			edge_hit_count      = $ae
   127
   128 = 00B0			tmp_angle1          = $b0
   129 = 00B1			tmp_angle2          = $b1
   130 = 00B2			add_to_angle        = $b2
   131 = 00B3			angle_diff_bat      = $b3
   132 = 00B4			tmp_angle_direction = $b4
   133 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   134 = 00B6			game_restart        = $b6
   135 = 00B7			tmp_angle_diff      = $b7
   136 = 00B8			magnitude           = $b8       ; word
   137
   138 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   139 = 00BA			cpu1_angle_end      = cpu_angle_end
   140 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   141
   142 				; $c0 - $df free for music
   143
   144 = 00E0			_divisor    = $e0   ; word
   145 = 00E2			_dividend   = $e2   ; word
   146 = 00E4			_remainder  = $e4   ; word
   147 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   148
   149 = 00E6			tmp_x1      = $e6   ; byte
   150 = 00E7			tmp_y1      = $e7   ; byte
   151 = 00E8			tmp_x2      = $e8   ; byte
   152 = 00E9			tmp_y2      = $e9   ; byte
   153
   154 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   155 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   156
   157 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   158 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   159
   160 = 00F2			tmp_dx      = $f2  ; byte
   161 = 00F3			tmp_dy      = $f3  ; byte
   162
   163 = 00F6			_multiplicand   = $f6   ; word
   164 = 00F8			_multiplier     = $f8   ; byte
   165
   166 				; direction:
   167 				; 0 : x1<x2 or y1<y2 = add
   168 				; 1 ; x1>=y2 or y1>=y2 = subtract
   169
   170 = 00FA			dir_x       = $fa  ; byte
   171 = 00FB			dir_y       = $fb  ; byte
   172
   173 = 00FC			line_end_x  = $fc  ; byte
   174 = 00FD			line_end_y  = $fd  ; byte
   175
   176 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   177
   178 				; real data is loaded at $2000 ($1700+$900)
   179 BE10			            org $1700
   180 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   181
   182 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3F1B> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 F6			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 31		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 16		            bne no_left
   139
   140 3493 B5 9C		            lda p1_angle,x
   141 3495 38			            sec
   142 3496 E5 88		            sbc stick_slow_speed
   143 3498 95 9C		            sta p1_angle,x
   144
   145 349A BD 84 02		            lda STRIG0,x
   146 349D D0 07		            bne no_fast
   147
   148 349F B5 9C		            lda p1_angle,x
   149 34A1 38			            sec
   150 34A2 E5 89		            sbc stick_fast_speed
   151 34A4 95 9C		            sta p1_angle,x
   152 34A6			no_fast
   153 				            
   154 34A6 4C C0 34		            jmp move_done
   155 34A9 C9 07		no_left     cmp #7
   156 34AB D0 13		            bne move_done
   157
   158 34AD B5 9C		            lda p1_angle,x
   159 34AF 18			            clc
   160 34B0 65 88		            adc stick_slow_speed
   161 34B2 95 9C		            sta p1_angle,x
   162
   163 34B4 BD 84 02		            lda STRIG0,x
   164 34B7 D0 07		            bne no_fast_right
   165
   166 34B9 B5 9C		            lda p1_angle,x
   167 34BB 18			            clc
   168 34BC 65 89		            adc stick_fast_speed
   169 34BE 95 9C		            sta p1_angle,x
   170 34C0			no_fast_right
   171 34C0			move_done
   172 34C0 60			            rts
   173
   174 				; check if player1 button is pressed
   175 				; A=0 not pressed, 1=pressed
   176
   177 34C1			is_player1_button_pressed
   178 34C1 AD BE 32		            lda driver_mode
   179 34C4 C9 01		            cmp #1
   180 34C6 F0 07		            beq check_player1_paddle_fire
   181
   182 34C8 AD 84 02		            lda STRIG0
   183 34CB F0 1C		            beq fire_pressed
   184 34CD D0 24		            bne fire_not_pressed
   185
   186 34CF			check_player1_paddle_fire
   187 34CF AD 78 02		            lda STICK0
   188 34D2 C9 0B		            cmp #11
   189 34D4 F0 13		            beq fire_pressed
   190 34D6 D0 1B		            bne fire_not_pressed
   191
   192 				; X=port number to check (paddle uses only port 1)
   193 				; check fire button (paddle uses left/right stick as fire button)
   194 				; A=0 not pressed, 1=pressed
   195
   196 34D8			is_both_buttons
   197 34D8 AD BE 32		            lda driver_mode
   198 34DB C9 01		            cmp #1
   199 34DD F0 0D		            beq check_paddle_fire
   200
   201 34DF AD 84 02		            lda STRIG0
   202 34E2 D0 0F		            bne fire_not_pressed
   203 34E4 AD 85 02		            lda STRIG1
   204 34E7 D0 0A		            bne fire_not_pressed
   205
   206 34E9			fire_pressed
   207 34E9 A9 01		            lda #1
   208 34EB 60			            rts
   209
   210 34EC			check_paddle_fire
   211 34EC AD 78 02		            lda STICK0
   212 34EF C9 03		            cmp #3
   213 34F1 F0 F6		            beq fire_pressed
   214
   215 34F3			fire_not_pressed
   216 34F3 A9 00		            lda #0
   217 34F5 60			            rts
   218
   219 				; paddle driver
   220 				            
   221 34F6			driver_paddle            
   222 34F6 BD 70 02		            lda PADDL0,x
   223 34F9 A8			            tay
   224 34FA B9 00 33		            lda paddle_to_256,y
   225 34FD 5D 03 35		            eor paddle_offsets,x
   226 3500 95 9C		            sta p1_angle,x
   227 3502 60			            rts
   228
   229 3503			paddle_offsets
   230 3503 00 00		            dta 0,0
   183
   184 3505			reset_pressed
   185 3505 20 00 9C		            jsr intro_main
   186
   187 3508			main
   188 3508 A9 FF		            lda #255
   189 350A 8D FC 02		            sta 764
   190
   191 				; for fast loaders, wait 10 seconds or continue with spacebar
   192 350D			wait_a_sec
   193 350D AD FC 02		            lda 764
   194 3510 C9 FF		            cmp #255
   195 3512 D0 06		            bne any_key_pressed
   196
   197 3514 A5 13		            lda 19
   198 3516 C9 02		            cmp #2
   199 3518 90 F3		            bcc wait_a_sec
   200
   201 351A			any_key_pressed
   202 351A A9 FF		            lda #255
   203 351C 8D FC 02		            sta 764
   204
   205 				; start the game!
   206 				 
   207 351F A9 00		            lda #0
   208 3521 8D 2F 02		            sta SDMCTL
   209 3524 85 B6		            sta game_restart
   210 3526 85 8F		            sta end_screen_delay
   211 3528 85 83		            sta winner_color
   212
   213 352A A9 80		            lda #128
   214 352C 85 8D		            sta volume_hit_bat
   215 352E 85 8E		            sta volume_hit_edge
   216 3530 85 80		            sta music_toggle        ; 128 = on, 0 = off
   217
   218 3532 A9 01		            lda #1
   219 3534 8D 44 02		            sta 580 ; coldstart
   220
   221 				;            lda #1
   222 				;            sta 9   ; boot
   223
   224 				;            lda #<reset_pressed
   225 				;            sta $0a
   226 				;            lda #>reset_pressed
   227 				;            sta $0b
   228
   229 3537 20 01 34		            jsr driver_init
   230
   231 353A 20 EA 3B		            jsr make_shape_index
   232
   233 353D 20 1A 3C		            jsr make_outer_256
   234
   235 3540 20 6E 36		            jsr make_screen_y_tab
   236
   237 3543 20 B9 36		            jsr invert_backdrop
   238 3546 A9 60		            lda #$60
   239 3548 8D B9 36		            sta invert_backdrop ; dirty hack to fix warm reset :P
   240
   241 354B 20 8A 3C		            jsr reset_score
   242 354E 20 58 3C		            jsr show_score_p1
   243 3551 20 71 3C		            jsr show_score_p2
   244
   245 3554 20 75 3E		            jsr init_sprites
   246 3557 20 A1 3E		            jsr init_colors
   247
   248 				; init. game vars
   249 355A A2 00		            ldx #INIT_LEVEL_INDEX
   250 355C 8E C1 3E		            stx current_level_index
   251 355F 20 D7 3E		            jsr set_level_ball_speed
   252
   253 3562 A9 00		            lda #INIT_PLAYER_MODE
   254 3564 85 8A		            sta player_mode
   255 3566 20 0D 3F		            jsr show_player_mode
   256
   257 3569 A9 01		            lda #STATE_IN_MENU
   258 356B 85 8C		            sta game_state           ; start with menu
   259
   260 356D 20 6E 31		            jsr music_init
   261
   262 3570 20 FE 36		            jsr show_menu_options
   263
   264 3573 A9 00		            lda #<display_list
   265 3575 8D 30 02		            sta SDLSTL
   266 3578 A9 50		            lda #>display_list
   267 357A 8D 31 02		            sta SDLSTH
   268
   269 				; start vbi
   270
   271 357D A9 C0		            lda #$c0
   272 357F 8D 0E D4		            sta NMIEN
   273
   274 3582 A9 07		            lda #7          ; sets VVBLKI
   275 3584 A0 50		            ldy #<vbi
   276 3586 A2 37		            ldx #>vbi
   277 3588 20 5C E4		            jsr $e45c       ; SETVBV
   278
   279 				; we're just sitting here while VBI does all the work :)
   280 358B 4C 8B 35		loop        jmp loop
   281
   282 				;------------------------
   283 				; 8bit * 8bit = 16bit multiply
   284 				; By White Flame
   285 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   286 				; uses extra zp var _multiplicand+1
   287
   288 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   289 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   290
   291 				; In this version, both inputs must be unsigned
   292 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   293
   294 358E			_multi8
   295 358E A9 00		            lda #$00
   296 3590 A8			            tay
   297 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   298 3591 F0 0D		            beq _enter_loop
   299 3593			_do_add
   300 3593 18			            clc
   301 3594 65 F6		            adc _multiplicand
   302 3596 AA			            tax
   303
   304 3597 98			            tya
   305 3598 65 F7		            adc _multiplicand+1
   306 359A A8			            tay
   307 359B 8A			            txa
   308 359C			_mul_loop
   309 359C 06 F6		            asl _multiplicand
   310 359E 26 F7		            rol _multiplicand+1
   311 35A0			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   312 35A0 46 F8		            lsr _multiplier
   313 35A2 B0 EF		            bcs _do_add
   314 35A4 D0 F6		            bne _mul_loop
   315 35A6 60			            rts
   316
   317 				; reset PM0/1 to playfield settings
   318 35A7			dli_header
   319 35A7 48			            pha
   320
   321 35A8 A9 08		            lda #8
   322 35AA 8D 17 D0		            sta COLPF1
   323
   324 35AD A5 81		            lda shadow_HPOSP0
   325 35AF 8D 00 D0		            sta HPOSP0
   326 35B2 A5 82		            lda shadow_HPOSP1
   327 35B4 8D 01 D0		            sta HPOSP1
   328
   329 35B7 A9 00		            lda #0
   330 35B9 8D 08 D0		            sta SIZEP0
   331 35BC 8D 09 D0		            sta SIZEP1
   332
   333 35BF A9 5A		            lda #BASE_COLOR_P1+10
   334 35C1 8D 12 D0		            sta COLPM0
   335 35C4 A9 BA		            lda #BASE_COLOR_P2+10
   336 35C6 8D 13 D0		            sta COLPM1
   337
   338 35C9 A9 D5		            lda #<dli_menu
   339 35CB 8D 00 02		            sta VDSLST
   340 35CE A9 35		            lda #>dli_menu
   341 35D0 8D 01 02		            sta VDSLST+1
   342
   343 35D3 68			            pla
   344 35D4 40			            rti
   345
   346 35D5			dli_menu
   347 35D5 48			            pha
   348 35D6 8A			            txa
   349 35D7 48			            pha
   350
   351 35D8 A9 0E		            lda #$0e
   352 35DA 8D 0A D4		            sta WSYNC
   353 35DD 8D 1A D0		            sta COLBK
   354 35E0 A9 0A		            lda #$0a
   355 35E2 8D 0A D4		            sta WSYNC
   356 35E5 8D 1A D0		            sta COLBK
   357 35E8 A9 00		            lda #0
   358 35EA 8D 0A D4		            sta WSYNC
   359 35ED 8D 1A D0		            sta COLBK
   360
   361 35F0 A2 00		            ldx #0
   362 35F2			color_it1
   363 35F2 BD 36 36		            lda menu_colpf2,x
   364 35F5 8D 0A D4		            sta WSYNC
   365 35F8 8D 18 D0		            sta COLPF2
   366 35FB E8			            inx
   367 35FC E0 12		            cpx #18
   368 35FE D0 F2		            bne color_it1
   369
   370 3600 A2 00		            ldx #0
   371 3602			color_it2
   372 3602 BD 48 36		            lda menu_colpf0,x
   373 3605 05 83		            ora winner_color
   374 3607 8D 0A D4		            sta WSYNC
   375 360A 8D 16 D0		            sta COLPF0
   376 360D E8			            inx
   377 360E E0 26		            cpx #38
   378 3610 D0 F0		            bne color_it2
   379
   380 3612 A9 00		            lda #0
   381 3614 8D 0A D4		            sta WSYNC
   382 3617 8D 1A D0		            sta COLBK
   383 361A A9 0A		            lda #$0a
   384 361C 8D 0A D4		            sta WSYNC
   385 361F 8D 1A D0		            sta COLBK
   386 3622 A9 0E		            lda #$0e
   387 3624 8D 0A D4		            sta WSYNC
   388 3627 8D 1A D0		            sta COLBK
   389 362A A9 00		            lda #0
   390 362C 8D 0A D4		            sta WSYNC
   391 362F 8D 1A D0		            sta COLBK
   392 				            
   393 3632 68			            pla
   394 3633 AA			            tax
   395 3634 68			            pla
   396 3635 40			            rti
   397
   398 3636			menu_colpf2
   399 3636 50			            dta BASE_COLOR_P1
   400 3637 50			            dta BASE_COLOR_P1
   401 3638 50			            dta BASE_COLOR_P1
   402 3639 50			            dta BASE_COLOR_P1
   403 363A 50			            dta BASE_COLOR_P1
   404 363B 50			            dta BASE_COLOR_P1
   405 363C 50			            dta BASE_COLOR_P1
   406 363D 50			            dta BASE_COLOR_P1
   407
   408 363E B0			            dta BASE_COLOR_P2
   409 363F B0			            dta BASE_COLOR_P2
   410 3640 B0			            dta BASE_COLOR_P2
   411 3641 B0			            dta BASE_COLOR_P2
   412 3642 B0			            dta BASE_COLOR_P2
   413 3643 B0			            dta BASE_COLOR_P2
   414 3644 B0			            dta BASE_COLOR_P2
   415 3645 B0			            dta BASE_COLOR_P2
   416
   417 3646 00 00		            dta 0,0
   418
   419 3648			menu_colpf0
   420 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   421 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   422 3648 00 00		            dta 0,0
   423 364A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   424 3652 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   425 365A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   426 3662 00 00 00 00		            dta 0,0,0,0
   427 3666 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   428
   429 				; make pointers from y-position to screen memory
   430 				; screen memory is 3 blocks
   431 				; screen_mem1 : 102 lines, 4080 bytes
   432 				; screen_mem2 : 102 lines, 4080 bytes
   433 				; screen_mem3 :  20 lines,  800 bytes
   434
   435 366E			make_screen_y_tab
   436 366E A9 00		            lda #<screen_mem1
   437 3670 85 86		            sta tmp_screen
   438 3672 A9 70		            lda #>screen_mem1
   439 3674 85 87		            sta tmp_screen+1
   440
   441 3676 A2 00		            ldx #0
   442 3678			fill_y_tab1
   443 3678 20 A1 36		            jsr store_y_line
   444 367B E8			            inx
   445 367C E0 66		            cpx #102
   446 367E D0 F8		            bne fill_y_tab1
   447
   448 				; x = 102
   449 3680 A9 00		            lda #<screen_mem2
   450 3682 85 86		            sta tmp_screen
   451 3684 A9 80		            lda #>screen_mem2
   452 3686 85 87		            sta tmp_screen+1
   453
   454 3688			fill_y_tab2
   455 3688 20 A1 36		            jsr store_y_line
   456 368B E8			            inx
   457 368C E0 CC		            cpx #204
   458 368E D0 F8		            bne fill_y_tab2
   459
   460 3690 A9 00		            lda #<screen_mem3
   461 3692 85 86		            sta tmp_screen
   462 3694 A9 90		            lda #>screen_mem3
   463 3696 85 87		            sta tmp_screen+1
   464
   465 				; x = 204
   466 3698			fill_y_tab3
   467 3698 20 A1 36		            jsr store_y_line
   468 369B E8			            inx
   469 369C E0 E0		            cpx #224
   470 369E D0 F8		            bne fill_y_tab3
   471 36A0 60			            rts
   472
   473 36A1			store_y_line
   474 36A1 A5 86		            lda tmp_screen
   475 36A3 9D 00 12		            sta screen_y_lo,x
   476 36A6 A5 87		            lda tmp_screen+1
   477 36A8 9D 00 13		            sta screen_y_hi,x
   478 				            
   479 36AB A5 86		            lda tmp_screen
   480 36AD 18			            clc
   481 36AE 69 28		            adc #SCREEN_WIDTH
   482 36B0 85 86		            sta tmp_screen
   483 36B2 A5 87		            lda tmp_screen+1
   484 36B4 69 00		            adc #0
   485 36B6 85 87		            sta tmp_screen+1
   486 36B8 60			            rts
   487
   488 				; @todo invert backdrop image
   489 				; now we have to do it here :P
   490 36B9			invert_backdrop
   491 36B9 A9 00		            lda #<screen_mem1
   492 36BB 85 86		            sta tmp_screen
   493 36BD A9 70		            lda #>screen_mem1
   494 36BF 85 87		            sta tmp_screen+1
   495 				            
   496 36C1 A2 10		            ldx #16     ; 16 pages = 4K
   497 36C3 20 E1 36		            jsr do_x_pages
   498 				           
   499 36C6 A9 00		            lda #<screen_mem2
   500 36C8 85 86		            sta tmp_screen
   501 36CA A9 80		            lda #>screen_mem2
   502 36CC 85 87		            sta tmp_screen+1
   503 				            
   504 36CE A2 10		            ldx #16     ; 16 pages = 4K
   505 36D0 20 E1 36		            jsr do_x_pages
   506
   507 36D3 A9 00		            lda #<screen_mem3
   508 36D5 85 86		            sta tmp_screen
   509 36D7 A9 90		            lda #>screen_mem3
   510 36D9 85 87		            sta tmp_screen+1
   511 				            
   512 36DB A2 04		            ldx #4     ; 4 pages = 1K
   513 36DD 20 E1 36		            jsr do_x_pages
   514 36E0 60			            rts
   515
   516 				; invert x pages, starting from tmp_screen
   517
   518 36E1			do_x_pages
   519 36E1 A0 00		            ldy #0
   520 36E3			do_page
   521 36E3 B1 86		            lda (tmp_screen),y
   522 36E5 49 FF		            eor #$ff
   523 36E7 91 86		            sta (tmp_screen),y
   524 36E9 C8			            iny
   525 36EA D0 F7		            bne do_page 
   526
   527 36EC E6 87		            inc tmp_screen+1
   528 36EE CA			            dex
   529 36EF D0 F2		            bne do_page
   530 36F1 60			            rts
   531
   532 36F2			turn_color_ball
   533 36F2 A6 B5		            ldx player_turn
   534 36F4 BD FB 36		            lda color_turn,x
   535 36F7 8D C7 02		            sta COLOR3
   536 36FA 60			            rts
   537 				            
   538 36FB 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   539
   540 36FE			show_menu_options
   541 36FE A9 50		            lda #<controller_text
   542 3700 8D F6 50		            sta menu_line1_ptr
   543 3703 A9 52		            lda #>controller_text
   544 3705 8D F7 50		            sta menu_line1_ptr+1
   545
   546 3708 20 0D 3F		            jsr show_player_mode
   547
   548 370B A9 A0		            lda #<level_text
   549 370D 8D FC 50		            sta menu_line3_ptr
   550 3710 A9 52		            lda #>level_text
   551 3712 8D FD 50		            sta menu_line3_ptr+1
   552
   553 3715 A9 00		            lda #0
   554 3717 85 83		            sta winner_color
   555 3719 60			            rts
   556
   557 371A			show_end_screen
   558 371A A9 FC		            lda #<empty_text
   559 371C 8D F6 50		            sta menu_line1_ptr
   560 371F 8D FC 50		            sta menu_line3_ptr
   561 3722 A9 52		            lda #>empty_text
   562 3724 8D F7 50		            sta menu_line1_ptr+1
   563 3727 8D FD 50		            sta menu_line3_ptr+1
   564
   565 372A AD 2E 51		            lda score_p1
   566 372D CD 2F 51		            cmp score_p2
   567 3730 90 0F		            bcc player_2_wins
   568
   569 3732 A9 10		            lda #<winner_one_text
   570 3734 8D F9 50		            sta menu_line2_ptr
   571 3737 A9 53		            lda #>winner_one_text
   572 3739 8D FA 50		            sta menu_line2_ptr+1
   573
   574 373C A9 50		            lda #BASE_COLOR_P1
   575 373E 85 83		            sta winner_color
   576 3740 60			            rts
   577
   578 3741			player_2_wins
   579 3741 A9 24		            lda #<winner_two_text
   580 3743 8D F9 50		            sta menu_line2_ptr
   581 3746 A9 53		            lda #>winner_two_text
   582 3748 8D FA 50		            sta menu_line2_ptr+1
   583
   584 374B A9 B0		            lda #BASE_COLOR_P2
   585 374D 85 83		            sta winner_color
   586
   587 374F 60			            rts
   588
   589 				; A, X, Y are already saved by the OS
   590 3750			vbi
   591 3750 20 DC 31		            jsr copy_shadow
   592
   593 3753 A5 80		            lda music_toggle
   594 3755 F0 03		            beq skip_music
   595 3757 20 97 31		            jsr play_song
   596 375A			skip_music
   597
   598 				; toggle music on/off with spacebar
   599 375A AD FC 02		            lda 764
   600 375D C9 21		            cmp #$21
   601 375F D0 10		            bne no_spacebar
   602 3761 A5 80		            lda music_toggle
   603 3763 49 80		            eor #128
   604 3765 85 80		            sta music_toggle
   605 3767 D0 03		            bne music_turned_on
   606 3769 20 60 32		            jsr music_off
   607
   608 376C			music_turned_on
   609 376C A9 FF		            lda #255
   610 376E 8D FC 02		            sta 764
   611
   612 3771			no_spacebar
   613 3771 20 77 39		            jsr play_sound_bat
   614 3774 20 95 39		            jsr play_sound_edge
   615
   616 3777 A9 A7		            lda #<dli_header
   617 3779 8D 00 02		            sta VDSLST
   618 377C A9 35		            lda #>dli_header
   619 377E 8D 01 02		            sta VDSLST+1
   620
   621 3781 A9 2E		            lda #%00101110  ; enable P/M DMA
   622 3783 8D 2F 02		            sta SDMCTL
   623 3786 A9 00		            lda #0
   624 3788 85 4D		            sta 77      ; attract off
   625 378A A9 98		            lda #>rotor_font
   626 378C 8D F4 02		            sta 756
   627
   628 378F A9 30		            lda #$30
   629 3791 8D 00 D0		            sta HPOSP0
   630 3794 A9 B0		            lda #$b0
   631 3796 8D 01 D0		            sta HPOSP1
   632
   633 				; menu switching thingy
   634
   635 3799 AD 1F D0		            lda CONSOL
   636 379C C9 03		            cmp #3  ; option button
   637 379E D0 1B		            bne no_option_pressed
   638 37A0 A5 8C		            lda game_state
   639 37A2 C9 01		            cmp #STATE_IN_MENU
   640 37A4 F0 2F		            beq check_game_state
   641
   642 				; prevent menu option directly after leaving in-game state
   643 37A6 A9 03		            lda #3
   644 37A8 8D C0 3E		            sta previous_consol
   645
   646 37AB			go_menu_mode
   647 37AB 20 3B 3B		            jsr wipe_ball
   648
   649 37AE 20 FA 31		            jsr music_normal_volume
   650
   651 37B1 20 FE 36		            jsr show_menu_options
   652
   653 37B4 A9 01		            lda #STATE_IN_MENU
   654 37B6 85 8C		            sta game_state
   655 37B8 4C D5 37		            jmp check_game_state
   656
   657 37BB			no_option_pressed
   658 37BB C9 06		            cmp #6  ; start pressed
   659 37BD D0 16		            bne check_game_state
   660
   661 				; reset game
   662
   663 37BF			reset_game
   664 37BF 20 05 32		            jsr music_low_volume
   665
   666 37C2 20 3B 3B		            jsr wipe_ball
   667
   668 37C5 A9 00		            lda #0
   669 37C7 85 BA		            sta cpu1_angle_end
   670 37C9 A9 80		            lda #128
   671 37CB 85 BB		            sta cpu2_angle_end
   672
   673 37CD A9 01		            lda #1
   674 37CF 85 B6		            sta game_restart
   675
   676 37D1 A9 00		            lda #STATE_IN_GAME
   677 37D3 85 8C		            sta game_state
   678
   679 37D5			check_game_state
   680 37D5 A5 8C		            lda game_state
   681 37D7 D0 03		            bne no_main_game_state
   682 37D9 4C 75 38		            jmp main_game_vbi
   683
   684 37DC			no_main_game_state
   685 37DC C9 02		            cmp #STATE_IN_END
   686 37DE D0 1C		            bne menu_vbi
   687
   688 				; end screen vbi
   689 37E0 A5 8F		            lda end_screen_delay
   690 37E2 D0 10		            bne stay_in_end_screen
   691
   692 37E4 20 A6 31		            jsr restart_music
   693 37E7 20 FA 31		            jsr music_normal_volume
   694
   695 				; here we show the menu again
   696 37EA 20 FE 36		            jsr show_menu_options
   697
   698 37ED A9 01		            lda #STATE_IN_MENU
   699 37EF 85 8C		            sta game_state
   700 37F1 4C FC 37		            jmp menu_vbi
   701
   702 37F4			stay_in_end_screen
   703 37F4 20 59 39		            jsr play_sound_end_game
   704 37F7 C6 8F		            dec end_screen_delay
   705 37F9 4C 41 38		            jmp wait_depressed
   706
   707 				; within menu vbi
   708
   709 37FC			menu_vbi
   710 37FC A5 8A		            lda player_mode
   711 37FE F0 07		            beq check_human_buttons
   712
   713 3800 20 C1 34		            jsr is_player1_button_pressed
   714 3803 D0 BA		            bne reset_game
   715 3805 F0 05		            beq check_consol_buttons
   716
   717 3807			check_human_buttons
   718 3807 20 D8 34		            jsr is_both_buttons
   719 380A D0 B3		            bne reset_game
   720
   721 380C			check_consol_buttons
   722 380C AD 1F D0		            lda CONSOL
   723 380F C9 05		            cmp #5          ; select
   724 3811 D0 18		            bne no_level_select
   725 				            
   726 3813 AD C0 3E		            lda previous_consol
   727 3816 C9 05		            cmp #5
   728 3818 F0 27		            beq wait_depressed
   729
   730 381A 20 F0 3E		            jsr increase_level
   731 381D AE C1 3E		            ldx current_level_index
   732 3820 20 D7 3E		            jsr set_level_ball_speed
   733
   734 3823 A9 05		            lda #5
   735 3825 8D C0 3E		            sta previous_consol
   736 3828 4C 41 38		            jmp wait_depressed
   737
   738 382B			no_level_select
   739 382B C9 03		            cmp #3          ; option
   740 382D D0 0F		            bne no_player_mode_select
   741
   742 382F AD C0 3E		            lda previous_consol
   743 3832 C9 03		            cmp #3
   744 3834 F0 0B		            beq wait_depressed
   745
   746 3836 20 00 3F		            jsr increase_player_mode
   747 3839 20 0D 3F		            jsr show_player_mode
   748
   749 383C A9 03		            lda #3
   750 383E			no_player_mode_select
   751 383E 8D C0 3E		            sta previous_consol
   752
   753 3841			wait_depressed
   754 3841 A9 01		            lda #1      ; dl jump
   755 3843 8D 55 50		            sta menu_dl_hook
   756 3846 A9 EE		            lda #<menu_dl_part
   757 3848 8D 56 50		            sta menu_dl_hook+1
   758 384B A9 50		            lda #>menu_dl_part
   759 384D 8D 57 50		            sta menu_dl_hook+2
   760
   761 				; detect/show controller type (used for both players)
   762 3850 20 5C 38		            jsr detect_show_driver
   763
   764 3853 20 E4 39		            jsr handle_player1
   765 3856 20 0F 3A		            jsr handle_player2
   766
   767 3859 4C 2E 39		            jmp exit_vbi
   768
   769 				; X = port/driver to detect
   770 385C			detect_show_driver
   771 385C 20 3B 34		            jsr driver_detect
   772 385F A8			            tay
   773 3860 B9 38 53		            lda driver_text_lo,y
   774 3863 85 86		            sta tmp_screen
   775 3865 B9 3C 53		            lda driver_text_hi,y
   776 3868 85 87		            sta tmp_screen+1
   777
   778 386A A0 07		            ldy #7
   779 386C			show_driv
   780 386C B1 86		            lda (tmp_screen),y
   781 386E 99 5A 52		            sta driver_screen,y
   782 3871 88			            dey
   783 3872 10 F8		            bpl show_driv
   784 3874 60			            rts
   785
   786 				; main game vbi
   787 3875			main_game_vbi
   788 3875 A5 B6		            lda game_restart
   789 3877 F0 33		            beq no_restart
   790
   791 				; restart game
   792
   793 3879 20 71 39		            jsr silence_end
   794
   795 387C A9 00		            lda #0
   796 387E 85 B6		            sta game_restart
   797 				            
   798 3880 20 8A 3C		            jsr reset_score
   799 3883 20 58 3C		            jsr show_score_p1
   800 3886 20 71 3C		            jsr show_score_p2
   801
   802 3889 A6 9C		            ldx p1_angle
   803 388B 86 AA		            stx ball_angle_start
   804 388D 20 96 3A		            jsr ball_to_start_position
   805 3890 20 A5 3A		            jsr prepare_ball_end_position
   806
   807 3893 A9 00		            lda #0
   808 3895 85 A0		            sta mp_collision
   809 3897 85 A1		            sta in_collision
   810 3899 85 A3		            sta edge_delay
   811 389B 85 AD		            sta edge_collision
   812 389D 85 AE		            sta edge_hit_count
   813 389F 8D 1E D0		            sta HITCLR
   814
   815 38A2 A9 02		            lda #2
   816 38A4 85 B5		            sta player_turn
   817
   818 38A6 20 F2 36		            jsr turn_color_ball
   819 38A9 4C 2E 39		            jmp exit_vbi
   820
   821 38AC			no_restart
   822 				; remove menu hook
   823 38AC A9 0F		            lda #$0f        ; dl gfx 8
   824 38AE 8D 55 50		            sta menu_dl_hook
   825 38B1 8D 56 50		            sta menu_dl_hook+1
   826 38B4 8D 57 50		            sta menu_dl_hook+2
   827
   828 38B7 AD 08 D0		            lda M0PL
   829 38BA 85 A0		            sta mp_collision
   830 38BC AD 09 D0		            lda M1PL
   831 38BF 05 A0		            ora mp_collision
   832 38C1 85 A0		            sta mp_collision
   833 				            
   834 38C3 AD 00 D0		            lda M0PF
   835 38C6 85 AD		            sta edge_collision
   836 38C8 AD 01 D0		            lda M1PF
   837 38CB 05 AD		            ora edge_collision
   838 38CD 85 AD		            sta edge_collision
   839 				;           beq no_edge_collision
   840
   841 				;            inc edge_hit_count
   842 				;            lda edge_hit_count
   843 				;            cmp #2
   844 				;            bcc edge_hit_counting
   845
   846 				;            sei
   847 				;lalala      jmp lalala            
   848 				            
   849 				;no_edge_collision
   850 				;            lda #0
   851 				;            sta edge_hit_count
   852 				 
   853 38CF			edge_hit_counting 
   854 38CF 20 E4 39		            jsr handle_player1
   855 38D2 20 0F 3A		            jsr handle_player2
   856
   857 				; handle ball
   858
   859 38D5 20 3B 3B		            jsr wipe_ball         
   860
   861 				; Check ball collision with bat
   862
   863 38D8 A5 A4		            lda bat_collision_delay
   864 38DA F0 05		            beq check_allowed
   865 38DC C6 A4		            dec bat_collision_delay
   866 38DE 4C F8 38		            jmp move_one
   867
   868 38E1			check_allowed
   869 38E1 A5 A0		            lda mp_collision
   870 38E3 F0 0F		            beq reset_in_collision
   871
   872 38E5 A5 A1		            lda in_collision
   873 38E7 D0 0F		            bne no_first_hit
   874
   875 38E9 E6 A1		            inc in_collision            
   876 38EB 20 D2 3A		            jsr bounce_bat_ball 
   877 				            
   878 38EE 20 54 39		            jsr start_sound_bat          
   879 				            
   880 38F1 4C F8 38		            jmp move_one
   881 				            
   882 38F4			reset_in_collision
   883 38F4 A9 00		            lda #0
   884 38F6 85 A1		            sta in_collision        
   885
   886 38F8			move_one
   887 38F8			no_first_hit
   888 38F8 20 DC 3D		            jsr move_current_xy
   889 38FB F0 1E		            beq still_moving
   890
   891 				; edge detected
   892
   893 38FD 20 90 39		            jsr start_sound_edge
   894
   895 3900 A5 AB		            lda ball_angle_end
   896 3902 85 AA		            sta ball_angle_start
   897
   898 3904 20 C9 3A		            jsr ball_current_to_start_position
   899 3907 20 A5 3A		            jsr prepare_ball_end_position
   900
   901 390A 20 B0 39		            jsr update_score
   902 390D D0 37		            bne game_ends
   903
   904 				; switch turns
   905 390F A5 B5		            lda player_turn
   906 3911 49 03		            eor #3              ; 1 => 2, 2 => 1
   907 3913 85 B5		            sta player_turn
   908 3915 20 F2 36		            jsr turn_color_ball
   909 3918 20 38 3A		            jsr set_cpu_angle_end
   910
   911 391B			still_moving
   912 391B A5 EB		            lda current_x+1
   913 391D 85 A6		            sta ball_current_x
   914 391F A5 ED		            lda current_y+1
   915 3921 85 A7		            sta ball_current_y
   916
   917 3923 20 50 3B		            jsr show_ball
   918
   919 3926 A9 00		            lda #0
   920 3928 8D 18 D0		            sta $d018           
   921
   922 				; anything in A to clear collisions
   923 392B 8D 1E D0		            sta HITCLR
   924
   925 392E			exit_vbi
   926
   927 				; always set header stuff
   928 392E A9 03		            lda #3
   929 3930 8D 08 D0		            sta SIZEP0
   930 3933 8D 09 D0		            sta SIZEP1
   931
   932 				; background in PM0/1 for header
   933 3936 A9 FF		            lda #255
   934 3938 A2 07		            ldx #7
   935 393A			fill_pm_header
   936 393A 9D 00 0E		            sta p0_area,x
   937 393D 9D 80 0E		            sta p1_area,x
   938 3940 CA			            dex
   939 3941 10 F7		            bpl fill_pm_header
   940
   941 3943 4C 62 E4		            jmp $e462
   942
   943 3946			game_ends
   944 3946 A9 FF		            lda #255
   945 3948 85 8F		            sta end_screen_delay
   946
   947 394A 20 1A 37		            jsr show_end_screen
   948
   949 394D A9 02		            lda #STATE_IN_END
   950 394F 85 8C		            sta game_state
   951
   952 3951 4C 2E 39		            jmp exit_vbi
   953
   954 3954			start_sound_bat
   955 3954 A9 0A		            lda #10
   956 3956 85 8D		            sta volume_hit_bat
   957 3958 60			            rts
   958
   959 3959			play_sound_end_game
   960 3959 20 60 32		            jsr music_off
   961
   962 395C A5 8F		            lda end_screen_delay
   963 395E C9 C0		            cmp #192
   964 3960 90 0F		            bcc silence_end
   965 3962 4A			            lsr
   966 3963 25 8F		            and end_screen_delay
   967 3965 4A			            lsr
   968 3966 09 20		            ora #$20
   969 3968 8D 73 32		            sta SHADOW+4
   970 				            ;lda end_screen_delay
   971 396B A9 AA		            lda #$aa
   972 396D 8D 74 32		            sta SHADOW+5
   973 3970 60			            rts
   974 3971			silence_end
   975 3971 A9 00		            lda #0
   976 3973 8D 74 32		            sta SHADOW+5
   977 3976 60			            rts
   978
   979 3977			play_sound_bat
   980 3977 A5 8D		            lda volume_hit_bat
   981 3979 30 14		            bmi silenced_bat
   982
   983 397B A5 B5		            lda player_turn
   984 397D 0A			            asl
   985 397E 0A			            asl
   986 397F 69 30		            adc #$30
   987 3981 E5 B3		            sbc angle_diff_bat
   988 3983 8D 73 32		            sta SHADOW+4    ; $d204
   989 3986 A5 8D		            lda volume_hit_bat
   990 3988 09 A0		            ora #$a0
   991 398A 8D 74 32		            sta SHADOW+5    ; $d205
   992 398D C6 8D		            dec volume_hit_bat
   993 398F			silenced_bat
   994 398F 60			            rts
   995
   996 3990			start_sound_edge
   997 3990 A9 04		            lda #4
   998 3992 85 8E		            sta volume_hit_edge
   999 3994 60			            rts
  1000
  1001 3995			play_sound_edge
  1002 3995 A5 8E		            lda volume_hit_edge
  1003 3997 30 16		            bmi silenced_edge
  1004 3999 D0 06		            bne no_silenced_edge
  1005 399B 8D 74 32		            sta SHADOW+5    ; $d205
  1006 399E C6 8E		            dec volume_hit_edge
  1007 39A0 60			            rts            
  1008
  1009 39A1			no_silenced_edge
  1010 39A1 A9 08		            lda #$08
  1011 39A3 8D 73 32		            sta SHADOW+4    ; $d204
  1012 39A6 A5 8E		            lda volume_hit_edge
  1013 39A8 09 26		            ora #$26
  1014 39AA 8D 74 32		            sta SHADOW+5    ; $d205
  1015 39AD C6 8E		            dec volume_hit_edge
  1016 39AF			silenced_edge
  1017 39AF 60			            rts
  1018
  1019 				; Update score
  1020 				; Score > max score, then exit A = 1, otherwise A = 0
  1021
  1022 39B0			update_score
  1023 39B0 A5 B5		            lda player_turn
  1024 39B2 C9 01		            cmp #1
  1025 39B4 D0 12		            bne was_player2_turn
  1026 				; was player 1 turn, so player 2 gets a point
  1027 39B6 20 9F 3C		            jsr inc_score_p2
  1028 39B9 20 71 3C		            jsr show_score_p2
  1029
  1030 39BC AD 2F 51		            lda score_p2
  1031 39BF C9 11		            cmp #MAX_SCORE
  1032 39C1 D0 17		            bne reset_edge_delay
  1033
  1034 39C3 A9 01		            lda #STATE_IN_MENU
  1035 39C5 85 8C		            sta game_state
  1036 39C7 60			            rts
  1037
  1038 39C8			was_player2_turn
  1039 39C8 20 93 3C		            jsr inc_score_p1
  1040 39CB 20 58 3C		            jsr show_score_p1
  1041
  1042 39CE AD 2E 51		            lda score_p1
  1043 39D1 C9 11		            cmp #MAX_SCORE
  1044 39D3 D0 05		            bne reset_edge_delay
  1045
  1046 39D5 A9 01		            lda #STATE_IN_MENU
  1047 39D7 85 8C		            sta game_state
  1048 39D9 60			            rts
  1049
  1050 39DA			reset_edge_delay
  1051 39DA A9 0A		            lda #10
  1052 39DC 85 A3		            sta edge_delay
  1053
  1054 39DE			no_edge
  1055
  1056 39DE A9 00		            lda #0      ; no end game
  1057 				; anything in A to clear collisions
  1058 39E0 8D 1E D0		            sta HITCLR
  1059 39E3 60			            rts
  1060
  1061 				; player 1
  1062 				; - wipe shape at previous y-position
  1063 				; - move player using controller
  1064 				; - set sprite positions
  1065
  1066 39E4			handle_player1
  1067 39E4 20 C0 3B		            jsr wipe_p1         ; wipe previous shape player 1
  1068
  1069 39E7 A5 8A		            lda player_mode
  1070 39E9 C9 02		            cmp #2
  1071 39EB F0 0C		            beq do_p1_is_computer
  1072
  1073 39ED A2 00		            ldx #0              ; player 1
  1074 39EF 20 6E 34		            jsr main_driver
  1075 39F2 20 78 3A		            jsr move_player
  1076 				            
  1077 39F5 20 74 3B		            jsr show_p1
  1078 39F8 60			            rts
  1079
  1080 				; p1 now controlled by computer
  1081 39F9			do_p1_is_computer
  1082 39F9 A5 8C		            lda game_state
  1083 39FB D0 3A		            bne not_in_game
  1084
  1085 39FD A2 00		            ldx #0              ; player 1
  1086
  1087 39FF A5 B5		            lda player_turn
  1088 3A01 C9 01		            cmp #1
  1089 3A03 D0 03		            bne not_p1_turn
  1090
  1091 3A05 20 49 3A		            jsr cpu_controller
  1092 3A08			not_p1_turn
  1093
  1094 3A08 20 78 3A		            jsr move_player
  1095 3A0B 20 74 3B		            jsr show_p1
  1096 3A0E 60			            rts
  1097
  1098 				; player 2
  1099 				; - wipe shape at previous y-position
  1100 				; - move player using controller
  1101 				; - set sprite positions
  1102
  1103 3A0F			handle_player2
  1104 3A0F 20 D5 3B		            jsr wipe_p2         ; wipe previous shape player 2
  1105
  1106 3A12 A5 8A		            lda player_mode
  1107 3A14 D0 0C		            bne do_p2_is_computer
  1108
  1109 3A16 A2 01		            ldx #1              ; player 2
  1110 3A18 20 6E 34		            jsr main_driver
  1111 3A1B 20 78 3A		            jsr move_player
  1112 				                        
  1113 3A1E 20 9A 3B		            jsr show_p2
  1114 3A21 60			            rts
  1115
  1116 				; p2 now controlled by computer
  1117 3A22			do_p2_is_computer
  1118 3A22 A5 8C		            lda game_state
  1119 3A24 D0 11		            bne not_in_game
  1120
  1121 3A26 A2 01		            ldx #1              ; player 2
  1122
  1123 3A28 A5 B5		            lda player_turn
  1124 3A2A C9 02		            cmp #2
  1125 3A2C D0 03		            bne not_p2_turn
  1126
  1127 3A2E 20 49 3A		            jsr cpu_controller
  1128
  1129 3A31			not_p2_turn
  1130 3A31 20 78 3A		            jsr move_player
  1131 3A34 20 9A 3B		            jsr show_p2
  1132
  1133 3A37			not_in_game
  1134 3A37 60			            rts
  1135
  1136 3A38			set_cpu_angle_end
  1137 3A38 A6 B5		            ldx player_turn
  1138 3A3A CA			            dex
  1139 3A3B AD 0A D2		            lda RANDOM
  1140 3A3E 29 07		            and #7
  1141 3A40 18			            clc
  1142 3A41 65 AB		            adc ball_angle_end
  1143 3A43 38			            sec
  1144 3A44 E9 03		            sbc #3
  1145 3A46 95 BA		            sta cpu_angle_end,x
  1146 3A48 60			            rts
  1147
  1148 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1149
  1150 3A49			cpu_controller
  1151 				;            lda ball_angle_end  ; current ball end
  1152 3A49 B5 BA		            lda cpu_angle_end,x
  1153 3A4B 85 B0		            sta tmp_angle1
  1154 3A4D B5 9C		            lda p1_angle,x
  1155 3A4F 85 B1		            sta tmp_angle2
  1156
  1157 3A51 20 AB 3C		            jsr calc_angle_diff
  1158
  1159 3A54 A5 B7		            lda tmp_angle_diff
  1160 3A56 F0 1F		            beq comp_in_catch_position
  1161 3A58 A5 B4		            lda tmp_angle_direction
  1162 3A5A D0 0E		            bne move_comp_clockwise
  1163
  1164 3A5C AD 0A D2		            lda RANDOM
  1165 3A5F 29 03		            and #3
  1166 3A61 D0 14		            bne comp_in_catch_position
  1167 3A63 B5 9C		            lda p1_angle,x
  1168 3A65 65 88		            adc stick_slow_speed
  1169 3A67 95 9C		            sta p1_angle,x
  1170 3A69 60			            rts
  1171 3A6A			move_comp_clockwise
  1172
  1173 3A6A AD 0A D2		            lda RANDOM
  1174 3A6D 29 03		            and #3
  1175 3A6F D0 06		            bne comp_in_catch_position
  1176
  1177 3A71 B5 9C		            lda p1_angle,x
  1178 3A73 E5 88		            sbc stick_slow_speed
  1179 3A75 95 9C		            sta p1_angle,x
  1180 3A77			comp_in_catch_position
  1181 3A77 60			            rts
  1182
  1183 				; move player 1/2
  1184 				; right - clockwise, left = anti-clockwise
  1185
  1186 				; X = 0, player 1
  1187 				; X = 1, player 2
  1188
  1189 				; Y = driver mode:
  1190 				; 0 : stick
  1191 				; 1 : paddle
  1192 				; 2 : driving
  1193 				; 3 : computer
  1194 				            
  1195 3A78			move_player
  1196 3A78 B5 9C		            lda p1_angle,x
  1197 3A7A 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1198 3A7C 49 40		            eor #64                     ; perpendicular to the circle angle
  1199 3A7E 95 90		            sta p1_shape,x
  1200
  1201 3A80 B4 9C		            ldy p1_angle,x
  1202 3A82 B9 00 40		            lda inner_x_tab,y
  1203 3A85 4A			            lsr
  1204 3A86 69 20		            adc #inner_x_margin/2
  1205 3A88 95 94		            sta player1_x,x
  1206 3A8A B9 00 41		            lda inner_y_tab,y
  1207 3A8D 4A			            lsr
  1208 3A8E 95 98		            sta player1_y,x
  1209
  1210 3A90 B4 90		            ldy p1_shape,x
  1211 3A92 20 0F 3C		            jsr shape_to_ptr
  1212
  1213 3A95 60			            rts
  1214
  1215 				; Set ball at start position
  1216 				; - start angle current player
  1217 				; - start position by inner table
  1218 				; - collision delay set?
  1219
  1220 				; Set ball current position to start position
  1221 				; input:
  1222 				; X = angle of start position
  1223 				; output:
  1224 				; ball position: (ball_current_x, ball_current_y)
  1225 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1226 3A96			ball_to_start_position
  1227 3A96 BD 00 40		            lda inner_x_tab,x
  1228 3A99 85 A6		            sta ball_current_x
  1229 3A9B 85 E6		            sta tmp_x1
  1230 3A9D BD 00 41		            lda inner_y_tab,x
  1231 3AA0 85 A7		            sta ball_current_y
  1232 3AA2 85 E7		            sta tmp_y1
  1233 3AA4 60			            rts
  1234
  1235 				; Prepare ball end position
  1236 				; - end angle current player
  1237 				; - end position by outer table
  1238 				; - calculate step size x,y
  1239
  1240 				; Input:
  1241 				; - ball_angle_start
  1242 				; - ball speed
  1243 				; Output:
  1244 				; - ball_andle_end
  1245 				; - ball start position (tmp_x1, tmp_y1)
  1246 				; - ball end position (tmp_x2, tmp_y2)
  1247 				; - step size (step_x, step_y) for ball movement
  1248 3AA5			prepare_ball_end_position
  1249 3AA5 A5 AA		            lda ball_angle_start
  1250 3AA7 49 80		            eor #128        ; other side
  1251 3AA9 85 AB		            sta ball_angle_end
  1252 3AAB AA			            tax
  1253 3AAC 20 30 3B		            jsr angle_to_end_position
  1254 				                        
  1255 3AAF 20 6F 3D		            jsr init_current_xy
  1256 				            
  1257 				; move current a little bit            
  1258 3AB2 20 DC 3D		            jsr move_current_xy
  1259 				; ignore end indicator, since we only just started
  1260
  1261
  1262 3AB5 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1263 3AB7 85 A4		            sta bat_collision_delay
  1264 3AB9 60			            rts
  1265
  1266 				; x = angle 0..255
  1267 3ABA			outer_angle_to_start_position
  1268 3ABA BD 00 10		            lda outer_x_256,x
  1269 3ABD 85 A6		            sta ball_current_x
  1270 3ABF 85 E6		            sta tmp_x1
  1271 3AC1 BD 00 11		            lda outer_y_256,x
  1272 3AC4 85 A7		            sta ball_current_y
  1273 3AC6 85 E7		            sta tmp_y1
  1274 3AC8 60			            rts
  1275
  1276 3AC9			ball_current_to_start_position
  1277 3AC9 A5 A6		            lda ball_current_x
  1278 3ACB 85 E6		            sta tmp_x1
  1279 3ACD A5 A7		            lda ball_current_y
  1280 3ACF 85 E7		            sta tmp_y1
  1281 3AD1 60			            rts
  1282
  1283 				; Ball collides with bat
  1284 				; - start ball angle = end ball angle
  1285 				; - calculate diff between bat and ball end angle
  1286 				; - calculate new end angle
  1287 				; - Set ball at start position
  1288 				; - Prepare ball end position
  1289
  1290 3AD2			bounce_bat_ball
  1291 				; set new start of ball
  1292 				; @todo check ball angles
  1293 				; set new ball start angle (= previous end angle)
  1294 3AD2 A5 AB		            lda ball_angle_end
  1295 3AD4 85 AA		            sta ball_angle_start
  1296 				            
  1297 				; alternative?
  1298 				            ;ldx ball_angle_start
  1299 				            ;jsr ball_to_start_position          
  1300 3AD6 20 C9 3A		            jsr ball_current_to_start_position
  1301
  1302 				; which player hit the ball?
  1303 				; collision bits:
  1304 				; xxxxx1x1 : 1 is player1 collision
  1305 				; xxxx1010 : 2 is player2 collision
  1306
  1307 3AD9 A5 A0		            lda mp_collision
  1308 3ADB 4A			            lsr
  1309 3ADC 4A			            lsr
  1310 3ADD 05 A0		            ora mp_collision
  1311 3ADF 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1312
  1313 				; who's turn is it and who bounced the ball?
  1314
  1315 3AE1 25 B5		            and player_turn
  1316 3AE3 F0 06		            beq no_switch_turn
  1317
  1318 3AE5 A5 B5		            lda player_turn
  1319 3AE7 49 03		            eor #3              ; 1 => 2, 2 => 1
  1320 3AE9 85 B5		            sta player_turn
  1321
  1322 3AEB			no_switch_turn
  1323 3AEB 20 F2 36		            jsr turn_color_ball
  1324
  1325 3AEE A5 B5		            lda player_turn
  1326 3AF0 49 03		            eor #3
  1327 3AF2 AA			            tax
  1328 3AF3 CA			            dex                 ; index 0,1 (player = 1,2)
  1329 3AF4 B5 9C		            lda p1_angle,x
  1330
  1331 				; Calculate diff between bat angle position and new ball start position
  1332 3AF6 85 B0		            sta tmp_angle1
  1333
  1334 3AF8 A5 AA		            lda ball_angle_start
  1335 3AFA 85 B1		            sta tmp_angle2
  1336
  1337 3AFC 20 AB 3C		            jsr calc_angle_diff
  1338
  1339 3AFF 0A			            asl
  1340 3B00 0A			            asl
  1341 3B01 0A			            asl
  1342 3B02 85 B3		            sta angle_diff_bat
  1343
  1344 3B04 A5 B0		            lda tmp_angle1
  1345 3B06 18			            clc
  1346 3B07 65 B2		            adc add_to_angle
  1347 3B09 49 80		            eor #128            ; other side
  1348 3B0B 85 B0		            sta tmp_angle1
  1349 				            
  1350 3B0D A5 B4		            lda tmp_angle_direction
  1351 3B0F D0 0A		            bne diff_clockwise
  1352 				; diff counter clockwise
  1353 3B11 A5 B0		            lda tmp_angle1
  1354 3B13 18			            clc
  1355 3B14 65 B3		            adc angle_diff_bat
  1356 3B16 85 B0		            sta tmp_angle1
  1357 3B18 4C 22 3B		            jmp calc_done            
  1358
  1359 3B1B			diff_clockwise
  1360 3B1B A5 B0		            lda tmp_angle1
  1361 3B1D 38			            sec
  1362 3B1E E5 B3		            sbc angle_diff_bat
  1363 3B20 85 B0		            sta tmp_angle1
  1364 				            
  1365 				; calculation done            
  1366 3B22			calc_done
  1367 3B22 A5 B0		            lda tmp_angle1
  1368 3B24 85 AB		            sta ball_angle_end
  1369 3B26 AA			            tax
  1370 3B27 20 30 3B		            jsr angle_to_end_position
  1371
  1372 3B2A 20 38 3A		            jsr set_cpu_angle_end
  1373
  1374 3B2D 4C 6F 3D		            jmp init_current_xy
  1375
  1376 				; x = angle 0..255
  1377 3B30			angle_to_end_position
  1378 3B30 BD 00 10		            lda outer_x_256,x
  1379 3B33 85 E8		            sta tmp_x2
  1380 3B35 BD 00 11		            lda outer_y_256,x
  1381 3B38 85 E9		            sta tmp_y2
  1382 3B3A 60			            rts
  1383
  1384 3B3B			wipe_ball
  1385 3B3B A5 A7		            lda ball_current_y
  1386 3B3D 4A			            lsr
  1387 3B3E 69 06		            adc #ball_top_margin
  1388 3B40 AA			            tax                 ; x = real y position on screen
  1389 3B41 A9 00		            lda #0
  1390 3B43 9D 80 0D		            sta msl_area,x
  1391 3B46 9D 81 0D		            sta msl_area+1,x
  1392 3B49 9D 82 0D		            sta msl_area+2,x
  1393 3B4C 9D 83 0D		            sta msl_area+3,x
  1394 3B4F 60			            rts
  1395
  1396 3B50			show_ball
  1397 3B50 A5 A7		            lda ball_current_y
  1398 3B52 4A			            lsr
  1399 3B53 69 06		            adc #ball_top_margin
  1400 3B55 AA			            tax                 ; x = real y position on screen
  1401
  1402 3B56 A9 02		            lda #%00000010
  1403 3B58 9D 80 0D		            sta msl_area,x
  1404 3B5B 9D 83 0D		            sta msl_area+3,x
  1405 3B5E A9 07		            lda #%00000111
  1406 3B60 9D 81 0D		            sta msl_area+1,x
  1407 3B63 9D 82 0D		            sta msl_area+2,x
  1408 				            
  1409 3B66 A5 A6		            lda ball_current_x
  1410 3B68 4A			            lsr
  1411 3B69 69 45		            adc #ball_left_margin
  1412 3B6B 8D 05 D0		            sta HPOSM1
  1413 3B6E 69 02		            adc #2
  1414 3B70 8D 04 D0		            sta HPOSM0
  1415 				                        
  1416 3B73 60			            rts
  1417 				            
  1418 3B74			show_p1
  1419 				; y position
  1420 3B74 A5 98		            lda player1_y
  1421 3B76 18			            clc
  1422 3B77 69 01		            adc #upper_margin
  1423 3B79 AA			            tax
  1424
  1425 3B7A A0 00		            ldy #0
  1426 3B7C			show_shape1
  1427 3B7C B1 84		            lda (shape_ptr),y
  1428 3B7E 9D 00 0E		            sta p0_area,x 
  1429 3B81 C8			            iny
  1430 3B82 B1 84		            lda (shape_ptr),y
  1431 3B84 9D 00 0F		            sta p2_area,x
  1432 3B87 E8			            inx
  1433 3B88 C8			            iny
  1434 3B89 C0 20		            cpy #32
  1435 3B8B D0 EF		            bne show_shape1
  1436
  1437 				; x position
  1438 3B8D A5 94		            lda player1_x
  1439 3B8F 18			            clc
  1440 3B90 69 20		            adc #left_margin
  1441 3B92 85 81		            sta shadow_HPOSP0
  1442 3B94 69 08		            adc #8
  1443 3B96 8D 02 D0		            sta HPOSP2
  1444 3B99 60			            rts
  1445
  1446 3B9A			show_p2
  1447 				; y position
  1448 3B9A A5 99		            lda player2_y
  1449 3B9C 18			            clc
  1450 3B9D 69 01		            adc #upper_margin
  1451 3B9F AA			            tax
  1452
  1453 3BA0 A0 00		            ldy #0
  1454 3BA2			show_shape2
  1455 3BA2 B1 84		            lda (shape_ptr),y
  1456 3BA4 9D 80 0E		            sta p1_area,x
  1457 3BA7 C8			            iny
  1458 3BA8 B1 84		            lda (shape_ptr),y
  1459 3BAA 9D 80 0F		            sta p3_area,x
  1460 3BAD E8			            inx
  1461 3BAE C8			            iny
  1462 3BAF C0 20		            cpy #32
  1463 3BB1 D0 EF		            bne show_shape2
  1464
  1465 				; x position
  1466 3BB3 A5 95		            lda player2_x
  1467 3BB5 18			            clc
  1468 3BB6 69 20		            adc #left_margin
  1469 3BB8 85 82		            sta shadow_HPOSP1
  1470 3BBA 69 08		            adc #8
  1471 3BBC 8D 03 D0		            sta HPOSP3
  1472 3BBF 60			            rts
  1473
  1474 3BC0			wipe_p1
  1475 3BC0 A5 98		            lda player1_y
  1476 3BC2 18			            clc
  1477 3BC3 69 01		            adc #upper_margin
  1478 3BC5 AA			            tax
  1479 				            
  1480 3BC6 A0 10		            ldy #16
  1481 3BC8 A9 00		            lda #0
  1482 3BCA			wipe_it1            
  1483 3BCA 9D 00 0E		            sta p0_area,x 
  1484 3BCD 9D 00 0F		            sta p2_area,x
  1485 3BD0 E8			            inx
  1486 3BD1 88			            dey
  1487 3BD2 D0 F6		            bne wipe_it1 
  1488 3BD4 60			            rts
  1489
  1490 3BD5			wipe_p2
  1491 3BD5 A5 99		            lda player2_y
  1492 3BD7 18			            clc
  1493 3BD8 69 01		            adc #upper_margin
  1494 3BDA AA			            tax
  1495 				            
  1496 3BDB A0 10		            ldy #16
  1497 3BDD A9 00		            lda #0
  1498 3BDF			wipe_it2            
  1499 3BDF 9D 80 0E		            sta p1_area,x
  1500 3BE2 9D 80 0F		            sta p3_area,x
  1501 3BE5 E8			            inx
  1502 3BE6 88			            dey
  1503 3BE7 D0 F6		            bne wipe_it2 
  1504 3BE9 60			            rts
  1505
  1506 3BEA			make_shape_index
  1507 3BEA A9 00		            lda #<pm_shapes
  1508 3BEC 85 84		            sta shape_ptr
  1509 3BEE A9 60		            lda #>pm_shapes
  1510 3BF0 85 85		            sta shape_ptr+1
  1511 				            
  1512 3BF2 A2 00		            ldx #0
  1513 3BF4			fill_pm_tab
  1514 3BF4 A5 84		            lda shape_ptr
  1515 3BF6 9D 00 14		            sta pm_shape_lo,x
  1516 3BF9 A5 85		            lda shape_ptr+1
  1517 3BFB 9D 80 14		            sta pm_shape_hi,x
  1518 				            
  1519 3BFE A5 84		            lda shape_ptr
  1520 3C00 18			            clc
  1521 3C01 69 20		            adc #32
  1522 3C03 85 84		            sta shape_ptr
  1523 3C05 A5 85		            lda shape_ptr+1
  1524 3C07 69 00		            adc #0
  1525 3C09 85 85		            sta shape_ptr+1
  1526 				            
  1527 3C0B E8			            inx
  1528 3C0C 10 E6		            bpl fill_pm_tab
  1529 				            
  1530 3C0E 60			            rts
  1531 				            
  1532 				; there are 128 shapes, each 32 bytes
  1533
  1534 				; y = shape index
  1535 3C0F			shape_to_ptr
  1536 3C0F B9 00 14		            lda pm_shape_lo,y
  1537 3C12 85 84		            sta shape_ptr
  1538 3C14 B9 80 14		            lda pm_shape_hi,y
  1539 3C17 85 85		            sta shape_ptr+1
  1540
  1541 3C19 60			            rts
  1542
  1543 				; turn 1024 tables into 256 bytes for ball edge lookup
  1544 3C1A			make_outer_256
  1545 3C1A A0 00		            ldy #0
  1546 3C1C A2 00		            ldx #0
  1547 3C1E			conv_256
  1548 3C1E BD 00 44		            lda outer_x_tab,x
  1549 3C21 99 00 10		            sta outer_x_256,y
  1550 3C24 BD 00 45		            lda outer_x_tab+$100,x
  1551 3C27 99 40 10		            sta outer_x_256+64,y
  1552 3C2A BD 00 46		            lda outer_x_tab+$200,x
  1553 3C2D 99 80 10		            sta outer_x_256+128,y
  1554 3C30 BD 00 47		            lda outer_x_tab+$300,x
  1555 3C33 99 C0 10		            sta outer_x_256+192,y
  1556 				            
  1557 3C36 BD 00 48		            lda outer_y_tab,x
  1558 3C39 99 00 11		            sta outer_y_256,y
  1559 3C3C BD 00 49		            lda outer_y_tab+$100,x
  1560 3C3F 99 40 11		            sta outer_y_256+64,y
  1561 3C42 BD 00 4A		            lda outer_y_tab+$200,x
  1562 3C45 99 80 11		            sta outer_y_256+128,y
  1563 3C48 BD 00 4B		            lda outer_y_tab+$300,x
  1564 3C4B 99 C0 11		            sta outer_y_256+192,y
  1565
  1566 3C4E E8			            inx
  1567 3C4F E8			            inx
  1568 3C50 E8			            inx
  1569 3C51 E8			            inx
  1570 3C52 C8			            iny
  1571 3C53 C0 40		            cpy #64
  1572 3C55 D0 C7		            bne conv_256            
  1573 3C57 60			            rts
  1574
  1575 3C58			show_score_p1
  1576 3C58 AD 2E 51		            lda score_p1
  1577 3C5B 4A			            lsr
  1578 3C5C 4A			            lsr
  1579 3C5D 4A			            lsr
  1580 3C5E 4A			            lsr
  1581 3C5F F0 02		            beq do_space1
  1582 3C61 09 10		            ora #16
  1583 3C63			do_space1
  1584 3C63 8D 0B 51		            sta score_chars_p1
  1585 3C66 AD 2E 51		            lda score_p1
  1586 3C69 29 0F		            and #15
  1587 3C6B 09 10		            ora #16
  1588 3C6D 8D 0C 51		            sta score_chars_p1+1
  1589 3C70 60			            rts
  1590
  1591 3C71			show_score_p2
  1592 3C71 AD 2F 51		            lda score_p2
  1593 3C74 4A			            lsr
  1594 3C75 4A			            lsr
  1595 3C76 4A			            lsr
  1596 3C77 4A			            lsr
  1597 3C78 F0 02		            beq do_space2
  1598 3C7A 09 10		            ora #16
  1599 3C7C			do_space2
  1600 3C7C 8D 2B 51		            sta score_chars_p2
  1601 3C7F AD 2F 51		            lda score_p2
  1602 3C82 29 0F		            and #15
  1603 3C84 09 10		            ora #16
  1604 3C86 8D 2C 51		            sta score_chars_p2+1
  1605 3C89 60			            rts
  1606 				                        
  1607 3C8A			reset_score
  1608 3C8A A9 00		            lda #0
  1609 3C8C 8D 2E 51		            sta score_p1
  1610 3C8F 8D 2F 51		            sta score_p2
  1611 3C92 60			            rts            
  1612 				         
  1613 3C93			inc_score_p1
  1614 3C93 F8			            sed
  1615 3C94 AD 2E 51		            lda score_p1
  1616 3C97 18			            clc
  1617 3C98 69 01		            adc #1
  1618 3C9A 8D 2E 51		            sta score_p1    
  1619 3C9D D8			            cld
  1620 3C9E 60			            rts
  1621
  1622 3C9F			inc_score_p2
  1623 3C9F F8			            sed
  1624 3CA0 AD 2F 51		            lda score_p2
  1625 3CA3 18			            clc
  1626 3CA4 69 01		            adc #1
  1627 3CA6 8D 2F 51		            sta score_p2
  1628 3CA9 D8			            cld
  1629 3CAA 60			            rts
  1630
  1631 				; calculate the difference between angle1 and angle2
  1632
  1633 				; input:
  1634 				; tmp_angle1 (0..255)
  1635 				; tmp_angle2 (0..255)
  1636
  1637 				; output:
  1638 				; tmp_angle_diff, A: difference between angle1 and angle2
  1639 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1640
  1641 3CAB			calc_angle_diff
  1642 3CAB A9 00		            lda #0
  1643 3CAD 85 B2		            sta add_to_angle
  1644 3CAF 85 B4		            sta tmp_angle_direction
  1645
  1646 				; make sure we can compare angles, otherwise add $40 to angles
  1647 3CB1 A5 B0		            lda tmp_angle1
  1648 3CB3 C9 C0		            cmp #$c0
  1649 3CB5 B0 06		            bcs too_large
  1650 3CB7 A5 B1		            lda tmp_angle2
  1651 3CB9 C9 C0		            cmp #$c0
  1652 3CBB 90 12		            bcc not_too_large
  1653 3CBD			too_large
  1654 3CBD A5 B0		            lda tmp_angle1
  1655 3CBF 38			            sec
  1656 3CC0 E9 40		            sbc #$40
  1657 3CC2 85 B0		            sta tmp_angle1
  1658 				            
  1659 3CC4 A5 B1		            lda tmp_angle2
  1660 3CC6 38			            sec
  1661 3CC7 E9 40		            sbc #$40
  1662 3CC9 85 B1		            sta tmp_angle2
  1663 				            
  1664 3CCB A9 40		            lda #$40
  1665 3CCD 85 B2		            sta add_to_angle
  1666
  1667 3CCF			not_too_large
  1668 3CCF A5 B1		            lda tmp_angle2
  1669 3CD1 C5 B0		            cmp tmp_angle1
  1670 3CD3 90 0A		            bcc angle2_smaller_angle1
  1671 				; ball >= play
  1672 3CD5 38			            sec
  1673 3CD6 E5 B0		            sbc tmp_angle1
  1674 3CD8 85 B7		            sta tmp_angle_diff
  1675 				            
  1676 3CDA E6 B4		            inc tmp_angle_direction
  1677 3CDC 4C E6 3C		            jmp diff_calculated
  1678 				                        
  1679 3CDF			angle2_smaller_angle1
  1680 3CDF A5 B0		            lda tmp_angle1
  1681 3CE1 38			            sec
  1682 3CE2 E5 B1		            sbc tmp_angle2
  1683 3CE4 85 B7		            sta tmp_angle_diff
  1684
  1685 3CE6			diff_calculated
  1686 3CE6 A5 B7		            lda tmp_angle_diff           
  1687 3CE8 60			            rts
  1688
  1689 				; X = angle
  1690 				; lookup magnitude of angle 0 to angle X
  1691 3CE9			angle_to_magnitude
  1692 3CE9 BD 00 4C		            lda magnitudes_lo,x
  1693 3CEC 85 B8		            sta magnitude
  1694 3CEE BD 00 4D		            lda magnitudes_hi,x
  1695 3CF1 85 B9		            sta magnitude+1
  1696 3CF3 60			            rts
  1697
  1698 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1699 3CF4			calc_abs_tmp_dx
  1700 3CF4 A5 E8		            lda tmp_x2
  1701 3CF6 38			            sec
  1702 3CF7 E5 E6		            sbc tmp_x1
  1703 3CF9 B0 05		            bcs x2_le
  1704 3CFB 49 FF		            eor #255
  1705 3CFD 18			            clc
  1706 3CFE 69 01		            adc #1
  1707 3D00 85 F2		x2_le       sta tmp_dx
  1708
  1709 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1710 3D02			calc_abs_tmp_dy
  1711 3D02 A5 E9		            lda tmp_y2
  1712 3D04 38			            sec
  1713 3D05 E5 E7		            sbc tmp_y1
  1714 3D07 B0 05		            bcs y2_le
  1715 3D09 49 FF		            eor #255
  1716 3D0B 18			            clc
  1717 3D0C 69 01		            adc #1
  1718 3D0E 85 F3		y2_le       sta tmp_dy
  1719 3D10 60			            rts
  1720 				            
  1721 3D11			calc_dx_div_magnitude
  1722 3D11 A9 00		            lda #0
  1723 3D13 85 E2		            sta _dividend
  1724 3D15 A5 F2		            lda tmp_dx
  1725 3D17 85 E3		            sta _dividend+1
  1726
  1727 3D19 A5 B9		            lda magnitude+1
  1728 3D1B 85 E0		            sta _divisor
  1729 3D1D A9 00		            lda #0
  1730 3D1F 85 E1		            sta _divisor+1
  1731 				            
  1732 3D21 20 49 3D		            jsr _div16
  1733
  1734 				; todo multiply result with velocity            
  1735 3D24 A5 E2		            lda _result
  1736 3D26 85 EE		            sta step_x
  1737 3D28 A5 E3		            lda _result+1
  1738 3D2A 85 EF		            sta step_x+1
  1739 				            
  1740 3D2C 60			            rts
  1741 				            
  1742 3D2D			calc_dy_div_magnitude
  1743 3D2D A9 00		            lda #0
  1744 3D2F 85 E2		            sta _dividend
  1745 3D31 A5 F3		            lda tmp_dy
  1746 3D33 85 E3		            sta _dividend+1
  1747 				            
  1748 3D35 A5 B9		            lda magnitude+1
  1749 3D37 85 E0		            sta _divisor
  1750 3D39 A9 00		            lda #0
  1751 3D3B 85 E1		            sta _divisor+1
  1752
  1753 3D3D 20 49 3D		            jsr _div16
  1754 				            
  1755 				; todo multiply result with velocity
  1756 3D40 A5 E2		            lda _result
  1757 3D42 85 F0		            sta step_y
  1758 3D44 A5 E3		            lda _result+1
  1759 3D46 85 F1		            sta step_y+1
  1760 				            
  1761 3D48 60			            rts
  1762
  1763 				; divide 16bit
  1764 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1765
  1766 				; _result = _dividend / divisor
  1767
  1768 3D49 A9 00		_div16      lda #0          ;preset remainder to 0
  1769 3D4B 85 E4		            sta _remainder
  1770 3D4D 85 E5		            sta _remainder+1
  1771 3D4F A2 10		            ldx #16         ;repeat for each bit: ...
  1772
  1773 3D51 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1774 3D53 26 E3		            rol _dividend+1  
  1775 3D55 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1776 3D57 26 E5		            rol _remainder+1
  1777 3D59 A5 E4		            lda _remainder
  1778 3D5B 38			            sec
  1779 3D5C E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1780 3D5E A8			            tay         ;lb result -> Y, for we may need it later
  1781 3D5F A5 E5		            lda _remainder+1
  1782 3D61 E5 E1		            sbc _divisor+1
  1783 3D63 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1784
  1785 3D65 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1786 3D67 84 E4		            sty _remainder   
  1787 3D69 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1788
  1789 3D6B CA			_div_skip   dex
  1790 3D6C D0 E3		            bne _div_loop 
  1791 3D6E 60			            rts
  1792
  1793 				; Calculations for step size
  1794
  1795 				; not optimised for speed or size
  1796 				; step should be set according to the angle
  1797
  1798 				; move in straight line (x1,y1) to (x2,y2)
  1799
  1800 				; 1. set start/end of line
  1801 				; set (tmp_x1, tmp_y1)
  1802 				; set (tmp_x2, tmp_y2)
  1803
  1804 				; 2. init. current_x, current_y
  1805 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1806 				; - calculates step sizes for x,y
  1807 				; - calculated directions for x,y
  1808 				;            jsr init_current_xy
  1809
  1810 				; 3. use current_x, current_y to plot or set a position
  1811 				;            lda current_x+1
  1812 				;            sta x_position
  1813 				;            lda current_y+1
  1814 				;            sta y_position
  1815 				;            jsr plot_pixel
  1816
  1817 				; 4. move current_x, current_y to next position on line
  1818 				; A=0 still moving
  1819 				;           move_current_xy
  1820
  1821 3D6F			init_current_xy
  1822 3D6F A9 7F		            lda #$7f      ; was 128 for half pixel
  1823 3D71 85 EA		            sta current_x
  1824 3D73 85 EC		            sta current_y
  1825
  1826 3D75 A5 E6		            lda tmp_x1
  1827 3D77 85 EB		            sta current_x+1
  1828 				            
  1829 3D79 A5 E7		            lda tmp_y1
  1830 3D7B 85 ED		            sta current_y+1
  1831
  1832 				; dx = abs(tmp_x1 - tmp_x2)
  1833 3D7D 20 F4 3C		            jsr calc_abs_tmp_dx
  1834
  1835 				; dy = abs(tmp_y1 - tmp_y2)
  1836 3D80 20 02 3D		            jsr calc_abs_tmp_dy
  1837
  1838 				; set directions
  1839 3D83 A5 E6		            lda tmp_x1
  1840 3D85 C5 E8		            cmp tmp_x2
  1841 3D87 90 04		            bcc x1_smaller_x2
  1842 				; x1 >= x2
  1843 3D89 A9 01		            lda #1
  1844 3D8B D0 02		            bne set_dir_x
  1845 3D8D			x1_smaller_x2
  1846 3D8D A9 00		            lda #0
  1847 3D8F			set_dir_x
  1848 3D8F 85 FA		            sta dir_x
  1849 				            
  1850 3D91 A5 E7		            lda tmp_y1
  1851 3D93 C5 E9		            cmp tmp_y2
  1852 3D95 90 04		            bcc y1_smaller_y2
  1853 				; y1 >= y2
  1854 3D97 A9 01		            lda #1
  1855 3D99 D0 02		            bne set_dir_y
  1856 3D9B			y1_smaller_y2
  1857 3D9B A9 00		            lda #0
  1858 3D9D			set_dir_y
  1859 3D9D 85 FB		            sta dir_y
  1860
  1861 				; Calculate diff between start angle and end angle
  1862
  1863 3D9F A5 AA		            lda ball_angle_start
  1864 3DA1 85 B0		            sta tmp_angle1
  1865 3DA3 A5 AB		            lda ball_angle_end
  1866 3DA5 85 B1		            sta tmp_angle2
  1867 				            
  1868 3DA7 20 AB 3C		            jsr calc_angle_diff
  1869
  1870 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1871 3DAA A6 B7		            ldx tmp_angle_diff
  1872 3DAC 20 E9 3C		            jsr angle_to_magnitude
  1873 				            
  1874 3DAF 20 11 3D		            jsr calc_dx_div_magnitude
  1875 3DB2 20 2D 3D		            jsr calc_dy_div_magnitude
  1876 				            
  1877 				; Calculate step size by ball speed
  1878 				            
  1879 				; step_x = step_x * speed
  1880 				            
  1881 3DB5 A5 EE		            lda step_x
  1882 3DB7 85 F6		            sta _multiplicand
  1883 3DB9 A5 EF		            lda step_x+1
  1884 3DBB 85 F7		            sta _multiplicand+1
  1885 3DBD A5 AC		            lda ball_speed
  1886 3DBF 85 F8		            sta _multiplier
  1887
  1888 3DC1 20 8E 35		            jsr _multi8
  1889 				;result in .A (low byte, also in .X) and .Y (high byte)
  1890 3DC4 85 EE		            sta step_x
  1891 3DC6 84 EF		            sty step_x+1
  1892 3DC8			skip_step_x_hi
  1893 				            
  1894 				; step_y = step_y * speed
  1895
  1896 3DC8 A5 F0		            lda step_y
  1897 3DCA 85 F6		            sta _multiplicand
  1898 3DCC A5 F1		            lda step_y+1
  1899 3DCE 85 F7		            sta _multiplicand+1
  1900 3DD0 A5 AC		            lda ball_speed
  1901 3DD2 85 F8		            sta _multiplier
  1902
  1903 3DD4 20 8E 35		            jsr _multi8
  1904 				;result in .A (low byte, also in .X) and .Y (high byte)
  1905 3DD7 85 F0		            sta step_y
  1906 3DD9 84 F1		            sty step_y+1
  1907 3DDB			skip_step_y_hi
  1908
  1909 3DDB 60			            rts
  1910
  1911 				; Move ball position 
  1912 				; Add one step, until end reached
  1913 				; Input:
  1914 				; - step size (step_x, step_y)
  1915 				; - current ball position (current_x, current_y)
  1916 				; - end position (tmp_x2, tmp_y2)
  1917 				; Output:
  1918 				; A (0 = still moving, 1 = end reached)
  1919 3DDC			move_current_xy
  1920 3DDC A9 00		            lda #0
  1921 3DDE 85 FC		            sta line_end_x
  1922 3DE0 85 FD		            sta line_end_y
  1923
  1924 				; sets line end indicators here
  1925 3DE2 20 FF 3D		            jsr move_current_x
  1926 3DE5 20 3F 3E		            jsr move_current_y
  1927
  1928 3DE8 A5 FC		            lda line_end_x
  1929 3DEA 25 FD		            and line_end_y
  1930 3DEC F0 10		            beq no_end_reached
  1931 				            
  1932 				; set current to (x2,y2)
  1933 3DEE A5 E8		            lda tmp_x2
  1934 3DF0 85 EB		            sta current_x+1
  1935 3DF2 A5 E9		            lda tmp_y2
  1936 3DF4 85 ED		            sta current_y+1
  1937 				            
  1938 3DF6 A9 00		            lda #0
  1939 3DF8 85 EA		            sta current_x
  1940 3DFA 85 EC		            sta current_y
  1941 				            
  1942 3DFC A9 01		            lda #1 ; end reached
  1943 				            
  1944 3DFE			no_end_reached  ; A = 0
  1945 3DFE 60			            rts
  1946
  1947 3DFF			move_current_x
  1948 3DFF A5 FA		            lda dir_x
  1949 3E01 D0 18		            bne move_current_left
  1950
  1951 				; move right, add
  1952 3E03 A5 EA		            lda current_x
  1953 3E05 18			            clc
  1954 3E06 65 EE		            adc step_x
  1955 3E08 85 EA		            sta current_x
  1956 3E0A A5 EB		            lda current_x+1
  1957 3E0C 65 EF		            adc step_x+1
  1958 3E0E 85 EB		            sta current_x+1
  1959
  1960 3E10 A5 EB		            lda current_x+1
  1961 3E12 C5 E8		            cmp tmp_x2
  1962 3E14 90 04		            bcc no_line_end
  1963 3E16			exact_end_x
  1964 3E16 A9 01		            lda #1
  1965 3E18 85 FC		            sta line_end_x 
  1966 3E1A			no_line_end
  1967 3E1A 60			            rts
  1968 				            
  1969 3E1B			move_current_left
  1970 3E1B A5 EA		            lda current_x
  1971 3E1D 38			            sec
  1972 3E1E E5 EE		            sbc step_x
  1973 3E20 90 01		            bcc clear_skip
  1974 3E22 EA			            nop
  1975 3E23			clear_skip
  1976 3E23 85 EA		            sta current_x
  1977 3E25 A5 EB		            lda current_x+1
  1978 3E27 E5 EF		            sbc step_x+1
  1979 3E29 85 EB		            sta current_x+1
  1980 3E2B 90 0B		            bcc below_zero
  1981 				                        
  1982 3E2D A5 E8		            lda tmp_x2
  1983 3E2F C5 EB		            cmp current_x+1
  1984 3E31 90 E7		            bcc no_line_end
  1985 3E33 A9 01		            lda #1
  1986 3E35 85 FC		            sta line_end_x            
  1987 3E37 60			            rts
  1988 3E38			below_zero            
  1989 3E38 A9 01		            lda #1
  1990 3E3A 85 FC		            sta line_end_x
  1991 3E3C 85 FD		            sta line_end_y
  1992 3E3E 60			            rts
  1993 3E3F			move_current_y
  1994 3E3F A5 FB		            lda dir_y
  1995 3E41 D0 18		            bne move_current_up
  1996
  1997 				; move down, add
  1998 3E43 A5 EC		            lda current_y
  1999 3E45 18			            clc
  2000 3E46 65 F0		            adc step_y
  2001 3E48 85 EC		            sta current_y
  2002 3E4A A5 ED		            lda current_y+1
  2003 3E4C 65 F1		            adc step_y+1
  2004 3E4E 85 ED		            sta current_y+1
  2005 				            
  2006 3E50 A5 ED		            lda current_y+1
  2007 3E52 C5 E9		            cmp tmp_y2
  2008 3E54 90 C4		            bcc no_line_end
  2009 3E56			exact_end_y
  2010 3E56 A9 01		            lda #1
  2011 3E58 85 FD		            sta line_end_y
  2012 3E5A 60			            rts
  2013
  2014 3E5B			move_current_up
  2015 3E5B A5 EC		            lda current_y
  2016 3E5D 38			            sec
  2017 3E5E E5 F0		            sbc step_y
  2018 3E60 85 EC		            sta current_y
  2019 3E62 A5 ED		            lda current_y+1
  2020 3E64 E5 F1		            sbc step_y+1
  2021 3E66 90 D0		            bcc below_zero
  2022 3E68 85 ED		            sta current_y+1
  2023 				            
  2024 3E6A A5 E9		            lda tmp_y2
  2025 3E6C C5 ED		            cmp current_y+1
  2026 3E6E 90 AA		            bcc no_line_end
  2027 3E70 A9 01		            lda #1
  2028 3E72 85 FD		            sta line_end_y
  2029 3E74 60			            rts                            
  2030 				            
  2031 3E75			init_sprites
  2032 3E75 A2 00		            ldx #0
  2033 3E77 8A			            txa
  2034 3E78			set_p
  2035 3E78 9D 00 0E		            sta p0_area,x
  2036 3E7B 9D 80 0E		            sta p1_area,x
  2037 3E7E 9D 00 0F		            sta p2_area,x
  2038 3E81 9D 80 0F		            sta p3_area,x
  2039 3E84 E8			            inx
  2040 3E85 10 F1		            bpl set_p
  2041
  2042 3E87 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2043 3E89 8D 6F 02		            sta GPRIOR
  2044
  2045 3E8C A9 0C		            lda #>pm_area
  2046 3E8E 8D 07 D4		            sta PMBASE
  2047
  2048 3E91 A9 03		            lda #3          ; P/M both on
  2049 3E93 8D 1D D0		            sta GRACTL
  2050
  2051 3E96 A9 90		            lda #$90
  2052 3E98 8D 02 D0		            sta HPOSP2
  2053 3E9B A9 A0		            lda #$A0
  2054 3E9D 8D 03 D0		            sta HPOSP3  
  2055 3EA0 60			            rts
  2056
  2057 3EA1			init_colors
  2058 3EA1 A9 5A		            lda #BASE_COLOR_P1+10
  2059 3EA3 8D C2 02		            sta PCOLR2
  2060 3EA6 A9 BA		            lda #BASE_COLOR_P2+10
  2061 3EA8 8D C3 02		            sta PCOLR3
  2062 				            
  2063 3EAB A9 00		            lda #0
  2064 3EAD 8D C6 02		            sta COLOR2
  2065
  2066 3EB0 A9 0E		            lda #HEADER_FG_COLOR
  2067 3EB2 8D C5 02		            sta COLOR1
  2068
  2069 3EB5 A9 50		            lda #HEADER_P1_COLOR
  2070 3EB7 8D C0 02		            sta PCOLR0
  2071 3EBA A9 B0		            lda #HEADER_P2_COLOR
  2072 3EBC 8D C1 02		            sta PCOLR1
  2073
  2074 3EBF 60			            rts
  2075
  2076 3EC0			previous_consol
  2077 3EC0 00			            dta 0
  2078
  2079 3EC1			current_level_index
  2080 3EC1 00			            dta 0
  2081 = 0007			NR_OF_LEVELS = 7
  2082 = 0000			INIT_LEVEL_INDEX = 0
  2083 3EC2			level_speeds
  2084 3EC2 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2085 				;level_speeds_lo
  2086 				;            dta 128
  2087 3EC9			stick_slow_speed_tab
  2088 3EC9 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2089 3ED0			stick_fast_speed_tab
  2090 3ED0 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2091
  2092 				; X = level (0..NR_OF_LEVELS)
  2093 3ED7			set_level_ball_speed
  2094 3ED7 BD C9 3E		            lda stick_slow_speed_tab,x
  2095 3EDA 85 88		            sta stick_slow_speed
  2096 3EDC BD D0 3E		            lda stick_fast_speed_tab,x
  2097 3EDF 85 89		            sta stick_fast_speed
  2098
  2099 3EE1 BD C2 3E		            lda level_speeds,x
  2100 3EE4 85 AC		            sta ball_speed
  2101 3EE6 8A			            txa
  2102 3EE7 18			            clc
  2103 3EE8 69 01		            adc #1
  2104 3EEA 09 10		            ora #16
  2105 3EEC 8D AC 52		            sta level_char
  2106 3EEF 60			            rts
  2107 				            
  2108 3EF0			increase_level
  2109 3EF0 EE C1 3E		            inc current_level_index
  2110 3EF3 AD C1 3E		            lda current_level_index
  2111 3EF6 C9 07		            cmp #NR_OF_LEVELS
  2112 3EF8 D0 05		            bne ok_level
  2113 3EFA A9 00		            lda #INIT_LEVEL_INDEX
  2114 3EFC 8D C1 3E		            sta current_level_index
  2115 3EFF			ok_level           
  2116 3EFF 60			            rts
  2117
  2118 3F00			increase_player_mode
  2119 3F00 E6 8A		            inc player_mode
  2120 3F02 A5 8A		            lda player_mode
  2121 3F04 C9 03		            cmp #NR_OF_PLAYER_MODES
  2122 3F06 D0 04		            bne ok_player_mode
  2123 3F08 A9 00		            lda #INIT_PLAYER_MODE
  2124 3F0A 85 8A		            sta player_mode
  2125 3F0C			ok_player_mode
  2126 3F0C 60			            rts
  2127
  2128 3F0D			show_player_mode
  2129 3F0D A6 8A		            ldx player_mode
  2130 3F0F BD 40 53		            lda player_mode_lo,x
  2131 3F12 8D F9 50		            sta menu_line2_ptr
  2132 3F15 BD 43 53		            lda player_mode_hi,x
  2133 3F18 8D FA 50		            sta menu_line2_ptr+1
  2134 3F1B 60			            rts
  2135
  2136 3F1C			            .align $100
  2137 4000			inner_x_tab
  2138 = 4100			inner_y_tab = *+$100
  2139 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2140 				      
  2141 4200			            .align $400            
  2142 				; outer circle 1024 plot points on 360 degrees
  2143 4400			outer_x_tab
  2144 = 4800			outer_y_tab = *+1024
  2145 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2146 				           
  2147 4C00			            .align $400
  2148 				; table of magnitudes (length) between angle 0 and 0..255
  2149 				; fixed point 8.8 : hi.lo
  2150 4C00			magnitudes_lo
  2151 = 4D00			magnitudes_hi = *+256
  2152 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2153
  2154 4E00			            .align $400
  2155 5000			display_list
  2156 5000-512F> C2		            dta $42+128         ; dli_header
  2157 5001 06 51		            dta a(score_line)
  2158
  2159 				; 102 x 40 = 4080 bytes            
  2160 5003 4F			            dta $4f
  2161 5004 00 70		            dta a(screen_mem1)
  2162 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2163 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2164 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2165 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2166
  2167 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2168 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2169 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2170 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2171
  2172 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2173 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2174 5055			menu_dl_hook
  2175 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2176 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2177
  2178 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2179
  2180 				; 42 + 60 = 102, 4080 bytes
  2181 506B 4F			            dta $4f
  2182 506C 00 80		            dta a(screen_mem2)
  2183 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2184
  2185 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2186 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2187 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2188 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2189
  2190 5095 0F 0F		            dta $0f,$0f
  2191
  2192 				; 60 lines
  2193 5097			menu_dl_end
  2194 5097 4F			            dta $4f
  2195 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2196 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2197 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2198 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2199 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2200
  2201 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2202 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2203 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2204 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2205
  2206 				; 20 x 40 = 800
  2207 50D5 4F			            dta $4f
  2208 50D6 00 90		            dta a(screen_mem3)       
  2209 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2210 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2211 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2212 				            
  2213 50EB 41			            dta $41
  2214 50EC 00 50		            dta a(display_list)
  2215
  2216 50EE			menu_dl_part
  2217 50EE 80			            dta 128 ; dli_menu
  2218 50EF 20			            dta $20
  2219 50F0 42			            dta $42
  2220 50F1 00 52		            dta a(rotor_logo_text)
  2221 50F3 02			            dta 2
  2222 50F4 30			            dta $30
  2223 50F5 46			            dta $46
  2224 50F6			menu_line1_ptr
  2225 50F6 50 52		            dta a(controller_text)
  2226 50F8 46			            dta $46
  2227 50F9			menu_line2_ptr
  2228 50F9 64 52		            dta a(two_player_text)
  2229 50FB 46			            dta $46
  2230 50FC			menu_line3_ptr
  2231 50FC A0 52		            dta a(level_text)
  2232 50FE 30			            dta $30
  2233 50FF 42			            dta $42
  2234 5100 B4 52		            dta a(start_text)
  2235 5102 10			            dta $10
  2236 5103 01			            dta $01 ; jump
  2237 5104 97 50		            dta a(menu_dl_end)
  2238
  2239 5106			score_line  
  2240 5106 00 2F 2E 25 00	            dta d' ONE '
  2241 510B			score_chars_p1
  2242 510B 0D 0D 00		            dta d'-- '
  2243
  2244 510E 00 00 00 00 00 00 +             dta d'          '
  2245 5118 00 00 00 00 00 00 +             dta d'          '
  2246
  2247 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2248 512B			score_chars_p2
  2249 512B 0D 0D 00		            dta d'-- '
  2250
  2251 512E 00			score_p1    dta 0
  2252 512F 00			score_p2    dta 0
  2253
  2254 5130			            .align $100
  2255 5200			rotor_logo_text
  2256 5200-5345> 00 00 00 00 +             dta d'              '
  2257 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2258 521A 40			            dta $40
  2259 521B 00 00 00 00 00 00 +             dta d'             '
  2260 5228 00 00 00 00 00 00 +             dta d'              '
  2261 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2262 5242 00 00 00 00 00 00 +             dta d'              '
  2263
  2264 5250			controller_text
  2265 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2266 525A			driver_screen
  2267 525A 00 00 00 00 00 00 +             dta d'          '
  2268
  2269 5264			two_player_text
  2270 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2271
  2272 5278			one_player_text
  2273 5278 00 00 00 00 28 35 +             dta d'    HUMAN VS CPU    '
  2274
  2275 528C			demo_player_text
  2276 528C 00 00 00 00 00 23 +             dta d'     CPU VS CPU     '
  2277
  2278 52A0			level_text
  2279 52A0 00 00 00 00 00 00 +             dta d'      LEVEL '
  2280 52AC			level_char            
  2281 52AC 11 00 00 00 00 00 +             dta d'1       '
  2282
  2283 52B4			start_text
  2284 52B4 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2285 52DC			stick_text
  2286 52DC 33 34 29 23 2B 00 +             dta d'STICK   '
  2287 52E4			paddle_text
  2288 52E4 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2289 52EC			driving_text
  2290 52EC 24 32 29 36 29 2E +             dta d'DRIVING '
  2291 52F4			computer_text
  2292 52F4 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2293
  2294 52FC			empty_text
  2295 52FC 00 00 00 00 00 00 +             dta d'                    '
  2296 5310			winner_one_text
  2297 5310 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2298 5324			winner_two_text
  2299 5324 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2300
  2301 5338			driver_text_lo
  2302 5338 DC			            dta <stick_text
  2303 5339 E4			            dta <paddle_text
  2304 533A EC			            dta <driving_text
  2305 533B F4			            dta <computer_text
  2306 				            
  2307 533C			driver_text_hi
  2308 533C 52			            dta >stick_text
  2309 533D 52			            dta >paddle_text
  2310 533E 52			            dta >driving_text
  2311 533F 52			            dta >computer_text
  2312
  2313 5340			player_mode_lo
  2314 5340 64			            dta <two_player_text
  2315 5341 78			            dta <one_player_text
  2316 5342 8C			            dta <demo_player_text
  2317
  2318 5343			player_mode_hi
  2319 5343 52			            dta >two_player_text
  2320 5344 52			            dta >one_player_text
  2321 5345 52			            dta >demo_player_text
  2322
  2323 				; 4 KB
  2324 				; 128 x 32 bytes shapes
  2325 5346			            .align $1000
  2326 6000			pm_shapes
  2327 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2328
  2329 				; 9 KB for backdrop image
  2330 7000			            .align $1000
  2331 = 7000			screen_mem1 = * ; 4K
  2332 				;            org screen_mem1
  2333 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2334
  2335 7FF0			            .align $1000
  2336 = 8000			screen_mem2 = * ; 4K
  2337 				;            org screen_mem2
  2338 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2339
  2340 8FF0			            .align $1000
  2341 = 9000			screen_mem3 = * ; 1K
  2342 				;            org screen_mem3
  2343 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2344
  2345 02E0-02E1> 08 35		            run main
