mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.2
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - switch player turn when edge hit
    17 				; - change color scheme (purple, green?)
    18 				; - fix title RED/BLUE to ONE/TWO
    19 				; - music on/off toggle (SHIFT?)
    20 				; - add color (pm?) in header for player ONE/TWO
    21 				; - fix paddle player 2 start position
    22 				; - try fix bat positions for paddles (both start at zero?)
    23 				; - try fix bat priority, now RED is always in front
    24 				; - add title image
    25
    26 				; Optional for a later version:
    27 				; - add computer player(s)
    28 				; - add support for driving controllers
    29 				; - break part of outer circle when ball hits
    30
    31 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    32
    33 				; color scheme
    34 				;BASE_COLOR_P1   = $10   ; orange
    35 				;BASE_COLOR_P2   = $a0   ; green
    36 				;BASE_COLOR_P1   = $80   ; blue
    37 				;BASE_COLOR_P2   = $e0   ; yellow
    38 = 0050			BASE_COLOR_P1   = $50   ; purple
    39 = 00B0			BASE_COLOR_P2   = $b0   ; green
    40 				;BASE_COLOR_P1   = $20   ; red
    41 				;BASE_COLOR_P2   = $70   ; blue
    42
    43
    44 				; must be in decimal format, so $11 is 11
    45 = 0011			MAX_SCORE   = $11
    46
    47 = 1000			pm_area     = $1000
    48 = 1180			msl_area    = pm_area+$180
    49 = 1200			p0_area     = pm_area+$200
    50 = 1280			p1_area     = pm_area+$280
    51 = 1300			p2_area     = pm_area+$300
    52 = 1380			p3_area     = pm_area+$380
    53
    54 				; $1400 .. $1500 is overwritten, bug?
    55
    56 				; outer tables 256 for 360 degrees
    57 = 1600			outer_x_256     = $1600
    58 = 1700			outer_y_256     = $1700
    59
    60 = 1800			screen_y_lo     = $1800
    61 = 1900			screen_y_hi     = $1900
    62
    63 = 0140			WIDTH           = 320
    64 = 00C0			HEIGHT          = 192
    65
    66 = 0028			SCREEN_WIDTH    = 40
    67
    68 = 0030			outer_x_margin  = 48 ;47-32
    69 = 0040			inner_x_margin  = 64
    70
    71 = 00A0			circle_center_x = WIDTH/2
    72 = 0060			circle_center_y = HEIGHT/2
    73
    74 = 0006			ball_top_margin     = 6
    75 = 0045			ball_left_margin    = 64+5
    76
    77 				; pm upper margin
    78 = 0001			upper_margin    = 1
    79 = 0020			left_margin     = 32
    80
    81 = 0084			shape_ptr       = $84
    82 = 0086			tmp_screen      = $86
    83
    84 = 008C			mode_menu       = $8c
    85
    86 = 008D			volume_hit_bat  = $8d
    87 = 008E			volume_hit_edge = $8e
    88
    89 				; player vars must be in sequence for zp,x indexing
    90
    91 = 0090			p1_shape        = $90
    92 = 0091			p2_shape        = $91
    93
    94 = 0094			player1_x       = $94
    95 = 0095			player2_x       = $95
    96
    97 = 0098			player1_y       = $98
    98 = 0099			player2_y       = $99
    99
   100 = 009C			p1_angle        = $9c
   101 = 009D			p2_angle        = $9d
   102
   103 = 00A0			mp_collision    = $a0
   104 = 00A1			in_collision    = $a1
   105 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   106 = 00A3			edge_delay      = $a3
   107 = 00A4			bat_collision_delay = $a4
   108
   109 				; ball vars
   110 = 00A6			ball_current_x      = $a6
   111 = 00A7			ball_current_y      = $a7
   112 = 00AA			ball_angle_start    = $aa
   113 = 00AB			ball_angle_end      = $ab
   114 = 00AC			ball_speed          = $ac
   115
   116 = 00B0			tmp_angle1          = $b0
   117 = 00B1			tmp_angle2          = $b1
   118 = 00B2			add_to_angle        = $b2
   119 = 00B3			angle_diff_bat      = $b3
   120 = 00B4			tmp_angle_direction = $b4
   121 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   122 = 00B6			game_restart        = $b6
   123 = 00B7			tmp_angle_diff      = $b7
   124 = 00B8			magnitude           = $b8       ; word
   125
   126 				; $c0 - $df free for music
   127
   128 = 00E0			_divisor    = $e0   ; word
   129 = 00E2			_dividend   = $e2   ; word
   130 = 00E4			_remainder  = $e4   ; word
   131 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   132
   133 = 00E6			tmp_x1      = $e6   ; byte
   134 = 00E7			tmp_y1      = $e7   ; byte
   135 = 00E8			tmp_x2      = $e8   ; byte
   136 = 00E9			tmp_y2      = $e9   ; byte
   137
   138 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   139 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   140
   141 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   142 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   143
   144 = 00F2			tmp_dx      = $f2  ; byte
   145 = 00F3			tmp_dy      = $f3  ; byte
   146
   147 = 00F6			_multiplicand   = $f6   ; word
   148 = 00F8			_multiplier     = $f8   ; byte
   149
   150 				; direction:
   151 				; 0 : x1<x2 or y1<y2 = add
   152 				; 1 ; x1>=y2 or y1>=y2 = subtract
   153
   154 = 00FA			dir_x       = $fa  ; byte
   155 = 00FB			dir_y       = $fb  ; byte
   156
   157 = 00FC			line_end_x  = $fc  ; byte
   158 = 00FD			line_end_y  = $fd  ; byte
   159
   160 				            org $2000
   161
   162 				            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2000			driver_tmp      .ds 2
     5 = 2002			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 				            .align $100
    11 				paddle_to_256
    12 = 2100			            .ds $100
    13
    14 				; paddle initial value
    15 				prev_paddle_value
    16 = 2200			            .ds 1
    17
    18 				driver_init
    19 FFFF> 2201-2AA6> A9 00	            lda #0  ; stick
    20 2203 8D 02 20		            sta driver_mode
    21
    22 2206 AD 70 02		            lda PADDL0
    23 2209 8D 00 22		            sta prev_paddle_value
    24
    25 220C A9 00		            lda #0
    26 220E 85 9C		            sta p1_angle
    27 2210 A9 80		            lda #128
    28 2212 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2214 A9 00		            lda #0
    33 2216 8D 00 20		            sta driver_tmp
    34 2219 8D 01 20		            sta driver_tmp+1
    35 				            
    36 221C A2 00		            ldx #0
    37 221E			store_pv
    38 221E AD 01 20		            lda driver_tmp+1
    39 2221 9D 00 21		            sta paddle_to_256,x
    40 				            
    41 2224 AD 00 20		            lda driver_tmp
    42 2227 18			            clc
    43 2228 69 1F		            adc #<paddle_add
    44 222A 8D 00 20		            sta driver_tmp
    45 222D AD 01 20		            lda driver_tmp+1
    46 2230 69 01		            adc #>paddle_add
    47 2232 8D 01 20		            sta driver_tmp+1
    48 2235 E8			            inx
    49 2236 E0 E5		            cpx #paddle_vals
    50 2238 D0 E4		            bne store_pv
    51 223A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 223B			driver_detect
    63 223B AD 70 02		            lda PADDL0
    64 223E C9 E4		            cmp #228
    65 2240 D0 07		            bne paddle_detect
    66 2242 AD 71 02		            lda PADDL1
    67 2245 C9 E4		            cmp #228
    68 2247 F0 06		            beq no_paddle_detect
    69 2249			paddle_detect
    70 2249 A9 01		            lda #1
    71 224B 8D 02 20		            sta driver_mode
    72 224E 60			            rts
    73
    74 224F			no_paddle_detect
    75 224F AD 78 02		            lda STICK0
    76 2252 C9 0C		            cmp #12
    77 2254 D0 06		            bne no_driving_detect
    78 2256 A9 02		            lda #2
    79 2258 8D 02 20		            sta driver_mode
    80 225B 60			            rts
    81
    82 225C			no_driving_detect
    83 225C C9 07		            cmp #7      ; paddle button also gives this
    84 225E F0 04		            beq stick_detect    
    85 2260 C9 0B		            cmp #11     ; paddle button also gives this
    86 2262 D0 06		            bne no_stick_detect
    87 2264			stick_detect
    88 2264 A9 00		            lda #0
    89 2266 8D 02 20		            sta driver_mode
    90 2269 60			            rts
    91
    92 226A			no_stick_detect
    93 				; default is the last value
    94 226A AD 02 20		            lda driver_mode
    95 226D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 226E			main_driver            
   110 226E AC 02 20		            ldy driver_mode
   111 2271 B9 80 22		            lda driver_lo,y
   112 2274 8D 7E 22		            sta driver_ptr
   113 2277 B9 84 22		            lda driver_hi,y
   114 227A 8D 7F 22		            sta driver_ptr+1
   115
   116 = 227E			driver_ptr = *+1
   117 227D 4C FF FF		            jmp $ffff  
   118
   119 2280			driver_lo
   120 2280 88			            dta <driver_stick
   121 2281 CD			            dta <driver_paddle
   122 2282 88			            dta <driver_stick
   123 2283 88			            dta <driver_stick
   124
   125 2284			driver_hi
   126 2284 22			            dta >driver_stick
   127 2285 22			            dta >driver_paddle
   128 2286 22			            dta >driver_stick
   129 2287 22			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2288			driver_stick
   134 2288 BD 78 02		            lda STICK0,x
   135 228B C9 0F		            cmp #15
   136 228D F0 21		            beq move_done
   137 228F C9 0B		            cmp #11
   138 2291 D0 0E		            bne no_left
   139
   140 2293 D6 9C		            dec p1_angle,x
   141 2295 BD 84 02		            lda STRIG0,x
   142 2298 D0 04		            bne no_fast
   143 229A D6 9C		            dec p1_angle,x
   144 229C D6 9C		            dec p1_angle,x
   145 229E			no_fast
   146 				            
   147 229E 4C B0 22		            jmp move_done
   148 22A1 C9 07		no_left     cmp #7
   149 22A3 D0 0B		            bne move_done
   150
   151 22A5 F6 9C		            inc p1_angle,x
   152 22A7 BD 84 02		            lda STRIG0,x
   153 22AA D0 04		            bne no_fast_right
   154 22AC F6 9C		            inc p1_angle,x
   155 22AE F6 9C		            inc p1_angle,x
   156 22B0			no_fast_right
   157 22B0			move_done
   158 22B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 22B1			is_fire_button
   165 22B1 AD 02 20		            lda driver_mode
   166 22B4 C9 01		            cmp #1
   167 22B6 F0 04		            beq check_paddle_fire
   168 				            
   169 22B8 BD 84 02		            lda STRIG0,x
   170 22BB 60			            rts
   171 22BC			check_paddle_fire
   172
   173 22BC AD 78 02		            lda STICK0
   174 22BF C9 07		            cmp #7
   175 22C1 F0 07		            beq paddle_fire
   176 22C3 C9 0B		            cmp #11
   177 22C5 F0 03		            beq paddle_fire
   178 22C7 A9 00		            lda #0
   179 22C9 60			            rts
   180 22CA			paddle_fire
   181 22CA A9 01		            lda #1
   182 22CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 22CD			driver_paddle            
   187 22CD BD 70 02		            lda PADDL0,x
   188 22D0 A8			            tay
   189 22D1 B9 00 21		            lda paddle_to_256,y
   190 22D4 5D DA 22		            eor paddle_offsets,x
   191 22D7 95 9C		            sta p1_angle,x
   192 22D9 60			            rts
   193
   194 22DA			paddle_offsets
   195 22DA 00 80		            dta 0,128
   163 22DC			main         
   164 22DC A9 00		            lda #0
   165 22DE 8D 2F 02		            sta SDMCTL
   166 22E1 85 B6		            sta game_restart
   167
   168 22E3 A9 80		            lda #128
   169 22E5 85 8D		            sta volume_hit_bat
   170 22E7 85 8E		            sta volume_hit_edge
   171
   172 22E9 A9 01		            lda #1
   173 22EB 8D 44 02		            sta 580 ; coldstart
   174
   175 22EE 20 01 22		            jsr driver_init
   176
   177 22F1 20 B0 27		            jsr make_shape_index
   178 				 
   179 22F4 20 E0 27		            jsr make_outer_256
   180 				            
   181 22F7 20 DE 23		            jsr make_screen_y_tab
   182
   183 22FA 20 29 24		            jsr invert_backdrop
   184
   185 22FD 20 50 28		            jsr reset_score
   186 2300 20 1E 28		            jsr show_score_p1
   187 2303 20 37 28		            jsr show_score_p2
   188 				                       
   189 2306 20 3B 2A		            jsr init_sprites
   190 2309 20 67 2A		            jsr init_colors
   191
   192 				; init. game vars
   193 230C A2 00		            ldx #INIT_LEVEL_INDEX
   194 230E 8E 83 2A		            stx current_level_index
   195 2311 20 88 2A		            jsr set_level_ball_speed
   196
   197 2314 A9 01		            lda #1
   198 2316 85 8C		            sta mode_menu           ; start with menu
   199
   200 				; start vbi
   201 				            
   202 2318 A9 4F		            lda #<dli_menu
   203 231A 8D 00 02		            sta VDSLST
   204 231D A9 23		            lda #>dli_menu
   205 231F 8D 01 02		            sta VDSLST+1
   206 				            
   207 2322 20 70 B2		            jsr music_init
   208 				;            lda #0
   209 				;            sta $d208
   210 				            
   211 2325 A9 C0		            lda #$c0
   212 2327 8D 0E D4		            sta NMIEN
   213 				            
   214 232A A9 07		            lda #7          ; sets VVBLKI
   215 232C A0 6E		            ldy #<vbi
   216 232E A2 24		            ldx #>vbi
   217 2330 20 5C E4		            jsr $e45c       ; SETVBV
   218
   219 				; we're just sitting here while VBI does all the work :)
   220 2333 4C 33 23		loop        jmp loop
   221
   222 				;------------------------
   223 				; 8bit * 8bit = 16bit multiply
   224 				; By White Flame
   225 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   226 				; uses extra zp var _multiplicand+1
   227
   228 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   229 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   230
   231 				; In this version, both inputs must be unsigned
   232 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   233
   234 2336			_multi8
   235 2336 A9 00		            lda #$00
   236 2338 A8			            tay
   237 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   238 2339 F0 0D		            beq _enter_loop
   239 233B			_do_add
   240 233B 18			            clc
   241 233C 65 F6		            adc _multiplicand
   242 233E AA			            tax
   243
   244 233F 98			            tya
   245 2340 65 F7		            adc _multiplicand+1
   246 2342 A8			            tay
   247 2343 8A			            txa
   248 2344			_mul_loop
   249 2344 06 F6		            asl _multiplicand
   250 2346 26 F7		            rol _multiplicand+1
   251 2348			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   252 2348 46 F8		            lsr _multiplier
   253 234A B0 EF		            bcs _do_add
   254 234C D0 F6		            bne _mul_loop
   255 234E 60			            rts
   256
   257 234F			dli_menu
   258 234F 48			            pha
   259 2350 8A			            txa
   260 2351 48			            pha
   261 				            
   262 2352 A9 00		            lda #0
   263 2354 8D 0A D4		            sta WSYNC
   264 2357 8D 1A D0		            sta COLBK
   265 235A A9 0E		            lda #$0e
   266 235C 8D 0A D4		            sta WSYNC
   267 235F 8D 1A D0		            sta COLBK
   268 2362 A9 0A		            lda #$0a
   269 2364 8D 0A D4		            sta WSYNC
   270 2367 8D 1A D0		            sta COLBK
   271 236A A9 00		            lda #0
   272 236C 8D 0A D4		            sta WSYNC
   273 236F 8D 1A D0		            sta COLBK
   274
   275 2372 A2 00		            ldx #0
   276 2374			color_it            
   277 2374 BD A6 23		            lda menu_colpf0,x
   278 2377 8D 0A D4		            sta WSYNC
   279 237A 8D 16 D0		            sta COLPF0
   280 237D E8			            inx
   281 237E E0 38		            cpx #56
   282 2380 D0 F2		            bne color_it
   283
   284 2382 A9 00		            lda #0
   285 2384 8D 0A D4		            sta WSYNC
   286 2387 8D 1A D0		            sta COLBK
   287 238A A9 0A		            lda #$0a
   288 238C 8D 0A D4		            sta WSYNC
   289 238F 8D 1A D0		            sta COLBK
   290 2392 A9 0E		            lda #$0e
   291 2394 8D 0A D4		            sta WSYNC
   292 2397 8D 1A D0		            sta COLBK
   293 239A A9 00		            lda #0
   294 239C 8D 0A D4		            sta WSYNC
   295 239F 8D 1A D0		            sta COLBK
   296 				            
   297 23A2 68			            pla
   298 23A3 AA			            tax
   299 23A4 68			            pla
   300 23A5 40			            rti
   301
   302 23A6			menu_colpf0
   303 23A6 00 00		            dta 0,0
   304 23A8 58			            dta BASE_COLOR_P1+8
   305 23A9 58			            dta BASE_COLOR_P1+8
   306 23AA 5A			            dta BASE_COLOR_P1+10
   307 23AB 5A			            dta BASE_COLOR_P1+10
   308 23AC 5C			            dta BASE_COLOR_P1+12
   309 23AD 5C			            dta BASE_COLOR_P1+12
   310
   311 23AE BC			            dta BASE_COLOR_P2+12
   312 23AF BC			            dta BASE_COLOR_P2+12
   313 23B0 BA			            dta BASE_COLOR_P2+10
   314 23B1 BA			            dta BASE_COLOR_P2+10
   315 23B2 B8			            dta BASE_COLOR_P2+8
   316 23B3 B8			            dta BASE_COLOR_P2+8
   317 23B4 00 00		            dta 0,0
   318
   319 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   320 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   321 23B6 00 00 00 00		            dta 0,0,0,0
   322 23BA 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   323 23C2 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   324 23CA 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   325 23D2 00 00 00 00		            dta 0,0,0,0
   326 23D6 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   327
   328 				; make pointers from y-position to screen memory
   329 				; screen memory is 3 blocks
   330 				; screen_mem1 : 102 lines, 4080 bytes
   331 				; screen_mem2 : 102 lines, 4080 bytes
   332 				; screen_mem3 :  20 lines,  800 bytes
   333
   334 23DE			make_screen_y_tab
   335 23DE A9 00		            lda #<screen_mem1
   336 23E0 85 86		            sta tmp_screen
   337 23E2 A9 70		            lda #>screen_mem1
   338 23E4 85 87		            sta tmp_screen+1
   339
   340 23E6 A2 00		            ldx #0
   341 23E8			fill_y_tab1
   342 23E8 20 11 24		            jsr store_y_line
   343 23EB E8			            inx
   344 23EC E0 66		            cpx #102
   345 23EE D0 F8		            bne fill_y_tab1
   346
   347 				; x = 102
   348 23F0 A9 00		            lda #<screen_mem2
   349 23F2 85 86		            sta tmp_screen
   350 23F4 A9 80		            lda #>screen_mem2
   351 23F6 85 87		            sta tmp_screen+1
   352
   353 23F8			fill_y_tab2
   354 23F8 20 11 24		            jsr store_y_line
   355 23FB E8			            inx
   356 23FC E0 CC		            cpx #204
   357 23FE D0 F8		            bne fill_y_tab2
   358
   359 2400 A9 00		            lda #<screen_mem3
   360 2402 85 86		            sta tmp_screen
   361 2404 A9 90		            lda #>screen_mem3
   362 2406 85 87		            sta tmp_screen+1
   363
   364 				; x = 204
   365 2408			fill_y_tab3
   366 2408 20 11 24		            jsr store_y_line
   367 240B E8			            inx
   368 240C E0 E0		            cpx #224
   369 240E D0 F8		            bne fill_y_tab3
   370 2410 60			            rts
   371
   372 2411			store_y_line
   373 2411 A5 86		            lda tmp_screen
   374 2413 9D 00 18		            sta screen_y_lo,x
   375 2416 A5 87		            lda tmp_screen+1
   376 2418 9D 00 19		            sta screen_y_hi,x
   377 				            
   378 241B A5 86		            lda tmp_screen
   379 241D 18			            clc
   380 241E 69 28		            adc #SCREEN_WIDTH
   381 2420 85 86		            sta tmp_screen
   382 2422 A5 87		            lda tmp_screen+1
   383 2424 69 00		            adc #0
   384 2426 85 87		            sta tmp_screen+1
   385 2428 60			            rts
   386
   387 				; @todo invert backdrop image
   388 				; now we have to do it here :P
   389 2429			invert_backdrop
   390 2429 A9 00		            lda #<screen_mem1
   391 242B 85 86		            sta tmp_screen
   392 242D A9 70		            lda #>screen_mem1
   393 242F 85 87		            sta tmp_screen+1
   394 				            
   395 2431 A2 10		            ldx #16     ; 16 pages = 4K
   396 2433 20 51 24		            jsr do_x_pages
   397 				           
   398 2436 A9 00		            lda #<screen_mem2
   399 2438 85 86		            sta tmp_screen
   400 243A A9 80		            lda #>screen_mem2
   401 243C 85 87		            sta tmp_screen+1
   402 				            
   403 243E A2 10		            ldx #16     ; 16 pages = 4K
   404 2440 20 51 24		            jsr do_x_pages
   405
   406 2443 A9 00		            lda #<screen_mem3
   407 2445 85 86		            sta tmp_screen
   408 2447 A9 90		            lda #>screen_mem3
   409 2449 85 87		            sta tmp_screen+1
   410 				            
   411 244B A2 04		            ldx #4     ; 4 pages = 1K
   412 244D 20 51 24		            jsr do_x_pages
   413 2450 60			            rts
   414
   415 				; invert x pages, starting from tmp_screen
   416
   417 2451			do_x_pages
   418 2451 A0 00		            ldy #0
   419 2453			do_page
   420 2453 B1 86		            lda (tmp_screen),y
   421 2455 49 FF		            eor #$ff
   422 2457 91 86		            sta (tmp_screen),y
   423 2459 C8			            iny
   424 245A D0 F7		            bne do_page 
   425
   426 245C E6 87		            inc tmp_screen+1
   427 245E CA			            dex
   428 245F D0 F2		            bne do_page
   429 2461 60			            rts
   430
   431 2462			turn_color_ball
   432 2462 A6 B5		            ldx player_turn
   433 2464 BD 6B 24		            lda color_turn,x
   434 2467 8D C7 02		            sta COLOR3
   435 246A 60			            rts
   436 				            
   437 246B 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   438
   439 				; A, X, Y are already saved by the OS
   440 246E			vbi                 
   441 246E 20 DE B2		            jsr copy_shadow
   442 2471 20 99 B2		            jsr play_song
   443 2474 20 B2 25		            jsr play_sound_bat
   444 2477 20 D0 25		            jsr play_sound_edge            
   445
   446 247A A9 2E		            lda #%00101110  ; enable P/M DMA
   447 247C 8D 2F 02		            sta SDMCTL
   448 247F A9 00		            lda #0
   449 2481 85 4D		            sta 77      ; attract off
   450 2483 A9 38		            lda #>rotor_font
   451 2485 8D F4 02		            sta 756
   452
   453 				; menu switching thingy
   454
   455 2488 AD 1F D0		            lda CONSOL
   456 248B C9 03		            cmp #3
   457 248D D0 0C		            bne no_option_pressed
   458
   459 248F			go_menu_mode            
   460 248F 20 FC B2		            jsr music_normal_volume
   461 				            
   462 2492 20 19 27		            jsr wipe_ball
   463 				            
   464 2495 A9 01		            lda #1
   465 2497 85 8C		            sta mode_menu
   466 2499 D0 12		            bne check_mode_menu
   467
   468 249B			no_option_pressed
   469 249B C9 06		            cmp #6
   470 249D D0 0E		            bne check_mode_menu
   471 				            
   472 				; reset game
   473
   474 249F			reset_game
   475 249F 20 07 B3		            jsr music_low_volume
   476
   477 24A2 20 19 27		            jsr wipe_ball
   478 				            
   479 24A5 A9 01		            lda #1
   480 24A7 85 B6		            sta game_restart
   481
   482 24A9 A9 00		            lda #0
   483 24AB 85 8C		            sta mode_menu
   484
   485 24AD			check_mode_menu
   486 24AD A5 8C		            lda mode_menu
   487 24AF F0 51		            beq main_game_vbi
   488
   489 				; within menu vbi
   490 				            
   491 24B1 AD 1F D0		            lda CONSOL
   492 24B4 C9 05		            cmp #5          ; select
   493 24B6 D0 18		            bne no_level_select
   494 				            
   495 24B8 AD 82 2A		            lda previous_consol
   496 24BB C9 05		            cmp #5
   497 24BD F0 14		            beq wait_depressed
   498 				            
   499 24BF 20 97 2A		            jsr increase_level
   500 24C2 AE 83 2A		            ldx current_level_index
   501 24C5 20 88 2A		            jsr set_level_ball_speed            
   502
   503 24C8 A9 05		            lda #5
   504 24CA 8D 82 2A		            sta previous_consol
   505 24CD 4C D3 24		            jmp wait_depressed
   506
   507 24D0			no_level_select
   508 24D0 8D 82 2A		            sta previous_consol
   509
   510 24D3			wait_depressed        
   511 24D3 A9 16		            lda #<menu_dl
   512 24D5 8D 30 02		            sta SDLSTL
   513 24D8 A9 41		            lda #>menu_dl
   514 24DA 8D 31 02		            sta SDLSTH
   515
   516 				; detect/show controller type (used for both players)
   517 24DD 20 E9 24		            jsr detect_show_driver
   518
   519 24E0 20 1F 26		            jsr handle_player1
   520 24E3 20 38 26		            jsr handle_player2
   521
   522 24E6 4C A4 25		            jmp exit_vbi
   523
   524 				; X = port/driver to detect
   525 24E9			detect_show_driver
   526 24E9 20 3B 22		            jsr driver_detect
   527 24EC A8			            tay
   528 24ED B9 98 42		            lda driver_text_lo,y
   529 24F0 85 86		            sta tmp_screen
   530 24F2 B9 9C 42		            lda driver_text_hi,y
   531 24F5 85 87		            sta tmp_screen+1
   532
   533 24F7 A0 07		            ldy #7
   534 24F9			show_driv
   535 24F9 B1 86		            lda (tmp_screen),y
   536 24FB 99 1E 42		            sta driver_screen,y
   537 24FE 88			            dey
   538 24FF 10 F8		            bpl show_driv
   539 2501 60			            rts
   540
   541 				; main game vbi
   542 2502			main_game_vbi
   543 2502 A5 B6		            lda game_restart
   544 2504 F0 2C		            beq no_restart
   545
   546 				; restart game
   547 				            
   548 2506 A9 00		            lda #0
   549 2508 85 B6		            sta game_restart
   550 				            
   551 250A 20 50 28		            jsr reset_score
   552 250D 20 1E 28		            jsr show_score_p1
   553 2510 20 37 28		            jsr show_score_p2
   554
   555 2513 A6 9C		            ldx p1_angle
   556 2515 86 AA		            stx ball_angle_start
   557 2517 20 72 26		            jsr ball_to_start_position
   558 251A 20 81 26		            jsr prepare_ball_end_position
   559
   560 251D A9 00		            lda #0
   561 251F 85 A0		            sta mp_collision
   562 2521 85 A1		            sta in_collision
   563 2523 85 A3		            sta edge_delay
   564 2525 8D 1E D0		            sta HITCLR
   565
   566 2528 A9 02		            lda #2
   567 252A 85 B5		            sta player_turn
   568
   569 252C 20 62 24		            jsr turn_color_ball
   570 252F 4C A4 25		            jmp exit_vbi            
   571
   572 2532			no_restart
   573 2532 A9 00		            lda #<display_list
   574 2534 8D 30 02		            sta SDLSTL
   575 2537 A9 40		            lda #>display_list
   576 2539 8D 31 02		            sta SDLSTH
   577
   578 253C AD 08 D0		            lda M0PL
   579 253F 85 A0		            sta mp_collision
   580 2541 AD 09 D0		            lda M1PL
   581 2544 05 A0		            ora mp_collision
   582 2546 85 A0		            sta mp_collision
   583 				 
   584 2548 20 1F 26		            jsr handle_player1
   585 254B 20 38 26		            jsr handle_player2
   586
   587 				; handle ball
   588
   589 254E 20 19 27		            jsr wipe_ball         
   590
   591 				; Check ball collision with bat
   592
   593 2551 A5 A4		            lda bat_collision_delay
   594 2553 F0 05		            beq check_allowed
   595 2555 C6 A4		            dec bat_collision_delay
   596 2557 4C 71 25		            jmp move_one
   597
   598 255A			check_allowed
   599 255A A5 A0		            lda mp_collision
   600 255C F0 0F		            beq reset_in_collision
   601
   602 255E A5 A1		            lda in_collision
   603 2560 D0 0F		            bne no_first_hit
   604
   605 2562 E6 A1		            inc in_collision            
   606 2564 20 AE 26		            jsr bounce_bat_ball 
   607 				            
   608 2567 20 AD 25		            jsr start_sound_bat          
   609 				            
   610 256A 4C 71 25		            jmp move_one
   611 				            
   612 256D			reset_in_collision
   613 256D A9 00		            lda #0
   614 256F 85 A1		            sta in_collision        
   615
   616 2571			move_one
   617 2571			no_first_hit
   618 2571 20 A2 29		            jsr move_current_xy
   619 2574 F0 1B		            beq still_moving
   620
   621 				; edge detected
   622
   623 2576 20 CB 25		            jsr start_sound_edge
   624
   625 2579 A5 AB		            lda ball_angle_end
   626 257B 85 AA		            sta ball_angle_start
   627
   628 257D 20 A5 26		            jsr ball_current_to_start_position
   629 2580 20 81 26		            jsr prepare_ball_end_position
   630 				            
   631 2583 20 EB 25		            jsr update_score
   632 2586 D0 1F		            bne game_ends
   633
   634 				; switch turns
   635 2588 A5 B5		            lda player_turn
   636 258A 49 03		            eor #3              ; 1 => 2, 2 => 1
   637 258C 85 B5		            sta player_turn
   638 258E 20 62 24		            jsr turn_color_ball
   639
   640 2591			still_moving
   641 2591 A5 EB		            lda current_x+1
   642 2593 85 A6		            sta ball_current_x
   643 2595 A5 ED		            lda current_y+1
   644 2597 85 A7		            sta ball_current_y
   645
   646 2599 20 2E 27		            jsr show_ball
   647
   648 259C A9 00		            lda #0
   649 259E 8D 18 D0		            sta $d018           
   650
   651 				; anything in A to clear collisions
   652 25A1 8D 1E D0		            sta HITCLR
   653
   654 25A4			exit_vbi
   655 25A4 4C 62 E4		            jmp $e462
   656
   657 25A7			game_ends
   658 25A7 20 FC B2		            jsr music_normal_volume
   659 25AA 4C 62 E4		            jmp $e462            
   660
   661 25AD			start_sound_bat
   662 25AD A9 0A		            lda #10
   663 25AF 85 8D		            sta volume_hit_bat
   664 25B1 60			            rts
   665 				            
   666 25B2			play_sound_bat
   667 25B2 A5 8D		            lda volume_hit_bat
   668 25B4 30 14		            bmi silenced_bat
   669
   670 25B6 A5 B5		            lda player_turn
   671 25B8 0A			            asl
   672 25B9 0A			            asl
   673 25BA 69 30		            adc #$30
   674 25BC E5 B3		            sbc angle_diff_bat
   675 25BE 8D 66 B3		            sta SHADOW+4    ; $d204
   676 25C1 A5 8D		            lda volume_hit_bat
   677 25C3 09 A0		            ora #$a0
   678 25C5 8D 67 B3		            sta SHADOW+5    ; $d205
   679 25C8 C6 8D		            dec volume_hit_bat
   680 25CA			silenced_bat
   681 25CA 60			            rts
   682
   683 25CB			start_sound_edge
   684 25CB A9 04		            lda #4
   685 25CD 85 8E		            sta volume_hit_edge
   686 25CF 60			            rts
   687
   688 25D0			play_sound_edge
   689 25D0 A5 8E		            lda volume_hit_edge
   690 25D2 30 16		            bmi silenced_edge
   691 25D4 D0 06		            bne no_silenced_edge
   692 25D6 8D 67 B3		            sta SHADOW+5    ; $d205
   693 25D9 C6 8E		            dec volume_hit_edge
   694 25DB 60			            rts            
   695
   696 25DC			no_silenced_edge
   697 25DC A9 08		            lda #$08
   698 25DE 8D 66 B3		            sta SHADOW+4    ; $d204
   699 25E1 A5 8E		            lda volume_hit_edge
   700 25E3 09 26		            ora #$26
   701 25E5 8D 67 B3		            sta SHADOW+5    ; $d205
   702 25E8 C6 8E		            dec volume_hit_edge
   703 25EA			silenced_edge
   704 25EA 60			            rts
   705
   706 				; Update score
   707 				; Score > max score, then exit A = 1, otherwise A = 0
   708
   709 25EB			update_score
   710 25EB A5 B5		            lda player_turn
   711 25ED C9 01		            cmp #1
   712 25EF D0 12		            bne was_player2_turn
   713 				; was player 1 turn, so player 2 gets a point
   714 25F1 20 65 28		            jsr inc_score_p2
   715 25F4 20 37 28		            jsr show_score_p2
   716
   717 25F7 AD 15 41		            lda score_p2
   718 25FA C9 11		            cmp #MAX_SCORE
   719 25FC D0 17		            bne reset_edge_delay
   720
   721 25FE A9 01		            lda #1
   722 2600 85 8C		            sta mode_menu
   723 2602 60			            rts
   724
   725 2603			was_player2_turn
   726 2603 20 59 28		            jsr inc_score_p1
   727 2606 20 1E 28		            jsr show_score_p1
   728
   729 2609 AD 14 41		            lda score_p1
   730 260C C9 11		            cmp #MAX_SCORE
   731 260E D0 05		            bne reset_edge_delay
   732
   733 2610 A9 01		            lda #1
   734 2612 85 8C		            sta mode_menu
   735 2614 60			            rts
   736
   737 2615			reset_edge_delay
   738 2615 A9 0A		            lda #10
   739 2617 85 A3		            sta edge_delay
   740
   741 2619			no_edge
   742
   743 2619 A9 00		            lda #0      ; no end game
   744 				; anything in A to clear collisions
   745 261B 8D 1E D0		            sta HITCLR
   746 261E 60			            rts
   747
   748 				; player 1
   749 				; - wipe shape at previous y-position
   750 				; - move player using controller
   751 				; - set sprite positions
   752
   753 261F			handle_player1
   754 261F 20 86 27		            jsr wipe_p1         ; wipe previous shape player 1
   755
   756 2622 A2 00		            ldx #0              ; player 1
   757 2624 20 51 26		            jsr move_player
   758 				            
   759 2627 20 52 27		            jsr show_p1
   760
   761 262A A5 94		            lda player1_x
   762 262C 18			            clc
   763 262D 69 20		            adc #left_margin
   764 262F 8D 00 D0		            sta HPOSP0
   765 2632 69 08		            adc #8
   766 2634 8D 01 D0		            sta HPOSP1
   767 2637 60			            rts
   768
   769 				; player 2
   770 				; - wipe shape at previous y-position
   771 				; - move player using controller
   772 				; - set sprite positions
   773
   774 2638			handle_player2
   775 2638 20 9B 27		            jsr wipe_p2         ; wipe previous shape player 2
   776
   777 263B A2 01		            ldx #1              ; player 2
   778 263D 20 51 26		            jsr move_player
   779 				                        
   780 2640 20 6C 27		            jsr show_p2
   781
   782 2643 A5 95		            lda player2_x
   783 2645 18			            clc
   784 2646 69 20		            adc #left_margin
   785 2648 8D 02 D0		            sta HPOSP2
   786 264B 69 08		            adc #8
   787 264D 8D 03 D0		            sta HPOSP3
   788 2650 60			            rts
   789
   790 				; move player 1/2
   791 				; right - clockwise, left = anti-clockwise
   792
   793 				; X = 0, player 1
   794 				; X = 1, player 2
   795
   796 				; Y = driver mode:
   797 				; 0 : stick
   798 				; 1 : paddle
   799 				; 2 : driving
   800 				; 3 : computer
   801 				            
   802 2651			move_player
   803 2651 20 6E 22		            jsr main_driver
   804
   805 2654 B5 9C		            lda p1_angle,x
   806 2656 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   807 2658 49 40		            eor #64                     ; perpendicular to the circle angle
   808 265A 95 90		            sta p1_shape,x
   809
   810 265C B4 9C		            ldy p1_angle,x
   811 265E B9 00 2B		            lda inner_x_tab,y
   812 2661 4A			            lsr
   813 2662 69 20		            adc #inner_x_margin/2
   814 2664 95 94		            sta player1_x,x
   815 2666 B9 00 2C		            lda inner_y_tab,y
   816 2669 4A			            lsr
   817 266A 95 98		            sta player1_y,x
   818
   819 266C B4 90		            ldy p1_shape,x
   820 266E 20 D5 27		            jsr shape_to_ptr
   821
   822 2671 60			            rts
   823
   824 				; Set ball at start position
   825 				; - start angle current player
   826 				; - start position by inner table
   827 				; - collision delay set?
   828
   829 				; Set ball current position to start position
   830 				; input:
   831 				; X = angle of start position
   832 				; output:
   833 				; ball position: (ball_current_x, ball_current_y)
   834 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   835 2672			ball_to_start_position
   836 2672 BD 00 2B		            lda inner_x_tab,x
   837 2675 85 A6		            sta ball_current_x
   838 2677 85 E6		            sta tmp_x1
   839 2679 BD 00 2C		            lda inner_y_tab,x
   840 267C 85 A7		            sta ball_current_y
   841 267E 85 E7		            sta tmp_y1
   842 2680 60			            rts
   843
   844 				; Prepare ball end position
   845 				; - end angle current player
   846 				; - end position by outer table
   847 				; - calculate step size x,y
   848
   849 				; Input:
   850 				; - ball_angle_start
   851 				; - ball speed
   852 				; Output:
   853 				; - ball_andle_end
   854 				; - ball start position (tmp_x1, tmp_y1)
   855 				; - ball end position (tmp_x2, tmp_y2)
   856 				; - step size (step_x, step_y) for ball movement
   857 2681			prepare_ball_end_position
   858 2681 A5 AA		            lda ball_angle_start
   859 2683 49 80		            eor #128        ; other side
   860 2685 85 AB		            sta ball_angle_end
   861 2687 AA			            tax
   862 2688 20 0E 27		            jsr angle_to_end_position
   863 				                        
   864 268B 20 35 29		            jsr init_current_xy
   865 				            
   866 				; move current a little bit            
   867 268E 20 A2 29		            jsr move_current_xy
   868 				; ignore end indicator, since we only just started
   869
   870
   871 2691 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   872 2693 85 A4		            sta bat_collision_delay
   873 2695 60			            rts
   874
   875 				; x = angle 0..255
   876 2696			outer_angle_to_start_position
   877 2696 BD 00 16		            lda outer_x_256,x
   878 2699 85 A6		            sta ball_current_x
   879 269B 85 E6		            sta tmp_x1
   880 269D BD 00 17		            lda outer_y_256,x
   881 26A0 85 A7		            sta ball_current_y
   882 26A2 85 E7		            sta tmp_y1
   883 26A4 60			            rts
   884
   885 26A5			ball_current_to_start_position
   886 26A5 A5 A6		            lda ball_current_x
   887 26A7 85 E6		            sta tmp_x1
   888 26A9 A5 A7		            lda ball_current_y
   889 26AB 85 E7		            sta tmp_y1
   890 26AD 60			            rts
   891
   892 				; Ball collides with bat
   893 				; - start ball angle = end ball angle
   894 				; - calculate diff between bat and ball end angle
   895 				; - calculate new end angle
   896 				; - Set ball at start position
   897 				; - Prepare ball end position
   898
   899 26AE			bounce_bat_ball
   900 				; set new start of ball
   901 				; @todo check ball angles
   902 				; set new ball start angle (= previous end angle)
   903 26AE A5 AB		            lda ball_angle_end
   904 26B0 85 AA		            sta ball_angle_start
   905 				            
   906 				; alternative?
   907 				            ;ldx ball_angle_start
   908 				            ;jsr ball_to_start_position          
   909 26B2 20 A5 26		            jsr ball_current_to_start_position
   910
   911 				; which player hit the ball?
   912 26B5 A9 01		            lda #1
   913 26B7 85 A2		            sta player_nr_hit
   914 26B9 A5 A0		            lda mp_collision
   915 26BB 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   916 26BD D0 04		            bne p1_hit
   917 26BF A9 02		            lda #2
   918 26C1 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   919 26C3			p1_hit            
   920
   921 				; who's turn is it and who bounced the ball?
   922
   923 26C3 A5 B5		            lda player_turn
   924 26C5 25 A2		            and player_nr_hit
   925 26C7 F0 06		            beq no_switch_turn
   926
   927 26C9 A5 B5		            lda player_turn
   928 26CB 49 03		            eor #3              ; 1 => 2, 2 => 1
   929 26CD 85 B5		            sta player_turn 
   930
   931 26CF			no_switch_turn
   932 26CF 20 62 24		            jsr turn_color_ball
   933 				            
   934 26D2 A6 A2		            ldx player_nr_hit
   935 26D4 CA			            dex                     ; index 0,1 (player = 1,2)
   936 26D5 B5 9C		            lda p1_angle,x
   937
   938 				; Calculate diff between bat angle position and new ball start position
   939 26D7 85 B0		            sta tmp_angle1
   940
   941 26D9 A5 AA		            lda ball_angle_start
   942 26DB 85 B1		            sta tmp_angle2
   943
   944 26DD 20 71 28		            jsr calc_angle_diff
   945
   946 26E0 0A			            asl
   947 26E1 0A			            asl
   948 26E2 0A			            asl
   949 26E3 85 B3		            sta angle_diff_bat
   950
   951 26E5 A5 B0		            lda tmp_angle1
   952 26E7 18			            clc
   953 26E8 65 B2		            adc add_to_angle
   954 26EA 49 80		            eor #128            ; other side
   955 26EC 85 B0		            sta tmp_angle1
   956 				            
   957 26EE A5 B4		            lda tmp_angle_direction
   958 26F0 D0 0A		            bne diff_clockwise
   959 				; diff counter clockwise
   960 26F2 A5 B0		            lda tmp_angle1
   961 26F4 18			            clc
   962 26F5 65 B3		            adc angle_diff_bat
   963 26F7 85 B0		            sta tmp_angle1
   964 26F9 4C 03 27		            jmp calc_done            
   965
   966 26FC			diff_clockwise
   967 26FC A5 B0		            lda tmp_angle1
   968 26FE 38			            sec
   969 26FF E5 B3		            sbc angle_diff_bat
   970 2701 85 B0		            sta tmp_angle1
   971 				            
   972 				; calculation done            
   973 2703			calc_done
   974 2703 A5 B0		            lda tmp_angle1
   975 2705 85 AB		            sta ball_angle_end
   976 2707 AA			            tax
   977 2708 20 0E 27		            jsr angle_to_end_position
   978 				                        
   979 270B 4C 35 29		            jmp init_current_xy
   980
   981 				; x = angle 0..255
   982 270E			angle_to_end_position
   983 270E BD 00 16		            lda outer_x_256,x
   984 2711 85 E8		            sta tmp_x2
   985 2713 BD 00 17		            lda outer_y_256,x
   986 2716 85 E9		            sta tmp_y2
   987 2718 60			            rts
   988
   989 2719			wipe_ball
   990 2719 A5 A7		            lda ball_current_y
   991 271B 4A			            lsr
   992 271C 69 06		            adc #ball_top_margin
   993 271E AA			            tax                 ; x = real y position on screen
   994 271F A9 00		            lda #0
   995 2721 9D 80 11		            sta msl_area,x
   996 2724 9D 81 11		            sta msl_area+1,x
   997 2727 9D 82 11		            sta msl_area+2,x
   998 272A 9D 83 11		            sta msl_area+3,x
   999 272D 60			            rts
  1000
  1001 272E			show_ball
  1002 272E A5 A7		            lda ball_current_y
  1003 2730 4A			            lsr
  1004 2731 69 06		            adc #ball_top_margin
  1005 2733 AA			            tax                 ; x = real y position on screen
  1006
  1007 2734 A9 02		            lda #%00000010
  1008 2736 9D 80 11		            sta msl_area,x
  1009 2739 9D 83 11		            sta msl_area+3,x
  1010 273C A9 07		            lda #%00000111
  1011 273E 9D 81 11		            sta msl_area+1,x
  1012 2741 9D 82 11		            sta msl_area+2,x
  1013 				            
  1014 2744 A5 A6		            lda ball_current_x
  1015 2746 4A			            lsr
  1016 2747 69 45		            adc #ball_left_margin
  1017 2749 8D 05 D0		            sta HPOSM1
  1018 274C 69 02		            adc #2
  1019 274E 8D 04 D0		            sta HPOSM0
  1020 				                        
  1021 2751 60			            rts
  1022 				            
  1023 2752			show_p1
  1024 2752 A5 98		            lda player1_y
  1025 2754 18			            clc
  1026 2755 69 01		            adc #upper_margin
  1027 2757 AA			            tax
  1028
  1029 2758 A0 00		            ldy #0
  1030 275A			show_shape1
  1031 275A B1 84		            lda (shape_ptr),y
  1032 275C 9D 00 12		            sta p0_area,x 
  1033 275F C8			            iny
  1034 2760 B1 84		            lda (shape_ptr),y
  1035 2762 9D 80 12		            sta p1_area,x
  1036 2765 E8			            inx
  1037 2766 C8			            iny
  1038 2767 C0 20		            cpy #32
  1039 2769 D0 EF		            bne show_shape1
  1040 276B 60			            rts
  1041
  1042 276C			show_p2
  1043 276C A5 99		            lda player2_y
  1044 276E 18			            clc
  1045 276F 69 01		            adc #upper_margin
  1046 2771 AA			            tax
  1047
  1048 2772 A0 00		            ldy #0
  1049 2774			show_shape2
  1050 2774 B1 84		            lda (shape_ptr),y
  1051 2776 9D 00 13		            sta p2_area,x 
  1052 2779 C8			            iny
  1053 277A B1 84		            lda (shape_ptr),y
  1054 277C 9D 80 13		            sta p3_area,x
  1055 277F E8			            inx
  1056 2780 C8			            iny
  1057 2781 C0 20		            cpy #32
  1058 2783 D0 EF		            bne show_shape2
  1059 2785 60			            rts
  1060
  1061 2786			wipe_p1
  1062 2786 A5 98		            lda player1_y
  1063 2788 18			            clc
  1064 2789 69 01		            adc #upper_margin
  1065 278B AA			            tax
  1066 				            
  1067 278C A0 10		            ldy #16
  1068 278E A9 00		            lda #0
  1069 2790			wipe_it1            
  1070 2790 9D 00 12		            sta p0_area,x 
  1071 2793 9D 80 12		            sta p1_area,x
  1072 2796 E8			            inx
  1073 2797 88			            dey
  1074 2798 D0 F6		            bne wipe_it1 
  1075 279A 60			            rts
  1076
  1077 279B			wipe_p2
  1078 279B A5 99		            lda player2_y
  1079 279D 18			            clc
  1080 279E 69 01		            adc #upper_margin
  1081 27A0 AA			            tax
  1082 				            
  1083 27A1 A0 10		            ldy #16
  1084 27A3 A9 00		            lda #0
  1085 27A5			wipe_it2            
  1086 27A5 9D 00 13		            sta p2_area,x 
  1087 27A8 9D 80 13		            sta p3_area,x
  1088 27AB E8			            inx
  1089 27AC 88			            dey
  1090 27AD D0 F6		            bne wipe_it2 
  1091 27AF 60			            rts
  1092
  1093 27B0			make_shape_index
  1094 27B0 A9 00		            lda #<pm_shapes
  1095 27B2 85 84		            sta shape_ptr
  1096 27B4 A9 50		            lda #>pm_shapes
  1097 27B6 85 85		            sta shape_ptr+1
  1098 				            
  1099 27B8 A2 00		            ldx #0
  1100 27BA			fill_pm_tab
  1101 27BA A5 84		            lda shape_ptr
  1102 27BC 9D 00 60		            sta pm_shape_lo,x
  1103 27BF A5 85		            lda shape_ptr+1
  1104 27C1 9D 80 60		            sta pm_shape_hi,x
  1105 				            
  1106 27C4 A5 84		            lda shape_ptr
  1107 27C6 18			            clc
  1108 27C7 69 20		            adc #32
  1109 27C9 85 84		            sta shape_ptr
  1110 27CB A5 85		            lda shape_ptr+1
  1111 27CD 69 00		            adc #0
  1112 27CF 85 85		            sta shape_ptr+1
  1113 				            
  1114 27D1 E8			            inx
  1115 27D2 10 E6		            bpl fill_pm_tab
  1116 				            
  1117 27D4 60			            rts
  1118 				            
  1119 				; there are 128 shapes, each 32 bytes
  1120
  1121 				; y = shape index
  1122 27D5			shape_to_ptr
  1123 27D5 B9 00 60		            lda pm_shape_lo,y
  1124 27D8 85 84		            sta shape_ptr
  1125 27DA B9 80 60		            lda pm_shape_hi,y
  1126 27DD 85 85		            sta shape_ptr+1
  1127
  1128 27DF 60			            rts
  1129
  1130 				; turn 1024 tables into 256 bytes for ball edge lookup
  1131 27E0			make_outer_256
  1132 27E0 A0 00		            ldy #0
  1133 27E2 A2 00		            ldx #0
  1134 27E4			conv_256
  1135 27E4 BD 00 30		            lda outer_x_tab,x
  1136 27E7 99 00 16		            sta outer_x_256,y
  1137 27EA BD 00 31		            lda outer_x_tab+$100,x
  1138 27ED 99 40 16		            sta outer_x_256+64,y
  1139 27F0 BD 00 32		            lda outer_x_tab+$200,x
  1140 27F3 99 80 16		            sta outer_x_256+128,y
  1141 27F6 BD 00 33		            lda outer_x_tab+$300,x
  1142 27F9 99 C0 16		            sta outer_x_256+192,y
  1143 				            
  1144 27FC BD 00 34		            lda outer_y_tab,x
  1145 27FF 99 00 17		            sta outer_y_256,y
  1146 2802 BD 00 35		            lda outer_y_tab+$100,x
  1147 2805 99 40 17		            sta outer_y_256+64,y
  1148 2808 BD 00 36		            lda outer_y_tab+$200,x
  1149 280B 99 80 17		            sta outer_y_256+128,y
  1150 280E BD 00 37		            lda outer_y_tab+$300,x
  1151 2811 99 C0 17		            sta outer_y_256+192,y
  1152
  1153 2814 E8			            inx
  1154 2815 E8			            inx
  1155 2816 E8			            inx
  1156 2817 E8			            inx
  1157 2818 C8			            iny
  1158 2819 C0 40		            cpy #64
  1159 281B D0 C7		            bne conv_256            
  1160 281D 60			            rts
  1161
  1162 281E			show_score_p1
  1163 281E AD 14 41		            lda score_p1
  1164 2821 4A			            lsr
  1165 2822 4A			            lsr
  1166 2823 4A			            lsr
  1167 2824 4A			            lsr
  1168 2825 F0 02		            beq do_space1
  1169 2827 09 10		            ora #16
  1170 2829			do_space1
  1171 2829 8D F1 40		            sta score_chars_p1
  1172 282C AD 14 41		            lda score_p1
  1173 282F 29 0F		            and #15
  1174 2831 09 10		            ora #16
  1175 2833 8D F2 40		            sta score_chars_p1+1
  1176 2836 60			            rts
  1177
  1178 2837			show_score_p2
  1179 2837 AD 15 41		            lda score_p2
  1180 283A 4A			            lsr
  1181 283B 4A			            lsr
  1182 283C 4A			            lsr
  1183 283D 4A			            lsr
  1184 283E F0 02		            beq do_space2
  1185 2840 09 10		            ora #16
  1186 2842			do_space2
  1187 2842 8D 11 41		            sta score_chars_p2
  1188 2845 AD 15 41		            lda score_p2
  1189 2848 29 0F		            and #15
  1190 284A 09 10		            ora #16
  1191 284C 8D 12 41		            sta score_chars_p2+1
  1192 284F 60			            rts
  1193 				                        
  1194 2850			reset_score
  1195 2850 A9 00		            lda #0
  1196 2852 8D 14 41		            sta score_p1
  1197 2855 8D 15 41		            sta score_p2
  1198 2858 60			            rts            
  1199 				         
  1200 2859			inc_score_p1
  1201 2859 F8			            sed
  1202 285A AD 14 41		            lda score_p1
  1203 285D 18			            clc
  1204 285E 69 01		            adc #1
  1205 2860 8D 14 41		            sta score_p1    
  1206 2863 D8			            cld
  1207 2864 60			            rts
  1208
  1209 2865			inc_score_p2
  1210 2865 F8			            sed
  1211 2866 AD 15 41		            lda score_p2
  1212 2869 18			            clc
  1213 286A 69 01		            adc #1
  1214 286C 8D 15 41		            sta score_p2
  1215 286F D8			            cld
  1216 2870 60			            rts
  1217
  1218 				; calculate the difference between angle1 and angle2
  1219
  1220 				; input:
  1221 				; tmp_angle1 (0..255)
  1222 				; tmp_angle2 (0..255)
  1223
  1224 				; output:
  1225 				; tmp_angle_diff, A: difference between angle1 and angle2
  1226 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1227
  1228 2871			calc_angle_diff
  1229 2871 A9 00		            lda #0
  1230 2873 85 B2		            sta add_to_angle
  1231 2875 85 B4		            sta tmp_angle_direction
  1232
  1233 				; make sure we can compare angles, otherwise add $40 to angles
  1234 2877 A5 B0		            lda tmp_angle1
  1235 2879 C9 C0		            cmp #$c0
  1236 287B B0 06		            bcs too_large
  1237 287D A5 B1		            lda tmp_angle2
  1238 287F C9 C0		            cmp #$c0
  1239 2881 90 12		            bcc not_too_large
  1240 2883			too_large
  1241 2883 A5 B0		            lda tmp_angle1
  1242 2885 38			            sec
  1243 2886 E9 40		            sbc #$40
  1244 2888 85 B0		            sta tmp_angle1
  1245 				            
  1246 288A A5 B1		            lda tmp_angle2
  1247 288C 38			            sec
  1248 288D E9 40		            sbc #$40
  1249 288F 85 B1		            sta tmp_angle2
  1250 				            
  1251 2891 A9 40		            lda #$40
  1252 2893 85 B2		            sta add_to_angle
  1253
  1254 2895			not_too_large
  1255 2895 A5 B1		            lda tmp_angle2
  1256 2897 C5 B0		            cmp tmp_angle1
  1257 2899 90 0A		            bcc angle2_smaller_angle1
  1258 				; ball >= play
  1259 289B 38			            sec
  1260 289C E5 B0		            sbc tmp_angle1
  1261 289E 85 B7		            sta tmp_angle_diff
  1262 				            
  1263 28A0 E6 B4		            inc tmp_angle_direction
  1264 28A2 4C AC 28		            jmp diff_calculated
  1265 				                        
  1266 28A5			angle2_smaller_angle1
  1267 28A5 A5 B0		            lda tmp_angle1
  1268 28A7 38			            sec
  1269 28A8 E5 B1		            sbc tmp_angle2
  1270 28AA 85 B7		            sta tmp_angle_diff
  1271
  1272 28AC			diff_calculated
  1273 28AC A5 B7		            lda tmp_angle_diff           
  1274 28AE 60			            rts
  1275
  1276 				; X = angle
  1277 				; lookup magnitude of angle 0 to angle X
  1278 28AF			angle_to_magnitude
  1279 28AF BD 00 3C		            lda magnitudes_lo,x
  1280 28B2 85 B8		            sta magnitude
  1281 28B4 BD 00 3D		            lda magnitudes_hi,x
  1282 28B7 85 B9		            sta magnitude+1
  1283 28B9 60			            rts
  1284
  1285 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1286 28BA			calc_abs_tmp_dx
  1287 28BA A5 E8		            lda tmp_x2
  1288 28BC 38			            sec
  1289 28BD E5 E6		            sbc tmp_x1
  1290 28BF B0 05		            bcs x2_le
  1291 28C1 49 FF		            eor #255
  1292 28C3 18			            clc
  1293 28C4 69 01		            adc #1
  1294 28C6 85 F2		x2_le       sta tmp_dx
  1295
  1296 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1297 28C8			calc_abs_tmp_dy
  1298 28C8 A5 E9		            lda tmp_y2
  1299 28CA 38			            sec
  1300 28CB E5 E7		            sbc tmp_y1
  1301 28CD B0 05		            bcs y2_le
  1302 28CF 49 FF		            eor #255
  1303 28D1 18			            clc
  1304 28D2 69 01		            adc #1
  1305 28D4 85 F3		y2_le       sta tmp_dy
  1306 28D6 60			            rts
  1307 				            
  1308 28D7			calc_dx_div_magnitude
  1309 28D7 A9 00		            lda #0
  1310 28D9 85 E2		            sta _dividend
  1311 28DB A5 F2		            lda tmp_dx
  1312 28DD 85 E3		            sta _dividend+1
  1313
  1314 28DF A5 B9		            lda magnitude+1
  1315 28E1 85 E0		            sta _divisor
  1316 28E3 A9 00		            lda #0
  1317 28E5 85 E1		            sta _divisor+1
  1318 				            
  1319 28E7 20 0F 29		            jsr _div16
  1320
  1321 				; todo multiply result with velocity            
  1322 28EA A5 E2		            lda _result
  1323 28EC 85 EE		            sta step_x
  1324 28EE A5 E3		            lda _result+1
  1325 28F0 85 EF		            sta step_x+1
  1326 				            
  1327 28F2 60			            rts
  1328 				            
  1329 28F3			calc_dy_div_magnitude
  1330 28F3 A9 00		            lda #0
  1331 28F5 85 E2		            sta _dividend
  1332 28F7 A5 F3		            lda tmp_dy
  1333 28F9 85 E3		            sta _dividend+1
  1334 				            
  1335 28FB A5 B9		            lda magnitude+1
  1336 28FD 85 E0		            sta _divisor
  1337 28FF A9 00		            lda #0
  1338 2901 85 E1		            sta _divisor+1
  1339
  1340 2903 20 0F 29		            jsr _div16
  1341 				            
  1342 				; todo multiply result with velocity
  1343 2906 A5 E2		            lda _result
  1344 2908 85 F0		            sta step_y
  1345 290A A5 E3		            lda _result+1
  1346 290C 85 F1		            sta step_y+1
  1347 				            
  1348 290E 60			            rts
  1349
  1350 				; divide 16bit
  1351 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1352
  1353 				; _result = _dividend / divisor
  1354
  1355 290F A9 00		_div16      lda #0          ;preset remainder to 0
  1356 2911 85 E4		            sta _remainder
  1357 2913 85 E5		            sta _remainder+1
  1358 2915 A2 10		            ldx #16         ;repeat for each bit: ...
  1359
  1360 2917 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1361 2919 26 E3		            rol _dividend+1  
  1362 291B 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1363 291D 26 E5		            rol _remainder+1
  1364 291F A5 E4		            lda _remainder
  1365 2921 38			            sec
  1366 2922 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1367 2924 A8			            tay         ;lb result -> Y, for we may need it later
  1368 2925 A5 E5		            lda _remainder+1
  1369 2927 E5 E1		            sbc _divisor+1
  1370 2929 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1371
  1372 292B 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1373 292D 84 E4		            sty _remainder   
  1374 292F E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1375
  1376 2931 CA			_div_skip   dex
  1377 2932 D0 E3		            bne _div_loop 
  1378 2934 60			            rts
  1379
  1380 				; Calculations for step size
  1381
  1382 				; not optimised for speed or size
  1383 				; step should be set according to the angle
  1384
  1385 				; move in straight line (x1,y1) to (x2,y2)
  1386
  1387 				; 1. set start/end of line
  1388 				; set (tmp_x1, tmp_y1)
  1389 				; set (tmp_x2, tmp_y2)
  1390
  1391 				; 2. init. current_x, current_y
  1392 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1393 				; - calculates step sizes for x,y
  1394 				; - calculated directions for x,y
  1395 				;            jsr init_current_xy
  1396
  1397 				; 3. use current_x, current_y to plot or set a position
  1398 				;            lda current_x+1
  1399 				;            sta x_position
  1400 				;            lda current_y+1
  1401 				;            sta y_position
  1402 				;            jsr plot_pixel
  1403
  1404 				; 4. move current_x, current_y to next position on line
  1405 				; A=0 still moving
  1406 				;           move_current_xy
  1407
  1408 2935			init_current_xy
  1409 2935 A9 7F		            lda #$7f      ; was 128 for half pixel
  1410 2937 85 EA		            sta current_x
  1411 2939 85 EC		            sta current_y
  1412
  1413 293B A5 E6		            lda tmp_x1
  1414 293D 85 EB		            sta current_x+1
  1415 				            
  1416 293F A5 E7		            lda tmp_y1
  1417 2941 85 ED		            sta current_y+1
  1418
  1419 				; dx = abs(tmp_x1 - tmp_x2)
  1420 2943 20 BA 28		            jsr calc_abs_tmp_dx
  1421
  1422 				; dy = abs(tmp_y1 - tmp_y2)
  1423 2946 20 C8 28		            jsr calc_abs_tmp_dy
  1424
  1425 				; set directions
  1426 2949 A5 E6		            lda tmp_x1
  1427 294B C5 E8		            cmp tmp_x2
  1428 294D 90 04		            bcc x1_smaller_x2
  1429 				; x1 >= x2
  1430 294F A9 01		            lda #1
  1431 2951 D0 02		            bne set_dir_x
  1432 2953			x1_smaller_x2
  1433 2953 A9 00		            lda #0
  1434 2955			set_dir_x
  1435 2955 85 FA		            sta dir_x
  1436 				            
  1437 2957 A5 E7		            lda tmp_y1
  1438 2959 C5 E9		            cmp tmp_y2
  1439 295B 90 04		            bcc y1_smaller_y2
  1440 				; y1 >= y2
  1441 295D A9 01		            lda #1
  1442 295F D0 02		            bne set_dir_y
  1443 2961			y1_smaller_y2
  1444 2961 A9 00		            lda #0
  1445 2963			set_dir_y
  1446 2963 85 FB		            sta dir_y
  1447
  1448 				; Calculate diff between start angle and end angle
  1449
  1450 2965 A5 AA		            lda ball_angle_start
  1451 2967 85 B0		            sta tmp_angle1
  1452 2969 A5 AB		            lda ball_angle_end
  1453 296B 85 B1		            sta tmp_angle2
  1454 				            
  1455 296D 20 71 28		            jsr calc_angle_diff
  1456
  1457 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1458 2970 A6 B7		            ldx tmp_angle_diff
  1459 2972 20 AF 28		            jsr angle_to_magnitude
  1460 				            
  1461 2975 20 D7 28		            jsr calc_dx_div_magnitude
  1462 2978 20 F3 28		            jsr calc_dy_div_magnitude
  1463 				            
  1464 				; Calculate step size by ball speed
  1465 				            
  1466 				; step_x = step_x * speed
  1467 				            
  1468 297B A5 EE		            lda step_x
  1469 297D 85 F6		            sta _multiplicand
  1470 297F A5 EF		            lda step_x+1
  1471 2981 85 F7		            sta _multiplicand+1
  1472 2983 A5 AC		            lda ball_speed
  1473 2985 85 F8		            sta _multiplier
  1474
  1475 2987 20 36 23		            jsr _multi8
  1476 				;result in .A (low byte, also in .X) and .Y (high byte)
  1477 298A 85 EE		            sta step_x
  1478 298C 84 EF		            sty step_x+1
  1479 298E			skip_step_x_hi
  1480 				            
  1481 				; step_y = step_y * speed
  1482
  1483 298E A5 F0		            lda step_y
  1484 2990 85 F6		            sta _multiplicand
  1485 2992 A5 F1		            lda step_y+1
  1486 2994 85 F7		            sta _multiplicand+1
  1487 2996 A5 AC		            lda ball_speed
  1488 2998 85 F8		            sta _multiplier
  1489
  1490 299A 20 36 23		            jsr _multi8
  1491 				;result in .A (low byte, also in .X) and .Y (high byte)
  1492 299D 85 F0		            sta step_y
  1493 299F 84 F1		            sty step_y+1
  1494 29A1			skip_step_y_hi
  1495
  1496 29A1 60			            rts
  1497
  1498 				; Move ball position 
  1499 				; Add one step, until end reached
  1500 				; Input:
  1501 				; - step size (step_x, step_y)
  1502 				; - current ball position (current_x, current_y)
  1503 				; - end position (tmp_x2, tmp_y2)
  1504 				; Output:
  1505 				; A (0 = still moving, 1 = end reached)
  1506 29A2			move_current_xy
  1507 29A2 A9 00		            lda #0
  1508 29A4 85 FC		            sta line_end_x
  1509 29A6 85 FD		            sta line_end_y
  1510
  1511 				; sets line end indicators here
  1512 29A8 20 C5 29		            jsr move_current_x
  1513 29AB 20 05 2A		            jsr move_current_y
  1514
  1515 29AE A5 FC		            lda line_end_x
  1516 29B0 25 FD		            and line_end_y
  1517 29B2 F0 10		            beq no_end_reached
  1518 				            
  1519 				; set current to (x2,y2)
  1520 29B4 A5 E8		            lda tmp_x2
  1521 29B6 85 EB		            sta current_x+1
  1522 29B8 A5 E9		            lda tmp_y2
  1523 29BA 85 ED		            sta current_y+1
  1524 				            
  1525 29BC A9 00		            lda #0
  1526 29BE 85 EA		            sta current_x
  1527 29C0 85 EC		            sta current_y
  1528 				            
  1529 29C2 A9 01		            lda #1 ; end reached
  1530 				            
  1531 29C4			no_end_reached  ; A = 0
  1532 29C4 60			            rts
  1533
  1534 29C5			move_current_x
  1535 29C5 A5 FA		            lda dir_x
  1536 29C7 D0 18		            bne move_current_left
  1537
  1538 				; move right, add
  1539 29C9 A5 EA		            lda current_x
  1540 29CB 18			            clc
  1541 29CC 65 EE		            adc step_x
  1542 29CE 85 EA		            sta current_x
  1543 29D0 A5 EB		            lda current_x+1
  1544 29D2 65 EF		            adc step_x+1
  1545 29D4 85 EB		            sta current_x+1
  1546
  1547 29D6 A5 EB		            lda current_x+1
  1548 29D8 C5 E8		            cmp tmp_x2
  1549 29DA 90 04		            bcc no_line_end
  1550 29DC			exact_end_x
  1551 29DC A9 01		            lda #1
  1552 29DE 85 FC		            sta line_end_x 
  1553 29E0			no_line_end
  1554 29E0 60			            rts
  1555 				            
  1556 29E1			move_current_left
  1557 29E1 A5 EA		            lda current_x
  1558 29E3 38			            sec
  1559 29E4 E5 EE		            sbc step_x
  1560 29E6 90 01		            bcc clear_skip
  1561 29E8 EA			            nop
  1562 29E9			clear_skip
  1563 29E9 85 EA		            sta current_x
  1564 29EB A5 EB		            lda current_x+1
  1565 29ED E5 EF		            sbc step_x+1
  1566 29EF 85 EB		            sta current_x+1
  1567 29F1 90 0B		            bcc below_zero
  1568 				                        
  1569 29F3 A5 E8		            lda tmp_x2
  1570 29F5 C5 EB		            cmp current_x+1
  1571 29F7 90 E7		            bcc no_line_end
  1572 29F9 A9 01		            lda #1
  1573 29FB 85 FC		            sta line_end_x            
  1574 29FD 60			            rts
  1575 29FE			below_zero            
  1576 29FE A9 01		            lda #1
  1577 2A00 85 FC		            sta line_end_x
  1578 2A02 85 FD		            sta line_end_y
  1579 2A04 60			            rts
  1580 2A05			move_current_y
  1581 2A05 A5 FB		            lda dir_y
  1582 2A07 D0 18		            bne move_current_up
  1583
  1584 				; move down, add
  1585 2A09 A5 EC		            lda current_y
  1586 2A0B 18			            clc
  1587 2A0C 65 F0		            adc step_y
  1588 2A0E 85 EC		            sta current_y
  1589 2A10 A5 ED		            lda current_y+1
  1590 2A12 65 F1		            adc step_y+1
  1591 2A14 85 ED		            sta current_y+1
  1592 				            
  1593 2A16 A5 ED		            lda current_y+1
  1594 2A18 C5 E9		            cmp tmp_y2
  1595 2A1A 90 C4		            bcc no_line_end
  1596 2A1C			exact_end_y
  1597 2A1C A9 01		            lda #1
  1598 2A1E 85 FD		            sta line_end_y
  1599 2A20 60			            rts
  1600
  1601 2A21			move_current_up
  1602 2A21 A5 EC		            lda current_y
  1603 2A23 38			            sec
  1604 2A24 E5 F0		            sbc step_y
  1605 2A26 85 EC		            sta current_y
  1606 2A28 A5 ED		            lda current_y+1
  1607 2A2A E5 F1		            sbc step_y+1
  1608 2A2C 90 D0		            bcc below_zero
  1609 2A2E 85 ED		            sta current_y+1
  1610 				            
  1611 2A30 A5 E9		            lda tmp_y2
  1612 2A32 C5 ED		            cmp current_y+1
  1613 2A34 90 AA		            bcc no_line_end
  1614 2A36 A9 01		            lda #1
  1615 2A38 85 FD		            sta line_end_y
  1616 2A3A 60			            rts                            
  1617 				            
  1618 2A3B			init_sprites
  1619 2A3B A2 00		            ldx #0
  1620 2A3D 8A			            txa
  1621 2A3E			set_p
  1622 2A3E 9D 00 12		            sta p0_area,x
  1623 2A41 9D 80 12		            sta p1_area,x
  1624 2A44 9D 00 13		            sta p2_area,x
  1625 2A47 9D 80 13		            sta p3_area,x
  1626 2A4A E8			            inx
  1627 2A4B 10 F1		            bpl set_p               
  1628
  1629 2A4D A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1630 2A4F 8D 6F 02		            sta GPRIOR
  1631 				    
  1632 2A52 A9 10		            lda #>pm_area
  1633 2A54 8D 07 D4		            sta PMBASE
  1634 				    
  1635 2A57 A9 03		            lda #3          ; P/M both on
  1636 2A59 8D 1D D0		            sta GRACTL
  1637 				    
  1638 2A5C A9 90		            lda #$90
  1639 2A5E 8D 02 D0		            sta HPOSP2
  1640 2A61 A9 A0		            lda #$A0
  1641 2A63 8D 03 D0		            sta HPOSP3  
  1642 2A66 60			            rts            
  1643
  1644 2A67			init_colors
  1645 2A67 A9 5A		            lda #BASE_COLOR_P1+10
  1646 2A69 8D C0 02		            sta PCOLR0
  1647 2A6C 8D C1 02		            sta PCOLR1
  1648
  1649 2A6F A9 BA		            lda #BASE_COLOR_P2+10
  1650 2A71 8D C2 02		            sta PCOLR2
  1651 2A74 8D C3 02		            sta PCOLR3
  1652 				            
  1653 2A77 A9 00		            lda #0
  1654 2A79 8D C6 02		            sta COLOR2
  1655 2A7C A9 08		            lda #8
  1656 2A7E 8D C5 02		            sta COLOR1
  1657 2A81 60			            rts
  1658
  1659 2A82			previous_consol
  1660 2A82 00			            dta 0
  1661
  1662 2A83			current_level_index
  1663 2A83 00			            dta 0
  1664 = 0004			NR_OF_LEVELS = 4
  1665 = 0000			INIT_LEVEL_INDEX = 0
  1666 2A84			level_speeds
  1667 2A84 02 04 06 08		            dta 2,4,6,8
  1668 				            
  1669 				; X = level (0..NR_OF_LEVELS)
  1670 2A88			set_level_ball_speed
  1671 2A88 BD 84 2A		            lda level_speeds,x
  1672 2A8B 85 AC		            sta ball_speed
  1673 2A8D 8A			            txa
  1674 2A8E 18			            clc
  1675 2A8F 69 01		            adc #1
  1676 2A91 09 10		            ora #16
  1677 2A93 8D 48 42		            sta level_char
  1678 2A96 60			            rts
  1679 				            
  1680 2A97			increase_level
  1681 2A97 EE 83 2A		            inc current_level_index
  1682 2A9A AD 83 2A		            lda current_level_index
  1683 2A9D C9 04		            cmp #NR_OF_LEVELS
  1684 2A9F D0 05		            bne ok_level
  1685 2AA1 A9 00		            lda #INIT_LEVEL_INDEX
  1686 2AA3 8D 83 2A		            sta current_level_index
  1687 2AA6			ok_level           
  1688 2AA6 60			            rts
  1689 				            
  1690 2AA7			            .align $100
  1691 2B00			inner_x_tab
  1692 = 2C00			inner_y_tab = *+$100
  1693 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1694 				      
  1695 2D00			            .align $400            
  1696 				; outer circle 1024 plot points on 360 degrees
  1697 3000			outer_x_tab
  1698 = 3400			outer_y_tab = *+1024
  1699 3000-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1700
  1701 3800			            .align $400
  1702 3800			rotor_font
  1703 3800 00 00 00 00 00 00 +             ins 'font\rotor.fnt'
  1704 				           
  1705 3C00			            .align $400
  1706 				; table of magnitudes (length) between angle 0 and 0..255
  1707 				; fixed point 8.8 : hi.lo
  1708 3C00			magnitudes_lo
  1709 = 3D00			magnitudes_hi = *+256
  1710 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1711
  1712 3E00			            .align $400
  1713 4000			display_list
  1714 4000-41CC> 42		            dta $42
  1715 4001 EC 40		            dta a(score_line)
  1716
  1717 				; 102 x 40 = 4080 bytes            
  1718 4003 4F			            dta $4f
  1719 4004			dl_screen_ptr1
  1720 4004 00 70		            dta a(screen_mem1)
  1721 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1722 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1723 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1724 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1725
  1726 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1727 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1728 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1729 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1730
  1731 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1732 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1733 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1734 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1735
  1736 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1737
  1738 				; 102 x 40 = 4080 bytes
  1739 406B 4F			            dta $4f
  1740 406C			dl_screen_ptr2
  1741 406C 00 80		            dta a(screen_mem2)
  1742 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1743 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1744 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1745 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1746
  1747 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1748 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1749 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1750 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1751
  1752 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1753 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1754 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1755 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1756
  1757 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1758
  1759 				; 20 x 40 = 800
  1760 40D3 4F			            dta $4f
  1761 40D4 00 90		            dta a(screen_mem3)       
  1762 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1763 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1764 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1765 				            
  1766 40E9 41			            dta $41
  1767 40EA 00 40		            dta a(display_list)
  1768
  1769 40EC			score_line  
  1770 40EC 00 2F 2E 25 00	            dta d' ONE '
  1771 40F1			score_chars_p1
  1772 40F1 0D 0D 00		            dta d'-- '
  1773
  1774 40F4 00 00 00 00 00 00 +             dta d'          '
  1775 40FE 00 00 00 00 00 00 +             dta d'          '
  1776
  1777 4108 00 00 00 00 00 34 +             dta d'     TWO '
  1778 4111			score_chars_p2
  1779 4111 0D 0D 00		            dta d'-- '
  1780
  1781 4114 00			score_p1    dta 0
  1782 4115 00			score_p2    dta 0
  1783
  1784 				            ;.align $400
  1785 				            
  1786 4116			menu_dl
  1787 4116 42			            dta $42
  1788 4117 EC 40		            dta a(score_line)
  1789 				            
  1790 4119 4F			            dta $4f
  1791 411A 00 70		            dta a(screen_mem1)
  1792 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1793 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1794 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1795 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1796
  1797 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1798 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1799 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1800 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1801
  1802 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1803 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1804
  1805 				; 64 scanlines
  1806 416B 30			            dta $30
  1807 416C 47			            dta $47
  1808 416D 00 42		            dta a(menu_screen)
  1809 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1810
  1811 				; 60 lines
  1812 4176 4F			            dta $4f
  1813 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1814 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1815 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1816 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1817 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1818
  1819 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1820 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1821 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1822 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1823
  1824 				; 20 lines            
  1825 41B4 4F			            dta $4f
  1826 41B5 00 90		            dta a(screen_mem3)
  1827 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1828 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1829 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1830 				           
  1831 41CA 41			            dta $41
  1832 41CB 16 41		            dta a(menu_dl)
  1833
  1834 41CD			            .align $100
  1835 4200			menu_screen
  1836 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1837
  1838 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1839 421E			driver_screen
  1840 421E 00 00 00 00 00 00 +             dta d'            '
  1841 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1842 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1843 4248			level_char            
  1844 4248 11 00 00 00 00 00 +             dta d'1       '
  1845 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1846 4278			stick_text
  1847 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1848 4280			paddle_text
  1849 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1850 4288			driving_text
  1851 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1852 4290			computer_text
  1853 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1854
  1855 4298			driver_text_lo
  1856 4298 78			            dta <stick_text
  1857 4299 80			            dta <paddle_text
  1858 429A 88			            dta <driving_text
  1859 429B 90			            dta <computer_text
  1860 				            
  1861 429C			driver_text_hi
  1862 429C 42			            dta >stick_text
  1863 429D 42			            dta >paddle_text
  1864 429E 42			            dta >driving_text
  1865 429F 42			            dta >computer_text
  1866
  1867 42A0			            .align $1000
  1868
  1869 				; 128 x 32 bytes shapes            
  1870 5000			pm_shapes
  1871 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1872
  1873 = 6000			pm_shape_lo .ds 128
  1874 = 6080			pm_shape_hi .ds 128
  1875
  1876 6100			            .align $1000
  1877 = 7000			screen_mem1 = * ; $9000     ; 4K
  1878 				;            org screen_mem1
  1879 7000-7FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1880
  1881 7FF0			            .align $1000
  1882 = 8000			screen_mem2 = * ; $a000     ; 4K
  1883 				;            org screen_mem2
  1884 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1885
  1886 8FF0			            .align $1000
  1887 = 9000			screen_mem3 = * ; $b000     ; 1K
  1888 				;            org screen_mem3
  1889 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1890
  1891 9320			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 9320			    org $c0
    29
    30 00C0			zp
    31 = 00C0			chn_copy    .ds     9
    32 = 00C9			chn_pos     .ds     9
    33 = 00D2			bptr        .ds     2
    34 = 00D4			cur_pos     .ds     1
    35 = 00D5			chn_bits    .ds     1
    36 00D6-00D6> 01		bit_data    .byte   1
    37
    38 = 00D7			newsong     .ds     1       ; IVO
    39
    40 = 00D8			stereo_pokey    .ds     1
    41
    42 = D200			POKEY = $D200
    43
    44 00D9			    org $9800
    45 9800			buffers
    46 = 9800			    .ds 256 * 9
    47
    48 A100			intro_data
    49 A100-B36A> 01 01 A1 34 +         ins     'intro.lz16'
    50 A3D8			intro_end
    51
    52 A3D8			loop_data
    53 A3D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    54 B1D9			loop_end
    55
    56 B1D9			.proc get_byte
    57 B1D9 AD 34 12		    lda $1234
    58 B1DC EE DA B1		    inc song_ptr
    59 B1DF D0 03		    bne skip
    60 B1E1 EE DB B1		    inc song_ptr+1
    61 B1E4			skip
    62 B1E4 60			    rts
    63 				.endp
    64 = B1DA			song_ptr = get_byte + 1
    65
    66 B1E5			start
    67
    68 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    69 				; Song Initialization - this runs in the first tick:
    70 				;
    71 B1E5			.proc play_first_frame
    72
    73 B1E5 20 D9 B1		    jsr get_byte                    ; IVO START move init here
    74 B1E8 8D 24 B2		    sta play_frame.init_chn_bits
    75 B1EB A9 01		    lda #1                          ; IVO set to 1 at init(!)
    76 B1ED 85 D6		    sta bit_data
    77 B1EF A9 98		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    78 B1F1 8D 04 B2		    sta cbuf+2                      ; IVO END
    79
    80 				    ; Init all channels:
    81 B1F4 A2 08		    ldx #8
    82 B1F6 A0 00		    ldy #0
    83 B1F8 84 D7		    sty newsong                     ; IVO signal first frame is played
    84 B1FA			clear
    85 				    ; Read just init value and store into buffer and POKEY
    86 B1FA 20 D9 B1		    jsr get_byte
    87 B1FD 9D 62 B3		    sta SHADOW, x
    88 B200 94 C0		    sty chn_copy, x
    89 B202			cbuf
    90 B202 8D FF 98		    sta buffers + 255
    91 B205 EE 04 B2		    inc cbuf + 2
    92 B208 CA			    dex
    93 B209 10 EF		    bpl clear
    94
    95 				    ; Initialize buffer pointer:
    96 B20B 84 D2		    sty bptr
    97 B20D 84 D4		    sty cur_pos
    98 B20F 60			    rts                     ; IVO turn into subroutine
    99 				.endp
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; Wait for next frame
   103 				;
   104 B210			.proc wait_frame
   105
   106 B210 A5 14		    lda 20
   107 B212			delay
   108 B212 C5 14		    cmp 20
   109 B214 F0 FC		    beq delay
   110 B216 60			    rts                     ; IVO turn into subroutine
   111 				.endp
   112
   113 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   114 				; Play one frame of the song
   115 				;
   116 B217			.proc play_frame
   117 B217 A5 D7		    lda newsong
   118 B219 F0 02		    beq continue
   119 B21B D0 C8		    bne play_first_frame
   120
   121 B21D			continue
   122 B21D A4 D4		    ldy cur_pos                 ; IVO
   123
   124 B21F A9 98		    lda #>buffers
   125 B221 85 D3		    sta bptr+1
   126
   127 = B224			init_chn_bits=*+1
   128 B223 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   129 B225 85 D5		    sta chn_bits
   130 B227 A2 08		    ldx #8
   131
   132 				    ; Loop through all "channels", one for each POKEY register
   133 B229			chn_loop:
   134 B229 46 D5		    lsr chn_bits
   135 B22B B0 29		    bcs skip_chn       ; C=1 : skip this channel
   136
   137 B22D B5 C0		    lda chn_copy, x    ; Get status of this stream
   138 B22F D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   139
   140 				    ; We are decoding a new match/literal
   141 B231 46 D6		    lsr bit_data       ; Get next bit
   142 B233 D0 06		    bne got_bit
   143 B235 20 D9 B1		    jsr get_byte       ; Not enough bits, refill!
   144 B238 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   145 B239 85 D6		    sta bit_data       ;
   146 B23B			got_bit:
   147 B23B 20 D9 B1		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   148 B23E B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   149
   150 B240 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   151
   152 B242 20 D9 B1		    jsr get_byte
   153 B245 95 C0		    sta chn_copy, x    ; Store in "copy length"
   154
   155 				                        ; And start copying first byte
   156 B247			do_copy_byte:
   157 B247 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   158 B249 F6 C9		    inc chn_pos, x
   159 B24B B4 C9		    ldy chn_pos, x
   160
   161 				    ; Now, read old data, jump to data store
   162 B24D B1 D2		    lda (bptr), y
   163
   164 B24F			store:
   165 B24F A4 D4		    ldy cur_pos
   166 B251 9D 62 B3		    sta SHADOW, x        ; Store to output and buffer
   167 B254 91 D2		    sta (bptr), y
   168
   169 B256			skip_chn:
   170 				    ; Increment channel buffer pointer
   171 B256 E6 D3		    inc bptr+1
   172
   173 B258 CA			    dex
   174 B259 10 CE		    bpl chn_loop        ; Next channel
   175
   176 B25B E6 D4		    inc cur_pos
   177 B25D 60			    rts                 ; IVO once per frame
   178 				.endp
   179
   180 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181 				; Check for ending of song and jump to the next frame
   182 				;
   183 B25E			.proc check_end_song
   184 B25E AD DB B1		    lda song_ptr + 1
   185 = B262			song_end_high=*+1
   186 B261 C9 00		    cmp #>0
   187 B263 D0 09		    bne not_equal           ; IVO turn into subroutine
   188 B265 AD DA B1		    lda song_ptr
   189 = B269			song_end_low=*+1
   190 B268 C9 00		    cmp #<0
   191 B26A D0 02		    bne not_equal           ; IVO turn intro subroutine
   192
   193 B26C 38			    sec                     ; IVO....
   194 B26D 60			    rts
   195 B26E			not_equal
   196 B26E 18			    clc
   197 B26F 60			    rts
   198 				.endp
   199
   200 				; IVO everything below
   201
   202 B270			.proc music_init
   203 B270 20 12 B3		    jsr detect_2nd_pokey
   204 B273 20 4B B3		    jsr clear_echo
   205
   206 B276 A9 7D 8D D1 B2 A9 +     mwa #normal_volume adjust_volume.volume
   207 				;    mwa #half_volume adjust_volume.volume
   208 				;    mwa #quarter_volume adjust_volume.volume
   209
   210 B280 A9 D8		    lda #<intro_end
   211 B282 8D 69 B2		    sta check_end_song.song_end_low
   212 B285 A9 A3		    lda #>intro_end
   213 B287 8D 62 B2		    sta check_end_song.song_end_high
   214 B28A A9 00		    lda #<(intro_data)
   215 B28C 8D DA B1		    sta song_ptr
   216 B28F A9 A1		    lda #>(intro_data)
   217 B291 8D DB B1		    sta song_ptr+1
   218 B294 A9 01		    lda #1
   219 B296 85 D7		    sta newsong
   220 B298 60			    rts
   221 				.endp
   222
   223 B299			.proc play_song
   224 B299			playloop
   225 B299 20 17 B2		    jsr play_frame      ; generates tick two and beyond
   226 B29C 20 C1 B2		    jsr adjust_volume
   227
   228 B29F 20 5E B2		    jsr check_end_song
   229 B2A2 90 03		    bcc no_end_song
   230 B2A4 20 A8 B2		    jsr restart_music
   231 B2A7			no_end_song
   232 B2A7 60			    rts
   233 				.endp
   234
   235 B2A8			.proc restart_music
   236 B2A8 A9 D9		    lda #<loop_end
   237 B2AA 8D 69 B2		    sta check_end_song.song_end_low
   238 B2AD A9 B1		    lda #>loop_end
   239 B2AF 8D 62 B2		    sta check_end_song.song_end_high
   240 B2B2 A9 D8		    lda #<(loop_data)
   241 B2B4 8D DA B1		    sta song_ptr
   242 B2B7 A9 A3		    lda #>(loop_data)
   243 B2B9 8D DB B1		    sta song_ptr+1
   244 B2BC A9 01		    lda #1
   245 B2BE 85 D7		    sta newsong
   246 B2C0 60			    rts
   247 				.endp
   248
   249 B2C1			.proc adjust_volume
   250 B2C1 A0 06		    ldy #6
   251 B2C3			adjust
   252 B2C3 B9 63 B3		    lda SHADOW+1,y
   253 B2C6 AA			    tax
   254 B2C7 29 F0		    and #$f0
   255 B2C9 99 63 B3		    sta SHADOW+1,y
   256 B2CC 8A			    txa
   257 B2CD 29 0F		    and #$0f
   258 B2CF AA			    tax
   259 = B2D1			volume=*+1
   260 B2D0 BD 34 12		    lda $1234,x
   261 B2D3 19 63 B3		    ora SHADOW+1,y
   262 B2D6 99 63 B3		    sta SHADOW+1,y
   263 B2D9 88			    dey
   264 B2DA 88			    dey
   265 B2DB 10 E6		    bpl adjust
   266 				    
   267 B2DD 60			    rts
   268 				.endp
   269
   270 B2DE			.proc copy_shadow
   271 B2DE A2 08		    ldx #8
   272 B2E0			copy
   273 B2E0 BD 62 B3		    lda SHADOW,x
   274 B2E3 9D 00 D2		    sta POKEY,x
   275 B2E6 CA			    dex
   276 B2E7 10 F7		    bpl copy
   277
   278 B2E9 A5 D8		    lda stereo_pokey
   279 B2EB F0 0E		    beq end_copy
   280
   281 B2ED A2 08		    ldx #8
   282 B2EF			copy2
   283 B2EF BD 74 B3		    lda ECHO,x
   284 B2F2 9D 10 D2		    sta POKEY+$10,x
   285 B2F5 CA			    dex
   286 B2F6 10 F7		    bpl copy2
   287
   288 B2F8 20 56 B3		    jsr shift_echo
   289
   290 B2FB			end_copy
   291 B2FB 60			    rts
   292 				.endp
   293
   294 B2FC			.proc music_normal_volume
   295 B2FC A9 7D 8D D1 B2 A9 +     mwa #normal_volume adjust_volume.volume
   296 B306 60			    rts
   297 				.endp
   298
   299 B307			.proc music_low_volume
   300 B307 A9 9D 8D D1 B2 A9 +     mwa #quarter_volume adjust_volume.volume
   301 B311 60			    rts
   302 				.endp
   303
   304 B312			.proc detect_2nd_pokey
   305 B312 20 10 B2		    jsr wait_frame
   306
   307 B315 A9 00 8D 32 02	    mva #0 SSKCTL
   308 B31A A9 00 8D 0F D2	    mva #0 SKCTL
   309 B31F A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   310
   311 B324 20 10 B2		    jsr wait_frame
   312
   313 				    ; Restart SKCTL. This starts all the poly counters
   314
   315 B327 A9 03 8D 32 02	    mva #3 SSKCTL
   316 B32C A9 03 8D 0F D2	    mva #3 SKCTL
   317
   318 B331 20 10 B2		    jsr wait_frame
   319
   320 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   321 				    ; Its RANDOM should not change.
   322
   323 B334 AD 1A D2		    lda RANDOM+$10
   324 B337 CD 1A D2		    cmp RANDOM+$10
   325 B33A F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   326
   327 B33C			detected_mono
   328 B33C A9 00 85 D8		    mva #0 stereo_pokey
   329 B340 60			    rts
   330
   331 B341			detected_stereo
   332 B341 A9 01 85 D8		    mva #1 stereo_pokey
   333 B345 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   334 B34A 60			    rts
   335 				.endp
   336
   337 B34B			.proc clear_echo
   338 B34B A0 11		    ldy #(endecho-echobuffer)-1
   339 B34D			clear_echo_loop
   340 B34D A9 00 99 6B B3	    mva #0 echobuffer,y
   341 B352 88 10 F8		    dey:bpl clear_echo_loop
   342 B355 60			    rts
   343 				.endp
   344
   345 B356			.proc shift_echo
   346 B356 A0 11		    ldy #(ECHO-echobuffer)-1+9
   347 B358			shift_loop
   348 B358 B9 62 B3 99 6B B3	    mva SHADOW,y SHADOW+9,y
   349 B35E 88 10 F7		    dey:bpl shift_loop
   350 B361 60			    rts
   351 				.endp
   352
   353 B362			SHADOW              ; shadow pokey
   354 B362 00 00 00 00 00 00 + :9 .byte 0
   355
   356 				                    ; fake stereo effect:
   357 				                    ; 0*9 = small
   358 				                    ; 1*9 = medium
   359 				                    ; 2*9 = big
   360 				                    ; >3 too big imho
   361
   362 B36B			echobuffer
   363 = B36B			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   364
   365 B374			ECHO
   366 = B374			    .ds 9
   367 B37D			endecho
   368
   369 B37D			normal_volume
   370 B37D-B3AE> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   371 B38D			half_volume
   372 B38D 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   373 B39D			quarter_volume
   374 B39D 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
  1892
  1893 02E0-02E1> DC 22		            run main
