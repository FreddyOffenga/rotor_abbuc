mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; ROTOR
     2 				; F#READY, 2023-07-15
     3
     4 				; version 11
     5 				; Fixed bug score update when edge detected, cleaned up edge detection logic
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players red and blue move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; DONE
    16 				; - test routine for magnitude and step calculations
    17 				; - moved calculations to right routines, renames and improvements
    18 				; - TEST step speed, edge detection
    19 				; - fixed nasty bug, overlapping labels in zp :(
    20 				; - fixed magnitude table (basic prog)
    21 				; - fixed dx,dy by not adding 1 pixel
    22 				; - fixed bug where M1PF was not used to detect edge (only M0PF)
    23 				; - fixed bug in menu display, corrected menu DLI length
    24 				; - fixed driver auto detect for paddles, stick, driving
    25 				; - always reset game/score from menu start
    26 				; - allow players to move even in menu (without ball)
    27 				; - end game at X points (11 points)
    28 				; - double speed for now (should be a better way to select ball velocity)
    29 				; - add sound when player1/2 hits ball
    30 				; - removed include dda_line_lib, inlined and custom for this game
    31
    32 				; TODO
    33 				; - set screen width to 40 instead of 32
    34 				; - add backdrop image
    35 				; - add music by IvoP
    36 				; - add sound when ball hits edge
    37 				; - add support for driving controllers
    38 				; - break part of outer circle when ball hits
    39 				; - allow ball to go outside circle
    40 				; - add computer player(s)
    41
    42 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    43
    44 				; must be in decimal format, so $11 is 11
    45 = 0011			MAX_SCORE   = $11
    46
    47 = 1000			pm_area     = $1000
    48 = 1180			msl_area    = pm_area+$180
    49 = 1200			p0_area     = pm_area+$200
    50 = 1280			p1_area     = pm_area+$280
    51 = 1300			p2_area     = pm_area+$300
    52 = 1380			p3_area     = pm_area+$380
    53
    54 = A000			screen_mem  = $a000
    55 = C000			screen_end  = $c000
    56
    57 				; $1400 .. $1500 is overwritten, bug?
    58
    59 				; outer tables 256 for 360 degrees
    60 = 1600			outer_x_256     = $1600
    61 = 1700			outer_y_256     = $1700
    62
    63 = 1800			screen_y_lo     = $1800
    64 = 1900			screen_y_hi     = $1900
    65
    66 = 0140			WIDTH           = 320
    67 = 00C0			HEIGHT          = 192
    68
    69 = 0020			SCREEN_WIDTH    = 32
    70
    71 = 000F			outer_x_margin  = 47-32
    72 = 0040			inner_x_margin  = 64
    73
    74 = 00A0			circle_center_x = WIDTH/2
    75 = 0060			circle_center_y = HEIGHT/2
    76
    77 = 0006			ball_top_margin     = 6
    78 = 0045			ball_left_margin    = 64+5
    79
    80 				; pm upper margin
    81 = 0001			upper_margin    = 1
    82 = 0020			left_margin     = 32
    83
    84 = 0080			table_x_ptr     = $80
    85 = 0082			table_y_ptr     = $82
    86
    87 = 0084			shape_ptr       = $84
    88
    89 = 0086			tmp_screen      = $86
    90
    91 = 0088			course_x        = $88
    92
    93 = 008A			tmp_font        = $8a
    94
    95 = 008C			mode_menu       = $8c
    96
    97 				; player vars must be in sequence for zp,x indexing
    98
    99 = 0090			p1_shape        = $90
   100 = 0091			p2_shape        = $91
   101
   102 = 0094			player1_x       = $94
   103 = 0095			player2_x       = $95
   104
   105 = 0098			player1_y       = $98
   106 = 0099			player2_y       = $99
   107
   108 = 009C			p1_angle        = $9c
   109 = 009D			p2_angle        = $9d
   110
   111 = 00A0			mp_collision    = $a0
   112 = 00A1			in_collision    = $a1
   113 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   114 = 00A3			edge_delay      = $a3
   115 = 00A4			bat_collision_delay = $a4
   116
   117 				; ball vars
   118 = 00A6			ball_current_x      = $a6
   119 = 00A7			ball_current_y      = $a7
   120 = 00AA			ball_angle_start    = $aa
   121 = 00AB			ball_angle_end      = $ab
   122 = 00AC			ball_speed          = $ac
   123
   124 = 00B0			tmp_angle1          = $b0
   125 = 00B1			tmp_angle2          = $b1
   126 = 00B2			add_to_angle        = $b2
   127 = 00B3			angle_diff_bat      = $b3
   128 = 00B4			tmp_angle_direction = $b4
   129 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   130 = 00B6			game_restart        = $b6
   131 = 00B7			tmp_angle_diff      = $b7
   132 = 00B8			magnitude           = $b8       ; word
   133
   134 				; $c0 - $cf used for drivers
   135
   136 = 00E0			DDA_ZERO_PAGE = $e0
   137
   138 = 00E0			_divisor    = $e0   ; word
   139 = 00E2			_dividend   = $e2   ; word
   140 = 00E4			_remainder  = $e4   ; word
   141 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   142
   143 = 00E6			tmp_x1      = $e6   ; byte
   144 = 00E7			tmp_y1      = $e7   ; byte
   145 = 00E8			tmp_x2      = $e8   ; byte
   146 = 00E9			tmp_y2      = $e9   ; byte
   147
   148 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   149 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   150
   151 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   152 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   153
   154 = 00F2			tmp_dx      = $f2  ; byte
   155 = 00F3			tmp_dy      = $f3  ; byte
   156
   157 = 00F6			_multiplicand   = $f6   ; word
   158 = 00F8			_multiplier     = $f8   ; byte
   159
   160 				; direction:
   161 				; 0 : x1<x2 or y1<y2 = add
   162 				; 1 ; x1>=y2 or y1>=y2 = subtract
   163
   164 = 00FA			dir_x       = $fa  ; byte
   165 = 00FB			dir_y       = $fb  ; byte
   166
   167 = 00FC			line_end_x  = $fc  ; byte
   168 = 00FD			line_end_y  = $fd  ; byte
   169
   170 				            org $2000
   171
   172 				            icl 'lib/drivers.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 				; $c0 - $cf used for drivers
     5 = 00C0			driver_tmp      = $c0   ; and $c1
     6 = 00C2			driver_mode     = $c2
     7
     8 = 00E5			paddle_vals = 229
     9 = 011F			paddle_add  = 287       ; 65536 / 229
    10
    11 				            .align $100
    12 				paddle_to_256
    13 = 2000			            .ds $100
    14
    15 				; paddle initial value
    16 				prev_paddle_value
    17 = 2100			            .ds 1
    18
    19 				driver_init
    20 FFFF> 2101-2A52> A9 00	            lda #0  ; stick
    21 2103 85 C2		            sta driver_mode
    22
    23 2105 AD 70 02		            lda PADDL0
    24 2108 8D 00 21		            sta prev_paddle_value
    25
    26 210B A9 00		            lda #0
    27 210D 85 9C		            sta p1_angle
    28 210F A9 80		            lda #128
    29 2111 85 9D		            sta p2_angle
    30
    31 				; init paddle table
    32
    33 2113 A9 00		            lda #0
    34 2115 85 C0		            sta driver_tmp
    35 2117 85 C1		            sta driver_tmp+1
    36 				            
    37 2119 A2 00		            ldx #0
    38 211B			store_pv
    39 211B A5 C1		            lda driver_tmp+1
    40 211D 9D 00 20		            sta paddle_to_256,x
    41 				            
    42 2120 A5 C0		            lda driver_tmp
    43 2122 18			            clc
    44 2123 69 1F		            adc #<paddle_add
    45 2125 85 C0		            sta driver_tmp
    46 2127 A5 C1		            lda driver_tmp+1
    47 2129 69 01		            adc #>paddle_add
    48 212B 85 C1		            sta driver_tmp+1
    49 212D E8			            inx
    50 212E E0 E5		            cpx #paddle_vals
    51 2130 D0 E9		            bne store_pv
    52 2132 60			            rts
    53
    54 				; stick detect by using left/right
    55 				; paddle by connecting/rotate
    56 				; driving controller by rotate
    57
    58 				; return A = driver mode
    59 				; 0 = stick detected
    60 				; 1 = paddle detected
    61 				; 2 = driving detected
    62
    63 2133			driver_detect
    64 2133 AD 70 02		            lda PADDL0
    65 2136 C9 E4		            cmp #228
    66 2138 D0 07		            bne paddle_detect
    67 213A AD 71 02		            lda PADDL1
    68 213D C9 E4		            cmp #228
    69 213F F0 05		            beq no_paddle_detect
    70 2141			paddle_detect
    71 2141 A9 01		            lda #1
    72 2143 85 C2		            sta driver_mode
    73 2145 60			            rts
    74
    75 2146			no_paddle_detect
    76 2146 AD 78 02		            lda STICK0
    77 2149 C9 0C		            cmp #12
    78 214B D0 05		            bne no_driving_detect
    79 214D A9 02		            lda #2
    80 214F 85 C2		            sta driver_mode
    81 2151 60			            rts
    82
    83 2152			no_driving_detect
    84 2152 C9 07		            cmp #7      ; paddle button also gives this
    85 2154 F0 04		            beq stick_detect    
    86 2156 C9 0B		            cmp #11     ; paddle button also gives this
    87 2158 D0 05		            bne no_stick_detect
    88 215A			stick_detect
    89 215A A9 00		            lda #0
    90 215C 85 C2		            sta driver_mode
    91 215E 60			            rts
    92
    93 215F			no_stick_detect
    94 				; default is the last value
    95 215F A5 C2		            lda driver_mode
    96 2161 60			            rts
    97
    98 				; move player 1/2
    99 				; right - clockwise, left = anti-clockwise
   100
   101 				; X = 0, player 1
   102 				; X = 1, player 2
   103
   104 				; A = driver mode:
   105 				; 0 : stick
   106 				; 1 : paddle
   107 				; 2 : driving
   108 				; 3 : computer
   109
   110 2162			main_driver            
   111 2162 A4 C2		            ldy driver_mode
   112 2164 B9 73 21		            lda driver_lo,y
   113 2167 8D 71 21		            sta driver_ptr
   114 216A B9 77 21		            lda driver_hi,y
   115 216D 8D 72 21		            sta driver_ptr+1
   116
   117 = 2171			driver_ptr = *+1
   118 2170 4C FF FF		            jmp $ffff  
   119
   120 2173			driver_lo
   121 2173 7B			            dta <driver_stick
   122 2174 BF			            dta <driver_paddle
   123 2175 7B			            dta <driver_stick
   124 2176 7B			            dta <driver_stick
   125
   126 2177			driver_hi
   127 2177 21			            dta >driver_stick
   128 2178 21			            dta >driver_paddle
   129 2179 21			            dta >driver_stick
   130 217A 21			            dta >driver_stick
   131
   132 				; joystick driver
   133
   134 217B			driver_stick
   135 217B BD 78 02		            lda STICK0,x
   136 217E C9 0F		            cmp #15
   137 2180 F0 21		            beq move_done
   138 2182 C9 0B		            cmp #11
   139 2184 D0 0E		            bne no_left
   140
   141 2186 D6 9C		            dec p1_angle,x
   142 				            ;dec p1_angle,x
   143 2188 BD 84 02		            lda STRIG0,x
   144 218B D0 04		            bne no_fast
   145 218D D6 9C		            dec p1_angle,x
   146 218F D6 9C		            dec p1_angle,x
   147 2191			no_fast
   148 				            
   149 2191 4C A3 21		            jmp move_done
   150 2194 C9 07		no_left     cmp #7
   151 2196 D0 0B		            bne move_done
   152
   153 2198 F6 9C		            inc p1_angle,x
   154 				            ;inc p1_angle,x
   155 219A BD 84 02		            lda STRIG0,x
   156 219D D0 04		            bne no_fast_right
   157 219F F6 9C		            inc p1_angle,x
   158 21A1 F6 9C		            inc p1_angle,x
   159 21A3			no_fast_right
   160 21A3			move_done
   161 21A3 60			            rts
   162
   163 				; X=port number to check (paddle uses only port 1)
   164 				; check fire button (paddle uses left/right stick as fire button)
   165 				; A=0 not pressed, 1=pressed
   166
   167 21A4			is_fire_button
   168 21A4 A5 C2		            lda driver_mode
   169 21A6 C9 01		            cmp #1
   170 21A8 F0 04		            beq check_paddle_fire
   171 				            
   172 21AA BD 84 02		            lda STRIG0,x
   173 21AD 60			            rts
   174 21AE			check_paddle_fire
   175
   176 21AE AD 78 02		            lda STICK0
   177 21B1 C9 07		            cmp #7
   178 21B3 F0 07		            beq paddle_fire
   179 21B5 C9 0B		            cmp #11
   180 21B7 F0 03		            beq paddle_fire
   181 21B9 A9 00		            lda #0
   182 21BB 60			            rts
   183 21BC			paddle_fire
   184 21BC A9 01		            lda #1
   185 21BE 60			            rts
   186
   187 				; paddle driver
   188 				            
   189 21BF			driver_paddle            
   190 21BF BD 70 02		            lda PADDL0,x
   191 21C2 A8			            tay
   192 21C3 B9 00 20		            lda paddle_to_256,y
   193 21C6 5D CC 21		            eor paddle_offsets,x
   194 21C9 95 9C		            sta p1_angle,x
   195 21CB 60			            rts
   196
   197 21CC			paddle_offsets
   198 21CC 00 80		            dta 0,128
   173 				            
   174 21CE			main         
   175 21CE A9 00		            lda #0
   176 				            ;sta SDMCTL
   177 21D0 85 B6		            sta game_restart
   178
   179 21D2 20 01 21		            jsr driver_init
   180
   181 21D5 20 5C 27		            jsr make_shape_index
   182 				 
   183 21D8 20 8C 27		            jsr make_outer_256
   184 				 
   185 21DB A9 00		            lda #<screen_mem
   186 21DD 85 58		            sta SAVMSC
   187 21DF A9 A0		            lda #>screen_mem
   188 21E1 85 59		            sta SAVMSC+1
   189
   190 21E3 A9 00		            lda #<display_list
   191 21E5 8D 30 02		            sta SDLSTL
   192 21E8 A9 3C		            lda #>display_list
   193 21EA 8D 31 02		            sta SDLSTH
   194
   195 21ED A9 2D		            lda #%00101101  ; enable P/M DMA
   196 21EF 8D 2F 02		            sta SDMCTL
   197
   198 				;            lda #<menu_dl
   199 				;            sta SDLSTL
   200 				;            lda #>menu_dl
   201 				;            sta SDLSTH
   202 				            
   203 21F2 20 58 23		            jsr make_screen_y_tab
   204
   205 21F5 20 7D 23		            jsr clear_screen
   206
   207 21F8 20 FC 27		            jsr reset_score
   208 21FB 20 CA 27		            jsr show_score_p1
   209 21FE 20 E3 27		            jsr show_score_p2
   210
   211 				; debugging, can be removed later            
   212 				            ;jsr plot_inner
   213 				                       
   214 2201 20 E7 29		            jsr init_sprites
   215 2204 20 13 2A		            jsr init_colors
   216
   217 				; init. game vars
   218 2207 A2 00		            ldx #INIT_LEVEL_INDEX
   219 2209 8E 2F 2A		            stx current_level_index
   220 220C 20 34 2A		            jsr set_level_ball_speed
   221
   222 				; todo remove the test routines later
   223 				;            jmp test_ball_movements             
   224
   225 220F 20 18 27		            jsr plot_outer
   226
   227 2212 A9 01		            lda #1
   228 2214 85 8C		            sta mode_menu           ; start with menu
   229
   230 				; start vbi
   231 				            
   232 2216 A9 C9		            lda #<dli_menu
   233 2218 8D 00 02		            sta VDSLST
   234 221B A9 22		            lda #>dli_menu
   235 221D 8D 01 02		            sta VDSLST+1
   236 				            
   237 2220 A9 C0		            lda #$c0
   238 2222 8D 0E D4		            sta NMIEN
   239 				            
   240 2225 A9 07		            lda #7          ; sets VVBLKI
   241 2227 A0 E8		            ldy #<vbi
   242 2229 A2 23		            ldx #>vbi
   243 222B 20 5C E4		            jsr $e45c       ; SETVBV
   244
   245 				; we're just sitting here while VBI does all the work :)
   246 222E 4C 2E 22		loop        jmp loop
   247
   248 				; test ball movement(s) from start angle to end angle
   249
   250 				; todo draw lines
   251 				; x,y from
   252 				; outer_x_256
   253 				; outer_y_256
   254
   255 				; later
   256 				; get magnitude             
   257 				; magnitudes_lo
   258 				; magnitudes_hi
   259
   260 2231			test_ball_movements
   261 				;            jsr plot_angle_dots
   262
   263 2231 A9 80		            lda #$80
   264 2233 85 AA		            sta ball_angle_start
   265 2235 A0 81		            ldy #$81
   266
   267 2237			plot_line_loop
   268 2237 84 AB		            sty ball_angle_end
   269 2239 98			            tya
   270 223A 48			            pha
   271
   272 223B A5 AA		            lda ball_angle_start
   273 223D A8			            tay
   274 223E 20 99 22		            jsr plot_angle
   275
   276 2241 A6 AA		            ldx ball_angle_start
   277 2243 20 D9 25		            jsr outer_angle_to_start_position
   278
   279 2246 A5 AB		            lda ball_angle_end
   280 2248 A8			            tay
   281 2249 20 99 22		            jsr plot_angle
   282 				            
   283 224C A6 AB		            ldx ball_angle_end
   284 224E 20 51 26		            jsr angle_to_end_position
   285 				                                    
   286 2251 20 E1 28		            jsr init_current_xy
   287
   288 				; do steps and plot
   289
   290 2254 A9 01		            lda #1
   291 2256 8D FB 02		            sta draw_color  
   292
   293 2259 A2 00		            ldx #0
   294 225B			plot_some            
   295 225B 8A			            txa
   296 225C 48			            pha
   297 				            
   298 225D 20 4E 29		            jsr move_current_xy
   299 2260 D0 17		            bne detect_end_line
   300
   301 2262 A5 EB		            lda current_x+1
   302 2264 18			            clc
   303 2265 69 0F		            adc #outer_x_margin
   304 2267 85 55		            sta x_position
   305 2269 A9 00		            lda #0
   306 226B 85 56		            sta x_position+1
   307 				            
   308 226D A5 ED		            lda current_y+1
   309 226F 85 54		            sta y_position
   310 2271 20 97 23		            jsr plot_dot 
   311 				            
   312 2274 68			            pla
   313 2275 AA			            tax
   314 				            
   315 2276 E8			            inx
   316 2277 D0 E2		            bne plot_some
   317
   318 2279			detect_end_line
   319 2279 68			            pla
   320 227A AA			            tax
   321
   322 				; next line
   323 227B 68			            pla
   324 227C 18			            clc
   325 227D 69 01		            adc #$01
   326 227F A8			            tay
   327 2280 C9 80		            cmp #$80
   328
   329 2282 D0 B3		            bne plot_line_loop
   330
   331 2284			test_loop
   332 2284 4C 84 22		            jmp test_loop
   333
   334 				; plot dots for all 0..255 angles
   335
   336 2287			plot_angle_dots
   337 2287 A9 01		            lda #1
   338 2289 8D FB 02		            sta draw_color
   339
   340 228C A0 00		            ldy #0
   341
   342 228E			plot_256_dots            
   343 228E 98			            tya
   344 228F 48			            pha
   345
   346 2290 20 99 22		            jsr plot_angle
   347
   348 2293 68			            pla
   349 2294 A8			            tay
   350 2295 C8			            iny
   351 2296 D0 F6		            bne plot_256_dots
   352 				                     
   353 2298 60			            rts
   354
   355 2299			plot_angle
   356 2299 B9 00 16		            lda outer_x_256,y
   357 229C 18			            clc
   358 229D 69 0F		            adc #outer_x_margin
   359 229F 85 55		            sta x_position            
   360 22A1 A9 00		            lda #0
   361 22A3 69 00		            adc #0
   362 22A5 85 56		            sta x_position+1
   363
   364 22A7 B9 00 17		            lda outer_y_256,y            
   365 22AA 85 54		            sta y_position
   366
   367 22AC 20 97 23		            jsr plot_dot            
   368 				            
   369 22AF 60			            rts
   370
   371 				;------------------------
   372 				; 8bit * 8bit = 16bit multiply
   373 				; By White Flame
   374 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   375 				; uses extra zp var _multiplicand+1
   376
   377 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   378 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   379
   380 				; In this version, both inputs must be unsigned
   381 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   382
   383 22B0			_multi8
   384 22B0 A9 00		            lda #$00
   385 22B2 A8			            tay
   386 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   387 22B3 F0 0D		            beq _enter_loop
   388 22B5			_do_add
   389 22B5 18			            clc
   390 22B6 65 F6		            adc _multiplicand
   391 22B8 AA			            tax
   392
   393 22B9 98			            tya
   394 22BA 65 F7		            adc _multiplicand+1
   395 22BC A8			            tay
   396 22BD 8A			            txa
   397 22BE			_mul_loop
   398 22BE 06 F6		            asl _multiplicand
   399 22C0 26 F7		            rol _multiplicand+1
   400 22C2			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   401 22C2 46 F8		            lsr _multiplier
   402 22C4 B0 EF		            bcs _do_add
   403 22C6 D0 F6		            bne _mul_loop
   404 22C8 60			            rts
   405
   406 22C9			dli_menu
   407 22C9 48			            pha
   408 22CA 8A			            txa
   409 22CB 48			            pha
   410 				            
   411 22CC A9 00		            lda #0
   412 22CE 8D 0A D4		            sta WSYNC
   413 22D1 8D 1A D0		            sta COLBK
   414 22D4 A9 0E		            lda #$0e
   415 22D6 8D 0A D4		            sta WSYNC
   416 22D9 8D 1A D0		            sta COLBK
   417 22DC A9 0A		            lda #$0a
   418 22DE 8D 0A D4		            sta WSYNC
   419 22E1 8D 1A D0		            sta COLBK
   420 22E4 A9 00		            lda #0
   421 22E6 8D 0A D4		            sta WSYNC
   422 22E9 8D 1A D0		            sta COLBK
   423
   424 22EC A2 00		            ldx #0
   425 22EE			color_it            
   426 22EE BD 20 23		            lda menu_colpf0,x
   427 22F1 8D 0A D4		            sta WSYNC
   428 22F4 8D 16 D0		            sta COLPF0
   429 22F7 E8			            inx
   430 22F8 E0 38		            cpx #56
   431 22FA D0 F2		            bne color_it
   432
   433 22FC A9 00		            lda #0
   434 22FE 8D 0A D4		            sta WSYNC
   435 2301 8D 1A D0		            sta COLBK
   436 2304 A9 0A		            lda #$0a
   437 2306 8D 0A D4		            sta WSYNC
   438 2309 8D 1A D0		            sta COLBK
   439 230C A9 0E		            lda #$0e
   440 230E 8D 0A D4		            sta WSYNC
   441 2311 8D 1A D0		            sta COLBK
   442 2314 A9 00		            lda #0
   443 2316 8D 0A D4		            sta WSYNC
   444 2319 8D 1A D0		            sta COLBK
   445 				            
   446 231C 68			            pla
   447 231D AA			            tax
   448 231E 68			            pla
   449 231F 40			            rti
   450
   451 2320			menu_colpf0
   452 2320 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   453 2328 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   454 2330 00 00 00 00		            dta 0,0,0,0
   455 2334 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   456 233C 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   457 2344 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   458 234C 00 00 00 00		            dta 0,0,0,0
   459 2350 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   460
   461 2358			make_screen_y_tab
   462 2358 A9 00		            lda #<screen_mem
   463 235A 85 86		            sta tmp_screen
   464 235C A9 A0		            lda #>screen_mem
   465 235E 85 87		            sta tmp_screen+1
   466 				            
   467 2360 A2 00		            ldx #0
   468 2362			fill_y_tab              
   469 2362 A5 86		            lda tmp_screen
   470 2364 9D 00 18		            sta screen_y_lo,x
   471 2367 A5 87		            lda tmp_screen+1
   472 2369 9D 00 19		            sta screen_y_hi,x
   473 				            
   474 236C A5 86		            lda tmp_screen
   475 236E 18			            clc
   476 236F 69 20		            adc #SCREEN_WIDTH
   477 2371 85 86		            sta tmp_screen
   478 2373 A5 87		            lda tmp_screen+1
   479 2375 69 00		            adc #0
   480 2377 85 87		            sta tmp_screen+1
   481 				            
   482 2379 E8			            inx
   483 237A D0 E6		            bne fill_y_tab
   484 237C 60			            rts
   485
   486 237D			clear_screen
   487 237D A9 00		            lda #<screen_mem
   488 237F 85 86		            sta tmp_screen
   489 2381 A9 A0		            lda #>screen_mem
   490 2383 85 87		            sta tmp_screen+1
   491 				            
   492 2385 A0 00		            ldy #0
   493 2387			wipe_all
   494 2387 A9 00		            lda #0
   495 2389			wipe_page
   496 2389 91 86		            sta (tmp_screen),y
   497 238B C8			            iny
   498 238C D0 FB		            bne wipe_page 
   499
   500 238E E6 87		            inc tmp_screen+1
   501 2390 A5 87		            lda tmp_screen+1
   502 2392 C9 C0		            cmp #>screen_end
   503 2394 D0 F1		            bne wipe_all
   504 2396 60			            rts
   505
   506 2397			plot_dot
   507 2397 A6 54		            ldx y_position
   508 2399 BD 00 18		            lda screen_y_lo,x
   509 239C 85 86		            sta tmp_screen
   510 239E BD 00 19		            lda screen_y_hi,x
   511 23A1 85 87		            sta tmp_screen+1
   512 				            
   513 23A3 A5 55		            lda x_position
   514 23A5 4A			            lsr
   515 23A6 4A			            lsr
   516 23A7 4A			            lsr
   517 23A8 85 88		            sta course_x
   518
   519 23AA A5 56		            lda x_position+1
   520 23AC F0 07		            beq x_below_256
   521 				; x >= 256, add 256/8
   522 23AE A5 88		            lda course_x
   523 23B0 18			            clc
   524 23B1 69 20		            adc #32
   525 23B3 85 88		            sta course_x
   526 				                        
   527 23B5			x_below_256
   528 23B5 A5 55		            lda x_position
   529 23B7 29 07		            and #%00000111
   530 23B9 AA			            tax
   531
   532 23BA A4 88		            ldy course_x            
   533 23BC B1 86		            lda (tmp_screen),y
   534 23BE 1D D0 23		            ora pixel_mask,x
   535 23C1 91 86		            sta (tmp_screen),y
   536 23C3 60			            rts   
   537
   538 23C4			turn_color_ball
   539 23C4 A6 B5		            ldx player_turn
   540 23C6 BD CD 23		            lda color_turn,x
   541 23C9 8D C7 02		            sta COLOR3
   542 23CC 60			            rts
   543 				            
   544 23CD 00 26 76		color_turn  dta 0,$26,$76                           
   545
   546 23D0			pixel_mask
   547 23D0 80 40 20 10		            dta $80,$40,$20,$10
   548 23D4 08 04 02 01		            dta $08,$04,$02,$01
   549
   550 23D8			outer_collision_colors
   551 23D8 06 00 00 00		            dta $06,$00,$00,$00
   552 23DC 0E 00 00 00		            dta $0e,$00,$00,$00
   553 23E0 00 00 00 00		            dta $00,$00,$00,$00
   554 23E4 00 00 00 00		            dta $00,$00,$00,$00
   555
   556 				; A, X, Y are already saved by the OS
   557 23E8			vbi                 
   558 23E8 A9 2D		            lda #%00101101  ; enable P/M DMA
   559 23EA 8D 2F 02		            sta SDMCTL
   560 23ED A9 00		            lda #0
   561 23EF 85 4D		            sta 77      ; attract off
   562 23F1 A9 44		            lda #>rotor_font
   563 23F3 8D F4 02		            sta 756
   564
   565 				; menu switching thingy
   566
   567 23F6 AD 1F D0		            lda CONSOL
   568 23F9 C9 03		            cmp #3
   569 23FB D0 09		            bne no_option_pressed
   570
   571 23FD			go_menu_mode            
   572 23FD 20 5C 26		            jsr wipe_ball
   573 				            
   574 2400 A9 01		            lda #1
   575 2402 85 8C		            sta mode_menu
   576 2404 D0 0F		            bne check_mode_menu
   577
   578 2406			no_option_pressed
   579 2406 C9 06		            cmp #6
   580 2408 D0 0B		            bne check_mode_menu
   581 				            
   582 				; reset game
   583
   584 240A			reset_game
   585 240A 20 5C 26		            jsr wipe_ball
   586 				            
   587 240D A9 01		            lda #1
   588 240F 85 B6		            sta game_restart
   589
   590 2411 A9 00		            lda #0
   591 2413 85 8C		            sta mode_menu
   592
   593 2415			check_mode_menu
   594 2415 A5 8C		            lda mode_menu
   595 2417 F0 51		            beq main_game_vbi
   596
   597 				; within menu vbi
   598 				            
   599 2419 AD 1F D0		            lda CONSOL
   600 241C C9 05		            cmp #5          ; select
   601 241E D0 18		            bne no_level_select
   602 				            
   603 2420 AD 2E 2A		            lda previous_consol
   604 2423 C9 05		            cmp #5
   605 2425 F0 14		            beq wait_depressed
   606 				            
   607 2427 20 43 2A		            jsr increase_level
   608 242A AE 2F 2A		            ldx current_level_index
   609 242D 20 34 2A		            jsr set_level_ball_speed            
   610
   611 2430 A9 05		            lda #5
   612 2432 8D 2E 2A		            sta previous_consol
   613 2435 4C 3B 24		            jmp wait_depressed
   614
   615 2438			no_level_select
   616 2438 8D 2E 2A		            sta previous_consol
   617
   618 243B			wait_depressed        
   619 243B A9 00		            lda #<menu_dl
   620 243D 8D 30 02		            sta SDLSTL
   621 2440 A9 40		            lda #>menu_dl
   622 2442 8D 31 02		            sta SDLSTH
   623
   624 				; detect/show controller type (used for both players)
   625 2445 20 51 24		            jsr detect_show_driver
   626
   627 2448 20 62 25		            jsr handle_player1
   628 244B 20 7B 25		            jsr handle_player2
   629
   630 244E 4C 0B 25		            jmp exit_vbi
   631
   632 				; X = port/driver to detect
   633 2451			detect_show_driver
   634 2451 20 33 21		            jsr driver_detect
   635 2454 A8			            tay
   636 2455 B9 80 41		            lda driver_text_lo,y
   637 2458 85 86		            sta tmp_screen
   638 245A B9 84 41		            lda driver_text_hi,y
   639 245D 85 87		            sta tmp_screen+1
   640
   641 245F A0 07		            ldy #7
   642 2461			show_driv
   643 2461 B1 86		            lda (tmp_screen),y
   644 2463 99 18 41		            sta driver_screen,y
   645 2466 88			            dey
   646 2467 10 F8		            bpl show_driv
   647 2469 60			            rts
   648
   649 				; main game vbi
   650 246A			main_game_vbi
   651 246A A5 B6		            lda game_restart
   652 246C F0 2F		            beq no_restart
   653 				            
   654 246E A9 00		            lda #0
   655 2470 85 B6		            sta game_restart
   656 				            
   657 2472 20 0E 25		            jsr sound_off
   658 				            
   659 2475 20 FC 27		            jsr reset_score
   660 2478 20 CA 27		            jsr show_score_p1
   661 247B 20 E3 27		            jsr show_score_p2
   662
   663 				; restart game code
   664 				            ; initial state of players            
   665 				;            jsr handle_player1
   666 				;            jsr handle_player2
   667
   668 247E A6 9C		            ldx p1_angle
   669 2480 86 AA		            stx ball_angle_start
   670 2482 20 B5 25		            jsr ball_to_start_position
   671 2485 20 C4 25		            jsr prepare_ball_end_position
   672
   673 2488 A9 00		            lda #0
   674 248A 85 A0		            sta mp_collision
   675 248C 85 A1		            sta in_collision
   676 248E 85 A3		            sta edge_delay
   677 2490 8D 1E D0		            sta HITCLR
   678
   679 2493 A9 02		            lda #2
   680 2495 85 B5		            sta player_turn         ; blue's turn
   681
   682 2497 20 C4 23		            jsr turn_color_ball
   683 249A 4C 0B 25		            jmp exit_vbi            
   684
   685 249D			no_restart
   686 249D A9 00		            lda #<display_list
   687 249F 8D 30 02		            sta SDLSTL
   688 24A2 A9 3C		            lda #>display_list
   689 24A4 8D 31 02		            sta SDLSTH
   690
   691 24A7 AD 08 D0		            lda M0PL
   692 24AA 85 A0		            sta mp_collision
   693 24AC AD 09 D0		            lda M1PL
   694 24AF 05 A0		            ora mp_collision
   695 24B1 85 A0		            sta mp_collision
   696 				 
   697 24B3 A9 26		            lda #$26
   698 24B5 8D 18 D0		            sta $d018
   699
   700 24B8 20 62 25		            jsr handle_player1
   701
   702 24BB 20 7B 25		            jsr handle_player2
   703
   704 				; handle ball
   705
   706 24BE 20 5C 26		            jsr wipe_ball         
   707
   708 				; Check ball collision with bat
   709
   710 24C1 A5 A4		            lda bat_collision_delay
   711 24C3 F0 05		            beq check_allowed
   712 24C5 C6 A4		            dec bat_collision_delay
   713 24C7 4C E4 24		            jmp move_one
   714
   715 24CA			check_allowed
   716 24CA A5 A0		            lda mp_collision
   717 24CC F0 0F		            beq reset_in_collision
   718
   719 24CE A5 A1		            lda in_collision
   720 24D0 D0 12		            bne no_first_hit
   721
   722 24D2 E6 A1		            inc in_collision            
   723 24D4 20 F1 25		            jsr bounce_bat_ball 
   724 				            
   725 24D7 20 1D 25		            jsr sound_bat          
   726 				            
   727 24DA 4C E4 24		            jmp move_one
   728 				            
   729 24DD			reset_in_collision
   730 24DD A9 00		            lda #0
   731 24DF 85 A1		            sta in_collision   
   732 24E1 20 0E 25		            jsr sound_off         
   733
   734 24E4			move_one
   735 24E4			no_first_hit
   736 24E4 20 4E 29		            jsr move_current_xy
   737 24E7 F0 0F		            beq still_moving
   738 24E9			do_reset
   739 24E9 A5 AB		            lda ball_angle_end
   740 24EB 85 AA		            sta ball_angle_start
   741
   742 24ED 20 E8 25		            jsr ball_current_to_start_position
   743 24F0 20 C4 25		            jsr prepare_ball_end_position
   744
   745 24F3 20 2E 25		            jsr update_score
   746 24F6 D0 13		            bne exit_vbi        ; end game
   747 24F8			still_moving
   748 24F8 A5 EB		            lda current_x+1
   749 24FA 85 A6		            sta ball_current_x
   750 24FC A5 ED		            lda current_y+1
   751 24FE 85 A7		            sta ball_current_y
   752
   753 2500 20 71 26		            jsr show_ball
   754
   755 2503 A9 00		            lda #0
   756 2505 8D 18 D0		            sta $d018           
   757
   758 				; anything in A to clear collisions
   759 2508 8D 1E D0		            sta HITCLR
   760
   761 250B			exit_vbi
   762 250B 4C 62 E4		            jmp $e462
   763
   764 250E			sound_off
   765 250E A9 00		            lda #0
   766 2510 8D 01 D2		            sta AUDC1
   767 2513 8D 03 D2		            sta AUDC2
   768 2516 8D 05 D2		            sta AUDC3
   769 2519 8D 05 D2		            sta AUDC3
   770 251C 60			            rts
   771
   772 251D			sound_bat
   773 251D A5 B5		            lda player_turn
   774 251F 0A			            asl
   775 2520 0A			            asl
   776 2521 69 40		            adc #$40
   777 2523 E5 B3		            sbc angle_diff_bat
   778 2525 8D 00 D2		            sta AUDF1
   779 2528 A9 A6		            lda #$a6
   780 252A 8D 01 D2		            sta AUDC1
   781 252D 60			            rts
   782
   783 				; Update score
   784 				; Score > max score, then exit A = 1, otherwise A = 0
   785
   786 252E			update_score
   787 252E A5 B5		            lda player_turn
   788 2530 C9 01		            cmp #1
   789 2532 D0 12		            bne was_player2_turn
   790 				; was player 1 turn, so player 2 gets a point
   791 2534 20 11 28		            jsr inc_score_p2
   792 2537 20 E3 27		            jsr show_score_p2
   793
   794 253A AD 0B 3D		            lda score_p2
   795 253D C9 11		            cmp #MAX_SCORE
   796 253F D0 17		            bne reset_edge_delay
   797
   798 2541 A9 01		            lda #1
   799 2543 85 8C		            sta mode_menu
   800 2545 60			            rts
   801
   802 2546			was_player2_turn
   803 2546 20 05 28		            jsr inc_score_p1
   804 2549 20 CA 27		            jsr show_score_p1
   805
   806 254C AD 0A 3D		            lda score_p1
   807 254F C9 11		            cmp #MAX_SCORE
   808 2551 D0 05		            bne reset_edge_delay
   809
   810 2553 A9 01		            lda #1
   811 2555 85 8C		            sta mode_menu
   812 2557 60			            rts
   813
   814 2558			reset_edge_delay
   815 2558 A9 0A		            lda #10
   816 255A 85 A3		            sta edge_delay
   817
   818 255C			no_edge
   819
   820 255C A9 00		            lda #0      ; no end game
   821 				; anything in A to clear collisions
   822 255E 8D 1E D0		            sta HITCLR
   823 2561 60			            rts
   824
   825 				; player 1
   826 				; - wipe shape at previous y-position
   827 				; - move player using controller
   828 				; - set sprite positions
   829
   830 2562			handle_player1
   831 2562 20 C9 26		            jsr wipe_p1         ; wipe previous shape player 1
   832
   833 2565 A2 00		            ldx #0              ; player 1
   834 2567 20 94 25		            jsr move_player
   835 				            
   836 256A 20 95 26		            jsr show_p1
   837
   838 256D A5 94		            lda player1_x
   839 256F 18			            clc
   840 2570 69 20		            adc #left_margin
   841 2572 8D 00 D0		            sta HPOSP0
   842 2575 69 08		            adc #8
   843 2577 8D 01 D0		            sta HPOSP1
   844 257A 60			            rts
   845
   846 				; player 2
   847 				; - wipe shape at previous y-position
   848 				; - move player using controller
   849 				; - set sprite positions
   850
   851 257B			handle_player2
   852 257B 20 DE 26		            jsr wipe_p2         ; wipe previous shape player 2
   853
   854 257E A2 01		            ldx #1              ; player 2
   855 2580 20 94 25		            jsr move_player
   856 				                        
   857 2583 20 AF 26		            jsr show_p2
   858
   859 2586 A5 95		            lda player2_x
   860 2588 18			            clc
   861 2589 69 20		            adc #left_margin
   862 258B 8D 02 D0		            sta HPOSP2
   863 258E 69 08		            adc #8
   864 2590 8D 03 D0		            sta HPOSP3
   865 2593 60			            rts
   866
   867 				; move player 1/2
   868 				; right - clockwise, left = anti-clockwise
   869
   870 				; X = 0, player 1
   871 				; X = 1, player 2
   872
   873 				; Y = driver mode:
   874 				; 0 : stick
   875 				; 1 : paddle
   876 				; 2 : driving
   877 				; 3 : computer
   878 				            
   879 2594			move_player
   880 2594 20 62 21		            jsr main_driver
   881
   882 2597 B5 9C		            lda p1_angle,x
   883 2599 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   884 259B 49 40		            eor #64                     ; perpendicular to the circle angle
   885 259D 95 90		            sta p1_shape,x
   886
   887 259F B4 9C		            ldy p1_angle,x
   888 25A1 B9 00 2B		            lda inner_x_tab,y
   889 25A4 4A			            lsr
   890 25A5 69 20		            adc #inner_x_margin/2
   891 25A7 95 94		            sta player1_x,x
   892 25A9 B9 00 2C		            lda inner_y_tab,y
   893 25AC 4A			            lsr
   894 25AD 95 98		            sta player1_y,x
   895
   896 25AF B4 90		            ldy p1_shape,x
   897 25B1 20 81 27		            jsr shape_to_ptr
   898
   899 25B4 60			            rts
   900
   901 				; Set ball at start position
   902 				; - start angle current player
   903 				; - start position by inner table
   904 				; - collision delay set?
   905
   906 				; Set ball current position to start position
   907 				; input:
   908 				; X = angle of start position
   909 				; output:
   910 				; ball position: (ball_current_x, ball_current_y)
   911 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   912 25B5			ball_to_start_position
   913 25B5 BD 00 2B		            lda inner_x_tab,x
   914 25B8 85 A6		            sta ball_current_x
   915 25BA 85 E6		            sta tmp_x1
   916 25BC BD 00 2C		            lda inner_y_tab,x
   917 25BF 85 A7		            sta ball_current_y
   918 25C1 85 E7		            sta tmp_y1
   919 25C3 60			            rts
   920
   921 				; Prepare ball end position
   922 				; - end angle current player
   923 				; - end position by outer table
   924 				; - calculate step size x,y
   925
   926 				; Input:
   927 				; - ball_angle_start
   928 				; - ball speed
   929 				; Output:
   930 				; - ball_andle_end
   931 				; - ball start position (tmp_x1, tmp_y1)
   932 				; - ball end position (tmp_x2, tmp_y2)
   933 				; - step size (step_x, step_y) for ball movement
   934 25C4			prepare_ball_end_position
   935 25C4 A5 AA		            lda ball_angle_start
   936 25C6 49 80		            eor #128        ; other side
   937 25C8 85 AB		            sta ball_angle_end
   938 25CA AA			            tax
   939 25CB 20 51 26		            jsr angle_to_end_position
   940 				                        
   941 25CE 20 E1 28		            jsr init_current_xy
   942 				            
   943 				; move current a little bit            
   944 25D1 20 4E 29		            jsr move_current_xy
   945 				; ignore end indicator, since we only just started
   946
   947
   948 25D4 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   949 25D6 85 A4		            sta bat_collision_delay
   950 25D8 60			            rts
   951
   952 				; x = angle 0..255
   953 25D9			outer_angle_to_start_position
   954 25D9 BD 00 16		            lda outer_x_256,x
   955 25DC 85 A6		            sta ball_current_x
   956 25DE 85 E6		            sta tmp_x1
   957 25E0 BD 00 17		            lda outer_y_256,x
   958 25E3 85 A7		            sta ball_current_y
   959 25E5 85 E7		            sta tmp_y1
   960 25E7 60			            rts
   961
   962 25E8			ball_current_to_start_position
   963 25E8 A5 A6		            lda ball_current_x
   964 25EA 85 E6		            sta tmp_x1
   965 25EC A5 A7		            lda ball_current_y
   966 25EE 85 E7		            sta tmp_y1
   967 25F0 60			            rts
   968
   969 				; Ball collides with bat
   970 				; - start ball angle = end ball angle
   971 				; - calculate diff between bat and ball end angle
   972 				; - calculate new end angle
   973 				; - Set ball at start position
   974 				; - Prepare ball end position
   975
   976 25F1			bounce_bat_ball
   977 				; set new start of ball
   978 				; @todo check ball angles
   979 				; set new ball start angle (= previous end angle)
   980 25F1 A5 AB		            lda ball_angle_end
   981 25F3 85 AA		            sta ball_angle_start
   982 				            
   983 				; alternative?
   984 				            ;ldx ball_angle_start
   985 				            ;jsr ball_to_start_position          
   986 25F5 20 E8 25		            jsr ball_current_to_start_position
   987
   988 				; which player hit the ball?
   989 25F8 A9 01		            lda #1
   990 25FA 85 A2		            sta player_nr_hit
   991 25FC A5 A0		            lda mp_collision
   992 25FE 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   993 2600 D0 04		            bne p1_hit
   994 2602 A9 02		            lda #2
   995 2604 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   996 2606			p1_hit            
   997
   998 				; who's turn is it and who bounced the ball?
   999
  1000 2606 A5 B5		            lda player_turn
  1001 2608 25 A2		            and player_nr_hit
  1002 260A F0 06		            beq no_switch_turn
  1003
  1004 260C A5 B5		            lda player_turn
  1005 260E 49 03		            eor #3              ; 1 => 2, 2 => 1
  1006 2610 85 B5		            sta player_turn 
  1007
  1008 2612			no_switch_turn
  1009 2612 20 C4 23		            jsr turn_color_ball
  1010 				            
  1011 2615 A6 A2		            ldx player_nr_hit
  1012 2617 CA			            dex                     ; index 0,1 (player = 1,2)
  1013 2618 B5 9C		            lda p1_angle,x
  1014
  1015 				; Calculate diff between bat angle position and new ball start position
  1016 261A 85 B0		            sta tmp_angle1
  1017
  1018 261C A5 AA		            lda ball_angle_start
  1019 261E 85 B1		            sta tmp_angle2
  1020
  1021 2620 20 1D 28		            jsr calc_angle_diff
  1022
  1023 2623 0A			            asl
  1024 2624 0A			            asl
  1025 2625 0A			            asl
  1026 2626 85 B3		            sta angle_diff_bat
  1027
  1028 2628 A5 B0		            lda tmp_angle1
  1029 262A 18			            clc
  1030 262B 65 B2		            adc add_to_angle
  1031 262D 49 80		            eor #128            ; other side
  1032 262F 85 B0		            sta tmp_angle1
  1033 				            
  1034 2631 A5 B4		            lda tmp_angle_direction
  1035 2633 D0 0A		            bne diff_clockwise
  1036 				; diff counter clockwise
  1037 2635 A5 B0		            lda tmp_angle1
  1038 2637 18			            clc
  1039 2638 65 B3		            adc angle_diff_bat
  1040 263A 85 B0		            sta tmp_angle1
  1041 263C 4C 46 26		            jmp calc_done            
  1042
  1043 263F			diff_clockwise
  1044 263F A5 B0		            lda tmp_angle1
  1045 2641 38			            sec
  1046 2642 E5 B3		            sbc angle_diff_bat
  1047 2644 85 B0		            sta tmp_angle1
  1048 				            
  1049 				; calculation done            
  1050 2646			calc_done
  1051 2646 A5 B0		            lda tmp_angle1
  1052 2648 85 AB		            sta ball_angle_end
  1053 264A AA			            tax
  1054 264B 20 51 26		            jsr angle_to_end_position
  1055 				                        
  1056 264E 4C E1 28		            jmp init_current_xy
  1057
  1058 				; x = angle 0..255
  1059 2651			angle_to_end_position
  1060 2651 BD 00 16		            lda outer_x_256,x
  1061 2654 85 E8		            sta tmp_x2
  1062 2656 BD 00 17		            lda outer_y_256,x
  1063 2659 85 E9		            sta tmp_y2
  1064 265B 60			            rts
  1065
  1066 265C			wipe_ball
  1067 265C A5 A7		            lda ball_current_y
  1068 265E 4A			            lsr
  1069 265F 69 06		            adc #ball_top_margin
  1070 2661 AA			            tax                 ; x = real y position on screen
  1071 2662 A9 00		            lda #0
  1072 2664 9D 80 11		            sta msl_area,x
  1073 2667 9D 81 11		            sta msl_area+1,x
  1074 266A 9D 82 11		            sta msl_area+2,x
  1075 266D 9D 83 11		            sta msl_area+3,x
  1076 2670 60			            rts
  1077
  1078 2671			show_ball
  1079 2671 A5 A7		            lda ball_current_y
  1080 2673 4A			            lsr
  1081 2674 69 06		            adc #ball_top_margin
  1082 2676 AA			            tax                 ; x = real y position on screen
  1083
  1084 2677 A9 02		            lda #%00000010
  1085 2679 9D 80 11		            sta msl_area,x
  1086 267C 9D 83 11		            sta msl_area+3,x
  1087 267F A9 07		            lda #%00000111
  1088 2681 9D 81 11		            sta msl_area+1,x
  1089 2684 9D 82 11		            sta msl_area+2,x
  1090 				            
  1091 2687 A5 A6		            lda ball_current_x
  1092 2689 4A			            lsr
  1093 268A 69 45		            adc #ball_left_margin
  1094 268C 8D 05 D0		            sta HPOSM1
  1095 268F 69 02		            adc #2
  1096 2691 8D 04 D0		            sta HPOSM0
  1097 				                        
  1098 2694 60			            rts
  1099 				            
  1100 2695			show_p1
  1101 2695 A5 98		            lda player1_y
  1102 2697 18			            clc
  1103 2698 69 01		            adc #upper_margin
  1104 269A AA			            tax
  1105
  1106 269B A0 00		            ldy #0
  1107 269D			show_shape1
  1108 269D B1 84		            lda (shape_ptr),y
  1109 269F 9D 00 12		            sta p0_area,x 
  1110 26A2 C8			            iny
  1111 26A3 B1 84		            lda (shape_ptr),y
  1112 26A5 9D 80 12		            sta p1_area,x
  1113 26A8 E8			            inx
  1114 26A9 C8			            iny
  1115 26AA C0 20		            cpy #32
  1116 26AC D0 EF		            bne show_shape1
  1117 26AE 60			            rts
  1118
  1119 26AF			show_p2
  1120 26AF A5 99		            lda player2_y
  1121 26B1 18			            clc
  1122 26B2 69 01		            adc #upper_margin
  1123 26B4 AA			            tax
  1124
  1125 26B5 A0 00		            ldy #0
  1126 26B7			show_shape2
  1127 26B7 B1 84		            lda (shape_ptr),y
  1128 26B9 9D 00 13		            sta p2_area,x 
  1129 26BC C8			            iny
  1130 26BD B1 84		            lda (shape_ptr),y
  1131 26BF 9D 80 13		            sta p3_area,x
  1132 26C2 E8			            inx
  1133 26C3 C8			            iny
  1134 26C4 C0 20		            cpy #32
  1135 26C6 D0 EF		            bne show_shape2
  1136 26C8 60			            rts
  1137
  1138 26C9			wipe_p1
  1139 26C9 A5 98		            lda player1_y
  1140 26CB 18			            clc
  1141 26CC 69 01		            adc #upper_margin
  1142 26CE AA			            tax
  1143 				            
  1144 26CF A0 10		            ldy #16
  1145 26D1 A9 00		            lda #0
  1146 26D3			wipe_it1            
  1147 26D3 9D 00 12		            sta p0_area,x 
  1148 26D6 9D 80 12		            sta p1_area,x
  1149 26D9 E8			            inx
  1150 26DA 88			            dey
  1151 26DB D0 F6		            bne wipe_it1 
  1152 26DD 60			            rts
  1153
  1154 26DE			wipe_p2
  1155 26DE A5 99		            lda player2_y
  1156 26E0 18			            clc
  1157 26E1 69 01		            adc #upper_margin
  1158 26E3 AA			            tax
  1159 				            
  1160 26E4 A0 10		            ldy #16
  1161 26E6 A9 00		            lda #0
  1162 26E8			wipe_it2            
  1163 26E8 9D 00 13		            sta p2_area,x 
  1164 26EB 9D 80 13		            sta p3_area,x
  1165 26EE E8			            inx
  1166 26EF 88			            dey
  1167 26F0 D0 F6		            bne wipe_it2 
  1168 26F2 60			            rts
  1169
  1170 26F3			plot_inner
  1171 26F3 A9 01		            lda #1
  1172 26F5 8D FB 02		            sta draw_color
  1173
  1174 26F8 A2 00		            ldx #0
  1175 26FA			plot_in
  1176 26FA 8A			            txa
  1177 26FB 48			            pha
  1178
  1179 26FC BD 00 2B		            lda inner_x_tab,x                      
  1180 26FF 18			            clc
  1181 2700 69 0F		            adc #outer_x_margin
  1182 2702 85 55		            sta x_position
  1183 2704 A9 00		            lda #0
  1184 2706 69 00		            adc #0
  1185 2708 85 56		            sta x_position+1
  1186 				            
  1187 270A BD 00 2C		            lda inner_y_tab,x
  1188 270D 85 54		            sta y_position
  1189 				            
  1190 270F 20 97 23		            jsr plot_dot
  1191 				;            jsr plot_pixel
  1192
  1193 2712 68			            pla
  1194 2713 AA			            tax
  1195 2714 E8			            inx
  1196 2715 D0 E3		            bne plot_in 
  1197 				            
  1198 2717 60			            rts
  1199 				            
  1200 2718			plot_outer
  1201 2718 A9 01		            lda #1
  1202 271A 8D FB 02		            sta draw_color
  1203
  1204 271D A9 00		            lda #<outer_x_tab
  1205 271F 85 80		            sta table_x_ptr
  1206 2721 A9 30		            lda #>outer_x_tab
  1207 2723 85 81		            sta table_x_ptr+1
  1208
  1209 2725 A9 00		            lda #<outer_y_tab
  1210 2727 85 82		            sta table_y_ptr
  1211 2729 A9 34		            lda #>outer_y_tab
  1212 272B 85 83		            sta table_y_ptr+1
  1213
  1214 272D			plot_out
  1215 272D A0 00		            ldy #0
  1216
  1217 272F B1 80		            lda (table_x_ptr),y
  1218 2731 18			            clc
  1219 2732 69 0F		            adc #outer_x_margin
  1220 2734 85 55		            sta x_position
  1221 2736 A9 00		            lda #0
  1222 2738 69 00		            adc #0
  1223 273A 85 56		            sta x_position+1
  1224 				            
  1225 273C B1 82		            lda (table_y_ptr),y
  1226 273E 85 54		            sta y_position
  1227 				 
  1228 2740 20 97 23		            jsr plot_dot            
  1229 				;            jsr plot_pixel
  1230
  1231 2743 E6 80		            inc table_x_ptr
  1232 2745 D0 02		            bne no_xt
  1233 2747 E6 81		            inc table_x_ptr+1
  1234 2749			no_xt
  1235 				            
  1236 2749 E6 82		            inc table_y_ptr
  1237 274B D0 02		            bne no_yt
  1238 274D E6 83		            inc table_y_ptr+1
  1239 274F			no_yt            
  1240
  1241 274F A5 80		            lda table_x_ptr
  1242 2751 C9 00		            cmp #<(outer_x_tab+1024)
  1243 2753 D0 D8		            bne plot_out
  1244 2755 A5 81		            lda table_x_ptr+1
  1245 2757 C9 34		            cmp #>(outer_x_tab+1024)
  1246 2759 D0 D2		            bne plot_out
  1247 				            
  1248 275B 60			            rts
  1249
  1250 275C			make_shape_index
  1251 275C A9 00		            lda #<pm_shapes
  1252 275E 85 84		            sta shape_ptr
  1253 2760 A9 50		            lda #>pm_shapes
  1254 2762 85 85		            sta shape_ptr+1
  1255 				            
  1256 2764 A2 00		            ldx #0
  1257 2766			fill_pm_tab
  1258 2766 A5 84		            lda shape_ptr
  1259 2768 9D 00 60		            sta pm_shape_lo,x
  1260 276B A5 85		            lda shape_ptr+1
  1261 276D 9D 80 60		            sta pm_shape_hi,x
  1262 				            
  1263 2770 A5 84		            lda shape_ptr
  1264 2772 18			            clc
  1265 2773 69 20		            adc #32
  1266 2775 85 84		            sta shape_ptr
  1267 2777 A5 85		            lda shape_ptr+1
  1268 2779 69 00		            adc #0
  1269 277B 85 85		            sta shape_ptr+1
  1270 				            
  1271 277D E8			            inx
  1272 277E 10 E6		            bpl fill_pm_tab
  1273 				            
  1274 2780 60			            rts
  1275 				            
  1276 				; there are 128 shapes, each 32 bytes
  1277
  1278 				; y = shape index
  1279 2781			shape_to_ptr
  1280 2781 B9 00 60		            lda pm_shape_lo,y
  1281 2784 85 84		            sta shape_ptr
  1282 2786 B9 80 60		            lda pm_shape_hi,y
  1283 2789 85 85		            sta shape_ptr+1
  1284
  1285 278B 60			            rts
  1286
  1287 				; turn 1024 tables into 256 bytes for ball edge lookup
  1288 278C			make_outer_256
  1289 278C A0 00		            ldy #0
  1290 278E A2 00		            ldx #0
  1291 2790			conv_256
  1292 2790 BD 00 30		            lda outer_x_tab,x
  1293 2793 99 00 16		            sta outer_x_256,y
  1294 2796 BD 00 31		            lda outer_x_tab+$100,x
  1295 2799 99 40 16		            sta outer_x_256+64,y
  1296 279C BD 00 32		            lda outer_x_tab+$200,x
  1297 279F 99 80 16		            sta outer_x_256+128,y
  1298 27A2 BD 00 33		            lda outer_x_tab+$300,x
  1299 27A5 99 C0 16		            sta outer_x_256+192,y
  1300 				            
  1301 27A8 BD 00 34		            lda outer_y_tab,x
  1302 27AB 99 00 17		            sta outer_y_256,y
  1303 27AE BD 00 35		            lda outer_y_tab+$100,x
  1304 27B1 99 40 17		            sta outer_y_256+64,y
  1305 27B4 BD 00 36		            lda outer_y_tab+$200,x
  1306 27B7 99 80 17		            sta outer_y_256+128,y
  1307 27BA BD 00 37		            lda outer_y_tab+$300,x
  1308 27BD 99 C0 17		            sta outer_y_256+192,y
  1309
  1310 27C0 E8			            inx
  1311 27C1 E8			            inx
  1312 27C2 E8			            inx
  1313 27C3 E8			            inx
  1314 27C4 C8			            iny
  1315 27C5 C0 40		            cpy #64
  1316 27C7 D0 C7		            bne conv_256            
  1317 27C9 60			            rts
  1318
  1319 27CA			show_score_p1
  1320 27CA AD 0A 3D		            lda score_p1
  1321 27CD 4A			            lsr
  1322 27CE 4A			            lsr
  1323 27CF 4A			            lsr
  1324 27D0 4A			            lsr
  1325 27D1 F0 02		            beq do_space1
  1326 27D3 09 10		            ora #16
  1327 27D5			do_space1
  1328 27D5 8D EF 3C		            sta score_chars_p1
  1329 27D8 AD 0A 3D		            lda score_p1
  1330 27DB 29 0F		            and #15
  1331 27DD 09 10		            ora #16
  1332 27DF 8D F0 3C		            sta score_chars_p1+1
  1333 27E2 60			            rts
  1334
  1335 27E3			show_score_p2
  1336 27E3 AD 0B 3D		            lda score_p2
  1337 27E6 4A			            lsr
  1338 27E7 4A			            lsr
  1339 27E8 4A			            lsr
  1340 27E9 4A			            lsr
  1341 27EA F0 02		            beq do_space2
  1342 27EC 09 10		            ora #16
  1343 27EE			do_space2
  1344 27EE 8D 08 3D		            sta score_chars_p2
  1345 27F1 AD 0B 3D		            lda score_p2
  1346 27F4 29 0F		            and #15
  1347 27F6 09 10		            ora #16
  1348 27F8 8D 09 3D		            sta score_chars_p2+1
  1349 27FB 60			            rts
  1350 				                        
  1351 27FC			reset_score
  1352 27FC A9 00		            lda #0
  1353 27FE 8D 0A 3D		            sta score_p1
  1354 2801 8D 0B 3D		            sta score_p2
  1355 2804 60			            rts            
  1356 				         
  1357 2805			inc_score_p1
  1358 2805 F8			            sed
  1359 2806 AD 0A 3D		            lda score_p1
  1360 2809 18			            clc
  1361 280A 69 01		            adc #1
  1362 280C 8D 0A 3D		            sta score_p1    
  1363 280F D8			            cld
  1364 2810 60			            rts
  1365
  1366 2811			inc_score_p2
  1367 2811 F8			            sed
  1368 2812 AD 0B 3D		            lda score_p2
  1369 2815 18			            clc
  1370 2816 69 01		            adc #1
  1371 2818 8D 0B 3D		            sta score_p2
  1372 281B D8			            cld
  1373 281C 60			            rts
  1374
  1375 				; calculate the difference between angle1 and angle2
  1376
  1377 				; input:
  1378 				; tmp_angle1 (0..255)
  1379 				; tmp_angle2 (0..255)
  1380
  1381 				; output:
  1382 				; tmp_angle_diff, A: difference between angle1 and angle2
  1383 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1384
  1385 281D			calc_angle_diff
  1386 281D A9 00		            lda #0
  1387 281F 85 B2		            sta add_to_angle
  1388 2821 85 B4		            sta tmp_angle_direction
  1389
  1390 				; make sure we can compare angles, otherwise add $40 to angles
  1391 2823 A5 B0		            lda tmp_angle1
  1392 2825 C9 C0		            cmp #$c0
  1393 2827 B0 06		            bcs too_large
  1394 2829 A5 B1		            lda tmp_angle2
  1395 282B C9 C0		            cmp #$c0
  1396 282D 90 12		            bcc not_too_large
  1397 282F			too_large
  1398 282F A5 B0		            lda tmp_angle1
  1399 2831 38			            sec
  1400 2832 E9 40		            sbc #$40
  1401 2834 85 B0		            sta tmp_angle1
  1402 				            
  1403 2836 A5 B1		            lda tmp_angle2
  1404 2838 38			            sec
  1405 2839 E9 40		            sbc #$40
  1406 283B 85 B1		            sta tmp_angle2
  1407 				            
  1408 283D A9 40		            lda #$40
  1409 283F 85 B2		            sta add_to_angle
  1410
  1411 2841			not_too_large
  1412 2841 A5 B1		            lda tmp_angle2
  1413 2843 C5 B0		            cmp tmp_angle1
  1414 2845 90 0A		            bcc angle2_smaller_angle1
  1415 				; ball >= play
  1416 2847 38			            sec
  1417 2848 E5 B0		            sbc tmp_angle1
  1418 284A 85 B7		            sta tmp_angle_diff
  1419 				            
  1420 284C E6 B4		            inc tmp_angle_direction
  1421 284E 4C 58 28		            jmp diff_calculated
  1422 				                        
  1423 2851			angle2_smaller_angle1
  1424 2851 A5 B0		            lda tmp_angle1
  1425 2853 38			            sec
  1426 2854 E5 B1		            sbc tmp_angle2
  1427 2856 85 B7		            sta tmp_angle_diff
  1428
  1429 2858			diff_calculated
  1430 2858 A5 B7		            lda tmp_angle_diff           
  1431 285A 60			            rts
  1432
  1433 				; X = angle
  1434 				; lookup magnitude of angle 0 to angle X
  1435 285B			angle_to_magnitude
  1436 285B BD 00 38		            lda magnitudes_lo,x
  1437 285E 85 B8		            sta magnitude
  1438 2860 BD 00 39		            lda magnitudes_hi,x
  1439 2863 85 B9		            sta magnitude+1
  1440 2865 60			            rts
  1441
  1442 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1443 2866			calc_abs_tmp_dx
  1444 2866 A5 E8		            lda tmp_x2
  1445 2868 38			            sec
  1446 2869 E5 E6		            sbc tmp_x1
  1447 286B B0 05		            bcs x2_le
  1448 286D 49 FF		            eor #255
  1449 286F 18			            clc
  1450 2870 69 01		            adc #1
  1451 2872 85 F2		x2_le       sta tmp_dx
  1452
  1453 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1454 2874			calc_abs_tmp_dy
  1455 2874 A5 E9		            lda tmp_y2
  1456 2876 38			            sec
  1457 2877 E5 E7		            sbc tmp_y1
  1458 2879 B0 05		            bcs y2_le
  1459 287B 49 FF		            eor #255
  1460 287D 18			            clc
  1461 287E 69 01		            adc #1
  1462 2880 85 F3		y2_le       sta tmp_dy
  1463 2882 60			            rts
  1464 				            
  1465 2883			calc_dx_div_magnitude
  1466 2883 A9 00		            lda #0
  1467 2885 85 E2		            sta _dividend
  1468 2887 A5 F2		            lda tmp_dx
  1469 				            ;clc
  1470 				            ;adc #1      ; 0..0 = 1 pixel
  1471 2889 85 E3		            sta _dividend+1
  1472
  1473 288B A5 B9		            lda magnitude+1
  1474 288D 85 E0		            sta _divisor
  1475 288F A9 00		            lda #0
  1476 2891 85 E1		            sta _divisor+1
  1477 				            
  1478 2893 20 BB 28		            jsr _div16
  1479
  1480 				; todo multiply result with velocity            
  1481 2896 A5 E2		            lda _result
  1482 2898 85 EE		            sta step_x
  1483 289A A5 E3		            lda _result+1
  1484 289C 85 EF		            sta step_x+1
  1485 				            
  1486 289E 60			            rts
  1487 				            
  1488 289F			calc_dy_div_magnitude
  1489 289F A9 00		            lda #0
  1490 28A1 85 E2		            sta _dividend
  1491 28A3 A5 F3		            lda tmp_dy
  1492 				            ;clc
  1493 				            ;adc #1      ; 0..0 = 1 pixel
  1494 28A5 85 E3		            sta _dividend+1
  1495 				            
  1496 28A7 A5 B9		            lda magnitude+1
  1497 28A9 85 E0		            sta _divisor
  1498 28AB A9 00		            lda #0
  1499 28AD 85 E1		            sta _divisor+1
  1500
  1501 28AF 20 BB 28		            jsr _div16
  1502 				            
  1503 				; todo multiply result with velocity
  1504 28B2 A5 E2		            lda _result
  1505 28B4 85 F0		            sta step_y
  1506 28B6 A5 E3		            lda _result+1
  1507 28B8 85 F1		            sta step_y+1
  1508 				            
  1509 28BA 60			            rts
  1510
  1511 				; divide 16bit
  1512 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1513
  1514 				; _result = _dividend / divisor
  1515
  1516 28BB A9 00		_div16      lda #0          ;preset remainder to 0
  1517 28BD 85 E4		            sta _remainder
  1518 28BF 85 E5		            sta _remainder+1
  1519 28C1 A2 10		            ldx #16         ;repeat for each bit: ...
  1520
  1521 28C3 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1522 28C5 26 E3		            rol _dividend+1  
  1523 28C7 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1524 28C9 26 E5		            rol _remainder+1
  1525 28CB A5 E4		            lda _remainder
  1526 28CD 38			            sec
  1527 28CE E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1528 28D0 A8			            tay         ;lb result -> Y, for we may need it later
  1529 28D1 A5 E5		            lda _remainder+1
  1530 28D3 E5 E1		            sbc _divisor+1
  1531 28D5 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1532
  1533 28D7 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1534 28D9 84 E4		            sty _remainder   
  1535 28DB E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1536
  1537 28DD CA			_div_skip   dex
  1538 28DE D0 E3		            bne _div_loop 
  1539 28E0 60			            rts
  1540
  1541 				; Calculations for step size
  1542
  1543 				; not optimised for speed or size
  1544 				; step should be set according to the angle
  1545
  1546 				; move in straight line (x1,y1) to (x2,y2)
  1547
  1548 				; 1. set start/end of line
  1549 				; set (tmp_x1, tmp_y1)
  1550 				; set (tmp_x2, tmp_y2)
  1551
  1552 				; 2. init. current_x, current_y
  1553 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1554 				; @todo
  1555 				; - calculates step sizes for x,y
  1556 				; - calculated directions for x,y
  1557 				;            jsr init_current_xy
  1558
  1559 				; 4. use current_x, current_y to plot or set a position
  1560 				;            lda current_x+1
  1561 				;            sta x_position
  1562 				;            lda current_y+1
  1563 				;            sta y_position
  1564 				;            jsr plot_pixel
  1565
  1566 				; 5. move current_x, current_y to next position on line
  1567 				; A=0 still moving
  1568 				;           move_current_xy
  1569
  1570 28E1			init_current_xy
  1571 28E1 A9 7F		            lda #$7f      ; was 128 for half pixel
  1572 28E3 85 EA		            sta current_x
  1573 28E5 85 EC		            sta current_y
  1574
  1575 28E7 A5 E6		            lda tmp_x1
  1576 28E9 85 EB		            sta current_x+1
  1577 				            
  1578 28EB A5 E7		            lda tmp_y1
  1579 28ED 85 ED		            sta current_y+1
  1580
  1581 				; dx = abs(tmp_x1 - tmp_x2)
  1582 28EF 20 66 28		            jsr calc_abs_tmp_dx
  1583
  1584 				; dy = abs(tmp_y1 - tmp_y2)
  1585 28F2 20 74 28		            jsr calc_abs_tmp_dy
  1586
  1587 				; set directions
  1588 28F5 A5 E6		            lda tmp_x1
  1589 28F7 C5 E8		            cmp tmp_x2
  1590 28F9 90 04		            bcc x1_smaller_x2
  1591 				; x1 >= x2
  1592 28FB A9 01		            lda #1
  1593 28FD D0 02		            bne set_dir_x
  1594 28FF			x1_smaller_x2
  1595 28FF A9 00		            lda #0
  1596 2901			set_dir_x
  1597 2901 85 FA		            sta dir_x
  1598 				            
  1599 2903 A5 E7		            lda tmp_y1
  1600 2905 C5 E9		            cmp tmp_y2
  1601 2907 90 04		            bcc y1_smaller_y2
  1602 				; y1 >= y2
  1603 2909 A9 01		            lda #1
  1604 290B D0 02		            bne set_dir_y
  1605 290D			y1_smaller_y2
  1606 290D A9 00		            lda #0
  1607 290F			set_dir_y
  1608 290F 85 FB		            sta dir_y
  1609
  1610 				; Calculate diff between start angle and end angle
  1611
  1612 2911 A5 AA		            lda ball_angle_start
  1613 2913 85 B0		            sta tmp_angle1
  1614 2915 A5 AB		            lda ball_angle_end
  1615 2917 85 B1		            sta tmp_angle2
  1616 				            
  1617 2919 20 1D 28		            jsr calc_angle_diff
  1618 				            
  1619 				            ;lda tmp_angle_diff
  1620 				            ;lda tmp_angle_direction
  1621
  1622 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1623 291C A6 B7		            ldx tmp_angle_diff
  1624 291E 20 5B 28		            jsr angle_to_magnitude
  1625 				            
  1626 				            ;lda magnitude       ; lo
  1627 				            ;lda magnitude+1
  1628 				            
  1629 				            ;lda tmp_dx
  1630 				            ;lda tmp_dy
  1631 				            
  1632 2921 20 83 28		            jsr calc_dx_div_magnitude
  1633 2924 20 9F 28		            jsr calc_dy_div_magnitude
  1634 				            
  1635 				; Calculate step size by ball speed
  1636 				            
  1637 				; step_x = step_x * speed
  1638 				            
  1639 2927 A5 EE		            lda step_x
  1640 2929 85 F6		            sta _multiplicand
  1641 292B A5 EF		            lda step_x+1
  1642 292D 85 F7		            sta _multiplicand+1
  1643 292F A5 AC		            lda ball_speed
  1644 2931 85 F8		            sta _multiplier
  1645
  1646 2933 20 B0 22		            jsr _multi8
  1647 				;result in .A (low byte, also in .X) and .Y (high byte)
  1648 2936 85 EE		            sta step_x
  1649 2938 84 EF		            sty step_x+1
  1650 293A			skip_step_x_hi
  1651 				            
  1652 				; step_y = step_y * speed
  1653
  1654 293A A5 F0		            lda step_y
  1655 293C 85 F6		            sta _multiplicand
  1656 293E A5 F1		            lda step_y+1
  1657 2940 85 F7		            sta _multiplicand+1
  1658 2942 A5 AC		            lda ball_speed
  1659 2944 85 F8		            sta _multiplier
  1660
  1661 2946 20 B0 22		            jsr _multi8
  1662 				;result in .A (low byte, also in .X) and .Y (high byte)
  1663 2949 85 F0		            sta step_y
  1664 294B 84 F1		            sty step_y+1
  1665 294D			skip_step_y_hi
  1666
  1667 294D 60			            rts
  1668
  1669 				; Move ball position 
  1670 				; Add one step, until end reached
  1671 				; Input:
  1672 				; - step size (step_x, step_y)
  1673 				; - current ball position (current_x, current_y)
  1674 				; - end position (tmp_x2, tmp_y2)
  1675 				; Output:
  1676 				; A (0 = still moving, 1 = end reached)
  1677 294E			move_current_xy
  1678 294E A9 00		            lda #0
  1679 2950 85 FC		            sta line_end_x
  1680 2952 85 FD		            sta line_end_y
  1681
  1682 				; sets line end indicators here
  1683 2954 20 71 29		            jsr move_current_x
  1684 2957 20 B1 29		            jsr move_current_y
  1685
  1686 295A A5 FC		            lda line_end_x
  1687 295C 25 FD		            and line_end_y
  1688 295E F0 10		            beq no_end_reached
  1689 				            
  1690 				; set current to (x2,y2)
  1691 2960 A5 E8		            lda tmp_x2
  1692 2962 85 EB		            sta current_x+1
  1693 2964 A5 E9		            lda tmp_y2
  1694 2966 85 ED		            sta current_y+1
  1695 				            
  1696 2968 A9 00		            lda #0
  1697 296A 85 EA		            sta current_x
  1698 296C 85 EC		            sta current_y
  1699 				            
  1700 296E A9 01		            lda #1 ; end reached
  1701 				            
  1702 2970			no_end_reached  ; A = 0
  1703 2970 60			            rts
  1704
  1705 2971			move_current_x
  1706 2971 A5 FA		            lda dir_x
  1707 2973 D0 18		            bne move_current_left
  1708
  1709 				; move right, add
  1710 2975 A5 EA		            lda current_x
  1711 2977 18			            clc
  1712 2978 65 EE		            adc step_x
  1713 297A 85 EA		            sta current_x
  1714 297C A5 EB		            lda current_x+1
  1715 297E 65 EF		            adc step_x+1
  1716 2980 85 EB		            sta current_x+1
  1717
  1718 2982 A5 EB		            lda current_x+1
  1719 2984 C5 E8		            cmp tmp_x2
  1720 2986 90 04		            bcc no_line_end
  1721 2988			exact_end_x
  1722 2988 A9 01		            lda #1
  1723 298A 85 FC		            sta line_end_x 
  1724 298C			no_line_end
  1725 298C 60			            rts
  1726 				            
  1727 298D			move_current_left
  1728 298D A5 EA		            lda current_x
  1729 298F 38			            sec
  1730 2990 E5 EE		            sbc step_x
  1731 2992 90 01		            bcc clear_skip
  1732 2994 EA			            nop
  1733 2995			clear_skip
  1734 2995 85 EA		            sta current_x
  1735 2997 A5 EB		            lda current_x+1
  1736 2999 E5 EF		            sbc step_x+1
  1737 299B 85 EB		            sta current_x+1
  1738 299D 90 0B		            bcc below_zero
  1739 				                        
  1740 299F A5 E8		            lda tmp_x2
  1741 29A1 C5 EB		            cmp current_x+1
  1742 29A3 90 E7		            bcc no_line_end
  1743 29A5 A9 01		            lda #1
  1744 29A7 85 FC		            sta line_end_x            
  1745 29A9 60			            rts
  1746 29AA			below_zero            
  1747 29AA A9 01		            lda #1
  1748 29AC 85 FC		            sta line_end_x
  1749 29AE 85 FD		            sta line_end_y
  1750 29B0 60			            rts
  1751 29B1			move_current_y
  1752 29B1 A5 FB		            lda dir_y
  1753 29B3 D0 18		            bne move_current_up
  1754
  1755 				; move down, add
  1756 29B5 A5 EC		            lda current_y
  1757 29B7 18			            clc
  1758 29B8 65 F0		            adc step_y
  1759 29BA 85 EC		            sta current_y
  1760 29BC A5 ED		            lda current_y+1
  1761 29BE 65 F1		            adc step_y+1
  1762 29C0 85 ED		            sta current_y+1
  1763 				            
  1764 29C2 A5 ED		            lda current_y+1
  1765 29C4 C5 E9		            cmp tmp_y2
  1766 29C6 90 C4		            bcc no_line_end
  1767 29C8			exact_end_y
  1768 29C8 A9 01		            lda #1
  1769 29CA 85 FD		            sta line_end_y
  1770 29CC 60			            rts
  1771
  1772 29CD			move_current_up
  1773 29CD A5 EC		            lda current_y
  1774 29CF 38			            sec
  1775 29D0 E5 F0		            sbc step_y
  1776 29D2 85 EC		            sta current_y
  1777 29D4 A5 ED		            lda current_y+1
  1778 29D6 E5 F1		            sbc step_y+1
  1779 29D8 90 D0		            bcc below_zero
  1780 29DA 85 ED		            sta current_y+1
  1781 				            
  1782 29DC A5 E9		            lda tmp_y2
  1783 29DE C5 ED		            cmp current_y+1
  1784 29E0 90 AA		            bcc no_line_end
  1785 29E2 A9 01		            lda #1
  1786 29E4 85 FD		            sta line_end_y
  1787 29E6 60			            rts                            
  1788 				            
  1789 29E7			init_sprites
  1790 29E7 A2 00		            ldx #0
  1791 29E9 8A			            txa
  1792 29EA			set_p
  1793 29EA 9D 00 12		            sta p0_area,x
  1794 29ED 9D 80 12		            sta p1_area,x
  1795 29F0 9D 00 13		            sta p2_area,x
  1796 29F3 9D 80 13		            sta p3_area,x
  1797 29F6 E8			            inx
  1798 29F7 10 F1		            bpl set_p               
  1799
  1800 29F9 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1801 29FB 8D 6F 02		            sta GPRIOR
  1802 				    
  1803 29FE A9 10		            lda #>pm_area
  1804 2A00 8D 07 D4		            sta PMBASE
  1805 				    
  1806 2A03 A9 03		            lda #3          ; P/M both on
  1807 2A05 8D 1D D0		            sta GRACTL
  1808 				    
  1809 2A08 A9 90		            lda #$90
  1810 2A0A 8D 02 D0		            sta HPOSP2
  1811 2A0D A9 A0		            lda #$A0
  1812 2A0F 8D 03 D0		            sta HPOSP3  
  1813 2A12 60			            rts            
  1814
  1815 2A13			init_colors
  1816 2A13 A9 2A		            lda #$2a
  1817 2A15 8D C0 02		            sta PCOLR0
  1818 2A18 8D C1 02		            sta PCOLR1
  1819 				            
  1820 2A1B A9 7A		            lda #$7a
  1821 2A1D 8D C2 02		            sta PCOLR2
  1822 2A20 8D C3 02		            sta PCOLR3
  1823 				            
  1824 				            ;lda #$34
  1825 				            ;sta COLOR0
  1826 2A23 A9 00		            lda #0
  1827 2A25 8D C6 02		            sta COLOR2
  1828 2A28 A9 08		            lda #8
  1829 2A2A 8D C5 02		            sta COLOR1
  1830 2A2D 60			            rts
  1831
  1832 2A2E			previous_consol
  1833 2A2E 00			            dta 0
  1834
  1835 2A2F			current_level_index
  1836 2A2F 00			            dta 0
  1837 = 0004			NR_OF_LEVELS = 4
  1838 = 0000			INIT_LEVEL_INDEX = 0
  1839 2A30			level_speeds
  1840 2A30 02 04 06 08		            dta 2,4,6,8
  1841 				            
  1842 				; X = level (0..NR_OF_LEVELS)
  1843 2A34			set_level_ball_speed
  1844 2A34 BD 30 2A		            lda level_speeds,x
  1845 2A37 85 AC		            sta ball_speed
  1846 2A39 8A			            txa
  1847 2A3A 18			            clc
  1848 2A3B 69 01		            adc #1
  1849 2A3D 09 10		            ora #16
  1850 2A3F 8D 3A 41		            sta level_char
  1851 2A42 60			            rts
  1852 				            
  1853 2A43			increase_level
  1854 2A43 EE 2F 2A		            inc current_level_index
  1855 2A46 AD 2F 2A		            lda current_level_index
  1856 2A49 C9 04		            cmp #NR_OF_LEVELS
  1857 2A4B D0 05		            bne ok_level
  1858 2A4D A9 00		            lda #INIT_LEVEL_INDEX
  1859 2A4F 8D 2F 2A		            sta current_level_index
  1860 2A52			ok_level           
  1861 2A52 60			            rts
  1862 				            
  1863 2A53			            .align $100
  1864 2B00			inner_x_tab
  1865 = 2C00			inner_y_tab = *+$100
  1866 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1867 				      
  1868 2D00			            .align $400            
  1869 				; outer circle 1024 plot points on 360 degrees
  1870 3000			outer_x_tab
  1871 = 3400			outer_y_tab = *+1024
  1872 3000-39FF> 70 70 71 72 +             ins 'data\out224.dat'
  1873 				           
  1874 3800			            .align $400
  1875 				; table of magnitudes (length) between angle 0 and 0..255
  1876 				; fixed point 8.8 : hi.lo
  1877 3800			magnitudes_lo
  1878 = 3900			magnitudes_hi = *+256
  1879 3800 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1880
  1881 3A00			            .align $400
  1882 3C00			display_list
  1883 3C00-3D0B> 42		            dta $42
  1884 3C01 EA 3C		            dta a(score_line)
  1885 				            
  1886 3C03 4F			            dta $4f
  1887 3C04			dl_screen_ptr1
  1888 3C04 00 A0		            dta a(screen_mem)
  1889 3C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1890 3C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1891 3C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1892 3C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1893
  1894 3C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1895 3C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1896 3C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1897 3C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1898
  1899 3C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1900 3C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1901 3C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1902 3C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1903
  1904 3C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1905 3C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1906 3C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1907 3C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1908
  1909 3C85 4F			            dta $4f
  1910 3C86			dl_screen_ptr2
  1911 3C86 00 B0		            dta a(screen_mem+(128*SCREEN_WIDTH))
  1912 3C88 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1913 3C8F 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1914 3C97 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1915 3C9F 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1916
  1917 3CA7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1918 3CAF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1919 3CB7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1920 3CBF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1921
  1922 3CC7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1923 3CCF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1924 3CD7 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1925 3CDF 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1926 				            
  1927 3CE7 41			            dta $41
  1928 3CE8 00 3C		            dta a(display_list)
  1929
  1930 3CEA			score_line  
  1931 3CEA 00 32 25 24 00	            dta d' RED '
  1932 3CEF			score_chars_p1
  1933 3CEF 0D 0D 00		            dta d'-- '
  1934
  1935 3CF2 00 00 00 00 00 00 +             dta d'        '
  1936 3CFA 00 00 00 00 00 00 +             dta d'        '
  1937
  1938 3D02 00 22 2C 35 25 00	            dta d' BLUE '
  1939 3D08			score_chars_p2
  1940 3D08 0D 0D		            dta d'--'
  1941
  1942 3D0A 00			score_p1    dta 0
  1943 3D0B 00			score_p2    dta 0
  1944
  1945 3D0C			            .align $400
  1946 				            
  1947 4000			menu_dl
  1948 4000-40B4> 42		            dta $42
  1949 4001 EA 3C		            dta a(score_line)
  1950 				            
  1951 4003 4F			            dta $4f
  1952 4004 00 A0		            dta a(screen_mem)
  1953 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1954 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1955 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1956 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1957
  1958 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1959 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1960 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1961 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1962
  1963 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1964 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1965
  1966 4055 30			            dta $30
  1967 4056 47			            dta $47
  1968 4057 00 41		            dta a(menu_screen)
  1969 4059 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1970
  1971 4060 4F			            dta $4f
  1972 4061 00 B2		            dta a(screen_mem+(144*SCREEN_WIDTH))
  1973 4063 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1974 406A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1975 4072 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1976 407A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1977
  1978 4082 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1979 408A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1980
  1981 4092 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1982 409A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1983 40A2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1984 40AA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1985 				           
  1986 40B2 41			            dta $41
  1987 				            
  1988 40B3 00 40		            dta a(menu_dl)
  1989
  1990 40B5			            .align $100
  1991 4100			menu_screen
  1992 4100-4187> 00 00 00 32 +             dta d'   R O T O R    '
  1993
  1994 4110 23 2F 2E 34 32 2F +             dta d'CONTROL:'
  1995 4118			driver_screen
  1996 4118 00 00 00 00 00 00 +             dta d'        '
  1997 4120 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME  '
  1998 4130 00 00 00 00 2C 25 +             dta d'    LEVEL '
  1999 413A			level_char            
  2000 413A 11 00 00 00 00 00	            dta d'1     '
  2001 4140 80 B3 B4 A1 B2 B4 +             dta d' START to play | OPTION for menu'*
  2002 4160			stick_text
  2003 4160 33 34 29 23 2B 00 +             dta d'STICK   '
  2004 4168			paddle_text
  2005 4168 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2006 4170			driving_text
  2007 4170 24 32 29 36 29 2E +             dta d'DRIVING '
  2008 4178			computer_text
  2009 4178 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2010
  2011 4180			driver_text_lo
  2012 4180 60			            dta <stick_text
  2013 4181 68			            dta <paddle_text
  2014 4182 70			            dta <driving_text
  2015 4183 78			            dta <computer_text
  2016 				            
  2017 4184			driver_text_hi
  2018 4184 41			            dta >stick_text
  2019 4185 41			            dta >paddle_text
  2020 4186 41			            dta >driving_text
  2021 4187 41			            dta >computer_text
  2022
  2023 4188			            .align $400
  2024 4400			rotor_font
  2025 4400-47FF> 00 00 00 00 +             ins 'font\rotor.fnt'
  2026
  2027 4800			            .align $1000
  2028
  2029 				; 128 x 32 bytes shapes            
  2030 5000			pm_shapes
  2031 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2032
  2033 6000			pm_shape_lo
  2034 = 6080			pm_shape_hi = *+128
  2035
  2036 02E0-02E1> CE 21		            run main
