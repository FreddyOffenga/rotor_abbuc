mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.12
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; Optional for a later version:
    16 				; - add computer player(s)
    17 				; - add support for driving controllers
    18
    19 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    20
    21 				; color scheme
    22 = 0050			BASE_COLOR_P1   = $50   ; purple
    23 = 00B0			BASE_COLOR_P2   = $b0   ; green
    24
    25 = 000E			HEADER_FG_COLOR = 14
    26 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    27 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 0C00			pm_area     = $0c00
    33 = 0D80			msl_area    = pm_area+$180
    34 = 0E00			p0_area     = pm_area+$200
    35 = 0E80			p1_area     = pm_area+$280
    36 = 0F00			p2_area     = pm_area+$300
    37 = 0F80			p3_area     = pm_area+$380
    38
    39 				; outer tables 256 for 360 degrees
    40 = 1000			outer_x_256     = $1000
    41 = 1100			outer_y_256     = $1100
    42
    43 = 1200			screen_y_lo     = $1200
    44 = 1300			screen_y_hi     = $1300
    45
    46 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    47 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    48
    49 = 0140			WIDTH           = 320
    50 = 00C0			HEIGHT          = 192
    51
    52 = 0028			SCREEN_WIDTH    = 40
    53
    54 = 0030			outer_x_margin  = 48 ;47-32
    55 = 0040			inner_x_margin  = 64
    56
    57 = 00A0			circle_center_x = WIDTH/2
    58 = 0060			circle_center_y = HEIGHT/2
    59
    60 = 0006			ball_top_margin     = 6
    61 = 0045			ball_left_margin    = 64+5
    62
    63 				; pm upper margin
    64 = 0001			upper_margin    = 1
    65 = 0020			left_margin     = 32
    66
    67 = 0080			music_toggle    = $80
    68
    69 = 0081			shadow_HPOSP0   = $81
    70 = 0082			shadow_HPOSP1   = $82
    71
    72 = 0084			shape_ptr       = $84
    73 = 0086			tmp_screen      = $86
    74
    75 = 008C			mode_menu       = $8c
    76
    77 = 008D			volume_hit_bat  = $8d
    78 = 008E			volume_hit_edge = $8e
    79
    80 				; player vars must be in sequence for zp,x indexing
    81
    82 = 0090			p1_shape        = $90
    83 = 0091			p2_shape        = $91
    84
    85 = 0094			player1_x       = $94
    86 = 0095			player2_x       = $95
    87
    88 = 0098			player1_y       = $98
    89 = 0099			player2_y       = $99
    90
    91 = 009C			p1_angle        = $9c
    92 = 009D			p2_angle        = $9d
    93
    94 = 00A0			mp_collision    = $a0
    95 = 00A1			in_collision    = $a1
    96 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    97 = 00A3			edge_delay      = $a3
    98 = 00A4			bat_collision_delay = $a4
    99
   100 				; ball vars
   101 = 00A6			ball_current_x      = $a6
   102 = 00A7			ball_current_y      = $a7
   103 = 00AA			ball_angle_start    = $aa
   104 = 00AB			ball_angle_end      = $ab
   105 = 00AC			ball_speed          = $ac
   106
   107 = 00B0			tmp_angle1          = $b0
   108 = 00B1			tmp_angle2          = $b1
   109 = 00B2			add_to_angle        = $b2
   110 = 00B3			angle_diff_bat      = $b3
   111 = 00B4			tmp_angle_direction = $b4
   112 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   113 = 00B6			game_restart        = $b6
   114 = 00B7			tmp_angle_diff      = $b7
   115 = 00B8			magnitude           = $b8       ; word
   116
   117 				; $c0 - $df free for music
   118
   119 = 00E0			_divisor    = $e0   ; word
   120 = 00E2			_dividend   = $e2   ; word
   121 = 00E4			_remainder  = $e4   ; word
   122 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   123
   124 = 00E6			tmp_x1      = $e6   ; byte
   125 = 00E7			tmp_y1      = $e7   ; byte
   126 = 00E8			tmp_x2      = $e8   ; byte
   127 = 00E9			tmp_y2      = $e9   ; byte
   128
   129 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   130 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   131
   132 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   133 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   134
   135 = 00F2			tmp_dx      = $f2  ; byte
   136 = 00F3			tmp_dy      = $f3  ; byte
   137
   138 = 00F6			_multiplicand   = $f6   ; word
   139 = 00F8			_multiplier     = $f8   ; byte
   140
   141 				; direction:
   142 				; 0 : x1<x2 or y1<y2 = add
   143 				; 1 ; x1>=y2 or y1>=y2 = subtract
   144
   145 = 00FA			dir_x       = $fa  ; byte
   146 = 00FB			dir_y       = $fb  ; byte
   147
   148 = 00FC			line_end_x  = $fc  ; byte
   149 = 00FD			line_end_y  = $fd  ; byte
   150
   151 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $9800
    17 9800			rotor_font
    18 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 9C00			intro_main
    21 9C00 A9 48		            lda #<dl_intro
    22 9C02 8D 30 02		            sta $230
    23 9C05 A9 9C		            lda #>dl_intro
    24 9C07 8D 31 02		            sta $231
    25
    26 9C0A A9 98		            lda #>rotor_font
    27 9C0C 8D F4 02		            sta 756
    28
    29 9C0F A9 00		            lda #0
    30 9C11 8D C6 02		            sta 710
    31
    32 9C14 A9 22		            lda #34
    33 9C16 8D 2F 02		            sta 559
    34
    35 				; reset clock
    36 9C19 A9 00		            lda #0
    37 9C1B 85 14		            sta 20
    38 9C1D 85 13		            sta 19
    39 				            
    40 9C1F 60			            rts
    41
    42 9C20			footer_intro
    43 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    44
    45 9C48			dl_intro
    46 9C48 70 70 70		            dta $70,$70,$70
    47
    48 9C4B 4F			            dta $4f
    49 9C4C 10 A0		            dta a(intro_image)
    50 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    51 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54
    55 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    56 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59
    60 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64
    65 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    66
    67 9CB3 4F			            dta $4f
    68 9CB4 00 B0		            dta a(intro_image+$ff0)
    69 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73
    74 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    75 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78
    79 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    81 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    82 9D0D 0F 0F		            dta $0f,$0f
    83 				            
    84 9D0F 20			            dta $20
    85 9D10 42			            dta $42
    86 9D11 20 9C		            dta a(footer_intro)
    87
    88 9D13 41			            dta $41
    89 9D14 48 9C		            dta a(dl_intro)
    90 				            
    91 9D16			            org $a010
    92 A010			intro_image
    93 A010-BE0F> 42 08 11 29 +             ins 'gfx\intro\intro_v4_gr8_inverted.gr8'
    94
    95 02E2-02E3> 00 9C		            ini intro_main
   152
   153 				; real data is loaded at $2000 ($1700+$900)
   154 BE10			            org $1700
   155 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   156
   157 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3D3C> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 CD			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 21		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 0E		            bne no_left
   139
   140 3493 D6 9C		            dec p1_angle,x
   141 3495 BD 84 02		            lda STRIG0,x
   142 3498 D0 04		            bne no_fast
   143 349A D6 9C		            dec p1_angle,x
   144 349C D6 9C		            dec p1_angle,x
   145 349E			no_fast
   146 				            
   147 349E 4C B0 34		            jmp move_done
   148 34A1 C9 07		no_left     cmp #7
   149 34A3 D0 0B		            bne move_done
   150
   151 34A5 F6 9C		            inc p1_angle,x
   152 34A7 BD 84 02		            lda STRIG0,x
   153 34AA D0 04		            bne no_fast_right
   154 34AC F6 9C		            inc p1_angle,x
   155 34AE F6 9C		            inc p1_angle,x
   156 34B0			no_fast_right
   157 34B0			move_done
   158 34B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 34B1			is_fire_button
   165 34B1 AD BE 32		            lda driver_mode
   166 34B4 C9 01		            cmp #1
   167 34B6 F0 04		            beq check_paddle_fire
   168 				            
   169 34B8 BD 84 02		            lda STRIG0,x
   170 34BB 60			            rts
   171
   172 34BC			check_paddle_fire
   173 34BC AD 78 02		            lda STICK0
   174 34BF C9 07		            cmp #7
   175 34C1 F0 07		            beq paddle_fire
   176 34C3 C9 0B		            cmp #11
   177 34C5 F0 03		            beq paddle_fire
   178 34C7 A9 00		            lda #0
   179 34C9 60			            rts
   180 34CA			paddle_fire
   181 34CA A9 01		            lda #1
   182 34CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 34CD			driver_paddle            
   187 34CD BD 70 02		            lda PADDL0,x
   188 34D0 A8			            tay
   189 34D1 B9 00 33		            lda paddle_to_256,y
   190 34D4 5D DA 34		            eor paddle_offsets,x
   191 34D7 95 9C		            sta p1_angle,x
   192 34D9 60			            rts
   193
   194 34DA			paddle_offsets
   195 34DA 00 00		            dta 0,0
   158 34DC			main
   159 34DC A9 FF		            lda #255
   160 34DE 8D FC 02		            sta 764
   161
   162 				; for fast loaders, wait 10 seconds or continue with spacebar
   163 34E1			wait_a_sec
   164 34E1 AD FC 02		            lda 764
   165 34E4 C9 FF		            cmp #255
   166 34E6 D0 06		            bne any_key_pressed
   167
   168 34E8 A5 13		            lda 19
   169 34EA C9 02		            cmp #2
   170 34EC 90 F3		            bcc wait_a_sec
   171
   172 34EE			any_key_pressed
   173 34EE A9 FF		            lda #255
   174 34F0 8D FC 02		            sta 764
   175
   176 				; start the game!
   177 				 
   178 34F3 A9 00		            lda #0
   179 34F5 8D 2F 02		            sta SDMCTL
   180 34F8 85 B6		            sta game_restart
   181
   182 34FA A9 80		            lda #128
   183 34FC 85 8D		            sta volume_hit_bat
   184 34FE 85 8E		            sta volume_hit_edge
   185 3500 85 80		            sta music_toggle        ; 128 = on, 0 = off
   186
   187 3502 A9 01		            lda #1
   188 3504 8D 44 02		            sta 580 ; coldstart
   189
   190 3507 20 01 34		            jsr driver_init
   191
   192 350A 20 42 3A		            jsr make_shape_index
   193 				 
   194 350D 20 72 3A		            jsr make_outer_256
   195 				            
   196 3510 20 2D 36		            jsr make_screen_y_tab
   197
   198 3513 20 78 36		            jsr invert_backdrop
   199
   200 3516 20 E2 3A		            jsr reset_score
   201 3519 20 B0 3A		            jsr show_score_p1
   202 351C 20 C9 3A		            jsr show_score_p2
   203 				                       
   204 351F 20 CD 3C		            jsr init_sprites
   205 3522 20 F9 3C		            jsr init_colors
   206
   207 				; init. game vars
   208 3525 A2 00		            ldx #INIT_LEVEL_INDEX
   209 3527 8E 19 3D		            stx current_level_index
   210 352A 20 1E 3D		            jsr set_level_ball_speed
   211
   212 352D A9 01		            lda #1
   213 352F 85 8C		            sta mode_menu           ; start with menu
   214
   215 3531 20 6E 31		            jsr music_init
   216
   217 3534 A9 00		            lda #<display_list
   218 3536 8D 30 02		            sta SDLSTL
   219 3539 A9 4C		            lda #>display_list
   220 353B 8D 31 02		            sta SDLSTH
   221
   222 				; start vbi
   223
   224 353E A9 C0		            lda #$c0
   225 3540 8D 0E D4		            sta NMIEN
   226
   227 3543 A9 07		            lda #7          ; sets VVBLKI
   228 3545 A0 BD		            ldy #<vbi
   229 3547 A2 36		            ldx #>vbi
   230 3549 20 5C E4		            jsr $e45c       ; SETVBV
   231
   232 				; we're just sitting here while VBI does all the work :)
   233 354C 4C 4C 35		loop        jmp loop
   234
   235 				;------------------------
   236 				; 8bit * 8bit = 16bit multiply
   237 				; By White Flame
   238 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   239 				; uses extra zp var _multiplicand+1
   240
   241 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   242 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   243
   244 				; In this version, both inputs must be unsigned
   245 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   246
   247 354F			_multi8
   248 354F A9 00		            lda #$00
   249 3551 A8			            tay
   250 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   251 3552 F0 0D		            beq _enter_loop
   252 3554			_do_add
   253 3554 18			            clc
   254 3555 65 F6		            adc _multiplicand
   255 3557 AA			            tax
   256
   257 3558 98			            tya
   258 3559 65 F7		            adc _multiplicand+1
   259 355B A8			            tay
   260 355C 8A			            txa
   261 355D			_mul_loop
   262 355D 06 F6		            asl _multiplicand
   263 355F 26 F7		            rol _multiplicand+1
   264 3561			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   265 3561 46 F8		            lsr _multiplier
   266 3563 B0 EF		            bcs _do_add
   267 3565 D0 F6		            bne _mul_loop
   268 3567 60			            rts
   269
   270 				; reset PM0/1 to playfield settings
   271 3568			dli_header
   272 3568 48			            pha
   273
   274 3569 A9 08		            lda #8
   275 356B 8D 17 D0		            sta COLPF1
   276
   277 356E A5 81		            lda shadow_HPOSP0
   278 3570 8D 00 D0		            sta HPOSP0
   279 3573 A5 82		            lda shadow_HPOSP1
   280 3575 8D 01 D0		            sta HPOSP1
   281
   282 3578 A9 00		            lda #0
   283 357A 8D 08 D0		            sta SIZEP0
   284 357D 8D 09 D0		            sta SIZEP1
   285
   286 3580 A9 5A		            lda #BASE_COLOR_P1+10
   287 3582 8D 12 D0		            sta COLPM0
   288 3585 A9 BA		            lda #BASE_COLOR_P2+10
   289 3587 8D 13 D0		            sta COLPM1
   290
   291 358A A9 96		            lda #<dli_menu
   292 358C 8D 00 02		            sta VDSLST
   293 358F A9 35		            lda #>dli_menu
   294 3591 8D 01 02		            sta VDSLST+1
   295
   296 3594 68			            pla
   297 3595 40			            rti
   298
   299 3596			dli_menu
   300 3596 48			            pha
   301 3597 8A			            txa
   302 3598 48			            pha
   303
   304 3599 A9 0E		            lda #$0e
   305 359B 8D 0A D4		            sta WSYNC
   306 359E 8D 1A D0		            sta COLBK
   307 35A1 A9 0A		            lda #$0a
   308 35A3 8D 0A D4		            sta WSYNC
   309 35A6 8D 1A D0		            sta COLBK
   310 35A9 A9 00		            lda #0
   311 35AB 8D 0A D4		            sta WSYNC
   312 35AE 8D 1A D0		            sta COLBK
   313
   314 35B1 A2 00		            ldx #0
   315 35B3			color_it1
   316 35B3 BD F5 35		            lda menu_colpf2,x
   317 35B6 8D 0A D4		            sta WSYNC
   318 35B9 8D 18 D0		            sta COLPF2
   319 35BC E8			            inx
   320 35BD E0 12		            cpx #18
   321 35BF D0 F2		            bne color_it1
   322
   323 35C1 A2 00		            ldx #0
   324 35C3			color_it2
   325 35C3 BD 07 36		            lda menu_colpf0,x
   326 35C6 8D 0A D4		            sta WSYNC
   327 35C9 8D 16 D0		            sta COLPF0
   328 35CC E8			            inx
   329 35CD E0 26		            cpx #38
   330 35CF D0 F2		            bne color_it2
   331
   332 35D1 A9 00		            lda #0
   333 35D3 8D 0A D4		            sta WSYNC
   334 35D6 8D 1A D0		            sta COLBK
   335 35D9 A9 0A		            lda #$0a
   336 35DB 8D 0A D4		            sta WSYNC
   337 35DE 8D 1A D0		            sta COLBK
   338 35E1 A9 0E		            lda #$0e
   339 35E3 8D 0A D4		            sta WSYNC
   340 35E6 8D 1A D0		            sta COLBK
   341 35E9 A9 00		            lda #0
   342 35EB 8D 0A D4		            sta WSYNC
   343 35EE 8D 1A D0		            sta COLBK
   344 				            
   345 35F1 68			            pla
   346 35F2 AA			            tax
   347 35F3 68			            pla
   348 35F4 40			            rti
   349
   350 35F5			menu_colpf2
   351 35F5 50			            dta BASE_COLOR_P1
   352 35F6 50			            dta BASE_COLOR_P1
   353 35F7 50			            dta BASE_COLOR_P1
   354 35F8 50			            dta BASE_COLOR_P1
   355 35F9 50			            dta BASE_COLOR_P1
   356 35FA 50			            dta BASE_COLOR_P1
   357 35FB 50			            dta BASE_COLOR_P1
   358 35FC 50			            dta BASE_COLOR_P1
   359
   360 35FD B0			            dta BASE_COLOR_P2
   361 35FE B0			            dta BASE_COLOR_P2
   362 35FF B0			            dta BASE_COLOR_P2
   363 3600 B0			            dta BASE_COLOR_P2
   364 3601 B0			            dta BASE_COLOR_P2
   365 3602 B0			            dta BASE_COLOR_P2
   366 3603 B0			            dta BASE_COLOR_P2
   367 3604 B0			            dta BASE_COLOR_P2
   368
   369 3605 00 00		            dta 0,0
   370
   371 3607			menu_colpf0
   372 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   373 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   374 3607 00 00		            dta 0,0
   375 3609 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   376 3611 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   377 3619 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   378 3621 00 00 00 00		            dta 0,0,0,0
   379 3625 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   380
   381 				; make pointers from y-position to screen memory
   382 				; screen memory is 3 blocks
   383 				; screen_mem1 : 102 lines, 4080 bytes
   384 				; screen_mem2 : 102 lines, 4080 bytes
   385 				; screen_mem3 :  20 lines,  800 bytes
   386
   387 362D			make_screen_y_tab
   388 362D A9 00		            lda #<screen_mem1
   389 362F 85 86		            sta tmp_screen
   390 3631 A9 60		            lda #>screen_mem1
   391 3633 85 87		            sta tmp_screen+1
   392
   393 3635 A2 00		            ldx #0
   394 3637			fill_y_tab1
   395 3637 20 60 36		            jsr store_y_line
   396 363A E8			            inx
   397 363B E0 66		            cpx #102
   398 363D D0 F8		            bne fill_y_tab1
   399
   400 				; x = 102
   401 363F A9 00		            lda #<screen_mem2
   402 3641 85 86		            sta tmp_screen
   403 3643 A9 70		            lda #>screen_mem2
   404 3645 85 87		            sta tmp_screen+1
   405
   406 3647			fill_y_tab2
   407 3647 20 60 36		            jsr store_y_line
   408 364A E8			            inx
   409 364B E0 CC		            cpx #204
   410 364D D0 F8		            bne fill_y_tab2
   411
   412 364F A9 00		            lda #<screen_mem3
   413 3651 85 86		            sta tmp_screen
   414 3653 A9 80		            lda #>screen_mem3
   415 3655 85 87		            sta tmp_screen+1
   416
   417 				; x = 204
   418 3657			fill_y_tab3
   419 3657 20 60 36		            jsr store_y_line
   420 365A E8			            inx
   421 365B E0 E0		            cpx #224
   422 365D D0 F8		            bne fill_y_tab3
   423 365F 60			            rts
   424
   425 3660			store_y_line
   426 3660 A5 86		            lda tmp_screen
   427 3662 9D 00 12		            sta screen_y_lo,x
   428 3665 A5 87		            lda tmp_screen+1
   429 3667 9D 00 13		            sta screen_y_hi,x
   430 				            
   431 366A A5 86		            lda tmp_screen
   432 366C 18			            clc
   433 366D 69 28		            adc #SCREEN_WIDTH
   434 366F 85 86		            sta tmp_screen
   435 3671 A5 87		            lda tmp_screen+1
   436 3673 69 00		            adc #0
   437 3675 85 87		            sta tmp_screen+1
   438 3677 60			            rts
   439
   440 				; @todo invert backdrop image
   441 				; now we have to do it here :P
   442 3678			invert_backdrop
   443 3678 A9 00		            lda #<screen_mem1
   444 367A 85 86		            sta tmp_screen
   445 367C A9 60		            lda #>screen_mem1
   446 367E 85 87		            sta tmp_screen+1
   447 				            
   448 3680 A2 10		            ldx #16     ; 16 pages = 4K
   449 3682 20 A0 36		            jsr do_x_pages
   450 				           
   451 3685 A9 00		            lda #<screen_mem2
   452 3687 85 86		            sta tmp_screen
   453 3689 A9 70		            lda #>screen_mem2
   454 368B 85 87		            sta tmp_screen+1
   455 				            
   456 368D A2 10		            ldx #16     ; 16 pages = 4K
   457 368F 20 A0 36		            jsr do_x_pages
   458
   459 3692 A9 00		            lda #<screen_mem3
   460 3694 85 86		            sta tmp_screen
   461 3696 A9 80		            lda #>screen_mem3
   462 3698 85 87		            sta tmp_screen+1
   463 				            
   464 369A A2 04		            ldx #4     ; 4 pages = 1K
   465 369C 20 A0 36		            jsr do_x_pages
   466 369F 60			            rts
   467
   468 				; invert x pages, starting from tmp_screen
   469
   470 36A0			do_x_pages
   471 36A0 A0 00		            ldy #0
   472 36A2			do_page
   473 36A2 B1 86		            lda (tmp_screen),y
   474 36A4 49 FF		            eor #$ff
   475 36A6 91 86		            sta (tmp_screen),y
   476 36A8 C8			            iny
   477 36A9 D0 F7		            bne do_page 
   478
   479 36AB E6 87		            inc tmp_screen+1
   480 36AD CA			            dex
   481 36AE D0 F2		            bne do_page
   482 36B0 60			            rts
   483
   484 36B1			turn_color_ball
   485 36B1 A6 B5		            ldx player_turn
   486 36B3 BD BA 36		            lda color_turn,x
   487 36B6 8D C7 02		            sta COLOR3
   488 36B9 60			            rts
   489 				            
   490 36BA 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   491
   492 				; A, X, Y are already saved by the OS
   493 36BD			vbi
   494 36BD 20 DC 31		            jsr copy_shadow
   495
   496 36C0 A5 80		            lda music_toggle
   497 36C2 F0 03		            beq skip_music
   498 36C4 20 97 31		            jsr play_song
   499 36C7			skip_music
   500
   501 				; toggle music on/off with spacebar
   502 36C7 AD FC 02		            lda 764
   503 36CA C9 21		            cmp #$21
   504 36CC D0 10		            bne no_spacebar
   505 36CE A5 80		            lda music_toggle
   506 36D0 49 80		            eor #128
   507 36D2 85 80		            sta music_toggle
   508 36D4 D0 03		            bne music_turned_on
   509 36D6 20 60 32		            jsr music_off
   510
   511 36D9			music_turned_on
   512 36D9 A9 FF		            lda #255
   513 36DB 8D FC 02		            sta 764
   514
   515 36DE			no_spacebar
   516 36DE 20 4B 38		            jsr play_sound_bat
   517 36E1 20 69 38		            jsr play_sound_edge
   518
   519 36E4 A9 68		            lda #<dli_header
   520 36E6 8D 00 02		            sta VDSLST
   521 36E9 A9 35		            lda #>dli_header
   522 36EB 8D 01 02		            sta VDSLST+1
   523
   524 36EE A9 2E		            lda #%00101110  ; enable P/M DMA
   525 36F0 8D 2F 02		            sta SDMCTL
   526 36F3 A9 00		            lda #0
   527 36F5 85 4D		            sta 77      ; attract off
   528 36F7 A9 98		            lda #>rotor_font
   529 36F9 8D F4 02		            sta 756
   530
   531 36FC A9 30		            lda #$30
   532 36FE 8D 00 D0		            sta HPOSP0
   533 3701 A9 B0		            lda #$b0
   534 3703 8D 01 D0		            sta HPOSP1
   535
   536 				; menu switching thingy
   537
   538 3706 AD 1F D0		            lda CONSOL
   539 3709 C9 03		            cmp #3
   540 370B D0 0C		            bne no_option_pressed
   541
   542 370D			go_menu_mode            
   543 370D 20 FA 31		            jsr music_normal_volume
   544 				            
   545 3710 20 AB 39		            jsr wipe_ball
   546 				            
   547 3713 A9 01		            lda #1
   548 3715 85 8C		            sta mode_menu
   549 3717 D0 12		            bne check_mode_menu
   550
   551 3719			no_option_pressed
   552 3719 C9 06		            cmp #6
   553 371B D0 0E		            bne check_mode_menu
   554 				            
   555 				; reset game
   556
   557 371D			reset_game
   558 371D 20 05 32		            jsr music_low_volume
   559
   560 3720 20 AB 39		            jsr wipe_ball
   561 				            
   562 3723 A9 01		            lda #1
   563 3725 85 B6		            sta game_restart
   564
   565 3727 A9 00		            lda #0
   566 3729 85 8C		            sta mode_menu
   567
   568 372B			check_mode_menu
   569 372B A5 8C		            lda mode_menu
   570 372D F0 56		            beq main_game_vbi
   571
   572 				; within menu vbi
   573 				            
   574 372F AD 1F D0		            lda CONSOL
   575 3732 C9 05		            cmp #5          ; select
   576 3734 D0 18		            bne no_level_select
   577 				            
   578 3736 AD 18 3D		            lda previous_consol
   579 3739 C9 05		            cmp #5
   580 373B F0 14		            beq wait_depressed
   581 				            
   582 373D 20 2D 3D		            jsr increase_level
   583 3740 AE 19 3D		            ldx current_level_index
   584 3743 20 1E 3D		            jsr set_level_ball_speed            
   585
   586 3746 A9 05		            lda #5
   587 3748 8D 18 3D		            sta previous_consol
   588 374B 4C 51 37		            jmp wait_depressed
   589
   590 374E			no_level_select
   591 374E 8D 18 3D		            sta previous_consol
   592
   593 3751			wait_depressed
   594 3751 A9 01		            lda #1      ; dl jump
   595 3753 8D 55 4C		            sta menu_dl_hook
   596 3756 A9 EE		            lda #<menu_dl_part
   597 3758 8D 56 4C		            sta menu_dl_hook+1
   598 375B A9 4C		            lda #>menu_dl_part
   599 375D 8D 57 4C		            sta menu_dl_hook+2
   600
   601 				; detect/show controller type (used for both players)
   602 3760 20 6C 37		            jsr detect_show_driver
   603
   604 3763 20 B8 38		            jsr handle_player1
   605 3766 20 D0 38		            jsr handle_player2
   606
   607 3769 4C 28 38		            jmp exit_vbi
   608
   609 				; X = port/driver to detect
   610 376C			detect_show_driver
   611 376C 20 3B 34		            jsr driver_detect
   612 376F A8			            tay
   613 3770 B9 D4 4E		            lda driver_text_lo,y
   614 3773 85 86		            sta tmp_screen
   615 3775 B9 D8 4E		            lda driver_text_hi,y
   616 3778 85 87		            sta tmp_screen+1
   617
   618 377A A0 07		            ldy #7
   619 377C			show_driv
   620 377C B1 86		            lda (tmp_screen),y
   621 377E 99 5A 4E		            sta driver_screen,y
   622 3781 88			            dey
   623 3782 10 F8		            bpl show_driv
   624 3784 60			            rts
   625
   626 				; main game vbi
   627 3785			main_game_vbi
   628 3785 A5 B6		            lda game_restart
   629 3787 F0 2C		            beq no_restart
   630
   631 				; restart game
   632 				            
   633 3789 A9 00		            lda #0
   634 378B 85 B6		            sta game_restart
   635 				            
   636 378D 20 E2 3A		            jsr reset_score
   637 3790 20 B0 3A		            jsr show_score_p1
   638 3793 20 C9 3A		            jsr show_score_p2
   639
   640 3796 A6 9C		            ldx p1_angle
   641 3798 86 AA		            stx ball_angle_start
   642 379A 20 09 39		            jsr ball_to_start_position
   643 379D 20 18 39		            jsr prepare_ball_end_position
   644
   645 37A0 A9 00		            lda #0
   646 37A2 85 A0		            sta mp_collision
   647 37A4 85 A1		            sta in_collision
   648 37A6 85 A3		            sta edge_delay
   649 37A8 8D 1E D0		            sta HITCLR
   650
   651 37AB A9 02		            lda #2
   652 37AD 85 B5		            sta player_turn
   653
   654 37AF 20 B1 36		            jsr turn_color_ball
   655 37B2 4C 28 38		            jmp exit_vbi            
   656
   657 37B5			no_restart
   658 				; remove menu hook
   659 37B5 A9 0F		            lda #$0f        ; dl gfx 8
   660 37B7 8D 55 4C		            sta menu_dl_hook
   661 37BA 8D 56 4C		            sta menu_dl_hook+1
   662 37BD 8D 57 4C		            sta menu_dl_hook+2
   663
   664 37C0 AD 08 D0		            lda M0PL
   665 37C3 85 A0		            sta mp_collision
   666 37C5 AD 09 D0		            lda M1PL
   667 37C8 05 A0		            ora mp_collision
   668 37CA 85 A0		            sta mp_collision
   669 				 
   670 37CC 20 B8 38		            jsr handle_player1
   671 37CF 20 D0 38		            jsr handle_player2
   672
   673 				; handle ball
   674
   675 37D2 20 AB 39		            jsr wipe_ball         
   676
   677 				; Check ball collision with bat
   678
   679 37D5 A5 A4		            lda bat_collision_delay
   680 37D7 F0 05		            beq check_allowed
   681 37D9 C6 A4		            dec bat_collision_delay
   682 37DB 4C F5 37		            jmp move_one
   683
   684 37DE			check_allowed
   685 37DE A5 A0		            lda mp_collision
   686 37E0 F0 0F		            beq reset_in_collision
   687
   688 37E2 A5 A1		            lda in_collision
   689 37E4 D0 0F		            bne no_first_hit
   690
   691 37E6 E6 A1		            inc in_collision            
   692 37E8 20 45 39		            jsr bounce_bat_ball 
   693 				            
   694 37EB 20 46 38		            jsr start_sound_bat          
   695 				            
   696 37EE 4C F5 37		            jmp move_one
   697 				            
   698 37F1			reset_in_collision
   699 37F1 A9 00		            lda #0
   700 37F3 85 A1		            sta in_collision        
   701
   702 37F5			move_one
   703 37F5			no_first_hit
   704 37F5 20 34 3C		            jsr move_current_xy
   705 37F8 F0 1B		            beq still_moving
   706
   707 				; edge detected
   708
   709 37FA 20 64 38		            jsr start_sound_edge
   710
   711 37FD A5 AB		            lda ball_angle_end
   712 37FF 85 AA		            sta ball_angle_start
   713
   714 3801 20 3C 39		            jsr ball_current_to_start_position
   715 3804 20 18 39		            jsr prepare_ball_end_position
   716
   717 3807 20 84 38		            jsr update_score
   718 380A D0 34		            bne game_ends
   719
   720 				; switch turns
   721 380C A5 B5		            lda player_turn
   722 380E 49 03		            eor #3              ; 1 => 2, 2 => 1
   723 3810 85 B5		            sta player_turn
   724 3812 20 B1 36		            jsr turn_color_ball
   725
   726 3815			still_moving
   727 3815 A5 EB		            lda current_x+1
   728 3817 85 A6		            sta ball_current_x
   729 3819 A5 ED		            lda current_y+1
   730 381B 85 A7		            sta ball_current_y
   731
   732 381D 20 C0 39		            jsr show_ball
   733
   734 3820 A9 00		            lda #0
   735 3822 8D 18 D0		            sta $d018           
   736
   737 				; anything in A to clear collisions
   738 3825 8D 1E D0		            sta HITCLR
   739
   740 3828			exit_vbi
   741
   742 				; always set header stuff
   743 3828 A9 03		            lda #3
   744 382A 8D 08 D0		            sta SIZEP0
   745 382D 8D 09 D0		            sta SIZEP1
   746
   747 				; background in PM0/1 for header
   748 3830 A9 FF		            lda #255
   749 3832 A2 07		            ldx #7
   750 3834			fill_pm_header
   751 3834 9D 00 0E		            sta p0_area,x
   752 3837 9D 80 0E		            sta p1_area,x
   753 383A CA			            dex
   754 383B 10 F7		            bpl fill_pm_header
   755
   756 383D 4C 62 E4		            jmp $e462
   757
   758 3840			game_ends
   759 3840 20 FA 31		            jsr music_normal_volume
   760 3843 4C 62 E4		            jmp $e462            
   761
   762 3846			start_sound_bat
   763 3846 A9 0A		            lda #10
   764 3848 85 8D		            sta volume_hit_bat
   765 384A 60			            rts
   766
   767 384B			play_sound_bat
   768 384B A5 8D		            lda volume_hit_bat
   769 384D 30 14		            bmi silenced_bat
   770
   771 384F A5 B5		            lda player_turn
   772 3851 0A			            asl
   773 3852 0A			            asl
   774 3853 69 30		            adc #$30
   775 3855 E5 B3		            sbc angle_diff_bat
   776 3857 8D 73 32		            sta SHADOW+4    ; $d204
   777 385A A5 8D		            lda volume_hit_bat
   778 385C 09 A0		            ora #$a0
   779 385E 8D 74 32		            sta SHADOW+5    ; $d205
   780 3861 C6 8D		            dec volume_hit_bat
   781 3863			silenced_bat
   782 3863 60			            rts
   783
   784 3864			start_sound_edge
   785 3864 A9 04		            lda #4
   786 3866 85 8E		            sta volume_hit_edge
   787 3868 60			            rts
   788
   789 3869			play_sound_edge
   790 3869 A5 8E		            lda volume_hit_edge
   791 386B 30 16		            bmi silenced_edge
   792 386D D0 06		            bne no_silenced_edge
   793 386F 8D 74 32		            sta SHADOW+5    ; $d205
   794 3872 C6 8E		            dec volume_hit_edge
   795 3874 60			            rts            
   796
   797 3875			no_silenced_edge
   798 3875 A9 08		            lda #$08
   799 3877 8D 73 32		            sta SHADOW+4    ; $d204
   800 387A A5 8E		            lda volume_hit_edge
   801 387C 09 26		            ora #$26
   802 387E 8D 74 32		            sta SHADOW+5    ; $d205
   803 3881 C6 8E		            dec volume_hit_edge
   804 3883			silenced_edge
   805 3883 60			            rts
   806
   807 				; Update score
   808 				; Score > max score, then exit A = 1, otherwise A = 0
   809
   810 3884			update_score
   811 3884 A5 B5		            lda player_turn
   812 3886 C9 01		            cmp #1
   813 3888 D0 12		            bne was_player2_turn
   814 				; was player 1 turn, so player 2 gets a point
   815 388A 20 F7 3A		            jsr inc_score_p2
   816 388D 20 C9 3A		            jsr show_score_p2
   817
   818 3890 AD 27 4D		            lda score_p2
   819 3893 C9 11		            cmp #MAX_SCORE
   820 3895 D0 17		            bne reset_edge_delay
   821
   822 3897 A9 01		            lda #1
   823 3899 85 8C		            sta mode_menu
   824 389B 60			            rts
   825
   826 389C			was_player2_turn
   827 389C 20 EB 3A		            jsr inc_score_p1
   828 389F 20 B0 3A		            jsr show_score_p1
   829
   830 38A2 AD 26 4D		            lda score_p1
   831 38A5 C9 11		            cmp #MAX_SCORE
   832 38A7 D0 05		            bne reset_edge_delay
   833
   834 38A9 A9 01		            lda #1
   835 38AB 85 8C		            sta mode_menu
   836 38AD 60			            rts
   837
   838 38AE			reset_edge_delay
   839 38AE A9 0A		            lda #10
   840 38B0 85 A3		            sta edge_delay
   841
   842 38B2			no_edge
   843
   844 38B2 A9 00		            lda #0      ; no end game
   845 				; anything in A to clear collisions
   846 38B4 8D 1E D0		            sta HITCLR
   847 38B7 60			            rts
   848
   849 				; player 1
   850 				; - wipe shape at previous y-position
   851 				; - move player using controller
   852 				; - set sprite positions
   853
   854 38B8			handle_player1
   855 38B8 20 18 3A		            jsr wipe_p1         ; wipe previous shape player 1
   856
   857 38BB A2 00		            ldx #0              ; player 1
   858 38BD 20 E8 38		            jsr move_player
   859 				            
   860 38C0 20 E4 39		            jsr show_p1
   861
   862 38C3 A5 94		            lda player1_x
   863 38C5 18			            clc
   864 38C6 69 20		            adc #left_margin
   865 38C8 85 81		            sta shadow_HPOSP0
   866 38CA 69 08		            adc #8
   867 38CC 8D 02 D0		            sta HPOSP2
   868 38CF 60			            rts
   869
   870 				; player 2
   871 				; - wipe shape at previous y-position
   872 				; - move player using controller
   873 				; - set sprite positions
   874
   875 38D0			handle_player2
   876 38D0 20 2D 3A		            jsr wipe_p2         ; wipe previous shape player 2
   877
   878 38D3 A2 01		            ldx #1              ; player 2
   879 38D5 20 E8 38		            jsr move_player
   880 				                        
   881 38D8 20 FE 39		            jsr show_p2
   882
   883 38DB A5 95		            lda player2_x
   884 38DD 18			            clc
   885 38DE 69 20		            adc #left_margin
   886 38E0 85 82		            sta shadow_HPOSP1
   887 38E2 69 08		            adc #8
   888 38E4 8D 03 D0		            sta HPOSP3
   889 38E7 60			            rts
   890
   891 				; move player 1/2
   892 				; right - clockwise, left = anti-clockwise
   893
   894 				; X = 0, player 1
   895 				; X = 1, player 2
   896
   897 				; Y = driver mode:
   898 				; 0 : stick
   899 				; 1 : paddle
   900 				; 2 : driving
   901 				; 3 : computer
   902 				            
   903 38E8			move_player
   904 38E8 20 6E 34		            jsr main_driver
   905
   906 38EB B5 9C		            lda p1_angle,x
   907 38ED 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   908 38EF 49 40		            eor #64                     ; perpendicular to the circle angle
   909 38F1 95 90		            sta p1_shape,x
   910
   911 38F3 B4 9C		            ldy p1_angle,x
   912 38F5 B9 00 3E		            lda inner_x_tab,y
   913 38F8 4A			            lsr
   914 38F9 69 20		            adc #inner_x_margin/2
   915 38FB 95 94		            sta player1_x,x
   916 38FD B9 00 3F		            lda inner_y_tab,y
   917 3900 4A			            lsr
   918 3901 95 98		            sta player1_y,x
   919
   920 3903 B4 90		            ldy p1_shape,x
   921 3905 20 67 3A		            jsr shape_to_ptr
   922
   923 3908 60			            rts
   924
   925 				; Set ball at start position
   926 				; - start angle current player
   927 				; - start position by inner table
   928 				; - collision delay set?
   929
   930 				; Set ball current position to start position
   931 				; input:
   932 				; X = angle of start position
   933 				; output:
   934 				; ball position: (ball_current_x, ball_current_y)
   935 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   936 3909			ball_to_start_position
   937 3909 BD 00 3E		            lda inner_x_tab,x
   938 390C 85 A6		            sta ball_current_x
   939 390E 85 E6		            sta tmp_x1
   940 3910 BD 00 3F		            lda inner_y_tab,x
   941 3913 85 A7		            sta ball_current_y
   942 3915 85 E7		            sta tmp_y1
   943 3917 60			            rts
   944
   945 				; Prepare ball end position
   946 				; - end angle current player
   947 				; - end position by outer table
   948 				; - calculate step size x,y
   949
   950 				; Input:
   951 				; - ball_angle_start
   952 				; - ball speed
   953 				; Output:
   954 				; - ball_andle_end
   955 				; - ball start position (tmp_x1, tmp_y1)
   956 				; - ball end position (tmp_x2, tmp_y2)
   957 				; - step size (step_x, step_y) for ball movement
   958 3918			prepare_ball_end_position
   959 3918 A5 AA		            lda ball_angle_start
   960 391A 49 80		            eor #128        ; other side
   961 391C 85 AB		            sta ball_angle_end
   962 391E AA			            tax
   963 391F 20 A0 39		            jsr angle_to_end_position
   964 				                        
   965 3922 20 C7 3B		            jsr init_current_xy
   966 				            
   967 				; move current a little bit            
   968 3925 20 34 3C		            jsr move_current_xy
   969 				; ignore end indicator, since we only just started
   970
   971
   972 3928 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   973 392A 85 A4		            sta bat_collision_delay
   974 392C 60			            rts
   975
   976 				; x = angle 0..255
   977 392D			outer_angle_to_start_position
   978 392D BD 00 10		            lda outer_x_256,x
   979 3930 85 A6		            sta ball_current_x
   980 3932 85 E6		            sta tmp_x1
   981 3934 BD 00 11		            lda outer_y_256,x
   982 3937 85 A7		            sta ball_current_y
   983 3939 85 E7		            sta tmp_y1
   984 393B 60			            rts
   985
   986 393C			ball_current_to_start_position
   987 393C A5 A6		            lda ball_current_x
   988 393E 85 E6		            sta tmp_x1
   989 3940 A5 A7		            lda ball_current_y
   990 3942 85 E7		            sta tmp_y1
   991 3944 60			            rts
   992
   993 				; Ball collides with bat
   994 				; - start ball angle = end ball angle
   995 				; - calculate diff between bat and ball end angle
   996 				; - calculate new end angle
   997 				; - Set ball at start position
   998 				; - Prepare ball end position
   999
  1000 3945			bounce_bat_ball
  1001 				; set new start of ball
  1002 				; @todo check ball angles
  1003 				; set new ball start angle (= previous end angle)
  1004 3945 A5 AB		            lda ball_angle_end
  1005 3947 85 AA		            sta ball_angle_start
  1006 				            
  1007 				; alternative?
  1008 				            ;ldx ball_angle_start
  1009 				            ;jsr ball_to_start_position          
  1010 3949 20 3C 39		            jsr ball_current_to_start_position
  1011
  1012 				; which player hit the ball?
  1013 				; collision bits:
  1014 				; xxxxx1x1 : 1 is player1 collision
  1015 				; xxxx1010 : 2 is player2 collision
  1016
  1017 394C A5 A0		            lda mp_collision
  1018 394E 4A			            lsr
  1019 394F 4A			            lsr
  1020 3950 05 A0		            ora mp_collision
  1021 3952 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1022
  1023 				; who's turn is it and who bounced the ball?
  1024
  1025 3954 25 B5		            and player_turn
  1026 3956 F0 06		            beq no_switch_turn
  1027
  1028 3958 A5 B5		            lda player_turn
  1029 395A 49 03		            eor #3              ; 1 => 2, 2 => 1
  1030 395C 85 B5		            sta player_turn 
  1031
  1032 395E			no_switch_turn
  1033 395E 20 B1 36		            jsr turn_color_ball
  1034
  1035 3961 A5 B5		            lda player_turn
  1036 3963 49 03		            eor #3
  1037 3965 AA			            tax
  1038 3966 CA			            dex                 ; index 0,1 (player = 1,2)
  1039 3967 B5 9C		            lda p1_angle,x
  1040
  1041 				; Calculate diff between bat angle position and new ball start position
  1042 3969 85 B0		            sta tmp_angle1
  1043
  1044 396B A5 AA		            lda ball_angle_start
  1045 396D 85 B1		            sta tmp_angle2
  1046
  1047 396F 20 03 3B		            jsr calc_angle_diff
  1048
  1049 3972 0A			            asl
  1050 3973 0A			            asl
  1051 3974 0A			            asl
  1052 3975 85 B3		            sta angle_diff_bat
  1053
  1054 3977 A5 B0		            lda tmp_angle1
  1055 3979 18			            clc
  1056 397A 65 B2		            adc add_to_angle
  1057 397C 49 80		            eor #128            ; other side
  1058 397E 85 B0		            sta tmp_angle1
  1059 				            
  1060 3980 A5 B4		            lda tmp_angle_direction
  1061 3982 D0 0A		            bne diff_clockwise
  1062 				; diff counter clockwise
  1063 3984 A5 B0		            lda tmp_angle1
  1064 3986 18			            clc
  1065 3987 65 B3		            adc angle_diff_bat
  1066 3989 85 B0		            sta tmp_angle1
  1067 398B 4C 95 39		            jmp calc_done            
  1068
  1069 398E			diff_clockwise
  1070 398E A5 B0		            lda tmp_angle1
  1071 3990 38			            sec
  1072 3991 E5 B3		            sbc angle_diff_bat
  1073 3993 85 B0		            sta tmp_angle1
  1074 				            
  1075 				; calculation done            
  1076 3995			calc_done
  1077 3995 A5 B0		            lda tmp_angle1
  1078 3997 85 AB		            sta ball_angle_end
  1079 3999 AA			            tax
  1080 399A 20 A0 39		            jsr angle_to_end_position
  1081 				                        
  1082 399D 4C C7 3B		            jmp init_current_xy
  1083
  1084 				; x = angle 0..255
  1085 39A0			angle_to_end_position
  1086 39A0 BD 00 10		            lda outer_x_256,x
  1087 39A3 85 E8		            sta tmp_x2
  1088 39A5 BD 00 11		            lda outer_y_256,x
  1089 39A8 85 E9		            sta tmp_y2
  1090 39AA 60			            rts
  1091
  1092 39AB			wipe_ball
  1093 39AB A5 A7		            lda ball_current_y
  1094 39AD 4A			            lsr
  1095 39AE 69 06		            adc #ball_top_margin
  1096 39B0 AA			            tax                 ; x = real y position on screen
  1097 39B1 A9 00		            lda #0
  1098 39B3 9D 80 0D		            sta msl_area,x
  1099 39B6 9D 81 0D		            sta msl_area+1,x
  1100 39B9 9D 82 0D		            sta msl_area+2,x
  1101 39BC 9D 83 0D		            sta msl_area+3,x
  1102 39BF 60			            rts
  1103
  1104 39C0			show_ball
  1105 39C0 A5 A7		            lda ball_current_y
  1106 39C2 4A			            lsr
  1107 39C3 69 06		            adc #ball_top_margin
  1108 39C5 AA			            tax                 ; x = real y position on screen
  1109
  1110 39C6 A9 02		            lda #%00000010
  1111 39C8 9D 80 0D		            sta msl_area,x
  1112 39CB 9D 83 0D		            sta msl_area+3,x
  1113 39CE A9 07		            lda #%00000111
  1114 39D0 9D 81 0D		            sta msl_area+1,x
  1115 39D3 9D 82 0D		            sta msl_area+2,x
  1116 				            
  1117 39D6 A5 A6		            lda ball_current_x
  1118 39D8 4A			            lsr
  1119 39D9 69 45		            adc #ball_left_margin
  1120 39DB 8D 05 D0		            sta HPOSM1
  1121 39DE 69 02		            adc #2
  1122 39E0 8D 04 D0		            sta HPOSM0
  1123 				                        
  1124 39E3 60			            rts
  1125 				            
  1126 39E4			show_p1
  1127 39E4 A5 98		            lda player1_y
  1128 39E6 18			            clc
  1129 39E7 69 01		            adc #upper_margin
  1130 39E9 AA			            tax
  1131
  1132 39EA A0 00		            ldy #0
  1133 39EC			show_shape1
  1134 39EC B1 84		            lda (shape_ptr),y
  1135 39EE 9D 00 0E		            sta p0_area,x 
  1136 39F1 C8			            iny
  1137 39F2 B1 84		            lda (shape_ptr),y
  1138 39F4 9D 00 0F		            sta p2_area,x
  1139 39F7 E8			            inx
  1140 39F8 C8			            iny
  1141 39F9 C0 20		            cpy #32
  1142 39FB D0 EF		            bne show_shape1
  1143 39FD 60			            rts
  1144
  1145 39FE			show_p2
  1146 39FE A5 99		            lda player2_y
  1147 3A00 18			            clc
  1148 3A01 69 01		            adc #upper_margin
  1149 3A03 AA			            tax
  1150
  1151 3A04 A0 00		            ldy #0
  1152 3A06			show_shape2
  1153 3A06 B1 84		            lda (shape_ptr),y
  1154 3A08 9D 80 0E		            sta p1_area,x
  1155 3A0B C8			            iny
  1156 3A0C B1 84		            lda (shape_ptr),y
  1157 3A0E 9D 80 0F		            sta p3_area,x
  1158 3A11 E8			            inx
  1159 3A12 C8			            iny
  1160 3A13 C0 20		            cpy #32
  1161 3A15 D0 EF		            bne show_shape2
  1162 3A17 60			            rts
  1163
  1164 3A18			wipe_p1
  1165 3A18 A5 98		            lda player1_y
  1166 3A1A 18			            clc
  1167 3A1B 69 01		            adc #upper_margin
  1168 3A1D AA			            tax
  1169 				            
  1170 3A1E A0 10		            ldy #16
  1171 3A20 A9 00		            lda #0
  1172 3A22			wipe_it1            
  1173 3A22 9D 00 0E		            sta p0_area,x 
  1174 3A25 9D 00 0F		            sta p2_area,x
  1175 3A28 E8			            inx
  1176 3A29 88			            dey
  1177 3A2A D0 F6		            bne wipe_it1 
  1178 3A2C 60			            rts
  1179
  1180 3A2D			wipe_p2
  1181 3A2D A5 99		            lda player2_y
  1182 3A2F 18			            clc
  1183 3A30 69 01		            adc #upper_margin
  1184 3A32 AA			            tax
  1185 				            
  1186 3A33 A0 10		            ldy #16
  1187 3A35 A9 00		            lda #0
  1188 3A37			wipe_it2            
  1189 3A37 9D 80 0E		            sta p1_area,x
  1190 3A3A 9D 80 0F		            sta p3_area,x
  1191 3A3D E8			            inx
  1192 3A3E 88			            dey
  1193 3A3F D0 F6		            bne wipe_it2 
  1194 3A41 60			            rts
  1195
  1196 3A42			make_shape_index
  1197 3A42 A9 00		            lda #<pm_shapes
  1198 3A44 85 84		            sta shape_ptr
  1199 3A46 A9 50		            lda #>pm_shapes
  1200 3A48 85 85		            sta shape_ptr+1
  1201 				            
  1202 3A4A A2 00		            ldx #0
  1203 3A4C			fill_pm_tab
  1204 3A4C A5 84		            lda shape_ptr
  1205 3A4E 9D 00 14		            sta pm_shape_lo,x
  1206 3A51 A5 85		            lda shape_ptr+1
  1207 3A53 9D 80 14		            sta pm_shape_hi,x
  1208 				            
  1209 3A56 A5 84		            lda shape_ptr
  1210 3A58 18			            clc
  1211 3A59 69 20		            adc #32
  1212 3A5B 85 84		            sta shape_ptr
  1213 3A5D A5 85		            lda shape_ptr+1
  1214 3A5F 69 00		            adc #0
  1215 3A61 85 85		            sta shape_ptr+1
  1216 				            
  1217 3A63 E8			            inx
  1218 3A64 10 E6		            bpl fill_pm_tab
  1219 				            
  1220 3A66 60			            rts
  1221 				            
  1222 				; there are 128 shapes, each 32 bytes
  1223
  1224 				; y = shape index
  1225 3A67			shape_to_ptr
  1226 3A67 B9 00 14		            lda pm_shape_lo,y
  1227 3A6A 85 84		            sta shape_ptr
  1228 3A6C B9 80 14		            lda pm_shape_hi,y
  1229 3A6F 85 85		            sta shape_ptr+1
  1230
  1231 3A71 60			            rts
  1232
  1233 				; turn 1024 tables into 256 bytes for ball edge lookup
  1234 3A72			make_outer_256
  1235 3A72 A0 00		            ldy #0
  1236 3A74 A2 00		            ldx #0
  1237 3A76			conv_256
  1238 3A76 BD 00 40		            lda outer_x_tab,x
  1239 3A79 99 00 10		            sta outer_x_256,y
  1240 3A7C BD 00 41		            lda outer_x_tab+$100,x
  1241 3A7F 99 40 10		            sta outer_x_256+64,y
  1242 3A82 BD 00 42		            lda outer_x_tab+$200,x
  1243 3A85 99 80 10		            sta outer_x_256+128,y
  1244 3A88 BD 00 43		            lda outer_x_tab+$300,x
  1245 3A8B 99 C0 10		            sta outer_x_256+192,y
  1246 				            
  1247 3A8E BD 00 44		            lda outer_y_tab,x
  1248 3A91 99 00 11		            sta outer_y_256,y
  1249 3A94 BD 00 45		            lda outer_y_tab+$100,x
  1250 3A97 99 40 11		            sta outer_y_256+64,y
  1251 3A9A BD 00 46		            lda outer_y_tab+$200,x
  1252 3A9D 99 80 11		            sta outer_y_256+128,y
  1253 3AA0 BD 00 47		            lda outer_y_tab+$300,x
  1254 3AA3 99 C0 11		            sta outer_y_256+192,y
  1255
  1256 3AA6 E8			            inx
  1257 3AA7 E8			            inx
  1258 3AA8 E8			            inx
  1259 3AA9 E8			            inx
  1260 3AAA C8			            iny
  1261 3AAB C0 40		            cpy #64
  1262 3AAD D0 C7		            bne conv_256            
  1263 3AAF 60			            rts
  1264
  1265 3AB0			show_score_p1
  1266 3AB0 AD 26 4D		            lda score_p1
  1267 3AB3 4A			            lsr
  1268 3AB4 4A			            lsr
  1269 3AB5 4A			            lsr
  1270 3AB6 4A			            lsr
  1271 3AB7 F0 02		            beq do_space1
  1272 3AB9 09 10		            ora #16
  1273 3ABB			do_space1
  1274 3ABB 8D 03 4D		            sta score_chars_p1
  1275 3ABE AD 26 4D		            lda score_p1
  1276 3AC1 29 0F		            and #15
  1277 3AC3 09 10		            ora #16
  1278 3AC5 8D 04 4D		            sta score_chars_p1+1
  1279 3AC8 60			            rts
  1280
  1281 3AC9			show_score_p2
  1282 3AC9 AD 27 4D		            lda score_p2
  1283 3ACC 4A			            lsr
  1284 3ACD 4A			            lsr
  1285 3ACE 4A			            lsr
  1286 3ACF 4A			            lsr
  1287 3AD0 F0 02		            beq do_space2
  1288 3AD2 09 10		            ora #16
  1289 3AD4			do_space2
  1290 3AD4 8D 23 4D		            sta score_chars_p2
  1291 3AD7 AD 27 4D		            lda score_p2
  1292 3ADA 29 0F		            and #15
  1293 3ADC 09 10		            ora #16
  1294 3ADE 8D 24 4D		            sta score_chars_p2+1
  1295 3AE1 60			            rts
  1296 				                        
  1297 3AE2			reset_score
  1298 3AE2 A9 00		            lda #0
  1299 3AE4 8D 26 4D		            sta score_p1
  1300 3AE7 8D 27 4D		            sta score_p2
  1301 3AEA 60			            rts            
  1302 				         
  1303 3AEB			inc_score_p1
  1304 3AEB F8			            sed
  1305 3AEC AD 26 4D		            lda score_p1
  1306 3AEF 18			            clc
  1307 3AF0 69 01		            adc #1
  1308 3AF2 8D 26 4D		            sta score_p1    
  1309 3AF5 D8			            cld
  1310 3AF6 60			            rts
  1311
  1312 3AF7			inc_score_p2
  1313 3AF7 F8			            sed
  1314 3AF8 AD 27 4D		            lda score_p2
  1315 3AFB 18			            clc
  1316 3AFC 69 01		            adc #1
  1317 3AFE 8D 27 4D		            sta score_p2
  1318 3B01 D8			            cld
  1319 3B02 60			            rts
  1320
  1321 				; calculate the difference between angle1 and angle2
  1322
  1323 				; input:
  1324 				; tmp_angle1 (0..255)
  1325 				; tmp_angle2 (0..255)
  1326
  1327 				; output:
  1328 				; tmp_angle_diff, A: difference between angle1 and angle2
  1329 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1330
  1331 3B03			calc_angle_diff
  1332 3B03 A9 00		            lda #0
  1333 3B05 85 B2		            sta add_to_angle
  1334 3B07 85 B4		            sta tmp_angle_direction
  1335
  1336 				; make sure we can compare angles, otherwise add $40 to angles
  1337 3B09 A5 B0		            lda tmp_angle1
  1338 3B0B C9 C0		            cmp #$c0
  1339 3B0D B0 06		            bcs too_large
  1340 3B0F A5 B1		            lda tmp_angle2
  1341 3B11 C9 C0		            cmp #$c0
  1342 3B13 90 12		            bcc not_too_large
  1343 3B15			too_large
  1344 3B15 A5 B0		            lda tmp_angle1
  1345 3B17 38			            sec
  1346 3B18 E9 40		            sbc #$40
  1347 3B1A 85 B0		            sta tmp_angle1
  1348 				            
  1349 3B1C A5 B1		            lda tmp_angle2
  1350 3B1E 38			            sec
  1351 3B1F E9 40		            sbc #$40
  1352 3B21 85 B1		            sta tmp_angle2
  1353 				            
  1354 3B23 A9 40		            lda #$40
  1355 3B25 85 B2		            sta add_to_angle
  1356
  1357 3B27			not_too_large
  1358 3B27 A5 B1		            lda tmp_angle2
  1359 3B29 C5 B0		            cmp tmp_angle1
  1360 3B2B 90 0A		            bcc angle2_smaller_angle1
  1361 				; ball >= play
  1362 3B2D 38			            sec
  1363 3B2E E5 B0		            sbc tmp_angle1
  1364 3B30 85 B7		            sta tmp_angle_diff
  1365 				            
  1366 3B32 E6 B4		            inc tmp_angle_direction
  1367 3B34 4C 3E 3B		            jmp diff_calculated
  1368 				                        
  1369 3B37			angle2_smaller_angle1
  1370 3B37 A5 B0		            lda tmp_angle1
  1371 3B39 38			            sec
  1372 3B3A E5 B1		            sbc tmp_angle2
  1373 3B3C 85 B7		            sta tmp_angle_diff
  1374
  1375 3B3E			diff_calculated
  1376 3B3E A5 B7		            lda tmp_angle_diff           
  1377 3B40 60			            rts
  1378
  1379 				; X = angle
  1380 				; lookup magnitude of angle 0 to angle X
  1381 3B41			angle_to_magnitude
  1382 3B41 BD 00 48		            lda magnitudes_lo,x
  1383 3B44 85 B8		            sta magnitude
  1384 3B46 BD 00 49		            lda magnitudes_hi,x
  1385 3B49 85 B9		            sta magnitude+1
  1386 3B4B 60			            rts
  1387
  1388 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1389 3B4C			calc_abs_tmp_dx
  1390 3B4C A5 E8		            lda tmp_x2
  1391 3B4E 38			            sec
  1392 3B4F E5 E6		            sbc tmp_x1
  1393 3B51 B0 05		            bcs x2_le
  1394 3B53 49 FF		            eor #255
  1395 3B55 18			            clc
  1396 3B56 69 01		            adc #1
  1397 3B58 85 F2		x2_le       sta tmp_dx
  1398
  1399 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1400 3B5A			calc_abs_tmp_dy
  1401 3B5A A5 E9		            lda tmp_y2
  1402 3B5C 38			            sec
  1403 3B5D E5 E7		            sbc tmp_y1
  1404 3B5F B0 05		            bcs y2_le
  1405 3B61 49 FF		            eor #255
  1406 3B63 18			            clc
  1407 3B64 69 01		            adc #1
  1408 3B66 85 F3		y2_le       sta tmp_dy
  1409 3B68 60			            rts
  1410 				            
  1411 3B69			calc_dx_div_magnitude
  1412 3B69 A9 00		            lda #0
  1413 3B6B 85 E2		            sta _dividend
  1414 3B6D A5 F2		            lda tmp_dx
  1415 3B6F 85 E3		            sta _dividend+1
  1416
  1417 3B71 A5 B9		            lda magnitude+1
  1418 3B73 85 E0		            sta _divisor
  1419 3B75 A9 00		            lda #0
  1420 3B77 85 E1		            sta _divisor+1
  1421 				            
  1422 3B79 20 A1 3B		            jsr _div16
  1423
  1424 				; todo multiply result with velocity            
  1425 3B7C A5 E2		            lda _result
  1426 3B7E 85 EE		            sta step_x
  1427 3B80 A5 E3		            lda _result+1
  1428 3B82 85 EF		            sta step_x+1
  1429 				            
  1430 3B84 60			            rts
  1431 				            
  1432 3B85			calc_dy_div_magnitude
  1433 3B85 A9 00		            lda #0
  1434 3B87 85 E2		            sta _dividend
  1435 3B89 A5 F3		            lda tmp_dy
  1436 3B8B 85 E3		            sta _dividend+1
  1437 				            
  1438 3B8D A5 B9		            lda magnitude+1
  1439 3B8F 85 E0		            sta _divisor
  1440 3B91 A9 00		            lda #0
  1441 3B93 85 E1		            sta _divisor+1
  1442
  1443 3B95 20 A1 3B		            jsr _div16
  1444 				            
  1445 				; todo multiply result with velocity
  1446 3B98 A5 E2		            lda _result
  1447 3B9A 85 F0		            sta step_y
  1448 3B9C A5 E3		            lda _result+1
  1449 3B9E 85 F1		            sta step_y+1
  1450 				            
  1451 3BA0 60			            rts
  1452
  1453 				; divide 16bit
  1454 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1455
  1456 				; _result = _dividend / divisor
  1457
  1458 3BA1 A9 00		_div16      lda #0          ;preset remainder to 0
  1459 3BA3 85 E4		            sta _remainder
  1460 3BA5 85 E5		            sta _remainder+1
  1461 3BA7 A2 10		            ldx #16         ;repeat for each bit: ...
  1462
  1463 3BA9 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1464 3BAB 26 E3		            rol _dividend+1  
  1465 3BAD 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1466 3BAF 26 E5		            rol _remainder+1
  1467 3BB1 A5 E4		            lda _remainder
  1468 3BB3 38			            sec
  1469 3BB4 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1470 3BB6 A8			            tay         ;lb result -> Y, for we may need it later
  1471 3BB7 A5 E5		            lda _remainder+1
  1472 3BB9 E5 E1		            sbc _divisor+1
  1473 3BBB 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1474
  1475 3BBD 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1476 3BBF 84 E4		            sty _remainder   
  1477 3BC1 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1478
  1479 3BC3 CA			_div_skip   dex
  1480 3BC4 D0 E3		            bne _div_loop 
  1481 3BC6 60			            rts
  1482
  1483 				; Calculations for step size
  1484
  1485 				; not optimised for speed or size
  1486 				; step should be set according to the angle
  1487
  1488 				; move in straight line (x1,y1) to (x2,y2)
  1489
  1490 				; 1. set start/end of line
  1491 				; set (tmp_x1, tmp_y1)
  1492 				; set (tmp_x2, tmp_y2)
  1493
  1494 				; 2. init. current_x, current_y
  1495 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1496 				; - calculates step sizes for x,y
  1497 				; - calculated directions for x,y
  1498 				;            jsr init_current_xy
  1499
  1500 				; 3. use current_x, current_y to plot or set a position
  1501 				;            lda current_x+1
  1502 				;            sta x_position
  1503 				;            lda current_y+1
  1504 				;            sta y_position
  1505 				;            jsr plot_pixel
  1506
  1507 				; 4. move current_x, current_y to next position on line
  1508 				; A=0 still moving
  1509 				;           move_current_xy
  1510
  1511 3BC7			init_current_xy
  1512 3BC7 A9 7F		            lda #$7f      ; was 128 for half pixel
  1513 3BC9 85 EA		            sta current_x
  1514 3BCB 85 EC		            sta current_y
  1515
  1516 3BCD A5 E6		            lda tmp_x1
  1517 3BCF 85 EB		            sta current_x+1
  1518 				            
  1519 3BD1 A5 E7		            lda tmp_y1
  1520 3BD3 85 ED		            sta current_y+1
  1521
  1522 				; dx = abs(tmp_x1 - tmp_x2)
  1523 3BD5 20 4C 3B		            jsr calc_abs_tmp_dx
  1524
  1525 				; dy = abs(tmp_y1 - tmp_y2)
  1526 3BD8 20 5A 3B		            jsr calc_abs_tmp_dy
  1527
  1528 				; set directions
  1529 3BDB A5 E6		            lda tmp_x1
  1530 3BDD C5 E8		            cmp tmp_x2
  1531 3BDF 90 04		            bcc x1_smaller_x2
  1532 				; x1 >= x2
  1533 3BE1 A9 01		            lda #1
  1534 3BE3 D0 02		            bne set_dir_x
  1535 3BE5			x1_smaller_x2
  1536 3BE5 A9 00		            lda #0
  1537 3BE7			set_dir_x
  1538 3BE7 85 FA		            sta dir_x
  1539 				            
  1540 3BE9 A5 E7		            lda tmp_y1
  1541 3BEB C5 E9		            cmp tmp_y2
  1542 3BED 90 04		            bcc y1_smaller_y2
  1543 				; y1 >= y2
  1544 3BEF A9 01		            lda #1
  1545 3BF1 D0 02		            bne set_dir_y
  1546 3BF3			y1_smaller_y2
  1547 3BF3 A9 00		            lda #0
  1548 3BF5			set_dir_y
  1549 3BF5 85 FB		            sta dir_y
  1550
  1551 				; Calculate diff between start angle and end angle
  1552
  1553 3BF7 A5 AA		            lda ball_angle_start
  1554 3BF9 85 B0		            sta tmp_angle1
  1555 3BFB A5 AB		            lda ball_angle_end
  1556 3BFD 85 B1		            sta tmp_angle2
  1557 				            
  1558 3BFF 20 03 3B		            jsr calc_angle_diff
  1559
  1560 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1561 3C02 A6 B7		            ldx tmp_angle_diff
  1562 3C04 20 41 3B		            jsr angle_to_magnitude
  1563 				            
  1564 3C07 20 69 3B		            jsr calc_dx_div_magnitude
  1565 3C0A 20 85 3B		            jsr calc_dy_div_magnitude
  1566 				            
  1567 				; Calculate step size by ball speed
  1568 				            
  1569 				; step_x = step_x * speed
  1570 				            
  1571 3C0D A5 EE		            lda step_x
  1572 3C0F 85 F6		            sta _multiplicand
  1573 3C11 A5 EF		            lda step_x+1
  1574 3C13 85 F7		            sta _multiplicand+1
  1575 3C15 A5 AC		            lda ball_speed
  1576 3C17 85 F8		            sta _multiplier
  1577
  1578 3C19 20 4F 35		            jsr _multi8
  1579 				;result in .A (low byte, also in .X) and .Y (high byte)
  1580 3C1C 85 EE		            sta step_x
  1581 3C1E 84 EF		            sty step_x+1
  1582 3C20			skip_step_x_hi
  1583 				            
  1584 				; step_y = step_y * speed
  1585
  1586 3C20 A5 F0		            lda step_y
  1587 3C22 85 F6		            sta _multiplicand
  1588 3C24 A5 F1		            lda step_y+1
  1589 3C26 85 F7		            sta _multiplicand+1
  1590 3C28 A5 AC		            lda ball_speed
  1591 3C2A 85 F8		            sta _multiplier
  1592
  1593 3C2C 20 4F 35		            jsr _multi8
  1594 				;result in .A (low byte, also in .X) and .Y (high byte)
  1595 3C2F 85 F0		            sta step_y
  1596 3C31 84 F1		            sty step_y+1
  1597 3C33			skip_step_y_hi
  1598
  1599 3C33 60			            rts
  1600
  1601 				; Move ball position 
  1602 				; Add one step, until end reached
  1603 				; Input:
  1604 				; - step size (step_x, step_y)
  1605 				; - current ball position (current_x, current_y)
  1606 				; - end position (tmp_x2, tmp_y2)
  1607 				; Output:
  1608 				; A (0 = still moving, 1 = end reached)
  1609 3C34			move_current_xy
  1610 3C34 A9 00		            lda #0
  1611 3C36 85 FC		            sta line_end_x
  1612 3C38 85 FD		            sta line_end_y
  1613
  1614 				; sets line end indicators here
  1615 3C3A 20 57 3C		            jsr move_current_x
  1616 3C3D 20 97 3C		            jsr move_current_y
  1617
  1618 3C40 A5 FC		            lda line_end_x
  1619 3C42 25 FD		            and line_end_y
  1620 3C44 F0 10		            beq no_end_reached
  1621 				            
  1622 				; set current to (x2,y2)
  1623 3C46 A5 E8		            lda tmp_x2
  1624 3C48 85 EB		            sta current_x+1
  1625 3C4A A5 E9		            lda tmp_y2
  1626 3C4C 85 ED		            sta current_y+1
  1627 				            
  1628 3C4E A9 00		            lda #0
  1629 3C50 85 EA		            sta current_x
  1630 3C52 85 EC		            sta current_y
  1631 				            
  1632 3C54 A9 01		            lda #1 ; end reached
  1633 				            
  1634 3C56			no_end_reached  ; A = 0
  1635 3C56 60			            rts
  1636
  1637 3C57			move_current_x
  1638 3C57 A5 FA		            lda dir_x
  1639 3C59 D0 18		            bne move_current_left
  1640
  1641 				; move right, add
  1642 3C5B A5 EA		            lda current_x
  1643 3C5D 18			            clc
  1644 3C5E 65 EE		            adc step_x
  1645 3C60 85 EA		            sta current_x
  1646 3C62 A5 EB		            lda current_x+1
  1647 3C64 65 EF		            adc step_x+1
  1648 3C66 85 EB		            sta current_x+1
  1649
  1650 3C68 A5 EB		            lda current_x+1
  1651 3C6A C5 E8		            cmp tmp_x2
  1652 3C6C 90 04		            bcc no_line_end
  1653 3C6E			exact_end_x
  1654 3C6E A9 01		            lda #1
  1655 3C70 85 FC		            sta line_end_x 
  1656 3C72			no_line_end
  1657 3C72 60			            rts
  1658 				            
  1659 3C73			move_current_left
  1660 3C73 A5 EA		            lda current_x
  1661 3C75 38			            sec
  1662 3C76 E5 EE		            sbc step_x
  1663 3C78 90 01		            bcc clear_skip
  1664 3C7A EA			            nop
  1665 3C7B			clear_skip
  1666 3C7B 85 EA		            sta current_x
  1667 3C7D A5 EB		            lda current_x+1
  1668 3C7F E5 EF		            sbc step_x+1
  1669 3C81 85 EB		            sta current_x+1
  1670 3C83 90 0B		            bcc below_zero
  1671 				                        
  1672 3C85 A5 E8		            lda tmp_x2
  1673 3C87 C5 EB		            cmp current_x+1
  1674 3C89 90 E7		            bcc no_line_end
  1675 3C8B A9 01		            lda #1
  1676 3C8D 85 FC		            sta line_end_x            
  1677 3C8F 60			            rts
  1678 3C90			below_zero            
  1679 3C90 A9 01		            lda #1
  1680 3C92 85 FC		            sta line_end_x
  1681 3C94 85 FD		            sta line_end_y
  1682 3C96 60			            rts
  1683 3C97			move_current_y
  1684 3C97 A5 FB		            lda dir_y
  1685 3C99 D0 18		            bne move_current_up
  1686
  1687 				; move down, add
  1688 3C9B A5 EC		            lda current_y
  1689 3C9D 18			            clc
  1690 3C9E 65 F0		            adc step_y
  1691 3CA0 85 EC		            sta current_y
  1692 3CA2 A5 ED		            lda current_y+1
  1693 3CA4 65 F1		            adc step_y+1
  1694 3CA6 85 ED		            sta current_y+1
  1695 				            
  1696 3CA8 A5 ED		            lda current_y+1
  1697 3CAA C5 E9		            cmp tmp_y2
  1698 3CAC 90 C4		            bcc no_line_end
  1699 3CAE			exact_end_y
  1700 3CAE A9 01		            lda #1
  1701 3CB0 85 FD		            sta line_end_y
  1702 3CB2 60			            rts
  1703
  1704 3CB3			move_current_up
  1705 3CB3 A5 EC		            lda current_y
  1706 3CB5 38			            sec
  1707 3CB6 E5 F0		            sbc step_y
  1708 3CB8 85 EC		            sta current_y
  1709 3CBA A5 ED		            lda current_y+1
  1710 3CBC E5 F1		            sbc step_y+1
  1711 3CBE 90 D0		            bcc below_zero
  1712 3CC0 85 ED		            sta current_y+1
  1713 				            
  1714 3CC2 A5 E9		            lda tmp_y2
  1715 3CC4 C5 ED		            cmp current_y+1
  1716 3CC6 90 AA		            bcc no_line_end
  1717 3CC8 A9 01		            lda #1
  1718 3CCA 85 FD		            sta line_end_y
  1719 3CCC 60			            rts                            
  1720 				            
  1721 3CCD			init_sprites
  1722 3CCD A2 00		            ldx #0
  1723 3CCF 8A			            txa
  1724 3CD0			set_p
  1725 3CD0 9D 00 0E		            sta p0_area,x
  1726 3CD3 9D 80 0E		            sta p1_area,x
  1727 3CD6 9D 00 0F		            sta p2_area,x
  1728 3CD9 9D 80 0F		            sta p3_area,x
  1729 3CDC E8			            inx
  1730 3CDD 10 F1		            bpl set_p
  1731
  1732 3CDF A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1733 3CE1 8D 6F 02		            sta GPRIOR
  1734
  1735 3CE4 A9 0C		            lda #>pm_area
  1736 3CE6 8D 07 D4		            sta PMBASE
  1737
  1738 3CE9 A9 03		            lda #3          ; P/M both on
  1739 3CEB 8D 1D D0		            sta GRACTL
  1740
  1741 3CEE A9 90		            lda #$90
  1742 3CF0 8D 02 D0		            sta HPOSP2
  1743 3CF3 A9 A0		            lda #$A0
  1744 3CF5 8D 03 D0		            sta HPOSP3  
  1745 3CF8 60			            rts
  1746
  1747 3CF9			init_colors
  1748 3CF9 A9 5A		            lda #BASE_COLOR_P1+10
  1749 3CFB 8D C2 02		            sta PCOLR2
  1750 3CFE A9 BA		            lda #BASE_COLOR_P2+10
  1751 3D00 8D C3 02		            sta PCOLR3
  1752 				            
  1753 3D03 A9 00		            lda #0
  1754 3D05 8D C6 02		            sta COLOR2
  1755
  1756 3D08 A9 0E		            lda #HEADER_FG_COLOR
  1757 3D0A 8D C5 02		            sta COLOR1
  1758
  1759 3D0D A9 50		            lda #HEADER_P1_COLOR
  1760 3D0F 8D C0 02		            sta PCOLR0
  1761 3D12 A9 B0		            lda #HEADER_P2_COLOR
  1762 3D14 8D C1 02		            sta PCOLR1
  1763
  1764 3D17 60			            rts
  1765
  1766 3D18			previous_consol
  1767 3D18 00			            dta 0
  1768
  1769 3D19			current_level_index
  1770 3D19 00			            dta 0
  1771 = 0004			NR_OF_LEVELS = 4
  1772 = 0000			INIT_LEVEL_INDEX = 0
  1773 3D1A			level_speeds
  1774 3D1A 02 04 06 08		            dta 2,4,6,8
  1775 				            
  1776 				; X = level (0..NR_OF_LEVELS)
  1777 3D1E			set_level_ball_speed
  1778 3D1E BD 1A 3D		            lda level_speeds,x
  1779 3D21 85 AC		            sta ball_speed
  1780 3D23 8A			            txa
  1781 3D24 18			            clc
  1782 3D25 69 01		            adc #1
  1783 3D27 09 10		            ora #16
  1784 3D29 8D 84 4E		            sta level_char
  1785 3D2C 60			            rts
  1786 				            
  1787 3D2D			increase_level
  1788 3D2D EE 19 3D		            inc current_level_index
  1789 3D30 AD 19 3D		            lda current_level_index
  1790 3D33 C9 04		            cmp #NR_OF_LEVELS
  1791 3D35 D0 05		            bne ok_level
  1792 3D37 A9 00		            lda #INIT_LEVEL_INDEX
  1793 3D39 8D 19 3D		            sta current_level_index
  1794 3D3C			ok_level           
  1795 3D3C 60			            rts
  1796 				            
  1797 3D3D			            .align $100
  1798 3E00			inner_x_tab
  1799 = 3F00			inner_y_tab = *+$100
  1800 3E00-49FF> 70 72 75 77 +             ins 'data\in210.dat'
  1801 				      
  1802 4000			            .align $400            
  1803 				; outer circle 1024 plot points on 360 degrees
  1804 4000			outer_x_tab
  1805 = 4400			outer_y_tab = *+1024
  1806 4000 70 70 71 72 72 73 +             ins 'data\out224.dat'
  1807 				           
  1808 4800			            .align $400
  1809 				; table of magnitudes (length) between angle 0 and 0..255
  1810 				; fixed point 8.8 : hi.lo
  1811 4800			magnitudes_lo
  1812 = 4900			magnitudes_hi = *+256
  1813 4800 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1814
  1815 4A00			            .align $400
  1816 4C00			display_list
  1817 4C00-4D27> C2		            dta $42+128         ; dli_header
  1818 4C01 FE 4C		            dta a(score_line)
  1819
  1820 				; 102 x 40 = 4080 bytes            
  1821 4C03 4F			            dta $4f
  1822 4C04 00 60		            dta a(screen_mem1)
  1823 4C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1824 4C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1825 4C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1826 4C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1827
  1828 4C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1829 4C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1830 4C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1831 4C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1832
  1833 4C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1834 4C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1835 4C55			menu_dl_hook
  1836 4C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1837 4C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1838
  1839 4C65 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1840
  1841 				; 42 + 60 = 102, 4080 bytes
  1842 4C6B 4F			            dta $4f
  1843 4C6C 00 70		            dta a(screen_mem2)
  1844 4C6E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1845
  1846 4C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1847 4C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1848 4C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1849 4C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1850
  1851 4C95 0F 0F		            dta $0f,$0f
  1852
  1853 				; 60 lines
  1854 4C97			menu_dl_end
  1855 4C97 4F			            dta $4f
  1856 4C98 90 76		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1857 4C9A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1858 4CA1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1859 4CA9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1860 4CB1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1861
  1862 4CB9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1863 4CC1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1864 4CC9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1865 4CD1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1866
  1867 				; 20 x 40 = 800
  1868 4CD5 4F			            dta $4f
  1869 4CD6 00 80		            dta a(screen_mem3)       
  1870 4CD8 0F 0F 0F		            dta $0f,$0f,$0f
  1871 4CDB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1872 4CE3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1873 				            
  1874 4CEB 41			            dta $41
  1875 4CEC 00 4C		            dta a(display_list)
  1876
  1877 4CEE			menu_dl_part
  1878 4CEE 80			            dta 128 ; dli_menu
  1879 4CEF 20			            dta $20
  1880 4CF0 42			            dta $42
  1881 4CF1 00 4E		            dta a(menu_screen)
  1882 4CF3 02			            dta 2
  1883 4CF4 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$10
  1884 4CFB 01			            dta $01 ; jump
  1885 4CFC 97 4C		            dta a(menu_dl_end)
  1886
  1887 4CFE			score_line  
  1888 4CFE 00 2F 2E 25 00	            dta d' ONE '
  1889 4D03			score_chars_p1
  1890 4D03 0D 0D 00		            dta d'-- '
  1891
  1892 4D06 00 00 00 00 00 00 +             dta d'          '
  1893 4D10 00 00 00 00 00 00 +             dta d'          '
  1894
  1895 4D1A 00 00 00 00 00 34 +             dta d'     TWO '
  1896 4D23			score_chars_p2
  1897 4D23 0D 0D 00		            dta d'-- '
  1898
  1899 4D26 00			score_p1    dta 0
  1900 4D27 00			score_p2    dta 0
  1901
  1902 4D28			            .align $100
  1903 4E00			menu_screen
  1904 4E00-4EDB> 00 00 00 00 +             dta d'              '
  1905 4E0E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  1906 4E1A 00 00 00 00 00 00 +             dta d'              '
  1907 4E28 00 00 00 00 00 00 +             dta d'              '
  1908 4E36 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  1909 4E42 00 00 00 00 00 00 +             dta d'              '
  1910
  1911 4E50 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1912 4E5A			driver_screen
  1913 4E5A 00 00 00 00 00 00 +             dta d'            '
  1914 4E66 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1915 4E78 00 00 00 00 00 00 +             dta d'      LEVEL '
  1916 4E84			level_char            
  1917 4E84 11 00 00 00 00 00 +             dta d'1       '
  1918 4E8C 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1919 4EB4			stick_text
  1920 4EB4 33 34 29 23 2B 00 +             dta d'STICK   '
  1921 4EBC			paddle_text
  1922 4EBC 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1923 4EC4			driving_text
  1924 4EC4 24 32 29 36 29 2E +             dta d'DRIVING '
  1925 4ECC			computer_text
  1926 4ECC 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1927
  1928 4ED4			driver_text_lo
  1929 4ED4 B4			            dta <stick_text
  1930 4ED5 BC			            dta <paddle_text
  1931 4ED6 C4			            dta <driving_text
  1932 4ED7 CC			            dta <computer_text
  1933 				            
  1934 4ED8			driver_text_hi
  1935 4ED8 4E			            dta >stick_text
  1936 4ED9 4E			            dta >paddle_text
  1937 4EDA 4E			            dta >driving_text
  1938 4EDB 4E			            dta >computer_text
  1939
  1940 				; 4 KB
  1941 				; 128 x 32 bytes shapes
  1942 4EDC			            .align $1000
  1943 5000			pm_shapes
  1944 5000-6FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1945
  1946 				; 9 KB for backdrop image
  1947 6000			            .align $1000
  1948 = 6000			screen_mem1 = * ; 4K
  1949 				;            org screen_mem1
  1950 6000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1951
  1952 6FF0			            .align $1000
  1953 = 7000			screen_mem2 = * ; 4K
  1954 				;            org screen_mem2
  1955 7000-7FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1956
  1957 7FF0			            .align $1000
  1958 = 8000			screen_mem3 = * ; 1K
  1959 				;            org screen_mem3
  1960 8000-831F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1961
  1962 02E0-02E1> DC 34		            run main
