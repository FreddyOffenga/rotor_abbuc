mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.4
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - fix paddle player 2 start position
    17 				; - add color (pm?) in header for player ONE/TWO
    18 				; - try fix bat positions for paddles (both start at zero?)
    19 				; - try fix bat priority, now RED is always in front
    20 				; - add title image
    21
    22 				; Optional for a later version:
    23 				; - add computer player(s)
    24 				; - add support for driving controllers
    25 				; - break part of outer circle when ball hits
    26
    27 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    28
    29 				; color scheme
    30 				;BASE_COLOR_P1   = $10   ; orange
    31 				;BASE_COLOR_P2   = $a0   ; green
    32 				;BASE_COLOR_P1   = $80   ; blue
    33 				;BASE_COLOR_P2   = $e0   ; yellow
    34 = 0050			BASE_COLOR_P1   = $50   ; purple
    35 = 00B0			BASE_COLOR_P2   = $b0   ; green
    36 				;BASE_COLOR_P1   = $20   ; red
    37 				;BASE_COLOR_P2   = $70   ; blue
    38
    39
    40 				; must be in decimal format, so $11 is 11
    41 = 0011			MAX_SCORE   = $11
    42
    43 = 1000			pm_area     = $1000
    44 = 1180			msl_area    = pm_area+$180
    45 = 1200			p0_area     = pm_area+$200
    46 = 1280			p1_area     = pm_area+$280
    47 = 1300			p2_area     = pm_area+$300
    48 = 1380			p3_area     = pm_area+$380
    49
    50 				; $1400 .. $1500 is overwritten, bug?
    51
    52 				; outer tables 256 for 360 degrees
    53 = 1600			outer_x_256     = $1600
    54 = 1700			outer_y_256     = $1700
    55
    56 = 1800			screen_y_lo     = $1800
    57 = 1900			screen_y_hi     = $1900
    58
    59 = 0140			WIDTH           = 320
    60 = 00C0			HEIGHT          = 192
    61
    62 = 0028			SCREEN_WIDTH    = 40
    63
    64 = 0030			outer_x_margin  = 48 ;47-32
    65 = 0040			inner_x_margin  = 64
    66
    67 = 00A0			circle_center_x = WIDTH/2
    68 = 0060			circle_center_y = HEIGHT/2
    69
    70 = 0006			ball_top_margin     = 6
    71 = 0045			ball_left_margin    = 64+5
    72
    73 				; pm upper margin
    74 = 0001			upper_margin    = 1
    75 = 0020			left_margin     = 32
    76
    77 = 0080			music_toggle    = $80
    78
    79 = 0084			shape_ptr       = $84
    80 = 0086			tmp_screen      = $86
    81
    82 = 008C			mode_menu       = $8c
    83
    84 = 008D			volume_hit_bat  = $8d
    85 = 008E			volume_hit_edge = $8e
    86
    87 				; player vars must be in sequence for zp,x indexing
    88
    89 = 0090			p1_shape        = $90
    90 = 0091			p2_shape        = $91
    91
    92 = 0094			player1_x       = $94
    93 = 0095			player2_x       = $95
    94
    95 = 0098			player1_y       = $98
    96 = 0099			player2_y       = $99
    97
    98 = 009C			p1_angle        = $9c
    99 = 009D			p2_angle        = $9d
   100
   101 = 00A0			mp_collision    = $a0
   102 = 00A1			in_collision    = $a1
   103 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   104 = 00A3			edge_delay      = $a3
   105 = 00A4			bat_collision_delay = $a4
   106
   107 				; ball vars
   108 = 00A6			ball_current_x      = $a6
   109 = 00A7			ball_current_y      = $a7
   110 = 00AA			ball_angle_start    = $aa
   111 = 00AB			ball_angle_end      = $ab
   112 = 00AC			ball_speed          = $ac
   113
   114 = 00B0			tmp_angle1          = $b0
   115 = 00B1			tmp_angle2          = $b1
   116 = 00B2			add_to_angle        = $b2
   117 = 00B3			angle_diff_bat      = $b3
   118 = 00B4			tmp_angle_direction = $b4
   119 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   120 = 00B6			game_restart        = $b6
   121 = 00B7			tmp_angle_diff      = $b7
   122 = 00B8			magnitude           = $b8       ; word
   123
   124 				; $c0 - $df free for music
   125
   126 = 00E0			_divisor    = $e0   ; word
   127 = 00E2			_dividend   = $e2   ; word
   128 = 00E4			_remainder  = $e4   ; word
   129 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   130
   131 = 00E6			tmp_x1      = $e6   ; byte
   132 = 00E7			tmp_y1      = $e7   ; byte
   133 = 00E8			tmp_x2      = $e8   ; byte
   134 = 00E9			tmp_y2      = $e9   ; byte
   135
   136 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   137 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   138
   139 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   140 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   141
   142 = 00F2			tmp_dx      = $f2  ; byte
   143 = 00F3			tmp_dy      = $f3  ; byte
   144
   145 = 00F6			_multiplicand   = $f6   ; word
   146 = 00F8			_multiplier     = $f8   ; byte
   147
   148 				; direction:
   149 				; 0 : x1<x2 or y1<y2 = add
   150 				; 1 ; x1>=y2 or y1>=y2 = subtract
   151
   152 = 00FA			dir_x       = $fa  ; byte
   153 = 00FB			dir_y       = $fb  ; byte
   154
   155 = 00FC			line_end_x  = $fc  ; byte
   156 = 00FD			line_end_y  = $fd  ; byte
   157
   158 				            org $2000
   159
   160 				            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2000			driver_tmp      .ds 2
     5 = 2002			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 				            .align $100
    11 				paddle_to_256
    12 = 2100			            .ds $100
    13
    14 				; paddle initial value
    15 				prev_paddle_value
    16 = 2200			            .ds 1
    17
    18 				driver_init
    19 FFFF> 2201-2AC5> A9 00	            lda #0  ; stick
    20 2203 8D 02 20		            sta driver_mode
    21
    22 2206 AD 70 02		            lda PADDL0
    23 2209 8D 00 22		            sta prev_paddle_value
    24
    25 220C A9 00		            lda #0
    26 220E 85 9C		            sta p1_angle
    27 2210 A9 80		            lda #128
    28 2212 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2214 A9 00		            lda #0
    33 2216 8D 00 20		            sta driver_tmp
    34 2219 8D 01 20		            sta driver_tmp+1
    35 				            
    36 221C A2 00		            ldx #0
    37 221E			store_pv
    38 221E AD 01 20		            lda driver_tmp+1
    39 2221 9D 00 21		            sta paddle_to_256,x
    40 				            
    41 2224 AD 00 20		            lda driver_tmp
    42 2227 18			            clc
    43 2228 69 1F		            adc #<paddle_add
    44 222A 8D 00 20		            sta driver_tmp
    45 222D AD 01 20		            lda driver_tmp+1
    46 2230 69 01		            adc #>paddle_add
    47 2232 8D 01 20		            sta driver_tmp+1
    48 2235 E8			            inx
    49 2236 E0 E5		            cpx #paddle_vals
    50 2238 D0 E4		            bne store_pv
    51 223A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 223B			driver_detect
    63 223B AD 70 02		            lda PADDL0
    64 223E C9 E4		            cmp #228
    65 2240 D0 07		            bne paddle_detect
    66 2242 AD 71 02		            lda PADDL1
    67 2245 C9 E4		            cmp #228
    68 2247 F0 06		            beq no_paddle_detect
    69 2249			paddle_detect
    70 2249 A9 01		            lda #1
    71 224B 8D 02 20		            sta driver_mode
    72 224E 60			            rts
    73
    74 224F			no_paddle_detect
    75 224F AD 78 02		            lda STICK0
    76 2252 C9 0C		            cmp #12
    77 2254 D0 06		            bne no_driving_detect
    78 2256 A9 02		            lda #2
    79 2258 8D 02 20		            sta driver_mode
    80 225B 60			            rts
    81
    82 225C			no_driving_detect
    83 225C C9 07		            cmp #7      ; paddle button also gives this
    84 225E F0 04		            beq stick_detect    
    85 2260 C9 0B		            cmp #11     ; paddle button also gives this
    86 2262 D0 06		            bne no_stick_detect
    87 2264			stick_detect
    88 2264 A9 00		            lda #0
    89 2266 8D 02 20		            sta driver_mode
    90 2269 60			            rts
    91
    92 226A			no_stick_detect
    93 				; default is the last value
    94 226A AD 02 20		            lda driver_mode
    95 226D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 226E			main_driver            
   110 226E AC 02 20		            ldy driver_mode
   111 2271 B9 80 22		            lda driver_lo,y
   112 2274 8D 7E 22		            sta driver_ptr
   113 2277 B9 84 22		            lda driver_hi,y
   114 227A 8D 7F 22		            sta driver_ptr+1
   115
   116 = 227E			driver_ptr = *+1
   117 227D 4C FF FF		            jmp $ffff  
   118
   119 2280			driver_lo
   120 2280 88			            dta <driver_stick
   121 2281 CD			            dta <driver_paddle
   122 2282 88			            dta <driver_stick
   123 2283 88			            dta <driver_stick
   124
   125 2284			driver_hi
   126 2284 22			            dta >driver_stick
   127 2285 22			            dta >driver_paddle
   128 2286 22			            dta >driver_stick
   129 2287 22			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2288			driver_stick
   134 2288 BD 78 02		            lda STICK0,x
   135 228B C9 0F		            cmp #15
   136 228D F0 21		            beq move_done
   137 228F C9 0B		            cmp #11
   138 2291 D0 0E		            bne no_left
   139
   140 2293 D6 9C		            dec p1_angle,x
   141 2295 BD 84 02		            lda STRIG0,x
   142 2298 D0 04		            bne no_fast
   143 229A D6 9C		            dec p1_angle,x
   144 229C D6 9C		            dec p1_angle,x
   145 229E			no_fast
   146 				            
   147 229E 4C B0 22		            jmp move_done
   148 22A1 C9 07		no_left     cmp #7
   149 22A3 D0 0B		            bne move_done
   150
   151 22A5 F6 9C		            inc p1_angle,x
   152 22A7 BD 84 02		            lda STRIG0,x
   153 22AA D0 04		            bne no_fast_right
   154 22AC F6 9C		            inc p1_angle,x
   155 22AE F6 9C		            inc p1_angle,x
   156 22B0			no_fast_right
   157 22B0			move_done
   158 22B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 22B1			is_fire_button
   165 22B1 AD 02 20		            lda driver_mode
   166 22B4 C9 01		            cmp #1
   167 22B6 F0 04		            beq check_paddle_fire
   168 				            
   169 22B8 BD 84 02		            lda STRIG0,x
   170 22BB 60			            rts
   171
   172 22BC			check_paddle_fire
   173 22BC AD 78 02		            lda STICK0
   174 22BF C9 07		            cmp #7
   175 22C1 F0 07		            beq paddle_fire
   176 22C3 C9 0B		            cmp #11
   177 22C5 F0 03		            beq paddle_fire
   178 22C7 A9 00		            lda #0
   179 22C9 60			            rts
   180 22CA			paddle_fire
   181 22CA A9 01		            lda #1
   182 22CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 22CD			driver_paddle            
   187 22CD BD 70 02		            lda PADDL0,x
   188 22D0 A8			            tay
   189 22D1 B9 00 21		            lda paddle_to_256,y
   190 22D4 5D DA 22		            eor paddle_offsets,x
   191 22D7 95 9C		            sta p1_angle,x
   192 22D9 60			            rts
   193
   194 22DA			paddle_offsets
   195 22DA 00 00		            dta 0,0
   161 22DC			main         
   162 22DC A9 00		            lda #0
   163 22DE 8D 2F 02		            sta SDMCTL
   164 22E1 85 B6		            sta game_restart
   165
   166 22E3 A9 80		            lda #128
   167 22E5 85 8D		            sta volume_hit_bat
   168 22E7 85 8E		            sta volume_hit_edge
   169 22E9 85 80		            sta music_toggle        ; 128 = on, 0 = off
   170
   171 22EB A9 01		            lda #1
   172 22ED 8D 44 02		            sta 580 ; coldstart
   173
   174 22F0 20 01 22		            jsr driver_init
   175
   176 22F3 20 CF 27		            jsr make_shape_index
   177 				 
   178 22F6 20 FF 27		            jsr make_outer_256
   179 				            
   180 22F9 20 E0 23		            jsr make_screen_y_tab
   181
   182 22FC 20 2B 24		            jsr invert_backdrop
   183
   184 22FF 20 6F 28		            jsr reset_score
   185 2302 20 3D 28		            jsr show_score_p1
   186 2305 20 56 28		            jsr show_score_p2
   187 				                       
   188 2308 20 5A 2A		            jsr init_sprites
   189 230B 20 86 2A		            jsr init_colors
   190
   191 				; init. game vars
   192 230E A2 00		            ldx #INIT_LEVEL_INDEX
   193 2310 8E A2 2A		            stx current_level_index
   194 2313 20 A7 2A		            jsr set_level_ball_speed
   195
   196 2316 A9 01		            lda #1
   197 2318 85 8C		            sta mode_menu           ; start with menu
   198
   199 				; start vbi
   200 				            
   201 231A A9 51		            lda #<dli_menu
   202 231C 8D 00 02		            sta VDSLST
   203 231F A9 23		            lda #>dli_menu
   204 2321 8D 01 02		            sta VDSLST+1
   205 				            
   206 2324 20 70 B2		            jsr music_init
   207 				;            lda #0
   208 				;            sta $d208
   209 				            
   210 2327 A9 C0		            lda #$c0
   211 2329 8D 0E D4		            sta NMIEN
   212 				            
   213 232C A9 07		            lda #7          ; sets VVBLKI
   214 232E A0 70		            ldy #<vbi
   215 2330 A2 24		            ldx #>vbi
   216 2332 20 5C E4		            jsr $e45c       ; SETVBV
   217
   218 				; we're just sitting here while VBI does all the work :)
   219 2335 4C 35 23		loop        jmp loop
   220
   221 				;------------------------
   222 				; 8bit * 8bit = 16bit multiply
   223 				; By White Flame
   224 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   225 				; uses extra zp var _multiplicand+1
   226
   227 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   228 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   229
   230 				; In this version, both inputs must be unsigned
   231 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   232
   233 2338			_multi8
   234 2338 A9 00		            lda #$00
   235 233A A8			            tay
   236 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   237 233B F0 0D		            beq _enter_loop
   238 233D			_do_add
   239 233D 18			            clc
   240 233E 65 F6		            adc _multiplicand
   241 2340 AA			            tax
   242
   243 2341 98			            tya
   244 2342 65 F7		            adc _multiplicand+1
   245 2344 A8			            tay
   246 2345 8A			            txa
   247 2346			_mul_loop
   248 2346 06 F6		            asl _multiplicand
   249 2348 26 F7		            rol _multiplicand+1
   250 234A			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   251 234A 46 F8		            lsr _multiplier
   252 234C B0 EF		            bcs _do_add
   253 234E D0 F6		            bne _mul_loop
   254 2350 60			            rts
   255
   256 2351			dli_menu
   257 2351 48			            pha
   258 2352 8A			            txa
   259 2353 48			            pha
   260 				            
   261 2354 A9 00		            lda #0
   262 2356 8D 0A D4		            sta WSYNC
   263 2359 8D 1A D0		            sta COLBK
   264 235C A9 0E		            lda #$0e
   265 235E 8D 0A D4		            sta WSYNC
   266 2361 8D 1A D0		            sta COLBK
   267 2364 A9 0A		            lda #$0a
   268 2366 8D 0A D4		            sta WSYNC
   269 2369 8D 1A D0		            sta COLBK
   270 236C A9 00		            lda #0
   271 236E 8D 0A D4		            sta WSYNC
   272 2371 8D 1A D0		            sta COLBK
   273
   274 2374 A2 00		            ldx #0
   275 2376			color_it            
   276 2376 BD A8 23		            lda menu_colpf0,x
   277 2379 8D 0A D4		            sta WSYNC
   278 237C 8D 16 D0		            sta COLPF0
   279 237F E8			            inx
   280 2380 E0 38		            cpx #56
   281 2382 D0 F2		            bne color_it
   282
   283 2384 A9 00		            lda #0
   284 2386 8D 0A D4		            sta WSYNC
   285 2389 8D 1A D0		            sta COLBK
   286 238C A9 0A		            lda #$0a
   287 238E 8D 0A D4		            sta WSYNC
   288 2391 8D 1A D0		            sta COLBK
   289 2394 A9 0E		            lda #$0e
   290 2396 8D 0A D4		            sta WSYNC
   291 2399 8D 1A D0		            sta COLBK
   292 239C A9 00		            lda #0
   293 239E 8D 0A D4		            sta WSYNC
   294 23A1 8D 1A D0		            sta COLBK
   295 				            
   296 23A4 68			            pla
   297 23A5 AA			            tax
   298 23A6 68			            pla
   299 23A7 40			            rti
   300
   301 23A8			menu_colpf0
   302 23A8 00 00		            dta 0,0
   303 23AA 58			            dta BASE_COLOR_P1+8
   304 23AB 58			            dta BASE_COLOR_P1+8
   305 23AC 5A			            dta BASE_COLOR_P1+10
   306 23AD 5A			            dta BASE_COLOR_P1+10
   307 23AE 5C			            dta BASE_COLOR_P1+12
   308 23AF 5C			            dta BASE_COLOR_P1+12
   309
   310 23B0 BC			            dta BASE_COLOR_P2+12
   311 23B1 BC			            dta BASE_COLOR_P2+12
   312 23B2 BA			            dta BASE_COLOR_P2+10
   313 23B3 BA			            dta BASE_COLOR_P2+10
   314 23B4 B8			            dta BASE_COLOR_P2+8
   315 23B5 B8			            dta BASE_COLOR_P2+8
   316 23B6 00 00		            dta 0,0
   317
   318 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   319 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   320 23B8 00 00 00 00		            dta 0,0,0,0
   321 23BC 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   322 23C4 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   323 23CC 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   324 23D4 00 00 00 00		            dta 0,0,0,0
   325 23D8 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   326
   327 				; make pointers from y-position to screen memory
   328 				; screen memory is 3 blocks
   329 				; screen_mem1 : 102 lines, 4080 bytes
   330 				; screen_mem2 : 102 lines, 4080 bytes
   331 				; screen_mem3 :  20 lines,  800 bytes
   332
   333 23E0			make_screen_y_tab
   334 23E0 A9 00		            lda #<screen_mem1
   335 23E2 85 86		            sta tmp_screen
   336 23E4 A9 70		            lda #>screen_mem1
   337 23E6 85 87		            sta tmp_screen+1
   338
   339 23E8 A2 00		            ldx #0
   340 23EA			fill_y_tab1
   341 23EA 20 13 24		            jsr store_y_line
   342 23ED E8			            inx
   343 23EE E0 66		            cpx #102
   344 23F0 D0 F8		            bne fill_y_tab1
   345
   346 				; x = 102
   347 23F2 A9 00		            lda #<screen_mem2
   348 23F4 85 86		            sta tmp_screen
   349 23F6 A9 80		            lda #>screen_mem2
   350 23F8 85 87		            sta tmp_screen+1
   351
   352 23FA			fill_y_tab2
   353 23FA 20 13 24		            jsr store_y_line
   354 23FD E8			            inx
   355 23FE E0 CC		            cpx #204
   356 2400 D0 F8		            bne fill_y_tab2
   357
   358 2402 A9 00		            lda #<screen_mem3
   359 2404 85 86		            sta tmp_screen
   360 2406 A9 90		            lda #>screen_mem3
   361 2408 85 87		            sta tmp_screen+1
   362
   363 				; x = 204
   364 240A			fill_y_tab3
   365 240A 20 13 24		            jsr store_y_line
   366 240D E8			            inx
   367 240E E0 E0		            cpx #224
   368 2410 D0 F8		            bne fill_y_tab3
   369 2412 60			            rts
   370
   371 2413			store_y_line
   372 2413 A5 86		            lda tmp_screen
   373 2415 9D 00 18		            sta screen_y_lo,x
   374 2418 A5 87		            lda tmp_screen+1
   375 241A 9D 00 19		            sta screen_y_hi,x
   376 				            
   377 241D A5 86		            lda tmp_screen
   378 241F 18			            clc
   379 2420 69 28		            adc #SCREEN_WIDTH
   380 2422 85 86		            sta tmp_screen
   381 2424 A5 87		            lda tmp_screen+1
   382 2426 69 00		            adc #0
   383 2428 85 87		            sta tmp_screen+1
   384 242A 60			            rts
   385
   386 				; @todo invert backdrop image
   387 				; now we have to do it here :P
   388 242B			invert_backdrop
   389 242B A9 00		            lda #<screen_mem1
   390 242D 85 86		            sta tmp_screen
   391 242F A9 70		            lda #>screen_mem1
   392 2431 85 87		            sta tmp_screen+1
   393 				            
   394 2433 A2 10		            ldx #16     ; 16 pages = 4K
   395 2435 20 53 24		            jsr do_x_pages
   396 				           
   397 2438 A9 00		            lda #<screen_mem2
   398 243A 85 86		            sta tmp_screen
   399 243C A9 80		            lda #>screen_mem2
   400 243E 85 87		            sta tmp_screen+1
   401 				            
   402 2440 A2 10		            ldx #16     ; 16 pages = 4K
   403 2442 20 53 24		            jsr do_x_pages
   404
   405 2445 A9 00		            lda #<screen_mem3
   406 2447 85 86		            sta tmp_screen
   407 2449 A9 90		            lda #>screen_mem3
   408 244B 85 87		            sta tmp_screen+1
   409 				            
   410 244D A2 04		            ldx #4     ; 4 pages = 1K
   411 244F 20 53 24		            jsr do_x_pages
   412 2452 60			            rts
   413
   414 				; invert x pages, starting from tmp_screen
   415
   416 2453			do_x_pages
   417 2453 A0 00		            ldy #0
   418 2455			do_page
   419 2455 B1 86		            lda (tmp_screen),y
   420 2457 49 FF		            eor #$ff
   421 2459 91 86		            sta (tmp_screen),y
   422 245B C8			            iny
   423 245C D0 F7		            bne do_page 
   424
   425 245E E6 87		            inc tmp_screen+1
   426 2460 CA			            dex
   427 2461 D0 F2		            bne do_page
   428 2463 60			            rts
   429
   430 2464			turn_color_ball
   431 2464 A6 B5		            ldx player_turn
   432 2466 BD 6D 24		            lda color_turn,x
   433 2469 8D C7 02		            sta COLOR3
   434 246C 60			            rts
   435 				            
   436 246D 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   437
   438 				; A, X, Y are already saved by the OS
   439 2470			vbi                 
   440 2470 20 DE B2		            jsr copy_shadow
   441
   442 2473 A5 80		            lda music_toggle
   443 2475 F0 03		            beq skip_music
   444 2477 20 99 B2		            jsr play_song
   445 247A			skip_music
   446 247A 20 D1 25		            jsr play_sound_bat
   447 247D 20 EF 25		            jsr play_sound_edge            
   448
   449 				; toggle music on/off with spacebar
   450 2480 AD FC 02		            lda 764
   451 2483 C9 21		            cmp #$21
   452 2485 D0 12		            bne no_spacebar
   453 2487 A5 80		            lda music_toggle
   454 2489 49 80		            eor #128
   455 248B 85 80		            sta music_toggle
   456 248D D0 03		            bne music_turned_on
   457 248F 20 62 B3		            jsr music_off
   458
   459 2492			music_turned_on
   460 2492 A9 FF		            lda #255
   461 2494 8D FC 02		            sta 764
   462 2497 D0 E1		            bne skip_music
   463
   464 2499			no_spacebar
   465
   466
   467 2499 A9 2E		            lda #%00101110  ; enable P/M DMA
   468 249B 8D 2F 02		            sta SDMCTL
   469 249E A9 00		            lda #0
   470 24A0 85 4D		            sta 77      ; attract off
   471 24A2 A9 38		            lda #>rotor_font
   472 24A4 8D F4 02		            sta 756
   473
   474 				; menu switching thingy
   475
   476 24A7 AD 1F D0		            lda CONSOL
   477 24AA C9 03		            cmp #3
   478 24AC D0 0C		            bne no_option_pressed
   479
   480 24AE			go_menu_mode            
   481 24AE 20 FC B2		            jsr music_normal_volume
   482 				            
   483 24B1 20 38 27		            jsr wipe_ball
   484 				            
   485 24B4 A9 01		            lda #1
   486 24B6 85 8C		            sta mode_menu
   487 24B8 D0 12		            bne check_mode_menu
   488
   489 24BA			no_option_pressed
   490 24BA C9 06		            cmp #6
   491 24BC D0 0E		            bne check_mode_menu
   492 				            
   493 				; reset game
   494
   495 24BE			reset_game
   496 24BE 20 07 B3		            jsr music_low_volume
   497
   498 24C1 20 38 27		            jsr wipe_ball
   499 				            
   500 24C4 A9 01		            lda #1
   501 24C6 85 B6		            sta game_restart
   502
   503 24C8 A9 00		            lda #0
   504 24CA 85 8C		            sta mode_menu
   505
   506 24CC			check_mode_menu
   507 24CC A5 8C		            lda mode_menu
   508 24CE F0 51		            beq main_game_vbi
   509
   510 				; within menu vbi
   511 				            
   512 24D0 AD 1F D0		            lda CONSOL
   513 24D3 C9 05		            cmp #5          ; select
   514 24D5 D0 18		            bne no_level_select
   515 				            
   516 24D7 AD A1 2A		            lda previous_consol
   517 24DA C9 05		            cmp #5
   518 24DC F0 14		            beq wait_depressed
   519 				            
   520 24DE 20 B6 2A		            jsr increase_level
   521 24E1 AE A2 2A		            ldx current_level_index
   522 24E4 20 A7 2A		            jsr set_level_ball_speed            
   523
   524 24E7 A9 05		            lda #5
   525 24E9 8D A1 2A		            sta previous_consol
   526 24EC 4C F2 24		            jmp wait_depressed
   527
   528 24EF			no_level_select
   529 24EF 8D A1 2A		            sta previous_consol
   530
   531 24F2			wait_depressed        
   532 24F2 A9 16		            lda #<menu_dl
   533 24F4 8D 30 02		            sta SDLSTL
   534 24F7 A9 41		            lda #>menu_dl
   535 24F9 8D 31 02		            sta SDLSTH
   536
   537 				; detect/show controller type (used for both players)
   538 24FC 20 08 25		            jsr detect_show_driver
   539
   540 24FF 20 3E 26		            jsr handle_player1
   541 2502 20 57 26		            jsr handle_player2
   542
   543 2505 4C C3 25		            jmp exit_vbi
   544
   545 				; X = port/driver to detect
   546 2508			detect_show_driver
   547 2508 20 3B 22		            jsr driver_detect
   548 250B A8			            tay
   549 250C B9 98 42		            lda driver_text_lo,y
   550 250F 85 86		            sta tmp_screen
   551 2511 B9 9C 42		            lda driver_text_hi,y
   552 2514 85 87		            sta tmp_screen+1
   553
   554 2516 A0 07		            ldy #7
   555 2518			show_driv
   556 2518 B1 86		            lda (tmp_screen),y
   557 251A 99 1E 42		            sta driver_screen,y
   558 251D 88			            dey
   559 251E 10 F8		            bpl show_driv
   560 2520 60			            rts
   561
   562 				; main game vbi
   563 2521			main_game_vbi
   564 2521 A5 B6		            lda game_restart
   565 2523 F0 2C		            beq no_restart
   566
   567 				; restart game
   568 				            
   569 2525 A9 00		            lda #0
   570 2527 85 B6		            sta game_restart
   571 				            
   572 2529 20 6F 28		            jsr reset_score
   573 252C 20 3D 28		            jsr show_score_p1
   574 252F 20 56 28		            jsr show_score_p2
   575
   576 2532 A6 9C		            ldx p1_angle
   577 2534 86 AA		            stx ball_angle_start
   578 2536 20 91 26		            jsr ball_to_start_position
   579 2539 20 A0 26		            jsr prepare_ball_end_position
   580
   581 253C A9 00		            lda #0
   582 253E 85 A0		            sta mp_collision
   583 2540 85 A1		            sta in_collision
   584 2542 85 A3		            sta edge_delay
   585 2544 8D 1E D0		            sta HITCLR
   586
   587 2547 A9 02		            lda #2
   588 2549 85 B5		            sta player_turn
   589
   590 254B 20 64 24		            jsr turn_color_ball
   591 254E 4C C3 25		            jmp exit_vbi            
   592
   593 2551			no_restart
   594 2551 A9 00		            lda #<display_list
   595 2553 8D 30 02		            sta SDLSTL
   596 2556 A9 40		            lda #>display_list
   597 2558 8D 31 02		            sta SDLSTH
   598
   599 255B AD 08 D0		            lda M0PL
   600 255E 85 A0		            sta mp_collision
   601 2560 AD 09 D0		            lda M1PL
   602 2563 05 A0		            ora mp_collision
   603 2565 85 A0		            sta mp_collision
   604 				 
   605 2567 20 3E 26		            jsr handle_player1
   606 256A 20 57 26		            jsr handle_player2
   607
   608 				; handle ball
   609
   610 256D 20 38 27		            jsr wipe_ball         
   611
   612 				; Check ball collision with bat
   613
   614 2570 A5 A4		            lda bat_collision_delay
   615 2572 F0 05		            beq check_allowed
   616 2574 C6 A4		            dec bat_collision_delay
   617 2576 4C 90 25		            jmp move_one
   618
   619 2579			check_allowed
   620 2579 A5 A0		            lda mp_collision
   621 257B F0 0F		            beq reset_in_collision
   622
   623 257D A5 A1		            lda in_collision
   624 257F D0 0F		            bne no_first_hit
   625
   626 2581 E6 A1		            inc in_collision            
   627 2583 20 CD 26		            jsr bounce_bat_ball 
   628 				            
   629 2586 20 CC 25		            jsr start_sound_bat          
   630 				            
   631 2589 4C 90 25		            jmp move_one
   632 				            
   633 258C			reset_in_collision
   634 258C A9 00		            lda #0
   635 258E 85 A1		            sta in_collision        
   636
   637 2590			move_one
   638 2590			no_first_hit
   639 2590 20 C1 29		            jsr move_current_xy
   640 2593 F0 1B		            beq still_moving
   641
   642 				; edge detected
   643
   644 2595 20 EA 25		            jsr start_sound_edge
   645
   646 2598 A5 AB		            lda ball_angle_end
   647 259A 85 AA		            sta ball_angle_start
   648
   649 259C 20 C4 26		            jsr ball_current_to_start_position
   650 259F 20 A0 26		            jsr prepare_ball_end_position
   651
   652 25A2 20 0A 26		            jsr update_score
   653 25A5 D0 1F		            bne game_ends
   654
   655 				; switch turns
   656 25A7 A5 B5		            lda player_turn
   657 25A9 49 03		            eor #3              ; 1 => 2, 2 => 1
   658 25AB 85 B5		            sta player_turn
   659 25AD 20 64 24		            jsr turn_color_ball
   660
   661 25B0			still_moving
   662 25B0 A5 EB		            lda current_x+1
   663 25B2 85 A6		            sta ball_current_x
   664 25B4 A5 ED		            lda current_y+1
   665 25B6 85 A7		            sta ball_current_y
   666
   667 25B8 20 4D 27		            jsr show_ball
   668
   669 25BB A9 00		            lda #0
   670 25BD 8D 18 D0		            sta $d018           
   671
   672 				; anything in A to clear collisions
   673 25C0 8D 1E D0		            sta HITCLR
   674
   675 25C3			exit_vbi
   676 25C3 4C 62 E4		            jmp $e462
   677
   678 25C6			game_ends
   679 25C6 20 FC B2		            jsr music_normal_volume
   680 25C9 4C 62 E4		            jmp $e462            
   681
   682 25CC			start_sound_bat
   683 25CC A9 0A		            lda #10
   684 25CE 85 8D		            sta volume_hit_bat
   685 25D0 60			            rts
   686 				            
   687 25D1			play_sound_bat
   688 25D1 A5 8D		            lda volume_hit_bat
   689 25D3 30 14		            bmi silenced_bat
   690
   691 25D5 A5 B5		            lda player_turn
   692 25D7 0A			            asl
   693 25D8 0A			            asl
   694 25D9 69 30		            adc #$30
   695 25DB E5 B3		            sbc angle_diff_bat
   696 25DD 8D 75 B3		            sta SHADOW+4    ; $d204
   697 25E0 A5 8D		            lda volume_hit_bat
   698 25E2 09 A0		            ora #$a0
   699 25E4 8D 76 B3		            sta SHADOW+5    ; $d205
   700 25E7 C6 8D		            dec volume_hit_bat
   701 25E9			silenced_bat
   702 25E9 60			            rts
   703
   704 25EA			start_sound_edge
   705 25EA A9 04		            lda #4
   706 25EC 85 8E		            sta volume_hit_edge
   707 25EE 60			            rts
   708
   709 25EF			play_sound_edge
   710 25EF A5 8E		            lda volume_hit_edge
   711 25F1 30 16		            bmi silenced_edge
   712 25F3 D0 06		            bne no_silenced_edge
   713 25F5 8D 76 B3		            sta SHADOW+5    ; $d205
   714 25F8 C6 8E		            dec volume_hit_edge
   715 25FA 60			            rts            
   716
   717 25FB			no_silenced_edge
   718 25FB A9 08		            lda #$08
   719 25FD 8D 75 B3		            sta SHADOW+4    ; $d204
   720 2600 A5 8E		            lda volume_hit_edge
   721 2602 09 26		            ora #$26
   722 2604 8D 76 B3		            sta SHADOW+5    ; $d205
   723 2607 C6 8E		            dec volume_hit_edge
   724 2609			silenced_edge
   725 2609 60			            rts
   726
   727 				; Update score
   728 				; Score > max score, then exit A = 1, otherwise A = 0
   729
   730 260A			update_score
   731 260A A5 B5		            lda player_turn
   732 260C C9 01		            cmp #1
   733 260E D0 12		            bne was_player2_turn
   734 				; was player 1 turn, so player 2 gets a point
   735 2610 20 84 28		            jsr inc_score_p2
   736 2613 20 56 28		            jsr show_score_p2
   737
   738 2616 AD 15 41		            lda score_p2
   739 2619 C9 11		            cmp #MAX_SCORE
   740 261B D0 17		            bne reset_edge_delay
   741
   742 261D A9 01		            lda #1
   743 261F 85 8C		            sta mode_menu
   744 2621 60			            rts
   745
   746 2622			was_player2_turn
   747 2622 20 78 28		            jsr inc_score_p1
   748 2625 20 3D 28		            jsr show_score_p1
   749
   750 2628 AD 14 41		            lda score_p1
   751 262B C9 11		            cmp #MAX_SCORE
   752 262D D0 05		            bne reset_edge_delay
   753
   754 262F A9 01		            lda #1
   755 2631 85 8C		            sta mode_menu
   756 2633 60			            rts
   757
   758 2634			reset_edge_delay
   759 2634 A9 0A		            lda #10
   760 2636 85 A3		            sta edge_delay
   761
   762 2638			no_edge
   763
   764 2638 A9 00		            lda #0      ; no end game
   765 				; anything in A to clear collisions
   766 263A 8D 1E D0		            sta HITCLR
   767 263D 60			            rts
   768
   769 				; player 1
   770 				; - wipe shape at previous y-position
   771 				; - move player using controller
   772 				; - set sprite positions
   773
   774 263E			handle_player1
   775 263E 20 A5 27		            jsr wipe_p1         ; wipe previous shape player 1
   776
   777 2641 A2 00		            ldx #0              ; player 1
   778 2643 20 70 26		            jsr move_player
   779 				            
   780 2646 20 71 27		            jsr show_p1
   781
   782 2649 A5 94		            lda player1_x
   783 264B 18			            clc
   784 264C 69 20		            adc #left_margin
   785 264E 8D 00 D0		            sta HPOSP0
   786 2651 69 08		            adc #8
   787 2653 8D 01 D0		            sta HPOSP1
   788 2656 60			            rts
   789
   790 				; player 2
   791 				; - wipe shape at previous y-position
   792 				; - move player using controller
   793 				; - set sprite positions
   794
   795 2657			handle_player2
   796 2657 20 BA 27		            jsr wipe_p2         ; wipe previous shape player 2
   797
   798 265A A2 01		            ldx #1              ; player 2
   799 265C 20 70 26		            jsr move_player
   800 				                        
   801 265F 20 8B 27		            jsr show_p2
   802
   803 2662 A5 95		            lda player2_x
   804 2664 18			            clc
   805 2665 69 20		            adc #left_margin
   806 2667 8D 02 D0		            sta HPOSP2
   807 266A 69 08		            adc #8
   808 266C 8D 03 D0		            sta HPOSP3
   809 266F 60			            rts
   810
   811 				; move player 1/2
   812 				; right - clockwise, left = anti-clockwise
   813
   814 				; X = 0, player 1
   815 				; X = 1, player 2
   816
   817 				; Y = driver mode:
   818 				; 0 : stick
   819 				; 1 : paddle
   820 				; 2 : driving
   821 				; 3 : computer
   822 				            
   823 2670			move_player
   824 2670 20 6E 22		            jsr main_driver
   825
   826 2673 B5 9C		            lda p1_angle,x
   827 2675 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   828 2677 49 40		            eor #64                     ; perpendicular to the circle angle
   829 2679 95 90		            sta p1_shape,x
   830
   831 267B B4 9C		            ldy p1_angle,x
   832 267D B9 00 2B		            lda inner_x_tab,y
   833 2680 4A			            lsr
   834 2681 69 20		            adc #inner_x_margin/2
   835 2683 95 94		            sta player1_x,x
   836 2685 B9 00 2C		            lda inner_y_tab,y
   837 2688 4A			            lsr
   838 2689 95 98		            sta player1_y,x
   839
   840 268B B4 90		            ldy p1_shape,x
   841 268D 20 F4 27		            jsr shape_to_ptr
   842
   843 2690 60			            rts
   844
   845 				; Set ball at start position
   846 				; - start angle current player
   847 				; - start position by inner table
   848 				; - collision delay set?
   849
   850 				; Set ball current position to start position
   851 				; input:
   852 				; X = angle of start position
   853 				; output:
   854 				; ball position: (ball_current_x, ball_current_y)
   855 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   856 2691			ball_to_start_position
   857 2691 BD 00 2B		            lda inner_x_tab,x
   858 2694 85 A6		            sta ball_current_x
   859 2696 85 E6		            sta tmp_x1
   860 2698 BD 00 2C		            lda inner_y_tab,x
   861 269B 85 A7		            sta ball_current_y
   862 269D 85 E7		            sta tmp_y1
   863 269F 60			            rts
   864
   865 				; Prepare ball end position
   866 				; - end angle current player
   867 				; - end position by outer table
   868 				; - calculate step size x,y
   869
   870 				; Input:
   871 				; - ball_angle_start
   872 				; - ball speed
   873 				; Output:
   874 				; - ball_andle_end
   875 				; - ball start position (tmp_x1, tmp_y1)
   876 				; - ball end position (tmp_x2, tmp_y2)
   877 				; - step size (step_x, step_y) for ball movement
   878 26A0			prepare_ball_end_position
   879 26A0 A5 AA		            lda ball_angle_start
   880 26A2 49 80		            eor #128        ; other side
   881 26A4 85 AB		            sta ball_angle_end
   882 26A6 AA			            tax
   883 26A7 20 2D 27		            jsr angle_to_end_position
   884 				                        
   885 26AA 20 54 29		            jsr init_current_xy
   886 				            
   887 				; move current a little bit            
   888 26AD 20 C1 29		            jsr move_current_xy
   889 				; ignore end indicator, since we only just started
   890
   891
   892 26B0 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   893 26B2 85 A4		            sta bat_collision_delay
   894 26B4 60			            rts
   895
   896 				; x = angle 0..255
   897 26B5			outer_angle_to_start_position
   898 26B5 BD 00 16		            lda outer_x_256,x
   899 26B8 85 A6		            sta ball_current_x
   900 26BA 85 E6		            sta tmp_x1
   901 26BC BD 00 17		            lda outer_y_256,x
   902 26BF 85 A7		            sta ball_current_y
   903 26C1 85 E7		            sta tmp_y1
   904 26C3 60			            rts
   905
   906 26C4			ball_current_to_start_position
   907 26C4 A5 A6		            lda ball_current_x
   908 26C6 85 E6		            sta tmp_x1
   909 26C8 A5 A7		            lda ball_current_y
   910 26CA 85 E7		            sta tmp_y1
   911 26CC 60			            rts
   912
   913 				; Ball collides with bat
   914 				; - start ball angle = end ball angle
   915 				; - calculate diff between bat and ball end angle
   916 				; - calculate new end angle
   917 				; - Set ball at start position
   918 				; - Prepare ball end position
   919
   920 26CD			bounce_bat_ball
   921 				; set new start of ball
   922 				; @todo check ball angles
   923 				; set new ball start angle (= previous end angle)
   924 26CD A5 AB		            lda ball_angle_end
   925 26CF 85 AA		            sta ball_angle_start
   926 				            
   927 				; alternative?
   928 				            ;ldx ball_angle_start
   929 				            ;jsr ball_to_start_position          
   930 26D1 20 C4 26		            jsr ball_current_to_start_position
   931
   932 				; which player hit the ball?
   933 26D4 A9 01		            lda #1
   934 26D6 85 A2		            sta player_nr_hit
   935 26D8 A5 A0		            lda mp_collision
   936 26DA 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   937 26DC D0 04		            bne p1_hit
   938 26DE A9 02		            lda #2
   939 26E0 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   940 26E2			p1_hit            
   941
   942 				; who's turn is it and who bounced the ball?
   943
   944 26E2 A5 B5		            lda player_turn
   945 26E4 25 A2		            and player_nr_hit
   946 26E6 F0 06		            beq no_switch_turn
   947
   948 26E8 A5 B5		            lda player_turn
   949 26EA 49 03		            eor #3              ; 1 => 2, 2 => 1
   950 26EC 85 B5		            sta player_turn 
   951
   952 26EE			no_switch_turn
   953 26EE 20 64 24		            jsr turn_color_ball
   954 				            
   955 26F1 A6 A2		            ldx player_nr_hit
   956 26F3 CA			            dex                     ; index 0,1 (player = 1,2)
   957 26F4 B5 9C		            lda p1_angle,x
   958
   959 				; Calculate diff between bat angle position and new ball start position
   960 26F6 85 B0		            sta tmp_angle1
   961
   962 26F8 A5 AA		            lda ball_angle_start
   963 26FA 85 B1		            sta tmp_angle2
   964
   965 26FC 20 90 28		            jsr calc_angle_diff
   966
   967 26FF 0A			            asl
   968 2700 0A			            asl
   969 2701 0A			            asl
   970 2702 85 B3		            sta angle_diff_bat
   971
   972 2704 A5 B0		            lda tmp_angle1
   973 2706 18			            clc
   974 2707 65 B2		            adc add_to_angle
   975 2709 49 80		            eor #128            ; other side
   976 270B 85 B0		            sta tmp_angle1
   977 				            
   978 270D A5 B4		            lda tmp_angle_direction
   979 270F D0 0A		            bne diff_clockwise
   980 				; diff counter clockwise
   981 2711 A5 B0		            lda tmp_angle1
   982 2713 18			            clc
   983 2714 65 B3		            adc angle_diff_bat
   984 2716 85 B0		            sta tmp_angle1
   985 2718 4C 22 27		            jmp calc_done            
   986
   987 271B			diff_clockwise
   988 271B A5 B0		            lda tmp_angle1
   989 271D 38			            sec
   990 271E E5 B3		            sbc angle_diff_bat
   991 2720 85 B0		            sta tmp_angle1
   992 				            
   993 				; calculation done            
   994 2722			calc_done
   995 2722 A5 B0		            lda tmp_angle1
   996 2724 85 AB		            sta ball_angle_end
   997 2726 AA			            tax
   998 2727 20 2D 27		            jsr angle_to_end_position
   999 				                        
  1000 272A 4C 54 29		            jmp init_current_xy
  1001
  1002 				; x = angle 0..255
  1003 272D			angle_to_end_position
  1004 272D BD 00 16		            lda outer_x_256,x
  1005 2730 85 E8		            sta tmp_x2
  1006 2732 BD 00 17		            lda outer_y_256,x
  1007 2735 85 E9		            sta tmp_y2
  1008 2737 60			            rts
  1009
  1010 2738			wipe_ball
  1011 2738 A5 A7		            lda ball_current_y
  1012 273A 4A			            lsr
  1013 273B 69 06		            adc #ball_top_margin
  1014 273D AA			            tax                 ; x = real y position on screen
  1015 273E A9 00		            lda #0
  1016 2740 9D 80 11		            sta msl_area,x
  1017 2743 9D 81 11		            sta msl_area+1,x
  1018 2746 9D 82 11		            sta msl_area+2,x
  1019 2749 9D 83 11		            sta msl_area+3,x
  1020 274C 60			            rts
  1021
  1022 274D			show_ball
  1023 274D A5 A7		            lda ball_current_y
  1024 274F 4A			            lsr
  1025 2750 69 06		            adc #ball_top_margin
  1026 2752 AA			            tax                 ; x = real y position on screen
  1027
  1028 2753 A9 02		            lda #%00000010
  1029 2755 9D 80 11		            sta msl_area,x
  1030 2758 9D 83 11		            sta msl_area+3,x
  1031 275B A9 07		            lda #%00000111
  1032 275D 9D 81 11		            sta msl_area+1,x
  1033 2760 9D 82 11		            sta msl_area+2,x
  1034 				            
  1035 2763 A5 A6		            lda ball_current_x
  1036 2765 4A			            lsr
  1037 2766 69 45		            adc #ball_left_margin
  1038 2768 8D 05 D0		            sta HPOSM1
  1039 276B 69 02		            adc #2
  1040 276D 8D 04 D0		            sta HPOSM0
  1041 				                        
  1042 2770 60			            rts
  1043 				            
  1044 2771			show_p1
  1045 2771 A5 98		            lda player1_y
  1046 2773 18			            clc
  1047 2774 69 01		            adc #upper_margin
  1048 2776 AA			            tax
  1049
  1050 2777 A0 00		            ldy #0
  1051 2779			show_shape1
  1052 2779 B1 84		            lda (shape_ptr),y
  1053 277B 9D 00 12		            sta p0_area,x 
  1054 277E C8			            iny
  1055 277F B1 84		            lda (shape_ptr),y
  1056 2781 9D 80 12		            sta p1_area,x
  1057 2784 E8			            inx
  1058 2785 C8			            iny
  1059 2786 C0 20		            cpy #32
  1060 2788 D0 EF		            bne show_shape1
  1061 278A 60			            rts
  1062
  1063 278B			show_p2
  1064 278B A5 99		            lda player2_y
  1065 278D 18			            clc
  1066 278E 69 01		            adc #upper_margin
  1067 2790 AA			            tax
  1068
  1069 2791 A0 00		            ldy #0
  1070 2793			show_shape2
  1071 2793 B1 84		            lda (shape_ptr),y
  1072 2795 9D 00 13		            sta p2_area,x 
  1073 2798 C8			            iny
  1074 2799 B1 84		            lda (shape_ptr),y
  1075 279B 9D 80 13		            sta p3_area,x
  1076 279E E8			            inx
  1077 279F C8			            iny
  1078 27A0 C0 20		            cpy #32
  1079 27A2 D0 EF		            bne show_shape2
  1080 27A4 60			            rts
  1081
  1082 27A5			wipe_p1
  1083 27A5 A5 98		            lda player1_y
  1084 27A7 18			            clc
  1085 27A8 69 01		            adc #upper_margin
  1086 27AA AA			            tax
  1087 				            
  1088 27AB A0 10		            ldy #16
  1089 27AD A9 00		            lda #0
  1090 27AF			wipe_it1            
  1091 27AF 9D 00 12		            sta p0_area,x 
  1092 27B2 9D 80 12		            sta p1_area,x
  1093 27B5 E8			            inx
  1094 27B6 88			            dey
  1095 27B7 D0 F6		            bne wipe_it1 
  1096 27B9 60			            rts
  1097
  1098 27BA			wipe_p2
  1099 27BA A5 99		            lda player2_y
  1100 27BC 18			            clc
  1101 27BD 69 01		            adc #upper_margin
  1102 27BF AA			            tax
  1103 				            
  1104 27C0 A0 10		            ldy #16
  1105 27C2 A9 00		            lda #0
  1106 27C4			wipe_it2            
  1107 27C4 9D 00 13		            sta p2_area,x 
  1108 27C7 9D 80 13		            sta p3_area,x
  1109 27CA E8			            inx
  1110 27CB 88			            dey
  1111 27CC D0 F6		            bne wipe_it2 
  1112 27CE 60			            rts
  1113
  1114 27CF			make_shape_index
  1115 27CF A9 00		            lda #<pm_shapes
  1116 27D1 85 84		            sta shape_ptr
  1117 27D3 A9 50		            lda #>pm_shapes
  1118 27D5 85 85		            sta shape_ptr+1
  1119 				            
  1120 27D7 A2 00		            ldx #0
  1121 27D9			fill_pm_tab
  1122 27D9 A5 84		            lda shape_ptr
  1123 27DB 9D 00 60		            sta pm_shape_lo,x
  1124 27DE A5 85		            lda shape_ptr+1
  1125 27E0 9D 80 60		            sta pm_shape_hi,x
  1126 				            
  1127 27E3 A5 84		            lda shape_ptr
  1128 27E5 18			            clc
  1129 27E6 69 20		            adc #32
  1130 27E8 85 84		            sta shape_ptr
  1131 27EA A5 85		            lda shape_ptr+1
  1132 27EC 69 00		            adc #0
  1133 27EE 85 85		            sta shape_ptr+1
  1134 				            
  1135 27F0 E8			            inx
  1136 27F1 10 E6		            bpl fill_pm_tab
  1137 				            
  1138 27F3 60			            rts
  1139 				            
  1140 				; there are 128 shapes, each 32 bytes
  1141
  1142 				; y = shape index
  1143 27F4			shape_to_ptr
  1144 27F4 B9 00 60		            lda pm_shape_lo,y
  1145 27F7 85 84		            sta shape_ptr
  1146 27F9 B9 80 60		            lda pm_shape_hi,y
  1147 27FC 85 85		            sta shape_ptr+1
  1148
  1149 27FE 60			            rts
  1150
  1151 				; turn 1024 tables into 256 bytes for ball edge lookup
  1152 27FF			make_outer_256
  1153 27FF A0 00		            ldy #0
  1154 2801 A2 00		            ldx #0
  1155 2803			conv_256
  1156 2803 BD 00 30		            lda outer_x_tab,x
  1157 2806 99 00 16		            sta outer_x_256,y
  1158 2809 BD 00 31		            lda outer_x_tab+$100,x
  1159 280C 99 40 16		            sta outer_x_256+64,y
  1160 280F BD 00 32		            lda outer_x_tab+$200,x
  1161 2812 99 80 16		            sta outer_x_256+128,y
  1162 2815 BD 00 33		            lda outer_x_tab+$300,x
  1163 2818 99 C0 16		            sta outer_x_256+192,y
  1164 				            
  1165 281B BD 00 34		            lda outer_y_tab,x
  1166 281E 99 00 17		            sta outer_y_256,y
  1167 2821 BD 00 35		            lda outer_y_tab+$100,x
  1168 2824 99 40 17		            sta outer_y_256+64,y
  1169 2827 BD 00 36		            lda outer_y_tab+$200,x
  1170 282A 99 80 17		            sta outer_y_256+128,y
  1171 282D BD 00 37		            lda outer_y_tab+$300,x
  1172 2830 99 C0 17		            sta outer_y_256+192,y
  1173
  1174 2833 E8			            inx
  1175 2834 E8			            inx
  1176 2835 E8			            inx
  1177 2836 E8			            inx
  1178 2837 C8			            iny
  1179 2838 C0 40		            cpy #64
  1180 283A D0 C7		            bne conv_256            
  1181 283C 60			            rts
  1182
  1183 283D			show_score_p1
  1184 283D AD 14 41		            lda score_p1
  1185 2840 4A			            lsr
  1186 2841 4A			            lsr
  1187 2842 4A			            lsr
  1188 2843 4A			            lsr
  1189 2844 F0 02		            beq do_space1
  1190 2846 09 10		            ora #16
  1191 2848			do_space1
  1192 2848 8D F1 40		            sta score_chars_p1
  1193 284B AD 14 41		            lda score_p1
  1194 284E 29 0F		            and #15
  1195 2850 09 10		            ora #16
  1196 2852 8D F2 40		            sta score_chars_p1+1
  1197 2855 60			            rts
  1198
  1199 2856			show_score_p2
  1200 2856 AD 15 41		            lda score_p2
  1201 2859 4A			            lsr
  1202 285A 4A			            lsr
  1203 285B 4A			            lsr
  1204 285C 4A			            lsr
  1205 285D F0 02		            beq do_space2
  1206 285F 09 10		            ora #16
  1207 2861			do_space2
  1208 2861 8D 11 41		            sta score_chars_p2
  1209 2864 AD 15 41		            lda score_p2
  1210 2867 29 0F		            and #15
  1211 2869 09 10		            ora #16
  1212 286B 8D 12 41		            sta score_chars_p2+1
  1213 286E 60			            rts
  1214 				                        
  1215 286F			reset_score
  1216 286F A9 00		            lda #0
  1217 2871 8D 14 41		            sta score_p1
  1218 2874 8D 15 41		            sta score_p2
  1219 2877 60			            rts            
  1220 				         
  1221 2878			inc_score_p1
  1222 2878 F8			            sed
  1223 2879 AD 14 41		            lda score_p1
  1224 287C 18			            clc
  1225 287D 69 01		            adc #1
  1226 287F 8D 14 41		            sta score_p1    
  1227 2882 D8			            cld
  1228 2883 60			            rts
  1229
  1230 2884			inc_score_p2
  1231 2884 F8			            sed
  1232 2885 AD 15 41		            lda score_p2
  1233 2888 18			            clc
  1234 2889 69 01		            adc #1
  1235 288B 8D 15 41		            sta score_p2
  1236 288E D8			            cld
  1237 288F 60			            rts
  1238
  1239 				; calculate the difference between angle1 and angle2
  1240
  1241 				; input:
  1242 				; tmp_angle1 (0..255)
  1243 				; tmp_angle2 (0..255)
  1244
  1245 				; output:
  1246 				; tmp_angle_diff, A: difference between angle1 and angle2
  1247 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1248
  1249 2890			calc_angle_diff
  1250 2890 A9 00		            lda #0
  1251 2892 85 B2		            sta add_to_angle
  1252 2894 85 B4		            sta tmp_angle_direction
  1253
  1254 				; make sure we can compare angles, otherwise add $40 to angles
  1255 2896 A5 B0		            lda tmp_angle1
  1256 2898 C9 C0		            cmp #$c0
  1257 289A B0 06		            bcs too_large
  1258 289C A5 B1		            lda tmp_angle2
  1259 289E C9 C0		            cmp #$c0
  1260 28A0 90 12		            bcc not_too_large
  1261 28A2			too_large
  1262 28A2 A5 B0		            lda tmp_angle1
  1263 28A4 38			            sec
  1264 28A5 E9 40		            sbc #$40
  1265 28A7 85 B0		            sta tmp_angle1
  1266 				            
  1267 28A9 A5 B1		            lda tmp_angle2
  1268 28AB 38			            sec
  1269 28AC E9 40		            sbc #$40
  1270 28AE 85 B1		            sta tmp_angle2
  1271 				            
  1272 28B0 A9 40		            lda #$40
  1273 28B2 85 B2		            sta add_to_angle
  1274
  1275 28B4			not_too_large
  1276 28B4 A5 B1		            lda tmp_angle2
  1277 28B6 C5 B0		            cmp tmp_angle1
  1278 28B8 90 0A		            bcc angle2_smaller_angle1
  1279 				; ball >= play
  1280 28BA 38			            sec
  1281 28BB E5 B0		            sbc tmp_angle1
  1282 28BD 85 B7		            sta tmp_angle_diff
  1283 				            
  1284 28BF E6 B4		            inc tmp_angle_direction
  1285 28C1 4C CB 28		            jmp diff_calculated
  1286 				                        
  1287 28C4			angle2_smaller_angle1
  1288 28C4 A5 B0		            lda tmp_angle1
  1289 28C6 38			            sec
  1290 28C7 E5 B1		            sbc tmp_angle2
  1291 28C9 85 B7		            sta tmp_angle_diff
  1292
  1293 28CB			diff_calculated
  1294 28CB A5 B7		            lda tmp_angle_diff           
  1295 28CD 60			            rts
  1296
  1297 				; X = angle
  1298 				; lookup magnitude of angle 0 to angle X
  1299 28CE			angle_to_magnitude
  1300 28CE BD 00 3C		            lda magnitudes_lo,x
  1301 28D1 85 B8		            sta magnitude
  1302 28D3 BD 00 3D		            lda magnitudes_hi,x
  1303 28D6 85 B9		            sta magnitude+1
  1304 28D8 60			            rts
  1305
  1306 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1307 28D9			calc_abs_tmp_dx
  1308 28D9 A5 E8		            lda tmp_x2
  1309 28DB 38			            sec
  1310 28DC E5 E6		            sbc tmp_x1
  1311 28DE B0 05		            bcs x2_le
  1312 28E0 49 FF		            eor #255
  1313 28E2 18			            clc
  1314 28E3 69 01		            adc #1
  1315 28E5 85 F2		x2_le       sta tmp_dx
  1316
  1317 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1318 28E7			calc_abs_tmp_dy
  1319 28E7 A5 E9		            lda tmp_y2
  1320 28E9 38			            sec
  1321 28EA E5 E7		            sbc tmp_y1
  1322 28EC B0 05		            bcs y2_le
  1323 28EE 49 FF		            eor #255
  1324 28F0 18			            clc
  1325 28F1 69 01		            adc #1
  1326 28F3 85 F3		y2_le       sta tmp_dy
  1327 28F5 60			            rts
  1328 				            
  1329 28F6			calc_dx_div_magnitude
  1330 28F6 A9 00		            lda #0
  1331 28F8 85 E2		            sta _dividend
  1332 28FA A5 F2		            lda tmp_dx
  1333 28FC 85 E3		            sta _dividend+1
  1334
  1335 28FE A5 B9		            lda magnitude+1
  1336 2900 85 E0		            sta _divisor
  1337 2902 A9 00		            lda #0
  1338 2904 85 E1		            sta _divisor+1
  1339 				            
  1340 2906 20 2E 29		            jsr _div16
  1341
  1342 				; todo multiply result with velocity            
  1343 2909 A5 E2		            lda _result
  1344 290B 85 EE		            sta step_x
  1345 290D A5 E3		            lda _result+1
  1346 290F 85 EF		            sta step_x+1
  1347 				            
  1348 2911 60			            rts
  1349 				            
  1350 2912			calc_dy_div_magnitude
  1351 2912 A9 00		            lda #0
  1352 2914 85 E2		            sta _dividend
  1353 2916 A5 F3		            lda tmp_dy
  1354 2918 85 E3		            sta _dividend+1
  1355 				            
  1356 291A A5 B9		            lda magnitude+1
  1357 291C 85 E0		            sta _divisor
  1358 291E A9 00		            lda #0
  1359 2920 85 E1		            sta _divisor+1
  1360
  1361 2922 20 2E 29		            jsr _div16
  1362 				            
  1363 				; todo multiply result with velocity
  1364 2925 A5 E2		            lda _result
  1365 2927 85 F0		            sta step_y
  1366 2929 A5 E3		            lda _result+1
  1367 292B 85 F1		            sta step_y+1
  1368 				            
  1369 292D 60			            rts
  1370
  1371 				; divide 16bit
  1372 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1373
  1374 				; _result = _dividend / divisor
  1375
  1376 292E A9 00		_div16      lda #0          ;preset remainder to 0
  1377 2930 85 E4		            sta _remainder
  1378 2932 85 E5		            sta _remainder+1
  1379 2934 A2 10		            ldx #16         ;repeat for each bit: ...
  1380
  1381 2936 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1382 2938 26 E3		            rol _dividend+1  
  1383 293A 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1384 293C 26 E5		            rol _remainder+1
  1385 293E A5 E4		            lda _remainder
  1386 2940 38			            sec
  1387 2941 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1388 2943 A8			            tay         ;lb result -> Y, for we may need it later
  1389 2944 A5 E5		            lda _remainder+1
  1390 2946 E5 E1		            sbc _divisor+1
  1391 2948 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1392
  1393 294A 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1394 294C 84 E4		            sty _remainder   
  1395 294E E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1396
  1397 2950 CA			_div_skip   dex
  1398 2951 D0 E3		            bne _div_loop 
  1399 2953 60			            rts
  1400
  1401 				; Calculations for step size
  1402
  1403 				; not optimised for speed or size
  1404 				; step should be set according to the angle
  1405
  1406 				; move in straight line (x1,y1) to (x2,y2)
  1407
  1408 				; 1. set start/end of line
  1409 				; set (tmp_x1, tmp_y1)
  1410 				; set (tmp_x2, tmp_y2)
  1411
  1412 				; 2. init. current_x, current_y
  1413 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1414 				; - calculates step sizes for x,y
  1415 				; - calculated directions for x,y
  1416 				;            jsr init_current_xy
  1417
  1418 				; 3. use current_x, current_y to plot or set a position
  1419 				;            lda current_x+1
  1420 				;            sta x_position
  1421 				;            lda current_y+1
  1422 				;            sta y_position
  1423 				;            jsr plot_pixel
  1424
  1425 				; 4. move current_x, current_y to next position on line
  1426 				; A=0 still moving
  1427 				;           move_current_xy
  1428
  1429 2954			init_current_xy
  1430 2954 A9 7F		            lda #$7f      ; was 128 for half pixel
  1431 2956 85 EA		            sta current_x
  1432 2958 85 EC		            sta current_y
  1433
  1434 295A A5 E6		            lda tmp_x1
  1435 295C 85 EB		            sta current_x+1
  1436 				            
  1437 295E A5 E7		            lda tmp_y1
  1438 2960 85 ED		            sta current_y+1
  1439
  1440 				; dx = abs(tmp_x1 - tmp_x2)
  1441 2962 20 D9 28		            jsr calc_abs_tmp_dx
  1442
  1443 				; dy = abs(tmp_y1 - tmp_y2)
  1444 2965 20 E7 28		            jsr calc_abs_tmp_dy
  1445
  1446 				; set directions
  1447 2968 A5 E6		            lda tmp_x1
  1448 296A C5 E8		            cmp tmp_x2
  1449 296C 90 04		            bcc x1_smaller_x2
  1450 				; x1 >= x2
  1451 296E A9 01		            lda #1
  1452 2970 D0 02		            bne set_dir_x
  1453 2972			x1_smaller_x2
  1454 2972 A9 00		            lda #0
  1455 2974			set_dir_x
  1456 2974 85 FA		            sta dir_x
  1457 				            
  1458 2976 A5 E7		            lda tmp_y1
  1459 2978 C5 E9		            cmp tmp_y2
  1460 297A 90 04		            bcc y1_smaller_y2
  1461 				; y1 >= y2
  1462 297C A9 01		            lda #1
  1463 297E D0 02		            bne set_dir_y
  1464 2980			y1_smaller_y2
  1465 2980 A9 00		            lda #0
  1466 2982			set_dir_y
  1467 2982 85 FB		            sta dir_y
  1468
  1469 				; Calculate diff between start angle and end angle
  1470
  1471 2984 A5 AA		            lda ball_angle_start
  1472 2986 85 B0		            sta tmp_angle1
  1473 2988 A5 AB		            lda ball_angle_end
  1474 298A 85 B1		            sta tmp_angle2
  1475 				            
  1476 298C 20 90 28		            jsr calc_angle_diff
  1477
  1478 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1479 298F A6 B7		            ldx tmp_angle_diff
  1480 2991 20 CE 28		            jsr angle_to_magnitude
  1481 				            
  1482 2994 20 F6 28		            jsr calc_dx_div_magnitude
  1483 2997 20 12 29		            jsr calc_dy_div_magnitude
  1484 				            
  1485 				; Calculate step size by ball speed
  1486 				            
  1487 				; step_x = step_x * speed
  1488 				            
  1489 299A A5 EE		            lda step_x
  1490 299C 85 F6		            sta _multiplicand
  1491 299E A5 EF		            lda step_x+1
  1492 29A0 85 F7		            sta _multiplicand+1
  1493 29A2 A5 AC		            lda ball_speed
  1494 29A4 85 F8		            sta _multiplier
  1495
  1496 29A6 20 38 23		            jsr _multi8
  1497 				;result in .A (low byte, also in .X) and .Y (high byte)
  1498 29A9 85 EE		            sta step_x
  1499 29AB 84 EF		            sty step_x+1
  1500 29AD			skip_step_x_hi
  1501 				            
  1502 				; step_y = step_y * speed
  1503
  1504 29AD A5 F0		            lda step_y
  1505 29AF 85 F6		            sta _multiplicand
  1506 29B1 A5 F1		            lda step_y+1
  1507 29B3 85 F7		            sta _multiplicand+1
  1508 29B5 A5 AC		            lda ball_speed
  1509 29B7 85 F8		            sta _multiplier
  1510
  1511 29B9 20 38 23		            jsr _multi8
  1512 				;result in .A (low byte, also in .X) and .Y (high byte)
  1513 29BC 85 F0		            sta step_y
  1514 29BE 84 F1		            sty step_y+1
  1515 29C0			skip_step_y_hi
  1516
  1517 29C0 60			            rts
  1518
  1519 				; Move ball position 
  1520 				; Add one step, until end reached
  1521 				; Input:
  1522 				; - step size (step_x, step_y)
  1523 				; - current ball position (current_x, current_y)
  1524 				; - end position (tmp_x2, tmp_y2)
  1525 				; Output:
  1526 				; A (0 = still moving, 1 = end reached)
  1527 29C1			move_current_xy
  1528 29C1 A9 00		            lda #0
  1529 29C3 85 FC		            sta line_end_x
  1530 29C5 85 FD		            sta line_end_y
  1531
  1532 				; sets line end indicators here
  1533 29C7 20 E4 29		            jsr move_current_x
  1534 29CA 20 24 2A		            jsr move_current_y
  1535
  1536 29CD A5 FC		            lda line_end_x
  1537 29CF 25 FD		            and line_end_y
  1538 29D1 F0 10		            beq no_end_reached
  1539 				            
  1540 				; set current to (x2,y2)
  1541 29D3 A5 E8		            lda tmp_x2
  1542 29D5 85 EB		            sta current_x+1
  1543 29D7 A5 E9		            lda tmp_y2
  1544 29D9 85 ED		            sta current_y+1
  1545 				            
  1546 29DB A9 00		            lda #0
  1547 29DD 85 EA		            sta current_x
  1548 29DF 85 EC		            sta current_y
  1549 				            
  1550 29E1 A9 01		            lda #1 ; end reached
  1551 				            
  1552 29E3			no_end_reached  ; A = 0
  1553 29E3 60			            rts
  1554
  1555 29E4			move_current_x
  1556 29E4 A5 FA		            lda dir_x
  1557 29E6 D0 18		            bne move_current_left
  1558
  1559 				; move right, add
  1560 29E8 A5 EA		            lda current_x
  1561 29EA 18			            clc
  1562 29EB 65 EE		            adc step_x
  1563 29ED 85 EA		            sta current_x
  1564 29EF A5 EB		            lda current_x+1
  1565 29F1 65 EF		            adc step_x+1
  1566 29F3 85 EB		            sta current_x+1
  1567
  1568 29F5 A5 EB		            lda current_x+1
  1569 29F7 C5 E8		            cmp tmp_x2
  1570 29F9 90 04		            bcc no_line_end
  1571 29FB			exact_end_x
  1572 29FB A9 01		            lda #1
  1573 29FD 85 FC		            sta line_end_x 
  1574 29FF			no_line_end
  1575 29FF 60			            rts
  1576 				            
  1577 2A00			move_current_left
  1578 2A00 A5 EA		            lda current_x
  1579 2A02 38			            sec
  1580 2A03 E5 EE		            sbc step_x
  1581 2A05 90 01		            bcc clear_skip
  1582 2A07 EA			            nop
  1583 2A08			clear_skip
  1584 2A08 85 EA		            sta current_x
  1585 2A0A A5 EB		            lda current_x+1
  1586 2A0C E5 EF		            sbc step_x+1
  1587 2A0E 85 EB		            sta current_x+1
  1588 2A10 90 0B		            bcc below_zero
  1589 				                        
  1590 2A12 A5 E8		            lda tmp_x2
  1591 2A14 C5 EB		            cmp current_x+1
  1592 2A16 90 E7		            bcc no_line_end
  1593 2A18 A9 01		            lda #1
  1594 2A1A 85 FC		            sta line_end_x            
  1595 2A1C 60			            rts
  1596 2A1D			below_zero            
  1597 2A1D A9 01		            lda #1
  1598 2A1F 85 FC		            sta line_end_x
  1599 2A21 85 FD		            sta line_end_y
  1600 2A23 60			            rts
  1601 2A24			move_current_y
  1602 2A24 A5 FB		            lda dir_y
  1603 2A26 D0 18		            bne move_current_up
  1604
  1605 				; move down, add
  1606 2A28 A5 EC		            lda current_y
  1607 2A2A 18			            clc
  1608 2A2B 65 F0		            adc step_y
  1609 2A2D 85 EC		            sta current_y
  1610 2A2F A5 ED		            lda current_y+1
  1611 2A31 65 F1		            adc step_y+1
  1612 2A33 85 ED		            sta current_y+1
  1613 				            
  1614 2A35 A5 ED		            lda current_y+1
  1615 2A37 C5 E9		            cmp tmp_y2
  1616 2A39 90 C4		            bcc no_line_end
  1617 2A3B			exact_end_y
  1618 2A3B A9 01		            lda #1
  1619 2A3D 85 FD		            sta line_end_y
  1620 2A3F 60			            rts
  1621
  1622 2A40			move_current_up
  1623 2A40 A5 EC		            lda current_y
  1624 2A42 38			            sec
  1625 2A43 E5 F0		            sbc step_y
  1626 2A45 85 EC		            sta current_y
  1627 2A47 A5 ED		            lda current_y+1
  1628 2A49 E5 F1		            sbc step_y+1
  1629 2A4B 90 D0		            bcc below_zero
  1630 2A4D 85 ED		            sta current_y+1
  1631 				            
  1632 2A4F A5 E9		            lda tmp_y2
  1633 2A51 C5 ED		            cmp current_y+1
  1634 2A53 90 AA		            bcc no_line_end
  1635 2A55 A9 01		            lda #1
  1636 2A57 85 FD		            sta line_end_y
  1637 2A59 60			            rts                            
  1638 				            
  1639 2A5A			init_sprites
  1640 2A5A A2 00		            ldx #0
  1641 2A5C 8A			            txa
  1642 2A5D			set_p
  1643 2A5D 9D 00 12		            sta p0_area,x
  1644 2A60 9D 80 12		            sta p1_area,x
  1645 2A63 9D 00 13		            sta p2_area,x
  1646 2A66 9D 80 13		            sta p3_area,x
  1647 2A69 E8			            inx
  1648 2A6A 10 F1		            bpl set_p               
  1649
  1650 2A6C A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1651 2A6E 8D 6F 02		            sta GPRIOR
  1652 				    
  1653 2A71 A9 10		            lda #>pm_area
  1654 2A73 8D 07 D4		            sta PMBASE
  1655 				    
  1656 2A76 A9 03		            lda #3          ; P/M both on
  1657 2A78 8D 1D D0		            sta GRACTL
  1658 				    
  1659 2A7B A9 90		            lda #$90
  1660 2A7D 8D 02 D0		            sta HPOSP2
  1661 2A80 A9 A0		            lda #$A0
  1662 2A82 8D 03 D0		            sta HPOSP3  
  1663 2A85 60			            rts            
  1664
  1665 2A86			init_colors
  1666 2A86 A9 5A		            lda #BASE_COLOR_P1+10
  1667 2A88 8D C0 02		            sta PCOLR0
  1668 2A8B 8D C1 02		            sta PCOLR1
  1669
  1670 2A8E A9 BA		            lda #BASE_COLOR_P2+10
  1671 2A90 8D C2 02		            sta PCOLR2
  1672 2A93 8D C3 02		            sta PCOLR3
  1673 				            
  1674 2A96 A9 00		            lda #0
  1675 2A98 8D C6 02		            sta COLOR2
  1676 2A9B A9 08		            lda #8
  1677 2A9D 8D C5 02		            sta COLOR1
  1678 2AA0 60			            rts
  1679
  1680 2AA1			previous_consol
  1681 2AA1 00			            dta 0
  1682
  1683 2AA2			current_level_index
  1684 2AA2 00			            dta 0
  1685 = 0004			NR_OF_LEVELS = 4
  1686 = 0000			INIT_LEVEL_INDEX = 0
  1687 2AA3			level_speeds
  1688 2AA3 02 04 06 08		            dta 2,4,6,8
  1689 				            
  1690 				; X = level (0..NR_OF_LEVELS)
  1691 2AA7			set_level_ball_speed
  1692 2AA7 BD A3 2A		            lda level_speeds,x
  1693 2AAA 85 AC		            sta ball_speed
  1694 2AAC 8A			            txa
  1695 2AAD 18			            clc
  1696 2AAE 69 01		            adc #1
  1697 2AB0 09 10		            ora #16
  1698 2AB2 8D 48 42		            sta level_char
  1699 2AB5 60			            rts
  1700 				            
  1701 2AB6			increase_level
  1702 2AB6 EE A2 2A		            inc current_level_index
  1703 2AB9 AD A2 2A		            lda current_level_index
  1704 2ABC C9 04		            cmp #NR_OF_LEVELS
  1705 2ABE D0 05		            bne ok_level
  1706 2AC0 A9 00		            lda #INIT_LEVEL_INDEX
  1707 2AC2 8D A2 2A		            sta current_level_index
  1708 2AC5			ok_level           
  1709 2AC5 60			            rts
  1710 				            
  1711 2AC6			            .align $100
  1712 2B00			inner_x_tab
  1713 = 2C00			inner_y_tab = *+$100
  1714 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1715 				      
  1716 2D00			            .align $400            
  1717 				; outer circle 1024 plot points on 360 degrees
  1718 3000			outer_x_tab
  1719 = 3400			outer_y_tab = *+1024
  1720 3000-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1721
  1722 3800			            .align $400
  1723 3800			rotor_font
  1724 3800 00 00 00 00 00 00 +             ins 'font\rotor.fnt'
  1725 				           
  1726 3C00			            .align $400
  1727 				; table of magnitudes (length) between angle 0 and 0..255
  1728 				; fixed point 8.8 : hi.lo
  1729 3C00			magnitudes_lo
  1730 = 3D00			magnitudes_hi = *+256
  1731 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1732
  1733 3E00			            .align $400
  1734 4000			display_list
  1735 4000-41CC> 42		            dta $42
  1736 4001 EC 40		            dta a(score_line)
  1737
  1738 				; 102 x 40 = 4080 bytes            
  1739 4003 4F			            dta $4f
  1740 4004			dl_screen_ptr1
  1741 4004 00 70		            dta a(screen_mem1)
  1742 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1743 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1744 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1745 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1746
  1747 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1748 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1749 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1750 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1751
  1752 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1753 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1754 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1755 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1756
  1757 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1758
  1759 				; 102 x 40 = 4080 bytes
  1760 406B 4F			            dta $4f
  1761 406C			dl_screen_ptr2
  1762 406C 00 80		            dta a(screen_mem2)
  1763 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1764 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1765 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1766 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1767
  1768 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1769 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1770 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1771 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1772
  1773 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1774 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1775 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1776 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1777
  1778 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1779
  1780 				; 20 x 40 = 800
  1781 40D3 4F			            dta $4f
  1782 40D4 00 90		            dta a(screen_mem3)       
  1783 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1784 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1785 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1786 				            
  1787 40E9 41			            dta $41
  1788 40EA 00 40		            dta a(display_list)
  1789
  1790 40EC			score_line  
  1791 40EC 00 2F 2E 25 00	            dta d' ONE '
  1792 40F1			score_chars_p1
  1793 40F1 0D 0D 00		            dta d'-- '
  1794
  1795 40F4 00 00 00 00 00 00 +             dta d'          '
  1796 40FE 00 00 00 00 00 00 +             dta d'          '
  1797
  1798 4108 00 00 00 00 00 34 +             dta d'     TWO '
  1799 4111			score_chars_p2
  1800 4111 0D 0D 00		            dta d'-- '
  1801
  1802 4114 00			score_p1    dta 0
  1803 4115 00			score_p2    dta 0
  1804
  1805 				            ;.align $400
  1806 				            
  1807 4116			menu_dl
  1808 4116 42			            dta $42
  1809 4117 EC 40		            dta a(score_line)
  1810 				            
  1811 4119 4F			            dta $4f
  1812 411A 00 70		            dta a(screen_mem1)
  1813 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1814 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1815 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1816 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1817
  1818 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1819 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1820 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1821 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1822
  1823 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1824 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1825
  1826 				; 64 scanlines
  1827 416B 30			            dta $30
  1828 416C 47			            dta $47
  1829 416D 00 42		            dta a(menu_screen)
  1830 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1831
  1832 				; 60 lines
  1833 4176 4F			            dta $4f
  1834 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1835 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1836 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1837 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1838 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1839
  1840 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1841 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1842 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1843 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1844
  1845 				; 20 lines            
  1846 41B4 4F			            dta $4f
  1847 41B5 00 90		            dta a(screen_mem3)
  1848 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1849 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1850 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1851 				           
  1852 41CA 41			            dta $41
  1853 41CB 16 41		            dta a(menu_dl)
  1854
  1855 41CD			            .align $100
  1856 4200			menu_screen
  1857 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1858
  1859 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1860 421E			driver_screen
  1861 421E 00 00 00 00 00 00 +             dta d'            '
  1862 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1863 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1864 4248			level_char            
  1865 4248 11 00 00 00 00 00 +             dta d'1       '
  1866 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1867 4278			stick_text
  1868 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1869 4280			paddle_text
  1870 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1871 4288			driving_text
  1872 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1873 4290			computer_text
  1874 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1875
  1876 4298			driver_text_lo
  1877 4298 78			            dta <stick_text
  1878 4299 80			            dta <paddle_text
  1879 429A 88			            dta <driving_text
  1880 429B 90			            dta <computer_text
  1881 				            
  1882 429C			driver_text_hi
  1883 429C 42			            dta >stick_text
  1884 429D 42			            dta >paddle_text
  1885 429E 42			            dta >driving_text
  1886 429F 42			            dta >computer_text
  1887
  1888 42A0			            .align $1000
  1889
  1890 				; 128 x 32 bytes shapes            
  1891 5000			pm_shapes
  1892 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1893
  1894 = 6000			pm_shape_lo .ds 128
  1895 = 6080			pm_shape_hi .ds 128
  1896
  1897 6100			            .align $1000
  1898 = 7000			screen_mem1 = * ; $9000     ; 4K
  1899 				;            org screen_mem1
  1900 7000-7FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1901
  1902 7FF0			            .align $1000
  1903 = 8000			screen_mem2 = * ; $a000     ; 4K
  1904 				;            org screen_mem2
  1905 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1906
  1907 8FF0			            .align $1000
  1908 = 9000			screen_mem3 = * ; $b000     ; 1K
  1909 				;            org screen_mem3
  1910 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1911
  1912 9320			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 9320			    org $c0
    29
    30 00C0			zp
    31 = 00C0			chn_copy    .ds     9
    32 = 00C9			chn_pos     .ds     9
    33 = 00D2			bptr        .ds     2
    34 = 00D4			cur_pos     .ds     1
    35 = 00D5			chn_bits    .ds     1
    36 00D6-00D6> 01		bit_data    .byte   1
    37
    38 = 00D7			newsong     .ds     1       ; IVO
    39
    40 = 00D8			stereo_pokey    .ds     1
    41
    42 = D200			POKEY = $D200
    43
    44 00D9			    org $9800
    45 9800			buffers
    46 = 9800			    .ds 256 * 9
    47
    48 A100			intro_data
    49 A100-B379> 01 01 A1 34 +         ins     'intro.lz16'
    50 A3D8			intro_end
    51
    52 A3D8			loop_data
    53 A3D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    54 B1D9			loop_end
    55
    56 B1D9			.proc get_byte
    57 B1D9 AD 34 12		    lda $1234
    58 B1DC EE DA B1		    inc song_ptr
    59 B1DF D0 03		    bne skip
    60 B1E1 EE DB B1		    inc song_ptr+1
    61 B1E4			skip
    62 B1E4 60			    rts
    63 				.endp
    64 = B1DA			song_ptr = get_byte + 1
    65
    66 B1E5			start
    67
    68 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    69 				; Song Initialization - this runs in the first tick:
    70 				;
    71 B1E5			.proc play_first_frame
    72
    73 B1E5 20 D9 B1		    jsr get_byte                    ; IVO START move init here
    74 B1E8 8D 24 B2		    sta play_frame.init_chn_bits
    75 B1EB A9 01		    lda #1                          ; IVO set to 1 at init(!)
    76 B1ED 85 D6		    sta bit_data
    77 B1EF A9 98		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    78 B1F1 8D 04 B2		    sta cbuf+2                      ; IVO END
    79
    80 				    ; Init all channels:
    81 B1F4 A2 08		    ldx #8
    82 B1F6 A0 00		    ldy #0
    83 B1F8 84 D7		    sty newsong                     ; IVO signal first frame is played
    84 B1FA			clear
    85 				    ; Read just init value and store into buffer and POKEY
    86 B1FA 20 D9 B1		    jsr get_byte
    87 B1FD 9D 71 B3		    sta SHADOW, x
    88 B200 94 C0		    sty chn_copy, x
    89 B202			cbuf
    90 B202 8D FF 98		    sta buffers + 255
    91 B205 EE 04 B2		    inc cbuf + 2
    92 B208 CA			    dex
    93 B209 10 EF		    bpl clear
    94
    95 				    ; Initialize buffer pointer:
    96 B20B 84 D2		    sty bptr
    97 B20D 84 D4		    sty cur_pos
    98 B20F 60			    rts                     ; IVO turn into subroutine
    99 				.endp
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; Wait for next frame
   103 				;
   104 B210			.proc wait_frame
   105
   106 B210 A5 14		    lda 20
   107 B212			delay
   108 B212 C5 14		    cmp 20
   109 B214 F0 FC		    beq delay
   110 B216 60			    rts                     ; IVO turn into subroutine
   111 				.endp
   112
   113 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   114 				; Play one frame of the song
   115 				;
   116 B217			.proc play_frame
   117 B217 A5 D7		    lda newsong
   118 B219 F0 02		    beq continue
   119 B21B D0 C8		    bne play_first_frame
   120
   121 B21D			continue
   122 B21D A4 D4		    ldy cur_pos                 ; IVO
   123
   124 B21F A9 98		    lda #>buffers
   125 B221 85 D3		    sta bptr+1
   126
   127 = B224			init_chn_bits=*+1
   128 B223 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   129 B225 85 D5		    sta chn_bits
   130 B227 A2 08		    ldx #8
   131
   132 				    ; Loop through all "channels", one for each POKEY register
   133 B229			chn_loop:
   134 B229 46 D5		    lsr chn_bits
   135 B22B B0 29		    bcs skip_chn       ; C=1 : skip this channel
   136
   137 B22D B5 C0		    lda chn_copy, x    ; Get status of this stream
   138 B22F D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   139
   140 				    ; We are decoding a new match/literal
   141 B231 46 D6		    lsr bit_data       ; Get next bit
   142 B233 D0 06		    bne got_bit
   143 B235 20 D9 B1		    jsr get_byte       ; Not enough bits, refill!
   144 B238 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   145 B239 85 D6		    sta bit_data       ;
   146 B23B			got_bit:
   147 B23B 20 D9 B1		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   148 B23E B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   149
   150 B240 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   151
   152 B242 20 D9 B1		    jsr get_byte
   153 B245 95 C0		    sta chn_copy, x    ; Store in "copy length"
   154
   155 				                        ; And start copying first byte
   156 B247			do_copy_byte:
   157 B247 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   158 B249 F6 C9		    inc chn_pos, x
   159 B24B B4 C9		    ldy chn_pos, x
   160
   161 				    ; Now, read old data, jump to data store
   162 B24D B1 D2		    lda (bptr), y
   163
   164 B24F			store:
   165 B24F A4 D4		    ldy cur_pos
   166 B251 9D 71 B3		    sta SHADOW, x        ; Store to output and buffer
   167 B254 91 D2		    sta (bptr), y
   168
   169 B256			skip_chn:
   170 				    ; Increment channel buffer pointer
   171 B256 E6 D3		    inc bptr+1
   172
   173 B258 CA			    dex
   174 B259 10 CE		    bpl chn_loop        ; Next channel
   175
   176 B25B E6 D4		    inc cur_pos
   177 B25D 60			    rts                 ; IVO once per frame
   178 				.endp
   179
   180 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181 				; Check for ending of song and jump to the next frame
   182 				;
   183 B25E			.proc check_end_song
   184 B25E AD DB B1		    lda song_ptr + 1
   185 = B262			song_end_high=*+1
   186 B261 C9 00		    cmp #>0
   187 B263 D0 09		    bne not_equal           ; IVO turn into subroutine
   188 B265 AD DA B1		    lda song_ptr
   189 = B269			song_end_low=*+1
   190 B268 C9 00		    cmp #<0
   191 B26A D0 02		    bne not_equal           ; IVO turn intro subroutine
   192
   193 B26C 38			    sec                     ; IVO....
   194 B26D 60			    rts
   195 B26E			not_equal
   196 B26E 18			    clc
   197 B26F 60			    rts
   198 				.endp
   199
   200 				; IVO everything below
   201
   202 B270			.proc music_init
   203 B270 20 12 B3		    jsr detect_2nd_pokey
   204 B273 20 4B B3		    jsr clear_echo
   205
   206 B276 A9 8C 8D D1 B2 A9 +     mwa #normal_volume adjust_volume.volume
   207 				;    mwa #half_volume adjust_volume.volume
   208 				;    mwa #quarter_volume adjust_volume.volume
   209
   210 B280 A9 D8		    lda #<intro_end
   211 B282 8D 69 B2		    sta check_end_song.song_end_low
   212 B285 A9 A3		    lda #>intro_end
   213 B287 8D 62 B2		    sta check_end_song.song_end_high
   214 B28A A9 00		    lda #<(intro_data)
   215 B28C 8D DA B1		    sta song_ptr
   216 B28F A9 A1		    lda #>(intro_data)
   217 B291 8D DB B1		    sta song_ptr+1
   218 B294 A9 01		    lda #1
   219 B296 85 D7		    sta newsong
   220 B298 60			    rts
   221 				.endp
   222
   223 B299			.proc play_song
   224 B299			playloop
   225 B299 20 17 B2		    jsr play_frame      ; generates tick two and beyond
   226 B29C 20 C1 B2		    jsr adjust_volume
   227
   228 B29F 20 5E B2		    jsr check_end_song
   229 B2A2 90 03		    bcc no_end_song
   230 B2A4 20 A8 B2		    jsr restart_music
   231 B2A7			no_end_song
   232 B2A7 60			    rts
   233 				.endp
   234
   235 B2A8			.proc restart_music
   236 B2A8 A9 D9		    lda #<loop_end
   237 B2AA 8D 69 B2		    sta check_end_song.song_end_low
   238 B2AD A9 B1		    lda #>loop_end
   239 B2AF 8D 62 B2		    sta check_end_song.song_end_high
   240 B2B2 A9 D8		    lda #<(loop_data)
   241 B2B4 8D DA B1		    sta song_ptr
   242 B2B7 A9 A3		    lda #>(loop_data)
   243 B2B9 8D DB B1		    sta song_ptr+1
   244 B2BC A9 01		    lda #1
   245 B2BE 85 D7		    sta newsong
   246 B2C0 60			    rts
   247 				.endp
   248
   249 B2C1			.proc adjust_volume
   250 B2C1 A0 06		    ldy #6
   251 B2C3			adjust
   252 B2C3 B9 72 B3		    lda SHADOW+1,y
   253 B2C6 AA			    tax
   254 B2C7 29 F0		    and #$f0
   255 B2C9 99 72 B3		    sta SHADOW+1,y
   256 B2CC 8A			    txa
   257 B2CD 29 0F		    and #$0f
   258 B2CF AA			    tax
   259 = B2D1			volume=*+1
   260 B2D0 BD 34 12		    lda $1234,x
   261 B2D3 19 72 B3		    ora SHADOW+1,y
   262 B2D6 99 72 B3		    sta SHADOW+1,y
   263 B2D9 88			    dey
   264 B2DA 88			    dey
   265 B2DB 10 E6		    bpl adjust
   266 				    
   267 B2DD 60			    rts
   268 				.endp
   269
   270 B2DE			.proc copy_shadow
   271 B2DE A2 08		    ldx #8
   272 B2E0			copy
   273 B2E0 BD 71 B3		    lda SHADOW,x
   274 B2E3 9D 00 D2		    sta POKEY,x
   275 B2E6 CA			    dex
   276 B2E7 10 F7		    bpl copy
   277
   278 B2E9 A5 D8		    lda stereo_pokey
   279 B2EB F0 0E		    beq end_copy
   280
   281 B2ED A2 08		    ldx #8
   282 B2EF			copy2
   283 B2EF BD 83 B3		    lda ECHO,x
   284 B2F2 9D 10 D2		    sta POKEY+$10,x
   285 B2F5 CA			    dex
   286 B2F6 10 F7		    bpl copy2
   287
   288 B2F8 20 56 B3		    jsr shift_echo
   289
   290 B2FB			end_copy
   291 B2FB 60			    rts
   292 				.endp
   293
   294 B2FC			.proc music_normal_volume
   295 B2FC A9 8C 8D D1 B2 A9 +     mwa #normal_volume adjust_volume.volume
   296 B306 60			    rts
   297 				.endp
   298
   299 B307			.proc music_low_volume
   300 B307 A9 AC 8D D1 B2 A9 +     mwa #quarter_volume adjust_volume.volume
   301 B311 60			    rts
   302 				.endp
   303
   304 B312			.proc detect_2nd_pokey
   305 B312 20 10 B2		    jsr wait_frame
   306
   307 B315 A9 00 8D 32 02	    mva #0 SSKCTL
   308 B31A A9 00 8D 0F D2	    mva #0 SKCTL
   309 B31F A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   310
   311 B324 20 10 B2		    jsr wait_frame
   312
   313 				    ; Restart SKCTL. This starts all the poly counters
   314
   315 B327 A9 03 8D 32 02	    mva #3 SSKCTL
   316 B32C A9 03 8D 0F D2	    mva #3 SKCTL
   317
   318 B331 20 10 B2		    jsr wait_frame
   319
   320 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   321 				    ; Its RANDOM should not change.
   322
   323 B334 AD 1A D2		    lda RANDOM+$10
   324 B337 CD 1A D2		    cmp RANDOM+$10
   325 B33A F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   326
   327 B33C			detected_mono
   328 B33C A9 00 85 D8		    mva #0 stereo_pokey
   329 B340 60			    rts
   330
   331 B341			detected_stereo
   332 B341 A9 01 85 D8		    mva #1 stereo_pokey
   333 B345 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   334 B34A 60			    rts
   335 				.endp
   336
   337 B34B			.proc clear_echo
   338 B34B A0 11		    ldy #(endecho-echobuffer)-1
   339 B34D			clear_echo_loop
   340 B34D A9 00 99 7A B3	    mva #0 echobuffer,y
   341 B352 88 10 F8		    dey:bpl clear_echo_loop
   342 B355 60			    rts
   343 				.endp
   344
   345 B356			.proc shift_echo
   346 B356 A0 11		    ldy #(ECHO-echobuffer)-1+9
   347 B358			shift_loop
   348 B358 B9 71 B3 99 7A B3	    mva SHADOW,y SHADOW+9,y
   349 B35E 88 10 F7		    dey:bpl shift_loop
   350 B361 60			    rts
   351 				.endp
   352
   353 B362			.proc music_off
   354 B362 A9 00		    lda #0
   355 B364 8D 72 B3		    sta shadow+1
   356 B367 8D 74 B3		    sta shadow+3
   357 B36A 8D 76 B3		    sta shadow+5
   358 B36D 8D 78 B3		    sta shadow+7
   359 B370 60			    rts
   360 				.endp
   361
   362 B371			SHADOW              ; shadow pokey
   363 B371 00 00 00 00 00 00 + :9 .byte 0
   364
   365 				                    ; fake stereo effect:
   366 				                    ; 0*9 = small
   367 				                    ; 1*9 = medium
   368 				                    ; 2*9 = big
   369 				                    ; >3 too big imho
   370
   371 B37A			echobuffer
   372 = B37A			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   373
   374 B383			ECHO
   375 = B383			    .ds 9
   376 B38C			endecho
   377
   378 B38C			normal_volume
   379 B38C-B3BD> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   380 B39C			half_volume
   381 B39C 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   382 B3AC			quarter_volume
   383 B3AC 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
  1913
  1914 02E0-02E1> DC 22		            run main
