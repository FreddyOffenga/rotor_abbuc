mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-16
     4 				; Version 1.0.0
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players red and blue move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - add music by IvoP
    17 				; - add sound when ball hits edge
    18
    19 				; Optional for a later version:
    20 				; - add computer player(s)
    21 				; - add support for driving controllers
    22 				; - break part of outer circle when ball hits
    23
    24 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    25
    26 				; must be in decimal format, so $11 is 11
    27 = 0011			MAX_SCORE   = $11
    28
    29 = 1000			pm_area     = $1000
    30 = 1180			msl_area    = pm_area+$180
    31 = 1200			p0_area     = pm_area+$200
    32 = 1280			p1_area     = pm_area+$280
    33 = 1300			p2_area     = pm_area+$300
    34 = 1380			p3_area     = pm_area+$380
    35
    36 				; $1400 .. $1500 is overwritten, bug?
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1600			outer_x_256     = $1600
    40 = 1700			outer_y_256     = $1700
    41
    42 = 1800			screen_y_lo     = $1800
    43 = 1900			screen_y_hi     = $1900
    44
    45 = 0140			WIDTH           = 320
    46 = 00C0			HEIGHT          = 192
    47
    48 = 0028			SCREEN_WIDTH    = 40
    49
    50 = 0030			outer_x_margin  = 48 ;47-32
    51 = 0040			inner_x_margin  = 64
    52
    53 = 00A0			circle_center_x = WIDTH/2
    54 = 0060			circle_center_y = HEIGHT/2
    55
    56 = 0006			ball_top_margin     = 6
    57 = 0045			ball_left_margin    = 64+5
    58
    59 				; pm upper margin
    60 = 0001			upper_margin    = 1
    61 = 0020			left_margin     = 32
    62
    63 = 0084			shape_ptr       = $84
    64 = 0086			tmp_screen      = $86
    65
    66 = 008C			mode_menu       = $8c
    67
    68 				; player vars must be in sequence for zp,x indexing
    69
    70 = 0090			p1_shape        = $90
    71 = 0091			p2_shape        = $91
    72
    73 = 0094			player1_x       = $94
    74 = 0095			player2_x       = $95
    75
    76 = 0098			player1_y       = $98
    77 = 0099			player2_y       = $99
    78
    79 = 009C			p1_angle        = $9c
    80 = 009D			p2_angle        = $9d
    81
    82 = 00A0			mp_collision    = $a0
    83 = 00A1			in_collision    = $a1
    84 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    85 = 00A3			edge_delay      = $a3
    86 = 00A4			bat_collision_delay = $a4
    87
    88 				; ball vars
    89 = 00A6			ball_current_x      = $a6
    90 = 00A7			ball_current_y      = $a7
    91 = 00AA			ball_angle_start    = $aa
    92 = 00AB			ball_angle_end      = $ab
    93 = 00AC			ball_speed          = $ac
    94
    95 = 00B0			tmp_angle1          = $b0
    96 = 00B1			tmp_angle2          = $b1
    97 = 00B2			add_to_angle        = $b2
    98 = 00B3			angle_diff_bat      = $b3
    99 = 00B4			tmp_angle_direction = $b4
   100 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   101 = 00B6			game_restart        = $b6
   102 = 00B7			tmp_angle_diff      = $b7
   103 = 00B8			magnitude           = $b8       ; word
   104
   105 				; $c0 - $cf used for drivers
   106
   107 = 00E0			_divisor    = $e0   ; word
   108 = 00E2			_dividend   = $e2   ; word
   109 = 00E4			_remainder  = $e4   ; word
   110 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   111
   112 = 00E6			tmp_x1      = $e6   ; byte
   113 = 00E7			tmp_y1      = $e7   ; byte
   114 = 00E8			tmp_x2      = $e8   ; byte
   115 = 00E9			tmp_y2      = $e9   ; byte
   116
   117 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   118 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   119
   120 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   121 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   122
   123 = 00F2			tmp_dx      = $f2  ; byte
   124 = 00F3			tmp_dy      = $f3  ; byte
   125
   126 = 00F6			_multiplicand   = $f6   ; word
   127 = 00F8			_multiplier     = $f8   ; byte
   128
   129 				; direction:
   130 				; 0 : x1<x2 or y1<y2 = add
   131 				; 1 ; x1>=y2 or y1>=y2 = subtract
   132
   133 = 00FA			dir_x       = $fa  ; byte
   134 = 00FB			dir_y       = $fb  ; byte
   135
   136 = 00FC			line_end_x  = $fc  ; byte
   137 = 00FD			line_end_y  = $fd  ; byte
   138
   139 				            org $2000
   140
   141 				            icl 'lib/drivers.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 				; $c0 - $cf used for drivers
     5 = 00C0			driver_tmp      = $c0   ; and $c1
     6 = 00C2			driver_mode     = $c2
     7
     8 = 00E5			paddle_vals = 229
     9 = 011F			paddle_add  = 287       ; 65536 / 229
    10
    11 				            .align $100
    12 				paddle_to_256
    13 = 2000			            .ds $100
    14
    15 				; paddle initial value
    16 				prev_paddle_value
    17 = 2100			            .ds 1
    18
    19 				driver_init
    20 FFFF> 2101-2953> A9 00	            lda #0  ; stick
    21 2103 85 C2		            sta driver_mode
    22
    23 2105 AD 70 02		            lda PADDL0
    24 2108 8D 00 21		            sta prev_paddle_value
    25
    26 210B A9 00		            lda #0
    27 210D 85 9C		            sta p1_angle
    28 210F A9 80		            lda #128
    29 2111 85 9D		            sta p2_angle
    30
    31 				; init paddle table
    32
    33 2113 A9 00		            lda #0
    34 2115 85 C0		            sta driver_tmp
    35 2117 85 C1		            sta driver_tmp+1
    36 				            
    37 2119 A2 00		            ldx #0
    38 211B			store_pv
    39 211B A5 C1		            lda driver_tmp+1
    40 211D 9D 00 20		            sta paddle_to_256,x
    41 				            
    42 2120 A5 C0		            lda driver_tmp
    43 2122 18			            clc
    44 2123 69 1F		            adc #<paddle_add
    45 2125 85 C0		            sta driver_tmp
    46 2127 A5 C1		            lda driver_tmp+1
    47 2129 69 01		            adc #>paddle_add
    48 212B 85 C1		            sta driver_tmp+1
    49 212D E8			            inx
    50 212E E0 E5		            cpx #paddle_vals
    51 2130 D0 E9		            bne store_pv
    52 2132 60			            rts
    53
    54 				; stick detect by using left/right
    55 				; paddle by connecting/rotate
    56 				; driving controller by rotate
    57
    58 				; return A = driver mode
    59 				; 0 = stick detected
    60 				; 1 = paddle detected
    61 				; 2 = driving detected
    62
    63 2133			driver_detect
    64 2133 AD 70 02		            lda PADDL0
    65 2136 C9 E4		            cmp #228
    66 2138 D0 07		            bne paddle_detect
    67 213A AD 71 02		            lda PADDL1
    68 213D C9 E4		            cmp #228
    69 213F F0 05		            beq no_paddle_detect
    70 2141			paddle_detect
    71 2141 A9 01		            lda #1
    72 2143 85 C2		            sta driver_mode
    73 2145 60			            rts
    74
    75 2146			no_paddle_detect
    76 2146 AD 78 02		            lda STICK0
    77 2149 C9 0C		            cmp #12
    78 214B D0 05		            bne no_driving_detect
    79 214D A9 02		            lda #2
    80 214F 85 C2		            sta driver_mode
    81 2151 60			            rts
    82
    83 2152			no_driving_detect
    84 2152 C9 07		            cmp #7      ; paddle button also gives this
    85 2154 F0 04		            beq stick_detect    
    86 2156 C9 0B		            cmp #11     ; paddle button also gives this
    87 2158 D0 05		            bne no_stick_detect
    88 215A			stick_detect
    89 215A A9 00		            lda #0
    90 215C 85 C2		            sta driver_mode
    91 215E 60			            rts
    92
    93 215F			no_stick_detect
    94 				; default is the last value
    95 215F A5 C2		            lda driver_mode
    96 2161 60			            rts
    97
    98 				; move player 1/2
    99 				; right - clockwise, left = anti-clockwise
   100
   101 				; X = 0, player 1
   102 				; X = 1, player 2
   103
   104 				; A = driver mode:
   105 				; 0 : stick
   106 				; 1 : paddle
   107 				; 2 : driving
   108 				; 3 : computer
   109
   110 2162			main_driver            
   111 2162 A4 C2		            ldy driver_mode
   112 2164 B9 73 21		            lda driver_lo,y
   113 2167 8D 71 21		            sta driver_ptr
   114 216A B9 77 21		            lda driver_hi,y
   115 216D 8D 72 21		            sta driver_ptr+1
   116
   117 = 2171			driver_ptr = *+1
   118 2170 4C FF FF		            jmp $ffff  
   119
   120 2173			driver_lo
   121 2173 7B			            dta <driver_stick
   122 2174 BF			            dta <driver_paddle
   123 2175 7B			            dta <driver_stick
   124 2176 7B			            dta <driver_stick
   125
   126 2177			driver_hi
   127 2177 21			            dta >driver_stick
   128 2178 21			            dta >driver_paddle
   129 2179 21			            dta >driver_stick
   130 217A 21			            dta >driver_stick
   131
   132 				; joystick driver
   133
   134 217B			driver_stick
   135 217B BD 78 02		            lda STICK0,x
   136 217E C9 0F		            cmp #15
   137 2180 F0 21		            beq move_done
   138 2182 C9 0B		            cmp #11
   139 2184 D0 0E		            bne no_left
   140
   141 2186 D6 9C		            dec p1_angle,x
   142 				            ;dec p1_angle,x
   143 2188 BD 84 02		            lda STRIG0,x
   144 218B D0 04		            bne no_fast
   145 218D D6 9C		            dec p1_angle,x
   146 218F D6 9C		            dec p1_angle,x
   147 2191			no_fast
   148 				            
   149 2191 4C A3 21		            jmp move_done
   150 2194 C9 07		no_left     cmp #7
   151 2196 D0 0B		            bne move_done
   152
   153 2198 F6 9C		            inc p1_angle,x
   154 				            ;inc p1_angle,x
   155 219A BD 84 02		            lda STRIG0,x
   156 219D D0 04		            bne no_fast_right
   157 219F F6 9C		            inc p1_angle,x
   158 21A1 F6 9C		            inc p1_angle,x
   159 21A3			no_fast_right
   160 21A3			move_done
   161 21A3 60			            rts
   162
   163 				; X=port number to check (paddle uses only port 1)
   164 				; check fire button (paddle uses left/right stick as fire button)
   165 				; A=0 not pressed, 1=pressed
   166
   167 21A4			is_fire_button
   168 21A4 A5 C2		            lda driver_mode
   169 21A6 C9 01		            cmp #1
   170 21A8 F0 04		            beq check_paddle_fire
   171 				            
   172 21AA BD 84 02		            lda STRIG0,x
   173 21AD 60			            rts
   174 21AE			check_paddle_fire
   175
   176 21AE AD 78 02		            lda STICK0
   177 21B1 C9 07		            cmp #7
   178 21B3 F0 07		            beq paddle_fire
   179 21B5 C9 0B		            cmp #11
   180 21B7 F0 03		            beq paddle_fire
   181 21B9 A9 00		            lda #0
   182 21BB 60			            rts
   183 21BC			paddle_fire
   184 21BC A9 01		            lda #1
   185 21BE 60			            rts
   186
   187 				; paddle driver
   188 				            
   189 21BF			driver_paddle            
   190 21BF BD 70 02		            lda PADDL0,x
   191 21C2 A8			            tay
   192 21C3 B9 00 20		            lda paddle_to_256,y
   193 21C6 5D CC 21		            eor paddle_offsets,x
   194 21C9 95 9C		            sta p1_angle,x
   195 21CB 60			            rts
   196
   197 21CC			paddle_offsets
   198 21CC 00 80		            dta 0,128
   142 				            
   143 21CE			main         
   144 21CE A9 00		            lda #0
   145 21D0 8D 2F 02		            sta SDMCTL
   146 21D3 85 B6		            sta game_restart
   147 21D5 A5 01		            lda 1
   148 21D7 8D 44 02		            sta 580 ; coldstart
   149
   150 21DA 20 01 21		            jsr driver_init
   151
   152 21DD 20 5D 26		            jsr make_shape_index
   153 				 
   154 21E0 20 8D 26		            jsr make_outer_256
   155 				            
   156 21E3 20 C7 22		            jsr make_screen_y_tab
   157
   158 21E6 20 12 23		            jsr invert_backdrop
   159
   160 21E9 20 FD 26		            jsr reset_score
   161 21EC 20 CB 26		            jsr show_score_p1
   162 21EF 20 E4 26		            jsr show_score_p2
   163 				                       
   164 21F2 20 E8 28		            jsr init_sprites
   165 21F5 20 14 29		            jsr init_colors
   166
   167 				; init. game vars
   168 21F8 A2 00		            ldx #INIT_LEVEL_INDEX
   169 21FA 8E 30 29		            stx current_level_index
   170 21FD 20 35 29		            jsr set_level_ball_speed
   171
   172 2200 A9 01		            lda #1
   173 2202 85 8C		            sta mode_menu           ; start with menu
   174
   175 				; start vbi
   176 				            
   177 2204 A9 38		            lda #<dli_menu
   178 2206 8D 00 02		            sta VDSLST
   179 2209 A9 22		            lda #>dli_menu
   180 220B 8D 01 02		            sta VDSLST+1
   181 				            
   182 220E A9 C0		            lda #$c0
   183 2210 8D 0E D4		            sta NMIEN
   184 				            
   185 2213 A9 07		            lda #7          ; sets VVBLKI
   186 2215 A0 57		            ldy #<vbi
   187 2217 A2 23		            ldx #>vbi
   188 2219 20 5C E4		            jsr $e45c       ; SETVBV
   189
   190 				; we're just sitting here while VBI does all the work :)
   191 221C 4C 1C 22		loop        jmp loop
   192
   193 				;------------------------
   194 				; 8bit * 8bit = 16bit multiply
   195 				; By White Flame
   196 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   197 				; uses extra zp var _multiplicand+1
   198
   199 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   200 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   201
   202 				; In this version, both inputs must be unsigned
   203 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   204
   205 221F			_multi8
   206 221F A9 00		            lda #$00
   207 2221 A8			            tay
   208 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   209 2222 F0 0D		            beq _enter_loop
   210 2224			_do_add
   211 2224 18			            clc
   212 2225 65 F6		            adc _multiplicand
   213 2227 AA			            tax
   214
   215 2228 98			            tya
   216 2229 65 F7		            adc _multiplicand+1
   217 222B A8			            tay
   218 222C 8A			            txa
   219 222D			_mul_loop
   220 222D 06 F6		            asl _multiplicand
   221 222F 26 F7		            rol _multiplicand+1
   222 2231			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   223 2231 46 F8		            lsr _multiplier
   224 2233 B0 EF		            bcs _do_add
   225 2235 D0 F6		            bne _mul_loop
   226 2237 60			            rts
   227
   228 2238			dli_menu
   229 2238 48			            pha
   230 2239 8A			            txa
   231 223A 48			            pha
   232 				            
   233 223B A9 00		            lda #0
   234 223D 8D 0A D4		            sta WSYNC
   235 2240 8D 1A D0		            sta COLBK
   236 2243 A9 0E		            lda #$0e
   237 2245 8D 0A D4		            sta WSYNC
   238 2248 8D 1A D0		            sta COLBK
   239 224B A9 0A		            lda #$0a
   240 224D 8D 0A D4		            sta WSYNC
   241 2250 8D 1A D0		            sta COLBK
   242 2253 A9 00		            lda #0
   243 2255 8D 0A D4		            sta WSYNC
   244 2258 8D 1A D0		            sta COLBK
   245
   246 225B A2 00		            ldx #0
   247 225D			color_it            
   248 225D BD 8F 22		            lda menu_colpf0,x
   249 2260 8D 0A D4		            sta WSYNC
   250 2263 8D 16 D0		            sta COLPF0
   251 2266 E8			            inx
   252 2267 E0 38		            cpx #56
   253 2269 D0 F2		            bne color_it
   254
   255 226B A9 00		            lda #0
   256 226D 8D 0A D4		            sta WSYNC
   257 2270 8D 1A D0		            sta COLBK
   258 2273 A9 0A		            lda #$0a
   259 2275 8D 0A D4		            sta WSYNC
   260 2278 8D 1A D0		            sta COLBK
   261 227B A9 0E		            lda #$0e
   262 227D 8D 0A D4		            sta WSYNC
   263 2280 8D 1A D0		            sta COLBK
   264 2283 A9 00		            lda #0
   265 2285 8D 0A D4		            sta WSYNC
   266 2288 8D 1A D0		            sta COLBK
   267 				            
   268 228B 68			            pla
   269 228C AA			            tax
   270 228D 68			            pla
   271 228E 40			            rti
   272
   273 228F			menu_colpf0
   274 228F 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   275 2297 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   276 229F 00 00 00 00		            dta 0,0,0,0
   277 22A3 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   278 22AB 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   279 22B3 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   280 22BB 00 00 00 00		            dta 0,0,0,0
   281 22BF 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   282
   283 				; make pointers from y-position to screen memory
   284 				; screen memory is 3 blocks
   285 				; screen_mem1 : 102 lines, 4080 bytes
   286 				; screen_mem2 : 102 lines, 4080 bytes
   287 				; screen_mem3 :  20 lines,  800 bytes
   288
   289 22C7			make_screen_y_tab
   290 22C7 A9 00		            lda #<screen_mem1
   291 22C9 85 86		            sta tmp_screen
   292 22CB A9 90		            lda #>screen_mem1
   293 22CD 85 87		            sta tmp_screen+1
   294
   295 22CF A2 00		            ldx #0
   296 22D1			fill_y_tab1
   297 22D1 20 FA 22		            jsr store_y_line
   298 22D4 E8			            inx
   299 22D5 E0 66		            cpx #102
   300 22D7 D0 F8		            bne fill_y_tab1
   301
   302 				; x = 102
   303 22D9 A9 00		            lda #<screen_mem2
   304 22DB 85 86		            sta tmp_screen
   305 22DD A9 A0		            lda #>screen_mem2
   306 22DF 85 87		            sta tmp_screen+1
   307
   308 22E1			fill_y_tab2
   309 22E1 20 FA 22		            jsr store_y_line
   310 22E4 E8			            inx
   311 22E5 E0 CC		            cpx #204
   312 22E7 D0 F8		            bne fill_y_tab2
   313
   314 22E9 A9 00		            lda #<screen_mem3
   315 22EB 85 86		            sta tmp_screen
   316 22ED A9 B0		            lda #>screen_mem3
   317 22EF 85 87		            sta tmp_screen+1
   318
   319 				; x = 204
   320 22F1			fill_y_tab3
   321 22F1 20 FA 22		            jsr store_y_line
   322 22F4 E8			            inx
   323 22F5 E0 E0		            cpx #224
   324 22F7 D0 F8		            bne fill_y_tab3
   325 22F9 60			            rts
   326
   327 22FA			store_y_line
   328 22FA A5 86		            lda tmp_screen
   329 22FC 9D 00 18		            sta screen_y_lo,x
   330 22FF A5 87		            lda tmp_screen+1
   331 2301 9D 00 19		            sta screen_y_hi,x
   332 				            
   333 2304 A5 86		            lda tmp_screen
   334 2306 18			            clc
   335 2307 69 28		            adc #SCREEN_WIDTH
   336 2309 85 86		            sta tmp_screen
   337 230B A5 87		            lda tmp_screen+1
   338 230D 69 00		            adc #0
   339 230F 85 87		            sta tmp_screen+1
   340 2311 60			            rts
   341
   342 				; @todo invert backdrop image
   343 				; now we have to do it here :P
   344 2312			invert_backdrop
   345 2312 A9 00		            lda #<screen_mem1
   346 2314 85 86		            sta tmp_screen
   347 2316 A9 90		            lda #>screen_mem1
   348 2318 85 87		            sta tmp_screen+1
   349 				            
   350 231A A2 10		            ldx #16     ; 16 pages = 4K
   351 231C 20 3A 23		            jsr do_x_pages
   352 				           
   353 231F A9 00		            lda #<screen_mem2
   354 2321 85 86		            sta tmp_screen
   355 2323 A9 A0		            lda #>screen_mem2
   356 2325 85 87		            sta tmp_screen+1
   357 				            
   358 2327 A2 10		            ldx #16     ; 16 pages = 4K
   359 2329 20 3A 23		            jsr do_x_pages
   360
   361 232C A9 00		            lda #<screen_mem3
   362 232E 85 86		            sta tmp_screen
   363 2330 A9 B0		            lda #>screen_mem3
   364 2332 85 87		            sta tmp_screen+1
   365 				            
   366 2334 A2 04		            ldx #4     ; 4 pages = 1K
   367 2336 20 3A 23		            jsr do_x_pages
   368 2339 60			            rts
   369
   370 				; invert x pages, starting from tmp_screen
   371
   372 233A			do_x_pages
   373 233A A0 00		            ldy #0
   374 233C			do_page
   375 233C B1 86		            lda (tmp_screen),y
   376 233E 49 FF		            eor #$ff
   377 2340 91 86		            sta (tmp_screen),y
   378 2342 C8			            iny
   379 2343 D0 F7		            bne do_page 
   380
   381 2345 E6 87		            inc tmp_screen+1
   382 2347 CA			            dex
   383 2348 D0 F2		            bne do_page
   384 234A 60			            rts
   385
   386 234B			turn_color_ball
   387 234B A6 B5		            ldx player_turn
   388 234D BD 54 23		            lda color_turn,x
   389 2350 8D C7 02		            sta COLOR3
   390 2353 60			            rts
   391 				            
   392 2354 00 26 76		color_turn  dta 0,$26,$76                           
   393
   394 				; A, X, Y are already saved by the OS
   395 2357			vbi                 
   396 2357 A9 2E		            lda #%00101110  ; enable P/M DMA
   397 2359 8D 2F 02		            sta SDMCTL
   398 235C A9 00		            lda #0
   399 235E 85 4D		            sta 77      ; attract off
   400 2360 A9 40		            lda #>rotor_font
   401 2362 8D F4 02		            sta 756
   402
   403 				; menu switching thingy
   404
   405 2365 AD 1F D0		            lda CONSOL
   406 2368 C9 03		            cmp #3
   407 236A D0 09		            bne no_option_pressed
   408
   409 236C			go_menu_mode            
   410 236C 20 C6 25		            jsr wipe_ball
   411 				            
   412 236F A9 01		            lda #1
   413 2371 85 8C		            sta mode_menu
   414 2373 D0 0F		            bne check_mode_menu
   415
   416 2375			no_option_pressed
   417 2375 C9 06		            cmp #6
   418 2377 D0 0B		            bne check_mode_menu
   419 				            
   420 				; reset game
   421
   422 2379			reset_game
   423 2379 20 C6 25		            jsr wipe_ball
   424 				            
   425 237C A9 01		            lda #1
   426 237E 85 B6		            sta game_restart
   427
   428 2380 A9 00		            lda #0
   429 2382 85 8C		            sta mode_menu
   430
   431 2384			check_mode_menu
   432 2384 A5 8C		            lda mode_menu
   433 2386 F0 51		            beq main_game_vbi
   434
   435 				; within menu vbi
   436 				            
   437 2388 AD 1F D0		            lda CONSOL
   438 238B C9 05		            cmp #5          ; select
   439 238D D0 18		            bne no_level_select
   440 				            
   441 238F AD 2F 29		            lda previous_consol
   442 2392 C9 05		            cmp #5
   443 2394 F0 14		            beq wait_depressed
   444 				            
   445 2396 20 44 29		            jsr increase_level
   446 2399 AE 30 29		            ldx current_level_index
   447 239C 20 35 29		            jsr set_level_ball_speed            
   448
   449 239F A9 05		            lda #5
   450 23A1 8D 2F 29		            sta previous_consol
   451 23A4 4C AA 23		            jmp wait_depressed
   452
   453 23A7			no_level_select
   454 23A7 8D 2F 29		            sta previous_consol
   455
   456 23AA			wait_depressed        
   457 23AA A9 00		            lda #<menu_dl
   458 23AC 8D 30 02		            sta SDLSTL
   459 23AF A9 3C		            lda #>menu_dl
   460 23B1 8D 31 02		            sta SDLSTH
   461
   462 				; detect/show controller type (used for both players)
   463 23B4 20 C0 23		            jsr detect_show_driver
   464
   465 23B7 20 CC 24		            jsr handle_player1
   466 23BA 20 E5 24		            jsr handle_player2
   467
   468 23BD 4C 75 24		            jmp exit_vbi
   469
   470 				; X = port/driver to detect
   471 23C0			detect_show_driver
   472 23C0 20 33 21		            jsr driver_detect
   473 23C3 A8			            tay
   474 23C4 B9 98 3D		            lda driver_text_lo,y
   475 23C7 85 86		            sta tmp_screen
   476 23C9 B9 9C 3D		            lda driver_text_hi,y
   477 23CC 85 87		            sta tmp_screen+1
   478
   479 23CE A0 07		            ldy #7
   480 23D0			show_driv
   481 23D0 B1 86		            lda (tmp_screen),y
   482 23D2 99 1E 3D		            sta driver_screen,y
   483 23D5 88			            dey
   484 23D6 10 F8		            bpl show_driv
   485 23D8 60			            rts
   486
   487 				; main game vbi
   488 23D9			main_game_vbi
   489 23D9 A5 B6		            lda game_restart
   490 23DB F0 2F		            beq no_restart
   491
   492 				; restart game
   493 				            
   494 23DD A9 00		            lda #0
   495 23DF 85 B6		            sta game_restart
   496 				            
   497 23E1 20 78 24		            jsr sound_off
   498 				            
   499 23E4 20 FD 26		            jsr reset_score
   500 23E7 20 CB 26		            jsr show_score_p1
   501 23EA 20 E4 26		            jsr show_score_p2
   502
   503 23ED A6 9C		            ldx p1_angle
   504 23EF 86 AA		            stx ball_angle_start
   505 23F1 20 1F 25		            jsr ball_to_start_position
   506 23F4 20 2E 25		            jsr prepare_ball_end_position
   507
   508 23F7 A9 00		            lda #0
   509 23F9 85 A0		            sta mp_collision
   510 23FB 85 A1		            sta in_collision
   511 23FD 85 A3		            sta edge_delay
   512 23FF 8D 1E D0		            sta HITCLR
   513
   514 2402 A9 02		            lda #2
   515 2404 85 B5		            sta player_turn         ; blue's turn
   516
   517 2406 20 4B 23		            jsr turn_color_ball
   518 2409 4C 75 24		            jmp exit_vbi            
   519
   520 240C			no_restart
   521 240C A9 00		            lda #<display_list
   522 240E 8D 30 02		            sta SDLSTL
   523 2411 A9 38		            lda #>display_list
   524 2413 8D 31 02		            sta SDLSTH
   525
   526 2416 AD 08 D0		            lda M0PL
   527 2419 85 A0		            sta mp_collision
   528 241B AD 09 D0		            lda M1PL
   529 241E 05 A0		            ora mp_collision
   530 2420 85 A0		            sta mp_collision
   531 				 
   532 2422 20 CC 24		            jsr handle_player1
   533 2425 20 E5 24		            jsr handle_player2
   534
   535 				; handle ball
   536
   537 2428 20 C6 25		            jsr wipe_ball         
   538
   539 				; Check ball collision with bat
   540
   541 242B A5 A4		            lda bat_collision_delay
   542 242D F0 05		            beq check_allowed
   543 242F C6 A4		            dec bat_collision_delay
   544 2431 4C 4E 24		            jmp move_one
   545
   546 2434			check_allowed
   547 2434 A5 A0		            lda mp_collision
   548 2436 F0 0F		            beq reset_in_collision
   549
   550 2438 A5 A1		            lda in_collision
   551 243A D0 12		            bne no_first_hit
   552
   553 243C E6 A1		            inc in_collision            
   554 243E 20 5B 25		            jsr bounce_bat_ball 
   555 				            
   556 2441 20 87 24		            jsr sound_bat          
   557 				            
   558 2444 4C 4E 24		            jmp move_one
   559 				            
   560 2447			reset_in_collision
   561 2447 A9 00		            lda #0
   562 2449 85 A1		            sta in_collision   
   563 244B 20 78 24		            jsr sound_off         
   564
   565 244E			move_one
   566 244E			no_first_hit
   567 244E 20 4F 28		            jsr move_current_xy
   568 2451 F0 0F		            beq still_moving
   569 2453			do_reset
   570 2453 A5 AB		            lda ball_angle_end
   571 2455 85 AA		            sta ball_angle_start
   572
   573 2457 20 52 25		            jsr ball_current_to_start_position
   574 245A 20 2E 25		            jsr prepare_ball_end_position
   575
   576 245D 20 98 24		            jsr update_score
   577 2460 D0 13		            bne exit_vbi        ; end game
   578 2462			still_moving
   579 2462 A5 EB		            lda current_x+1
   580 2464 85 A6		            sta ball_current_x
   581 2466 A5 ED		            lda current_y+1
   582 2468 85 A7		            sta ball_current_y
   583
   584 246A 20 DB 25		            jsr show_ball
   585
   586 246D A9 00		            lda #0
   587 246F 8D 18 D0		            sta $d018           
   588
   589 				; anything in A to clear collisions
   590 2472 8D 1E D0		            sta HITCLR
   591
   592 2475			exit_vbi
   593 2475 4C 62 E4		            jmp $e462
   594
   595 2478			sound_off
   596 2478 A9 00		            lda #0
   597 247A 8D 01 D2		            sta AUDC1
   598 247D 8D 03 D2		            sta AUDC2
   599 2480 8D 05 D2		            sta AUDC3
   600 2483 8D 05 D2		            sta AUDC3
   601 2486 60			            rts
   602
   603 2487			sound_bat
   604 2487 A5 B5		            lda player_turn
   605 2489 0A			            asl
   606 248A 0A			            asl
   607 248B 69 40		            adc #$40
   608 248D E5 B3		            sbc angle_diff_bat
   609 248F 8D 00 D2		            sta AUDF1
   610 2492 A9 A6		            lda #$a6
   611 2494 8D 01 D2		            sta AUDC1
   612 2497 60			            rts
   613
   614 				; Update score
   615 				; Score > max score, then exit A = 1, otherwise A = 0
   616
   617 2498			update_score
   618 2498 A5 B5		            lda player_turn
   619 249A C9 01		            cmp #1
   620 249C D0 12		            bne was_player2_turn
   621 				; was player 1 turn, so player 2 gets a point
   622 249E 20 12 27		            jsr inc_score_p2
   623 24A1 20 E4 26		            jsr show_score_p2
   624
   625 24A4 AD 15 39		            lda score_p2
   626 24A7 C9 11		            cmp #MAX_SCORE
   627 24A9 D0 17		            bne reset_edge_delay
   628
   629 24AB A9 01		            lda #1
   630 24AD 85 8C		            sta mode_menu
   631 24AF 60			            rts
   632
   633 24B0			was_player2_turn
   634 24B0 20 06 27		            jsr inc_score_p1
   635 24B3 20 CB 26		            jsr show_score_p1
   636
   637 24B6 AD 14 39		            lda score_p1
   638 24B9 C9 11		            cmp #MAX_SCORE
   639 24BB D0 05		            bne reset_edge_delay
   640
   641 24BD A9 01		            lda #1
   642 24BF 85 8C		            sta mode_menu
   643 24C1 60			            rts
   644
   645 24C2			reset_edge_delay
   646 24C2 A9 0A		            lda #10
   647 24C4 85 A3		            sta edge_delay
   648
   649 24C6			no_edge
   650
   651 24C6 A9 00		            lda #0      ; no end game
   652 				; anything in A to clear collisions
   653 24C8 8D 1E D0		            sta HITCLR
   654 24CB 60			            rts
   655
   656 				; player 1
   657 				; - wipe shape at previous y-position
   658 				; - move player using controller
   659 				; - set sprite positions
   660
   661 24CC			handle_player1
   662 24CC 20 33 26		            jsr wipe_p1         ; wipe previous shape player 1
   663
   664 24CF A2 00		            ldx #0              ; player 1
   665 24D1 20 FE 24		            jsr move_player
   666 				            
   667 24D4 20 FF 25		            jsr show_p1
   668
   669 24D7 A5 94		            lda player1_x
   670 24D9 18			            clc
   671 24DA 69 20		            adc #left_margin
   672 24DC 8D 00 D0		            sta HPOSP0
   673 24DF 69 08		            adc #8
   674 24E1 8D 01 D0		            sta HPOSP1
   675 24E4 60			            rts
   676
   677 				; player 2
   678 				; - wipe shape at previous y-position
   679 				; - move player using controller
   680 				; - set sprite positions
   681
   682 24E5			handle_player2
   683 24E5 20 48 26		            jsr wipe_p2         ; wipe previous shape player 2
   684
   685 24E8 A2 01		            ldx #1              ; player 2
   686 24EA 20 FE 24		            jsr move_player
   687 				                        
   688 24ED 20 19 26		            jsr show_p2
   689
   690 24F0 A5 95		            lda player2_x
   691 24F2 18			            clc
   692 24F3 69 20		            adc #left_margin
   693 24F5 8D 02 D0		            sta HPOSP2
   694 24F8 69 08		            adc #8
   695 24FA 8D 03 D0		            sta HPOSP3
   696 24FD 60			            rts
   697
   698 				; move player 1/2
   699 				; right - clockwise, left = anti-clockwise
   700
   701 				; X = 0, player 1
   702 				; X = 1, player 2
   703
   704 				; Y = driver mode:
   705 				; 0 : stick
   706 				; 1 : paddle
   707 				; 2 : driving
   708 				; 3 : computer
   709 				            
   710 24FE			move_player
   711 24FE 20 62 21		            jsr main_driver
   712
   713 2501 B5 9C		            lda p1_angle,x
   714 2503 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   715 2505 49 40		            eor #64                     ; perpendicular to the circle angle
   716 2507 95 90		            sta p1_shape,x
   717
   718 2509 B4 9C		            ldy p1_angle,x
   719 250B B9 00 2A		            lda inner_x_tab,y
   720 250E 4A			            lsr
   721 250F 69 20		            adc #inner_x_margin/2
   722 2511 95 94		            sta player1_x,x
   723 2513 B9 00 2B		            lda inner_y_tab,y
   724 2516 4A			            lsr
   725 2517 95 98		            sta player1_y,x
   726
   727 2519 B4 90		            ldy p1_shape,x
   728 251B 20 82 26		            jsr shape_to_ptr
   729
   730 251E 60			            rts
   731
   732 				; Set ball at start position
   733 				; - start angle current player
   734 				; - start position by inner table
   735 				; - collision delay set?
   736
   737 				; Set ball current position to start position
   738 				; input:
   739 				; X = angle of start position
   740 				; output:
   741 				; ball position: (ball_current_x, ball_current_y)
   742 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   743 251F			ball_to_start_position
   744 251F BD 00 2A		            lda inner_x_tab,x
   745 2522 85 A6		            sta ball_current_x
   746 2524 85 E6		            sta tmp_x1
   747 2526 BD 00 2B		            lda inner_y_tab,x
   748 2529 85 A7		            sta ball_current_y
   749 252B 85 E7		            sta tmp_y1
   750 252D 60			            rts
   751
   752 				; Prepare ball end position
   753 				; - end angle current player
   754 				; - end position by outer table
   755 				; - calculate step size x,y
   756
   757 				; Input:
   758 				; - ball_angle_start
   759 				; - ball speed
   760 				; Output:
   761 				; - ball_andle_end
   762 				; - ball start position (tmp_x1, tmp_y1)
   763 				; - ball end position (tmp_x2, tmp_y2)
   764 				; - step size (step_x, step_y) for ball movement
   765 252E			prepare_ball_end_position
   766 252E A5 AA		            lda ball_angle_start
   767 2530 49 80		            eor #128        ; other side
   768 2532 85 AB		            sta ball_angle_end
   769 2534 AA			            tax
   770 2535 20 BB 25		            jsr angle_to_end_position
   771 				                        
   772 2538 20 E2 27		            jsr init_current_xy
   773 				            
   774 				; move current a little bit            
   775 253B 20 4F 28		            jsr move_current_xy
   776 				; ignore end indicator, since we only just started
   777
   778
   779 253E A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   780 2540 85 A4		            sta bat_collision_delay
   781 2542 60			            rts
   782
   783 				; x = angle 0..255
   784 2543			outer_angle_to_start_position
   785 2543 BD 00 16		            lda outer_x_256,x
   786 2546 85 A6		            sta ball_current_x
   787 2548 85 E6		            sta tmp_x1
   788 254A BD 00 17		            lda outer_y_256,x
   789 254D 85 A7		            sta ball_current_y
   790 254F 85 E7		            sta tmp_y1
   791 2551 60			            rts
   792
   793 2552			ball_current_to_start_position
   794 2552 A5 A6		            lda ball_current_x
   795 2554 85 E6		            sta tmp_x1
   796 2556 A5 A7		            lda ball_current_y
   797 2558 85 E7		            sta tmp_y1
   798 255A 60			            rts
   799
   800 				; Ball collides with bat
   801 				; - start ball angle = end ball angle
   802 				; - calculate diff between bat and ball end angle
   803 				; - calculate new end angle
   804 				; - Set ball at start position
   805 				; - Prepare ball end position
   806
   807 255B			bounce_bat_ball
   808 				; set new start of ball
   809 				; @todo check ball angles
   810 				; set new ball start angle (= previous end angle)
   811 255B A5 AB		            lda ball_angle_end
   812 255D 85 AA		            sta ball_angle_start
   813 				            
   814 				; alternative?
   815 				            ;ldx ball_angle_start
   816 				            ;jsr ball_to_start_position          
   817 255F 20 52 25		            jsr ball_current_to_start_position
   818
   819 				; which player hit the ball?
   820 2562 A9 01		            lda #1
   821 2564 85 A2		            sta player_nr_hit
   822 2566 A5 A0		            lda mp_collision
   823 2568 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   824 256A D0 04		            bne p1_hit
   825 256C A9 02		            lda #2
   826 256E 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   827 2570			p1_hit            
   828
   829 				; who's turn is it and who bounced the ball?
   830
   831 2570 A5 B5		            lda player_turn
   832 2572 25 A2		            and player_nr_hit
   833 2574 F0 06		            beq no_switch_turn
   834
   835 2576 A5 B5		            lda player_turn
   836 2578 49 03		            eor #3              ; 1 => 2, 2 => 1
   837 257A 85 B5		            sta player_turn 
   838
   839 257C			no_switch_turn
   840 257C 20 4B 23		            jsr turn_color_ball
   841 				            
   842 257F A6 A2		            ldx player_nr_hit
   843 2581 CA			            dex                     ; index 0,1 (player = 1,2)
   844 2582 B5 9C		            lda p1_angle,x
   845
   846 				; Calculate diff between bat angle position and new ball start position
   847 2584 85 B0		            sta tmp_angle1
   848
   849 2586 A5 AA		            lda ball_angle_start
   850 2588 85 B1		            sta tmp_angle2
   851
   852 258A 20 1E 27		            jsr calc_angle_diff
   853
   854 258D 0A			            asl
   855 258E 0A			            asl
   856 258F 0A			            asl
   857 2590 85 B3		            sta angle_diff_bat
   858
   859 2592 A5 B0		            lda tmp_angle1
   860 2594 18			            clc
   861 2595 65 B2		            adc add_to_angle
   862 2597 49 80		            eor #128            ; other side
   863 2599 85 B0		            sta tmp_angle1
   864 				            
   865 259B A5 B4		            lda tmp_angle_direction
   866 259D D0 0A		            bne diff_clockwise
   867 				; diff counter clockwise
   868 259F A5 B0		            lda tmp_angle1
   869 25A1 18			            clc
   870 25A2 65 B3		            adc angle_diff_bat
   871 25A4 85 B0		            sta tmp_angle1
   872 25A6 4C B0 25		            jmp calc_done            
   873
   874 25A9			diff_clockwise
   875 25A9 A5 B0		            lda tmp_angle1
   876 25AB 38			            sec
   877 25AC E5 B3		            sbc angle_diff_bat
   878 25AE 85 B0		            sta tmp_angle1
   879 				            
   880 				; calculation done            
   881 25B0			calc_done
   882 25B0 A5 B0		            lda tmp_angle1
   883 25B2 85 AB		            sta ball_angle_end
   884 25B4 AA			            tax
   885 25B5 20 BB 25		            jsr angle_to_end_position
   886 				                        
   887 25B8 4C E2 27		            jmp init_current_xy
   888
   889 				; x = angle 0..255
   890 25BB			angle_to_end_position
   891 25BB BD 00 16		            lda outer_x_256,x
   892 25BE 85 E8		            sta tmp_x2
   893 25C0 BD 00 17		            lda outer_y_256,x
   894 25C3 85 E9		            sta tmp_y2
   895 25C5 60			            rts
   896
   897 25C6			wipe_ball
   898 25C6 A5 A7		            lda ball_current_y
   899 25C8 4A			            lsr
   900 25C9 69 06		            adc #ball_top_margin
   901 25CB AA			            tax                 ; x = real y position on screen
   902 25CC A9 00		            lda #0
   903 25CE 9D 80 11		            sta msl_area,x
   904 25D1 9D 81 11		            sta msl_area+1,x
   905 25D4 9D 82 11		            sta msl_area+2,x
   906 25D7 9D 83 11		            sta msl_area+3,x
   907 25DA 60			            rts
   908
   909 25DB			show_ball
   910 25DB A5 A7		            lda ball_current_y
   911 25DD 4A			            lsr
   912 25DE 69 06		            adc #ball_top_margin
   913 25E0 AA			            tax                 ; x = real y position on screen
   914
   915 25E1 A9 02		            lda #%00000010
   916 25E3 9D 80 11		            sta msl_area,x
   917 25E6 9D 83 11		            sta msl_area+3,x
   918 25E9 A9 07		            lda #%00000111
   919 25EB 9D 81 11		            sta msl_area+1,x
   920 25EE 9D 82 11		            sta msl_area+2,x
   921 				            
   922 25F1 A5 A6		            lda ball_current_x
   923 25F3 4A			            lsr
   924 25F4 69 45		            adc #ball_left_margin
   925 25F6 8D 05 D0		            sta HPOSM1
   926 25F9 69 02		            adc #2
   927 25FB 8D 04 D0		            sta HPOSM0
   928 				                        
   929 25FE 60			            rts
   930 				            
   931 25FF			show_p1
   932 25FF A5 98		            lda player1_y
   933 2601 18			            clc
   934 2602 69 01		            adc #upper_margin
   935 2604 AA			            tax
   936
   937 2605 A0 00		            ldy #0
   938 2607			show_shape1
   939 2607 B1 84		            lda (shape_ptr),y
   940 2609 9D 00 12		            sta p0_area,x 
   941 260C C8			            iny
   942 260D B1 84		            lda (shape_ptr),y
   943 260F 9D 80 12		            sta p1_area,x
   944 2612 E8			            inx
   945 2613 C8			            iny
   946 2614 C0 20		            cpy #32
   947 2616 D0 EF		            bne show_shape1
   948 2618 60			            rts
   949
   950 2619			show_p2
   951 2619 A5 99		            lda player2_y
   952 261B 18			            clc
   953 261C 69 01		            adc #upper_margin
   954 261E AA			            tax
   955
   956 261F A0 00		            ldy #0
   957 2621			show_shape2
   958 2621 B1 84		            lda (shape_ptr),y
   959 2623 9D 00 13		            sta p2_area,x 
   960 2626 C8			            iny
   961 2627 B1 84		            lda (shape_ptr),y
   962 2629 9D 80 13		            sta p3_area,x
   963 262C E8			            inx
   964 262D C8			            iny
   965 262E C0 20		            cpy #32
   966 2630 D0 EF		            bne show_shape2
   967 2632 60			            rts
   968
   969 2633			wipe_p1
   970 2633 A5 98		            lda player1_y
   971 2635 18			            clc
   972 2636 69 01		            adc #upper_margin
   973 2638 AA			            tax
   974 				            
   975 2639 A0 10		            ldy #16
   976 263B A9 00		            lda #0
   977 263D			wipe_it1            
   978 263D 9D 00 12		            sta p0_area,x 
   979 2640 9D 80 12		            sta p1_area,x
   980 2643 E8			            inx
   981 2644 88			            dey
   982 2645 D0 F6		            bne wipe_it1 
   983 2647 60			            rts
   984
   985 2648			wipe_p2
   986 2648 A5 99		            lda player2_y
   987 264A 18			            clc
   988 264B 69 01		            adc #upper_margin
   989 264D AA			            tax
   990 				            
   991 264E A0 10		            ldy #16
   992 2650 A9 00		            lda #0
   993 2652			wipe_it2            
   994 2652 9D 00 13		            sta p2_area,x 
   995 2655 9D 80 13		            sta p3_area,x
   996 2658 E8			            inx
   997 2659 88			            dey
   998 265A D0 F6		            bne wipe_it2 
   999 265C 60			            rts
  1000
  1001 265D			make_shape_index
  1002 265D A9 00		            lda #<pm_shapes
  1003 265F 85 84		            sta shape_ptr
  1004 2661 A9 50		            lda #>pm_shapes
  1005 2663 85 85		            sta shape_ptr+1
  1006 				            
  1007 2665 A2 00		            ldx #0
  1008 2667			fill_pm_tab
  1009 2667 A5 84		            lda shape_ptr
  1010 2669 9D 00 60		            sta pm_shape_lo,x
  1011 266C A5 85		            lda shape_ptr+1
  1012 266E 9D 80 60		            sta pm_shape_hi,x
  1013 				            
  1014 2671 A5 84		            lda shape_ptr
  1015 2673 18			            clc
  1016 2674 69 20		            adc #32
  1017 2676 85 84		            sta shape_ptr
  1018 2678 A5 85		            lda shape_ptr+1
  1019 267A 69 00		            adc #0
  1020 267C 85 85		            sta shape_ptr+1
  1021 				            
  1022 267E E8			            inx
  1023 267F 10 E6		            bpl fill_pm_tab
  1024 				            
  1025 2681 60			            rts
  1026 				            
  1027 				; there are 128 shapes, each 32 bytes
  1028
  1029 				; y = shape index
  1030 2682			shape_to_ptr
  1031 2682 B9 00 60		            lda pm_shape_lo,y
  1032 2685 85 84		            sta shape_ptr
  1033 2687 B9 80 60		            lda pm_shape_hi,y
  1034 268A 85 85		            sta shape_ptr+1
  1035
  1036 268C 60			            rts
  1037
  1038 				; turn 1024 tables into 256 bytes for ball edge lookup
  1039 268D			make_outer_256
  1040 268D A0 00		            ldy #0
  1041 268F A2 00		            ldx #0
  1042 2691			conv_256
  1043 2691 BD 00 2C		            lda outer_x_tab,x
  1044 2694 99 00 16		            sta outer_x_256,y
  1045 2697 BD 00 2D		            lda outer_x_tab+$100,x
  1046 269A 99 40 16		            sta outer_x_256+64,y
  1047 269D BD 00 2E		            lda outer_x_tab+$200,x
  1048 26A0 99 80 16		            sta outer_x_256+128,y
  1049 26A3 BD 00 2F		            lda outer_x_tab+$300,x
  1050 26A6 99 C0 16		            sta outer_x_256+192,y
  1051 				            
  1052 26A9 BD 00 30		            lda outer_y_tab,x
  1053 26AC 99 00 17		            sta outer_y_256,y
  1054 26AF BD 00 31		            lda outer_y_tab+$100,x
  1055 26B2 99 40 17		            sta outer_y_256+64,y
  1056 26B5 BD 00 32		            lda outer_y_tab+$200,x
  1057 26B8 99 80 17		            sta outer_y_256+128,y
  1058 26BB BD 00 33		            lda outer_y_tab+$300,x
  1059 26BE 99 C0 17		            sta outer_y_256+192,y
  1060
  1061 26C1 E8			            inx
  1062 26C2 E8			            inx
  1063 26C3 E8			            inx
  1064 26C4 E8			            inx
  1065 26C5 C8			            iny
  1066 26C6 C0 40		            cpy #64
  1067 26C8 D0 C7		            bne conv_256            
  1068 26CA 60			            rts
  1069
  1070 26CB			show_score_p1
  1071 26CB AD 14 39		            lda score_p1
  1072 26CE 4A			            lsr
  1073 26CF 4A			            lsr
  1074 26D0 4A			            lsr
  1075 26D1 4A			            lsr
  1076 26D2 F0 02		            beq do_space1
  1077 26D4 09 10		            ora #16
  1078 26D6			do_space1
  1079 26D6 8D F1 38		            sta score_chars_p1
  1080 26D9 AD 14 39		            lda score_p1
  1081 26DC 29 0F		            and #15
  1082 26DE 09 10		            ora #16
  1083 26E0 8D F2 38		            sta score_chars_p1+1
  1084 26E3 60			            rts
  1085
  1086 26E4			show_score_p2
  1087 26E4 AD 15 39		            lda score_p2
  1088 26E7 4A			            lsr
  1089 26E8 4A			            lsr
  1090 26E9 4A			            lsr
  1091 26EA 4A			            lsr
  1092 26EB F0 02		            beq do_space2
  1093 26ED 09 10		            ora #16
  1094 26EF			do_space2
  1095 26EF 8D 12 39		            sta score_chars_p2
  1096 26F2 AD 15 39		            lda score_p2
  1097 26F5 29 0F		            and #15
  1098 26F7 09 10		            ora #16
  1099 26F9 8D 13 39		            sta score_chars_p2+1
  1100 26FC 60			            rts
  1101 				                        
  1102 26FD			reset_score
  1103 26FD A9 00		            lda #0
  1104 26FF 8D 14 39		            sta score_p1
  1105 2702 8D 15 39		            sta score_p2
  1106 2705 60			            rts            
  1107 				         
  1108 2706			inc_score_p1
  1109 2706 F8			            sed
  1110 2707 AD 14 39		            lda score_p1
  1111 270A 18			            clc
  1112 270B 69 01		            adc #1
  1113 270D 8D 14 39		            sta score_p1    
  1114 2710 D8			            cld
  1115 2711 60			            rts
  1116
  1117 2712			inc_score_p2
  1118 2712 F8			            sed
  1119 2713 AD 15 39		            lda score_p2
  1120 2716 18			            clc
  1121 2717 69 01		            adc #1
  1122 2719 8D 15 39		            sta score_p2
  1123 271C D8			            cld
  1124 271D 60			            rts
  1125
  1126 				; calculate the difference between angle1 and angle2
  1127
  1128 				; input:
  1129 				; tmp_angle1 (0..255)
  1130 				; tmp_angle2 (0..255)
  1131
  1132 				; output:
  1133 				; tmp_angle_diff, A: difference between angle1 and angle2
  1134 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1135
  1136 271E			calc_angle_diff
  1137 271E A9 00		            lda #0
  1138 2720 85 B2		            sta add_to_angle
  1139 2722 85 B4		            sta tmp_angle_direction
  1140
  1141 				; make sure we can compare angles, otherwise add $40 to angles
  1142 2724 A5 B0		            lda tmp_angle1
  1143 2726 C9 C0		            cmp #$c0
  1144 2728 B0 06		            bcs too_large
  1145 272A A5 B1		            lda tmp_angle2
  1146 272C C9 C0		            cmp #$c0
  1147 272E 90 12		            bcc not_too_large
  1148 2730			too_large
  1149 2730 A5 B0		            lda tmp_angle1
  1150 2732 38			            sec
  1151 2733 E9 40		            sbc #$40
  1152 2735 85 B0		            sta tmp_angle1
  1153 				            
  1154 2737 A5 B1		            lda tmp_angle2
  1155 2739 38			            sec
  1156 273A E9 40		            sbc #$40
  1157 273C 85 B1		            sta tmp_angle2
  1158 				            
  1159 273E A9 40		            lda #$40
  1160 2740 85 B2		            sta add_to_angle
  1161
  1162 2742			not_too_large
  1163 2742 A5 B1		            lda tmp_angle2
  1164 2744 C5 B0		            cmp tmp_angle1
  1165 2746 90 0A		            bcc angle2_smaller_angle1
  1166 				; ball >= play
  1167 2748 38			            sec
  1168 2749 E5 B0		            sbc tmp_angle1
  1169 274B 85 B7		            sta tmp_angle_diff
  1170 				            
  1171 274D E6 B4		            inc tmp_angle_direction
  1172 274F 4C 59 27		            jmp diff_calculated
  1173 				                        
  1174 2752			angle2_smaller_angle1
  1175 2752 A5 B0		            lda tmp_angle1
  1176 2754 38			            sec
  1177 2755 E5 B1		            sbc tmp_angle2
  1178 2757 85 B7		            sta tmp_angle_diff
  1179
  1180 2759			diff_calculated
  1181 2759 A5 B7		            lda tmp_angle_diff           
  1182 275B 60			            rts
  1183
  1184 				; X = angle
  1185 				; lookup magnitude of angle 0 to angle X
  1186 275C			angle_to_magnitude
  1187 275C BD 00 34		            lda magnitudes_lo,x
  1188 275F 85 B8		            sta magnitude
  1189 2761 BD 00 35		            lda magnitudes_hi,x
  1190 2764 85 B9		            sta magnitude+1
  1191 2766 60			            rts
  1192
  1193 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1194 2767			calc_abs_tmp_dx
  1195 2767 A5 E8		            lda tmp_x2
  1196 2769 38			            sec
  1197 276A E5 E6		            sbc tmp_x1
  1198 276C B0 05		            bcs x2_le
  1199 276E 49 FF		            eor #255
  1200 2770 18			            clc
  1201 2771 69 01		            adc #1
  1202 2773 85 F2		x2_le       sta tmp_dx
  1203
  1204 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1205 2775			calc_abs_tmp_dy
  1206 2775 A5 E9		            lda tmp_y2
  1207 2777 38			            sec
  1208 2778 E5 E7		            sbc tmp_y1
  1209 277A B0 05		            bcs y2_le
  1210 277C 49 FF		            eor #255
  1211 277E 18			            clc
  1212 277F 69 01		            adc #1
  1213 2781 85 F3		y2_le       sta tmp_dy
  1214 2783 60			            rts
  1215 				            
  1216 2784			calc_dx_div_magnitude
  1217 2784 A9 00		            lda #0
  1218 2786 85 E2		            sta _dividend
  1219 2788 A5 F2		            lda tmp_dx
  1220 278A 85 E3		            sta _dividend+1
  1221
  1222 278C A5 B9		            lda magnitude+1
  1223 278E 85 E0		            sta _divisor
  1224 2790 A9 00		            lda #0
  1225 2792 85 E1		            sta _divisor+1
  1226 				            
  1227 2794 20 BC 27		            jsr _div16
  1228
  1229 				; todo multiply result with velocity            
  1230 2797 A5 E2		            lda _result
  1231 2799 85 EE		            sta step_x
  1232 279B A5 E3		            lda _result+1
  1233 279D 85 EF		            sta step_x+1
  1234 				            
  1235 279F 60			            rts
  1236 				            
  1237 27A0			calc_dy_div_magnitude
  1238 27A0 A9 00		            lda #0
  1239 27A2 85 E2		            sta _dividend
  1240 27A4 A5 F3		            lda tmp_dy
  1241 27A6 85 E3		            sta _dividend+1
  1242 				            
  1243 27A8 A5 B9		            lda magnitude+1
  1244 27AA 85 E0		            sta _divisor
  1245 27AC A9 00		            lda #0
  1246 27AE 85 E1		            sta _divisor+1
  1247
  1248 27B0 20 BC 27		            jsr _div16
  1249 				            
  1250 				; todo multiply result with velocity
  1251 27B3 A5 E2		            lda _result
  1252 27B5 85 F0		            sta step_y
  1253 27B7 A5 E3		            lda _result+1
  1254 27B9 85 F1		            sta step_y+1
  1255 				            
  1256 27BB 60			            rts
  1257
  1258 				; divide 16bit
  1259 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1260
  1261 				; _result = _dividend / divisor
  1262
  1263 27BC A9 00		_div16      lda #0          ;preset remainder to 0
  1264 27BE 85 E4		            sta _remainder
  1265 27C0 85 E5		            sta _remainder+1
  1266 27C2 A2 10		            ldx #16         ;repeat for each bit: ...
  1267
  1268 27C4 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1269 27C6 26 E3		            rol _dividend+1  
  1270 27C8 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1271 27CA 26 E5		            rol _remainder+1
  1272 27CC A5 E4		            lda _remainder
  1273 27CE 38			            sec
  1274 27CF E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1275 27D1 A8			            tay         ;lb result -> Y, for we may need it later
  1276 27D2 A5 E5		            lda _remainder+1
  1277 27D4 E5 E1		            sbc _divisor+1
  1278 27D6 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1279
  1280 27D8 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1281 27DA 84 E4		            sty _remainder   
  1282 27DC E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1283
  1284 27DE CA			_div_skip   dex
  1285 27DF D0 E3		            bne _div_loop 
  1286 27E1 60			            rts
  1287
  1288 				; Calculations for step size
  1289
  1290 				; not optimised for speed or size
  1291 				; step should be set according to the angle
  1292
  1293 				; move in straight line (x1,y1) to (x2,y2)
  1294
  1295 				; 1. set start/end of line
  1296 				; set (tmp_x1, tmp_y1)
  1297 				; set (tmp_x2, tmp_y2)
  1298
  1299 				; 2. init. current_x, current_y
  1300 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1301 				; - calculates step sizes for x,y
  1302 				; - calculated directions for x,y
  1303 				;            jsr init_current_xy
  1304
  1305 				; 3. use current_x, current_y to plot or set a position
  1306 				;            lda current_x+1
  1307 				;            sta x_position
  1308 				;            lda current_y+1
  1309 				;            sta y_position
  1310 				;            jsr plot_pixel
  1311
  1312 				; 4. move current_x, current_y to next position on line
  1313 				; A=0 still moving
  1314 				;           move_current_xy
  1315
  1316 27E2			init_current_xy
  1317 27E2 A9 7F		            lda #$7f      ; was 128 for half pixel
  1318 27E4 85 EA		            sta current_x
  1319 27E6 85 EC		            sta current_y
  1320
  1321 27E8 A5 E6		            lda tmp_x1
  1322 27EA 85 EB		            sta current_x+1
  1323 				            
  1324 27EC A5 E7		            lda tmp_y1
  1325 27EE 85 ED		            sta current_y+1
  1326
  1327 				; dx = abs(tmp_x1 - tmp_x2)
  1328 27F0 20 67 27		            jsr calc_abs_tmp_dx
  1329
  1330 				; dy = abs(tmp_y1 - tmp_y2)
  1331 27F3 20 75 27		            jsr calc_abs_tmp_dy
  1332
  1333 				; set directions
  1334 27F6 A5 E6		            lda tmp_x1
  1335 27F8 C5 E8		            cmp tmp_x2
  1336 27FA 90 04		            bcc x1_smaller_x2
  1337 				; x1 >= x2
  1338 27FC A9 01		            lda #1
  1339 27FE D0 02		            bne set_dir_x
  1340 2800			x1_smaller_x2
  1341 2800 A9 00		            lda #0
  1342 2802			set_dir_x
  1343 2802 85 FA		            sta dir_x
  1344 				            
  1345 2804 A5 E7		            lda tmp_y1
  1346 2806 C5 E9		            cmp tmp_y2
  1347 2808 90 04		            bcc y1_smaller_y2
  1348 				; y1 >= y2
  1349 280A A9 01		            lda #1
  1350 280C D0 02		            bne set_dir_y
  1351 280E			y1_smaller_y2
  1352 280E A9 00		            lda #0
  1353 2810			set_dir_y
  1354 2810 85 FB		            sta dir_y
  1355
  1356 				; Calculate diff between start angle and end angle
  1357
  1358 2812 A5 AA		            lda ball_angle_start
  1359 2814 85 B0		            sta tmp_angle1
  1360 2816 A5 AB		            lda ball_angle_end
  1361 2818 85 B1		            sta tmp_angle2
  1362 				            
  1363 281A 20 1E 27		            jsr calc_angle_diff
  1364
  1365 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1366 281D A6 B7		            ldx tmp_angle_diff
  1367 281F 20 5C 27		            jsr angle_to_magnitude
  1368 				            
  1369 2822 20 84 27		            jsr calc_dx_div_magnitude
  1370 2825 20 A0 27		            jsr calc_dy_div_magnitude
  1371 				            
  1372 				; Calculate step size by ball speed
  1373 				            
  1374 				; step_x = step_x * speed
  1375 				            
  1376 2828 A5 EE		            lda step_x
  1377 282A 85 F6		            sta _multiplicand
  1378 282C A5 EF		            lda step_x+1
  1379 282E 85 F7		            sta _multiplicand+1
  1380 2830 A5 AC		            lda ball_speed
  1381 2832 85 F8		            sta _multiplier
  1382
  1383 2834 20 1F 22		            jsr _multi8
  1384 				;result in .A (low byte, also in .X) and .Y (high byte)
  1385 2837 85 EE		            sta step_x
  1386 2839 84 EF		            sty step_x+1
  1387 283B			skip_step_x_hi
  1388 				            
  1389 				; step_y = step_y * speed
  1390
  1391 283B A5 F0		            lda step_y
  1392 283D 85 F6		            sta _multiplicand
  1393 283F A5 F1		            lda step_y+1
  1394 2841 85 F7		            sta _multiplicand+1
  1395 2843 A5 AC		            lda ball_speed
  1396 2845 85 F8		            sta _multiplier
  1397
  1398 2847 20 1F 22		            jsr _multi8
  1399 				;result in .A (low byte, also in .X) and .Y (high byte)
  1400 284A 85 F0		            sta step_y
  1401 284C 84 F1		            sty step_y+1
  1402 284E			skip_step_y_hi
  1403
  1404 284E 60			            rts
  1405
  1406 				; Move ball position 
  1407 				; Add one step, until end reached
  1408 				; Input:
  1409 				; - step size (step_x, step_y)
  1410 				; - current ball position (current_x, current_y)
  1411 				; - end position (tmp_x2, tmp_y2)
  1412 				; Output:
  1413 				; A (0 = still moving, 1 = end reached)
  1414 284F			move_current_xy
  1415 284F A9 00		            lda #0
  1416 2851 85 FC		            sta line_end_x
  1417 2853 85 FD		            sta line_end_y
  1418
  1419 				; sets line end indicators here
  1420 2855 20 72 28		            jsr move_current_x
  1421 2858 20 B2 28		            jsr move_current_y
  1422
  1423 285B A5 FC		            lda line_end_x
  1424 285D 25 FD		            and line_end_y
  1425 285F F0 10		            beq no_end_reached
  1426 				            
  1427 				; set current to (x2,y2)
  1428 2861 A5 E8		            lda tmp_x2
  1429 2863 85 EB		            sta current_x+1
  1430 2865 A5 E9		            lda tmp_y2
  1431 2867 85 ED		            sta current_y+1
  1432 				            
  1433 2869 A9 00		            lda #0
  1434 286B 85 EA		            sta current_x
  1435 286D 85 EC		            sta current_y
  1436 				            
  1437 286F A9 01		            lda #1 ; end reached
  1438 				            
  1439 2871			no_end_reached  ; A = 0
  1440 2871 60			            rts
  1441
  1442 2872			move_current_x
  1443 2872 A5 FA		            lda dir_x
  1444 2874 D0 18		            bne move_current_left
  1445
  1446 				; move right, add
  1447 2876 A5 EA		            lda current_x
  1448 2878 18			            clc
  1449 2879 65 EE		            adc step_x
  1450 287B 85 EA		            sta current_x
  1451 287D A5 EB		            lda current_x+1
  1452 287F 65 EF		            adc step_x+1
  1453 2881 85 EB		            sta current_x+1
  1454
  1455 2883 A5 EB		            lda current_x+1
  1456 2885 C5 E8		            cmp tmp_x2
  1457 2887 90 04		            bcc no_line_end
  1458 2889			exact_end_x
  1459 2889 A9 01		            lda #1
  1460 288B 85 FC		            sta line_end_x 
  1461 288D			no_line_end
  1462 288D 60			            rts
  1463 				            
  1464 288E			move_current_left
  1465 288E A5 EA		            lda current_x
  1466 2890 38			            sec
  1467 2891 E5 EE		            sbc step_x
  1468 2893 90 01		            bcc clear_skip
  1469 2895 EA			            nop
  1470 2896			clear_skip
  1471 2896 85 EA		            sta current_x
  1472 2898 A5 EB		            lda current_x+1
  1473 289A E5 EF		            sbc step_x+1
  1474 289C 85 EB		            sta current_x+1
  1475 289E 90 0B		            bcc below_zero
  1476 				                        
  1477 28A0 A5 E8		            lda tmp_x2
  1478 28A2 C5 EB		            cmp current_x+1
  1479 28A4 90 E7		            bcc no_line_end
  1480 28A6 A9 01		            lda #1
  1481 28A8 85 FC		            sta line_end_x            
  1482 28AA 60			            rts
  1483 28AB			below_zero            
  1484 28AB A9 01		            lda #1
  1485 28AD 85 FC		            sta line_end_x
  1486 28AF 85 FD		            sta line_end_y
  1487 28B1 60			            rts
  1488 28B2			move_current_y
  1489 28B2 A5 FB		            lda dir_y
  1490 28B4 D0 18		            bne move_current_up
  1491
  1492 				; move down, add
  1493 28B6 A5 EC		            lda current_y
  1494 28B8 18			            clc
  1495 28B9 65 F0		            adc step_y
  1496 28BB 85 EC		            sta current_y
  1497 28BD A5 ED		            lda current_y+1
  1498 28BF 65 F1		            adc step_y+1
  1499 28C1 85 ED		            sta current_y+1
  1500 				            
  1501 28C3 A5 ED		            lda current_y+1
  1502 28C5 C5 E9		            cmp tmp_y2
  1503 28C7 90 C4		            bcc no_line_end
  1504 28C9			exact_end_y
  1505 28C9 A9 01		            lda #1
  1506 28CB 85 FD		            sta line_end_y
  1507 28CD 60			            rts
  1508
  1509 28CE			move_current_up
  1510 28CE A5 EC		            lda current_y
  1511 28D0 38			            sec
  1512 28D1 E5 F0		            sbc step_y
  1513 28D3 85 EC		            sta current_y
  1514 28D5 A5 ED		            lda current_y+1
  1515 28D7 E5 F1		            sbc step_y+1
  1516 28D9 90 D0		            bcc below_zero
  1517 28DB 85 ED		            sta current_y+1
  1518 				            
  1519 28DD A5 E9		            lda tmp_y2
  1520 28DF C5 ED		            cmp current_y+1
  1521 28E1 90 AA		            bcc no_line_end
  1522 28E3 A9 01		            lda #1
  1523 28E5 85 FD		            sta line_end_y
  1524 28E7 60			            rts                            
  1525 				            
  1526 28E8			init_sprites
  1527 28E8 A2 00		            ldx #0
  1528 28EA 8A			            txa
  1529 28EB			set_p
  1530 28EB 9D 00 12		            sta p0_area,x
  1531 28EE 9D 80 12		            sta p1_area,x
  1532 28F1 9D 00 13		            sta p2_area,x
  1533 28F4 9D 80 13		            sta p3_area,x
  1534 28F7 E8			            inx
  1535 28F8 10 F1		            bpl set_p               
  1536
  1537 28FA A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1538 28FC 8D 6F 02		            sta GPRIOR
  1539 				    
  1540 28FF A9 10		            lda #>pm_area
  1541 2901 8D 07 D4		            sta PMBASE
  1542 				    
  1543 2904 A9 03		            lda #3          ; P/M both on
  1544 2906 8D 1D D0		            sta GRACTL
  1545 				    
  1546 2909 A9 90		            lda #$90
  1547 290B 8D 02 D0		            sta HPOSP2
  1548 290E A9 A0		            lda #$A0
  1549 2910 8D 03 D0		            sta HPOSP3  
  1550 2913 60			            rts            
  1551
  1552 2914			init_colors
  1553 2914 A9 2A		            lda #$2a
  1554 2916 8D C0 02		            sta PCOLR0
  1555 2919 8D C1 02		            sta PCOLR1
  1556 				            
  1557 291C A9 7A		            lda #$7a
  1558 291E 8D C2 02		            sta PCOLR2
  1559 2921 8D C3 02		            sta PCOLR3
  1560 				            
  1561 2924 A9 00		            lda #0
  1562 2926 8D C6 02		            sta COLOR2
  1563 2929 A9 08		            lda #8
  1564 292B 8D C5 02		            sta COLOR1
  1565 292E 60			            rts
  1566
  1567 292F			previous_consol
  1568 292F 00			            dta 0
  1569
  1570 2930			current_level_index
  1571 2930 00			            dta 0
  1572 = 0004			NR_OF_LEVELS = 4
  1573 = 0000			INIT_LEVEL_INDEX = 0
  1574 2931			level_speeds
  1575 2931 02 04 06 08		            dta 2,4,6,8
  1576 				            
  1577 				; X = level (0..NR_OF_LEVELS)
  1578 2935			set_level_ball_speed
  1579 2935 BD 31 29		            lda level_speeds,x
  1580 2938 85 AC		            sta ball_speed
  1581 293A 8A			            txa
  1582 293B 18			            clc
  1583 293C 69 01		            adc #1
  1584 293E 09 10		            ora #16
  1585 2940 8D 48 3D		            sta level_char
  1586 2943 60			            rts
  1587 				            
  1588 2944			increase_level
  1589 2944 EE 30 29		            inc current_level_index
  1590 2947 AD 30 29		            lda current_level_index
  1591 294A C9 04		            cmp #NR_OF_LEVELS
  1592 294C D0 05		            bne ok_level
  1593 294E A9 00		            lda #INIT_LEVEL_INDEX
  1594 2950 8D 30 29		            sta current_level_index
  1595 2953			ok_level           
  1596 2953 60			            rts
  1597 				            
  1598 2954			            .align $100
  1599 2A00			inner_x_tab
  1600 = 2B00			inner_y_tab = *+$100
  1601 2A00-35FF> 70 72 75 77 +             ins 'data\in210.dat'
  1602 				      
  1603 2C00			            .align $400            
  1604 				; outer circle 1024 plot points on 360 degrees
  1605 2C00			outer_x_tab
  1606 = 3000			outer_y_tab = *+1024
  1607 2C00 70 70 71 72 72 73 +             ins 'data\out224.dat'
  1608 				           
  1609 3400			            .align $400
  1610 				; table of magnitudes (length) between angle 0 and 0..255
  1611 				; fixed point 8.8 : hi.lo
  1612 3400			magnitudes_lo
  1613 = 3500			magnitudes_hi = *+256
  1614 3400 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1615
  1616 3600			            .align $400
  1617 3800			display_list
  1618 3800-3915> 42		            dta $42
  1619 3801 EC 38		            dta a(score_line)
  1620
  1621 				; 102 x 40 = 4080 bytes            
  1622 3803 4F			            dta $4f
  1623 3804			dl_screen_ptr1
  1624 3804 00 90		            dta a(screen_mem1)
  1625 3806 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1626 380D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1627 3815 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1628 381D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1629
  1630 3825 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1631 382D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1632 3835 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1633 383D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1634
  1635 3845 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1636 384D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1637 3855 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1638 385D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1639
  1640 3865 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1641
  1642 				; 102 x 40 = 4080 bytes
  1643 386B 4F			            dta $4f
  1644 386C			dl_screen_ptr2
  1645 386C 00 A0		            dta a(screen_mem2)
  1646 386E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1647 3875 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1648 387D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1649 3885 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1650
  1651 388D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1652 3895 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1653 389D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1654 38A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1655
  1656 38AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1657 38B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1658 38BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1659 38C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1660
  1661 38CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1662
  1663 				; 20 x 40 = 800
  1664 38D3 4F			            dta $4f
  1665 38D4 00 B0		            dta a(screen_mem3)       
  1666 38D6 0F 0F 0F		            dta $0f,$0f,$0f
  1667 38D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1668 38E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1669 				            
  1670 38E9 41			            dta $41
  1671 38EA 00 38		            dta a(display_list)
  1672
  1673 38EC			score_line  
  1674 38EC 00 32 25 24 00	            dta d' RED '
  1675 38F1			score_chars_p1
  1676 38F1 0D 0D 00		            dta d'-- '
  1677
  1678 38F4 00 00 00 00 00 00 +             dta d'          '
  1679 38FE 00 00 00 00 00 00 +             dta d'          '
  1680
  1681 3908 00 00 00 00 00 22 +             dta d'     BLUE '
  1682 3912			score_chars_p2
  1683 3912 0D 0D		            dta d'--'
  1684
  1685 3914 00			score_p1    dta 0
  1686 3915 00			score_p2    dta 0
  1687
  1688 3916			            .align $400
  1689 				            
  1690 3C00			menu_dl
  1691 3C00-3CB6> 42		            dta $42
  1692 3C01 EC 38		            dta a(score_line)
  1693 				            
  1694 3C03 4F			            dta $4f
  1695 3C04 00 90		            dta a(screen_mem1)
  1696 3C06 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1697 3C0D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1698 3C15 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1699 3C1D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1700
  1701 3C25 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1702 3C2D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1703 3C35 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1704 3C3D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1705
  1706 3C45 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1707 3C4D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1708
  1709 				; 64 scanlines
  1710 3C55 30			            dta $30
  1711 3C56 47			            dta $47
  1712 3C57 00 3D		            dta a(menu_screen)
  1713 3C59 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1714
  1715 				; 60 lines
  1716 3C60 4F			            dta $4f
  1717 3C61 90 A6		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1718 3C63 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1719 3C6A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1720 3C72 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1721 3C7A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1722
  1723 3C82 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1724 3C8A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1725 3C92 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1726 3C9A 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1727
  1728 				; 20 lines            
  1729 3C9E 4F			            dta $4f
  1730 3C9F 00 B0		            dta a(screen_mem3)
  1731 3CA1 0F 0F 0F		            dta $0f,$0f,$0f            
  1732 3CA4 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1733 3CAC 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1734 				           
  1735 3CB4 41			            dta $41
  1736 3CB5 00 3C		            dta a(menu_dl)
  1737
  1738 3CB7			            .align $100
  1739 3D00			menu_screen
  1740 3D00-3D9F> 00 00 00 00 +             dta d'     R O T O R      '
  1741
  1742 3D14 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1743 3D1E			driver_screen
  1744 3D1E 00 00 00 00 00 00 +             dta d'            '
  1745 3D2A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1746 3D3C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1747 3D48			level_char            
  1748 3D48 11 00 00 00 00 00 +             dta d'1       '
  1749 3D50 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1750 3D78			stick_text
  1751 3D78 33 34 29 23 2B 00 +             dta d'STICK   '
  1752 3D80			paddle_text
  1753 3D80 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1754 3D88			driving_text
  1755 3D88 24 32 29 36 29 2E +             dta d'DRIVING '
  1756 3D90			computer_text
  1757 3D90 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1758
  1759 3D98			driver_text_lo
  1760 3D98 78			            dta <stick_text
  1761 3D99 80			            dta <paddle_text
  1762 3D9A 88			            dta <driving_text
  1763 3D9B 90			            dta <computer_text
  1764 				            
  1765 3D9C			driver_text_hi
  1766 3D9C 3D			            dta >stick_text
  1767 3D9D 3D			            dta >paddle_text
  1768 3D9E 3D			            dta >driving_text
  1769 3D9F 3D			            dta >computer_text
  1770
  1771 3DA0			            .align $400
  1772 4000			rotor_font
  1773 4000-43FF> 00 00 00 00 +             ins 'font\rotor.fnt'
  1774
  1775 4400			            .align $1000
  1776
  1777 				; 128 x 32 bytes shapes            
  1778 5000			pm_shapes
  1779 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1780
  1781 6000			pm_shape_lo
  1782 = 6080			pm_shape_hi = *+128
  1783
  1784 = 9000			screen_mem1 = $9000     ; 4K
  1785 6000			            org screen_mem1
  1786 9000-9FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1787 				            
  1788 = A000			screen_mem2 = $a000     ; 4K
  1789 9FF0			            org screen_mem2
  1790 A000-AFEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1791 				                        
  1792 = B000			screen_mem3 = $b000     ; 1K
  1793 AFF0			            org screen_mem3
  1794 B000-B31F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1795
  1796 02E0-02E1> CE 21		            run main
