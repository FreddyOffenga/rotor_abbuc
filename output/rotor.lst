mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.7
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - add color (pm?) in header for player ONE/TWO
    17
    18 				; Optional for a later version:
    19 				; - add computer player(s)
    20 				; - add support for driving controllers
    21
    22 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    23
    24 				; color scheme
    25 = 0050			BASE_COLOR_P1   = $50   ; purple
    26 = 00B0			BASE_COLOR_P2   = $b0   ; green
    27
    28 = 000E			HEADER_FG_COLOR = 14
    29 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    30 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    31
    32 				; must be in decimal format, so $11 is 11
    33 = 0011			MAX_SCORE   = $11
    34
    35 = 1000			pm_area     = $1000
    36 = 1180			msl_area    = pm_area+$180
    37 = 1200			p0_area     = pm_area+$200
    38 = 1280			p1_area     = pm_area+$280
    39 = 1300			p2_area     = pm_area+$300
    40 = 1380			p3_area     = pm_area+$380
    41
    42 				; $1400 .. $1500 is overwritten, bug?
    43
    44 				; outer tables 256 for 360 degrees
    45 = 1600			outer_x_256     = $1600
    46 = 1700			outer_y_256     = $1700
    47
    48 = 1800			screen_y_lo     = $1800
    49 = 1900			screen_y_hi     = $1900
    50
    51 = 0140			WIDTH           = 320
    52 = 00C0			HEIGHT          = 192
    53
    54 = 0028			SCREEN_WIDTH    = 40
    55
    56 = 0030			outer_x_margin  = 48 ;47-32
    57 = 0040			inner_x_margin  = 64
    58
    59 = 00A0			circle_center_x = WIDTH/2
    60 = 0060			circle_center_y = HEIGHT/2
    61
    62 = 0006			ball_top_margin     = 6
    63 = 0045			ball_left_margin    = 64+5
    64
    65 				; pm upper margin
    66 = 0001			upper_margin    = 1
    67 = 0020			left_margin     = 32
    68
    69 = 0080			music_toggle    = $80
    70
    71 = 0081			shadow_HPOSP0   = $81
    72 = 0082			shadow_HPOSP1   = $82
    73
    74 = 0084			shape_ptr       = $84
    75 = 0086			tmp_screen      = $86
    76
    77 = 008C			mode_menu       = $8c
    78
    79 = 008D			volume_hit_bat  = $8d
    80 = 008E			volume_hit_edge = $8e
    81
    82 				; player vars must be in sequence for zp,x indexing
    83
    84 = 0090			p1_shape        = $90
    85 = 0091			p2_shape        = $91
    86
    87 = 0094			player1_x       = $94
    88 = 0095			player2_x       = $95
    89
    90 = 0098			player1_y       = $98
    91 = 0099			player2_y       = $99
    92
    93 = 009C			p1_angle        = $9c
    94 = 009D			p2_angle        = $9d
    95
    96 = 00A0			mp_collision    = $a0
    97 = 00A1			in_collision    = $a1
    98 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    99 = 00A3			edge_delay      = $a3
   100 = 00A4			bat_collision_delay = $a4
   101
   102 				; ball vars
   103 = 00A6			ball_current_x      = $a6
   104 = 00A7			ball_current_y      = $a7
   105 = 00AA			ball_angle_start    = $aa
   106 = 00AB			ball_angle_end      = $ab
   107 = 00AC			ball_speed          = $ac
   108
   109 = 00B0			tmp_angle1          = $b0
   110 = 00B1			tmp_angle2          = $b1
   111 = 00B2			add_to_angle        = $b2
   112 = 00B3			angle_diff_bat      = $b3
   113 = 00B4			tmp_angle_direction = $b4
   114 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   115 = 00B6			game_restart        = $b6
   116 = 00B7			tmp_angle_diff      = $b7
   117 = 00B8			magnitude           = $b8       ; word
   118
   119 				; $c0 - $df free for music
   120
   121 = 00E0			_divisor    = $e0   ; word
   122 = 00E2			_dividend   = $e2   ; word
   123 = 00E4			_remainder  = $e4   ; word
   124 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   125
   126 = 00E6			tmp_x1      = $e6   ; byte
   127 = 00E7			tmp_y1      = $e7   ; byte
   128 = 00E8			tmp_x2      = $e8   ; byte
   129 = 00E9			tmp_y2      = $e9   ; byte
   130
   131 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   132 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   133
   134 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   135 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   136
   137 = 00F2			tmp_dx      = $f2  ; byte
   138 = 00F3			tmp_dy      = $f3  ; byte
   139
   140 = 00F6			_multiplicand   = $f6   ; word
   141 = 00F8			_multiplier     = $f8   ; byte
   142
   143 				; direction:
   144 				; 0 : x1<x2 or y1<y2 = add
   145 				; 1 ; x1>=y2 or y1>=y2 = subtract
   146
   147 = 00FA			dir_x       = $fa  ; byte
   148 = 00FB			dir_y       = $fb  ; byte
   149
   150 = 00FC			line_end_x  = $fc  ; byte
   151 = 00FD			line_end_y  = $fd  ; byte
   152
   153 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $2000
    17 2000			rotor_font
    18 2000-23FF> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 2400			            org $610
    21 0610			intro_main
    22 0610-0725> A9 58		            lda #<dl_intro
    23 0612 8D 30 02		            sta $230
    24 0615 A9 06		            lda #>dl_intro
    25 0617 8D 31 02		            sta $231
    26
    27 061A A9 20		            lda #>rotor_font
    28 061C 8D F4 02		            sta 756
    29
    30 061F A9 00		            lda #0
    31 0621 8D C6 02		            sta 710
    32
    33 0624 A9 22		            lda #34
    34 0626 8D 2F 02		            sta 559
    35
    36 				; reset clock
    37 0629 A9 00		            lda #0
    38 062B 85 14		            sta 20
    39 062D 85 13		            sta 19
    40 				            
    41 062F 60			            rts
    42
    43 0630			footer_intro
    44 0630 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    45
    46 0658			dl_intro
    47 0658 70 70 70		            dta $70,$70,$70
    48
    49 065B 4F			            dta $4f
    50 065C 10 A0		            dta a(intro_image)
    51 065E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 0665 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 066D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54 0675 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    55
    56 067D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 0685 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 068D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 0695 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60
    61 069D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 06A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 06AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 06B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65
    66 06BD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    67
    68 06C3 4F			            dta $4f
    69 06C4 00 B0		            dta a(intro_image+$ff0)
    70 06C6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 06CD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 06D5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73 06DD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    74
    75 06E5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 06ED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 06F5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 06FD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79
    80 0705 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81 070D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    82 0715 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 071D 0F 0F		            dta $0f,$0f
    84 				            
    85 071F 20			            dta $20
    86 0720 42			            dta $42
    87 0721 30 06		            dta a(footer_intro)
    88
    89 0723 41			            dta $41
    90 0724 58 06		            dta a(dl_intro)
    91 				            
    92 0726			            org $a010
    93 A010			intro_image
    94 A010-BE0F> 42 08 11 29 +             ins 'gfx\intro\intro_v4_gr8_inverted.gr8'
    95
    96 02E2-02E3> 10 06		            ini intro_main
   154
   155 BE10			            org $2400            
   156
   157 2400			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2400			driver_tmp      .ds 2
     5 = 2402			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 2403			            .align $100
    11 2500			paddle_to_256
    12 = 2500			            .ds $100
    13
    14 				; paddle initial value
    15 2600			prev_paddle_value
    16 = 2600			            .ds 1
    17
    18 2601			driver_init
    19 2601-2F24> A9 00		            lda #0  ; stick
    20 2603 8D 02 24		            sta driver_mode
    21
    22 2606 AD 70 02		            lda PADDL0
    23 2609 8D 00 26		            sta prev_paddle_value
    24
    25 260C A9 00		            lda #0
    26 260E 85 9C		            sta p1_angle
    27 2610 A9 80		            lda #128
    28 2612 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2614 A9 00		            lda #0
    33 2616 8D 00 24		            sta driver_tmp
    34 2619 8D 01 24		            sta driver_tmp+1
    35 				            
    36 261C A2 00		            ldx #0
    37 261E			store_pv
    38 261E AD 01 24		            lda driver_tmp+1
    39 2621 9D 00 25		            sta paddle_to_256,x
    40 				            
    41 2624 AD 00 24		            lda driver_tmp
    42 2627 18			            clc
    43 2628 69 1F		            adc #<paddle_add
    44 262A 8D 00 24		            sta driver_tmp
    45 262D AD 01 24		            lda driver_tmp+1
    46 2630 69 01		            adc #>paddle_add
    47 2632 8D 01 24		            sta driver_tmp+1
    48 2635 E8			            inx
    49 2636 E0 E5		            cpx #paddle_vals
    50 2638 D0 E4		            bne store_pv
    51 263A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 263B			driver_detect
    63 263B AD 70 02		            lda PADDL0
    64 263E C9 E4		            cmp #228
    65 2640 D0 07		            bne paddle_detect
    66 2642 AD 71 02		            lda PADDL1
    67 2645 C9 E4		            cmp #228
    68 2647 F0 06		            beq no_paddle_detect
    69 2649			paddle_detect
    70 2649 A9 01		            lda #1
    71 264B 8D 02 24		            sta driver_mode
    72 264E 60			            rts
    73
    74 264F			no_paddle_detect
    75 264F AD 78 02		            lda STICK0
    76 2652 C9 0C		            cmp #12
    77 2654 D0 06		            bne no_driving_detect
    78 2656 A9 02		            lda #2
    79 2658 8D 02 24		            sta driver_mode
    80 265B 60			            rts
    81
    82 265C			no_driving_detect
    83 265C C9 07		            cmp #7      ; paddle button also gives this
    84 265E F0 04		            beq stick_detect    
    85 2660 C9 0B		            cmp #11     ; paddle button also gives this
    86 2662 D0 06		            bne no_stick_detect
    87 2664			stick_detect
    88 2664 A9 00		            lda #0
    89 2666 8D 02 24		            sta driver_mode
    90 2669 60			            rts
    91
    92 266A			no_stick_detect
    93 				; default is the last value
    94 266A AD 02 24		            lda driver_mode
    95 266D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 266E			main_driver            
   110 266E AC 02 24		            ldy driver_mode
   111 2671 B9 80 26		            lda driver_lo,y
   112 2674 8D 7E 26		            sta driver_ptr
   113 2677 B9 84 26		            lda driver_hi,y
   114 267A 8D 7F 26		            sta driver_ptr+1
   115
   116 = 267E			driver_ptr = *+1
   117 267D 4C FF FF		            jmp $ffff  
   118
   119 2680			driver_lo
   120 2680 88			            dta <driver_stick
   121 2681 CD			            dta <driver_paddle
   122 2682 88			            dta <driver_stick
   123 2683 88			            dta <driver_stick
   124
   125 2684			driver_hi
   126 2684 26			            dta >driver_stick
   127 2685 26			            dta >driver_paddle
   128 2686 26			            dta >driver_stick
   129 2687 26			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2688			driver_stick
   134 2688 BD 78 02		            lda STICK0,x
   135 268B C9 0F		            cmp #15
   136 268D F0 21		            beq move_done
   137 268F C9 0B		            cmp #11
   138 2691 D0 0E		            bne no_left
   139
   140 2693 D6 9C		            dec p1_angle,x
   141 2695 BD 84 02		            lda STRIG0,x
   142 2698 D0 04		            bne no_fast
   143 269A D6 9C		            dec p1_angle,x
   144 269C D6 9C		            dec p1_angle,x
   145 269E			no_fast
   146 				            
   147 269E 4C B0 26		            jmp move_done
   148 26A1 C9 07		no_left     cmp #7
   149 26A3 D0 0B		            bne move_done
   150
   151 26A5 F6 9C		            inc p1_angle,x
   152 26A7 BD 84 02		            lda STRIG0,x
   153 26AA D0 04		            bne no_fast_right
   154 26AC F6 9C		            inc p1_angle,x
   155 26AE F6 9C		            inc p1_angle,x
   156 26B0			no_fast_right
   157 26B0			move_done
   158 26B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 26B1			is_fire_button
   165 26B1 AD 02 24		            lda driver_mode
   166 26B4 C9 01		            cmp #1
   167 26B6 F0 04		            beq check_paddle_fire
   168 				            
   169 26B8 BD 84 02		            lda STRIG0,x
   170 26BB 60			            rts
   171
   172 26BC			check_paddle_fire
   173 26BC AD 78 02		            lda STICK0
   174 26BF C9 07		            cmp #7
   175 26C1 F0 07		            beq paddle_fire
   176 26C3 C9 0B		            cmp #11
   177 26C5 F0 03		            beq paddle_fire
   178 26C7 A9 00		            lda #0
   179 26C9 60			            rts
   180 26CA			paddle_fire
   181 26CA A9 01		            lda #1
   182 26CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 26CD			driver_paddle            
   187 26CD BD 70 02		            lda PADDL0,x
   188 26D0 A8			            tay
   189 26D1 B9 00 25		            lda paddle_to_256,y
   190 26D4 5D DA 26		            eor paddle_offsets,x
   191 26D7 95 9C		            sta p1_angle,x
   192 26D9 60			            rts
   193
   194 26DA			paddle_offsets
   195 26DA 00 00		            dta 0,0
   158 26DC			main
   159 26DC A9 FF		            lda #255
   160 26DE 8D FC 02		            sta 764
   161
   162 				; for fast loaders, wait 10 seconds or continue with spacebar
   163 26E1			wait_a_sec
   164 26E1 AD FC 02		            lda 764
   165 26E4 C9 FF		            cmp #255
   166 26E6 D0 06		            bne any_key_pressed
   167
   168 26E8 A5 13		            lda 19
   169 26EA C9 02		            cmp #2
   170 26EC 90 F3		            bcc wait_a_sec
   171
   172 26EE			any_key_pressed
   173 26EE A9 FF		            lda #255
   174 26F0 8D FC 02		            sta 764
   175
   176 				; start the game!
   177 				 
   178 26F3 A9 00		            lda #0
   179 26F5 8D 2F 02		            sta SDMCTL
   180 26F8 85 B6		            sta game_restart
   181
   182 26FA A9 80		            lda #128
   183 26FC 85 8D		            sta volume_hit_bat
   184 26FE 85 8E		            sta volume_hit_edge
   185 2700 85 80		            sta music_toggle        ; 128 = on, 0 = off
   186
   187 2702 A9 01		            lda #1
   188 2704 8D 44 02		            sta 580 ; coldstart
   189
   190 2707 20 01 26		            jsr driver_init
   191
   192 270A 20 2A 2C		            jsr make_shape_index
   193 				 
   194 270D 20 5A 2C		            jsr make_outer_256
   195 				            
   196 2710 20 1B 28		            jsr make_screen_y_tab
   197
   198 2713 20 66 28		            jsr invert_backdrop
   199
   200 2716 20 CA 2C		            jsr reset_score
   201 2719 20 98 2C		            jsr show_score_p1
   202 271C 20 B1 2C		            jsr show_score_p2
   203 				                       
   204 271F 20 B5 2E		            jsr init_sprites
   205 2722 20 E1 2E		            jsr init_colors
   206
   207 				; init. game vars
   208 2725 A2 00		            ldx #INIT_LEVEL_INDEX
   209 2727 8E 01 2F		            stx current_level_index
   210 272A 20 06 2F		            jsr set_level_ball_speed
   211
   212 272D A9 01		            lda #1
   213 272F 85 8C		            sta mode_menu           ; start with menu
   214
   215 2731 20 70 5E		            jsr music_init
   216
   217 				; start vbi
   218 				            
   219 2734 A9 C0		            lda #$c0
   220 2736 8D 0E D4		            sta NMIEN
   221 				            
   222 2739 A9 07		            lda #7          ; sets VVBLKI
   223 273B A0 AB		            ldy #<vbi
   224 273D A2 28		            ldx #>vbi
   225 273F 20 5C E4		            jsr $e45c       ; SETVBV
   226
   227 				; we're just sitting here while VBI does all the work :)
   228 2742 4C 42 27		loop        jmp loop
   229
   230 				;------------------------
   231 				; 8bit * 8bit = 16bit multiply
   232 				; By White Flame
   233 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   234 				; uses extra zp var _multiplicand+1
   235
   236 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   237 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   238
   239 				; In this version, both inputs must be unsigned
   240 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   241
   242 2745			_multi8
   243 2745 A9 00		            lda #$00
   244 2747 A8			            tay
   245 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   246 2748 F0 0D		            beq _enter_loop
   247 274A			_do_add
   248 274A 18			            clc
   249 274B 65 F6		            adc _multiplicand
   250 274D AA			            tax
   251
   252 274E 98			            tya
   253 274F 65 F7		            adc _multiplicand+1
   254 2751 A8			            tay
   255 2752 8A			            txa
   256 2753			_mul_loop
   257 2753 06 F6		            asl _multiplicand
   258 2755 26 F7		            rol _multiplicand+1
   259 2757			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   260 2757 46 F8		            lsr _multiplier
   261 2759 B0 EF		            bcs _do_add
   262 275B D0 F6		            bne _mul_loop
   263 275D 60			            rts
   264
   265 				; reset PM0/1 to playfield settings
   266 275E			dli_header
   267 275E 48			            pha
   268
   269 275F A9 08		            lda #8
   270 2761 8D 17 D0		            sta COLPF1
   271
   272 2764 A5 81		            lda shadow_HPOSP0
   273 2766 8D 00 D0		            sta HPOSP0
   274 2769 A5 82		            lda shadow_HPOSP1
   275 276B 8D 01 D0		            sta HPOSP1
   276
   277 276E A9 00		            lda #0
   278 2770 8D 08 D0		            sta SIZEP0
   279 2773 8D 09 D0		            sta SIZEP1
   280
   281 2776 A9 5A		            lda #BASE_COLOR_P1+10
   282 2778 8D 12 D0		            sta COLPM0
   283 277B A9 BA		            lda #BASE_COLOR_P2+10
   284 277D 8D 13 D0		            sta COLPM1
   285
   286 2780 A9 8C		            lda #<dli_menu
   287 2782 8D 00 02		            sta VDSLST
   288 2785 A9 27		            lda #>dli_menu
   289 2787 8D 01 02		            sta VDSLST+1
   290
   291 278A 68			            pla
   292 278B 40			            rti            
   293
   294 278C			dli_menu
   295 278C 48			            pha
   296 278D 8A			            txa
   297 278E 48			            pha
   298 				            
   299 278F A9 00		            lda #0
   300 2791 8D 0A D4		            sta WSYNC
   301 2794 8D 1A D0		            sta COLBK
   302 2797 A9 0E		            lda #$0e
   303 2799 8D 0A D4		            sta WSYNC
   304 279C 8D 1A D0		            sta COLBK
   305 279F A9 0A		            lda #$0a
   306 27A1 8D 0A D4		            sta WSYNC
   307 27A4 8D 1A D0		            sta COLBK
   308 27A7 A9 00		            lda #0
   309 27A9 8D 0A D4		            sta WSYNC
   310 27AC 8D 1A D0		            sta COLBK
   311
   312 27AF A2 00		            ldx #0
   313 27B1			color_it            
   314 27B1 BD E3 27		            lda menu_colpf0,x
   315 27B4 8D 0A D4		            sta WSYNC
   316 27B7 8D 16 D0		            sta COLPF0
   317 27BA E8			            inx
   318 27BB E0 38		            cpx #56
   319 27BD D0 F2		            bne color_it
   320
   321 27BF A9 00		            lda #0
   322 27C1 8D 0A D4		            sta WSYNC
   323 27C4 8D 1A D0		            sta COLBK
   324 27C7 A9 0A		            lda #$0a
   325 27C9 8D 0A D4		            sta WSYNC
   326 27CC 8D 1A D0		            sta COLBK
   327 27CF A9 0E		            lda #$0e
   328 27D1 8D 0A D4		            sta WSYNC
   329 27D4 8D 1A D0		            sta COLBK
   330 27D7 A9 00		            lda #0
   331 27D9 8D 0A D4		            sta WSYNC
   332 27DC 8D 1A D0		            sta COLBK
   333 				            
   334 27DF 68			            pla
   335 27E0 AA			            tax
   336 27E1 68			            pla
   337 27E2 40			            rti
   338
   339 27E3			menu_colpf0
   340 27E3 00 00		            dta 0,0
   341 27E5 58			            dta BASE_COLOR_P1+8
   342 27E6 58			            dta BASE_COLOR_P1+8
   343 27E7 5A			            dta BASE_COLOR_P1+10
   344 27E8 5A			            dta BASE_COLOR_P1+10
   345 27E9 5C			            dta BASE_COLOR_P1+12
   346 27EA 5C			            dta BASE_COLOR_P1+12
   347
   348 27EB BC			            dta BASE_COLOR_P2+12
   349 27EC BC			            dta BASE_COLOR_P2+12
   350 27ED BA			            dta BASE_COLOR_P2+10
   351 27EE BA			            dta BASE_COLOR_P2+10
   352 27EF B8			            dta BASE_COLOR_P2+8
   353 27F0 B8			            dta BASE_COLOR_P2+8
   354 27F1 00 00		            dta 0,0
   355
   356 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   357 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   358 27F3 00 00 00 00		            dta 0,0,0,0
   359 27F7 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   360 27FF 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   361 2807 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   362 280F 00 00 00 00		            dta 0,0,0,0
   363 2813 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   364
   365 				; make pointers from y-position to screen memory
   366 				; screen memory is 3 blocks
   367 				; screen_mem1 : 102 lines, 4080 bytes
   368 				; screen_mem2 : 102 lines, 4080 bytes
   369 				; screen_mem3 :  20 lines,  800 bytes
   370
   371 281B			make_screen_y_tab
   372 281B A9 00		            lda #<screen_mem1
   373 281D 85 86		            sta tmp_screen
   374 281F A9 70		            lda #>screen_mem1
   375 2821 85 87		            sta tmp_screen+1
   376
   377 2823 A2 00		            ldx #0
   378 2825			fill_y_tab1
   379 2825 20 4E 28		            jsr store_y_line
   380 2828 E8			            inx
   381 2829 E0 66		            cpx #102
   382 282B D0 F8		            bne fill_y_tab1
   383
   384 				; x = 102
   385 282D A9 00		            lda #<screen_mem2
   386 282F 85 86		            sta tmp_screen
   387 2831 A9 80		            lda #>screen_mem2
   388 2833 85 87		            sta tmp_screen+1
   389
   390 2835			fill_y_tab2
   391 2835 20 4E 28		            jsr store_y_line
   392 2838 E8			            inx
   393 2839 E0 CC		            cpx #204
   394 283B D0 F8		            bne fill_y_tab2
   395
   396 283D A9 00		            lda #<screen_mem3
   397 283F 85 86		            sta tmp_screen
   398 2841 A9 90		            lda #>screen_mem3
   399 2843 85 87		            sta tmp_screen+1
   400
   401 				; x = 204
   402 2845			fill_y_tab3
   403 2845 20 4E 28		            jsr store_y_line
   404 2848 E8			            inx
   405 2849 E0 E0		            cpx #224
   406 284B D0 F8		            bne fill_y_tab3
   407 284D 60			            rts
   408
   409 284E			store_y_line
   410 284E A5 86		            lda tmp_screen
   411 2850 9D 00 18		            sta screen_y_lo,x
   412 2853 A5 87		            lda tmp_screen+1
   413 2855 9D 00 19		            sta screen_y_hi,x
   414 				            
   415 2858 A5 86		            lda tmp_screen
   416 285A 18			            clc
   417 285B 69 28		            adc #SCREEN_WIDTH
   418 285D 85 86		            sta tmp_screen
   419 285F A5 87		            lda tmp_screen+1
   420 2861 69 00		            adc #0
   421 2863 85 87		            sta tmp_screen+1
   422 2865 60			            rts
   423
   424 				; @todo invert backdrop image
   425 				; now we have to do it here :P
   426 2866			invert_backdrop
   427 2866 A9 00		            lda #<screen_mem1
   428 2868 85 86		            sta tmp_screen
   429 286A A9 70		            lda #>screen_mem1
   430 286C 85 87		            sta tmp_screen+1
   431 				            
   432 286E A2 10		            ldx #16     ; 16 pages = 4K
   433 2870 20 8E 28		            jsr do_x_pages
   434 				           
   435 2873 A9 00		            lda #<screen_mem2
   436 2875 85 86		            sta tmp_screen
   437 2877 A9 80		            lda #>screen_mem2
   438 2879 85 87		            sta tmp_screen+1
   439 				            
   440 287B A2 10		            ldx #16     ; 16 pages = 4K
   441 287D 20 8E 28		            jsr do_x_pages
   442
   443 2880 A9 00		            lda #<screen_mem3
   444 2882 85 86		            sta tmp_screen
   445 2884 A9 90		            lda #>screen_mem3
   446 2886 85 87		            sta tmp_screen+1
   447 				            
   448 2888 A2 04		            ldx #4     ; 4 pages = 1K
   449 288A 20 8E 28		            jsr do_x_pages
   450 288D 60			            rts
   451
   452 				; invert x pages, starting from tmp_screen
   453
   454 288E			do_x_pages
   455 288E A0 00		            ldy #0
   456 2890			do_page
   457 2890 B1 86		            lda (tmp_screen),y
   458 2892 49 FF		            eor #$ff
   459 2894 91 86		            sta (tmp_screen),y
   460 2896 C8			            iny
   461 2897 D0 F7		            bne do_page 
   462
   463 2899 E6 87		            inc tmp_screen+1
   464 289B CA			            dex
   465 289C D0 F2		            bne do_page
   466 289E 60			            rts
   467
   468 289F			turn_color_ball
   469 289F A6 B5		            ldx player_turn
   470 28A1 BD A8 28		            lda color_turn,x
   471 28A4 8D C7 02		            sta COLOR3
   472 28A7 60			            rts
   473 				            
   474 28A8 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   475
   476 				; A, X, Y are already saved by the OS
   477 28AB			vbi
   478 28AB 20 DE 5E		            jsr copy_shadow
   479
   480 28AE A5 80		            lda music_toggle
   481 28B0 F0 03		            beq skip_music
   482 28B2 20 99 5E		            jsr play_song
   483 28B5			skip_music
   484
   485 				; toggle music on/off with spacebar
   486 28B5 AD FC 02		            lda 764
   487 28B8 C9 21		            cmp #$21
   488 28BA D0 10		            bne no_spacebar
   489 28BC A5 80		            lda music_toggle
   490 28BE 49 80		            eor #128
   491 28C0 85 80		            sta music_toggle
   492 28C2 D0 03		            bne music_turned_on
   493 28C4 20 62 5F		            jsr music_off
   494
   495 28C7			music_turned_on
   496 28C7 A9 FF		            lda #255
   497 28C9 8D FC 02		            sta 764
   498
   499 28CC			no_spacebar
   500 28CC 20 33 2A		            jsr play_sound_bat
   501 28CF 20 51 2A		            jsr play_sound_edge
   502
   503 28D2 A9 5E		            lda #<dli_header
   504 28D4 8D 00 02		            sta VDSLST
   505 28D7 A9 27		            lda #>dli_header
   506 28D9 8D 01 02		            sta VDSLST+1
   507
   508 28DC A9 2E		            lda #%00101110  ; enable P/M DMA
   509 28DE 8D 2F 02		            sta SDMCTL
   510 28E1 A9 00		            lda #0
   511 28E3 85 4D		            sta 77      ; attract off
   512 28E5 A9 20		            lda #>rotor_font
   513 28E7 8D F4 02		            sta 756
   514
   515 28EA A9 30		            lda #$30
   516 28EC 8D 00 D0		            sta HPOSP0
   517 28EF A9 B0		            lda #$b0
   518 28F1 8D 01 D0		            sta HPOSP1
   519
   520 				; menu switching thingy
   521
   522 28F4 AD 1F D0		            lda CONSOL
   523 28F7 C9 03		            cmp #3
   524 28F9 D0 0C		            bne no_option_pressed
   525
   526 28FB			go_menu_mode            
   527 28FB 20 FC 5E		            jsr music_normal_volume
   528 				            
   529 28FE 20 93 2B		            jsr wipe_ball
   530 				            
   531 2901 A9 01		            lda #1
   532 2903 85 8C		            sta mode_menu
   533 2905 D0 12		            bne check_mode_menu
   534
   535 2907			no_option_pressed
   536 2907 C9 06		            cmp #6
   537 2909 D0 0E		            bne check_mode_menu
   538 				            
   539 				; reset game
   540
   541 290B			reset_game
   542 290B 20 07 5F		            jsr music_low_volume
   543
   544 290E 20 93 2B		            jsr wipe_ball
   545 				            
   546 2911 A9 01		            lda #1
   547 2913 85 B6		            sta game_restart
   548
   549 2915 A9 00		            lda #0
   550 2917 85 8C		            sta mode_menu
   551
   552 2919			check_mode_menu
   553 2919 A5 8C		            lda mode_menu
   554 291B F0 51		            beq main_game_vbi
   555
   556 				; within menu vbi
   557 				            
   558 291D AD 1F D0		            lda CONSOL
   559 2920 C9 05		            cmp #5          ; select
   560 2922 D0 18		            bne no_level_select
   561 				            
   562 2924 AD 00 2F		            lda previous_consol
   563 2927 C9 05		            cmp #5
   564 2929 F0 14		            beq wait_depressed
   565 				            
   566 292B 20 15 2F		            jsr increase_level
   567 292E AE 01 2F		            ldx current_level_index
   568 2931 20 06 2F		            jsr set_level_ball_speed            
   569
   570 2934 A9 05		            lda #5
   571 2936 8D 00 2F		            sta previous_consol
   572 2939 4C 3F 29		            jmp wait_depressed
   573
   574 293C			no_level_select
   575 293C 8D 00 2F		            sta previous_consol
   576
   577 293F			wait_depressed        
   578 293F A9 16		            lda #<menu_dl
   579 2941 8D 30 02		            sta SDLSTL
   580 2944 A9 41		            lda #>menu_dl
   581 2946 8D 31 02		            sta SDLSTH
   582
   583 				; detect/show controller type (used for both players)
   584 2949 20 55 29		            jsr detect_show_driver
   585
   586 294C 20 A0 2A		            jsr handle_player1
   587 294F 20 B8 2A		            jsr handle_player2
   588
   589 2952 4C 10 2A		            jmp exit_vbi
   590
   591 				; X = port/driver to detect
   592 2955			detect_show_driver
   593 2955 20 3B 26		            jsr driver_detect
   594 2958 A8			            tay
   595 2959 B9 98 42		            lda driver_text_lo,y
   596 295C 85 86		            sta tmp_screen
   597 295E B9 9C 42		            lda driver_text_hi,y
   598 2961 85 87		            sta tmp_screen+1
   599
   600 2963 A0 07		            ldy #7
   601 2965			show_driv
   602 2965 B1 86		            lda (tmp_screen),y
   603 2967 99 1E 42		            sta driver_screen,y
   604 296A 88			            dey
   605 296B 10 F8		            bpl show_driv
   606 296D 60			            rts
   607
   608 				; main game vbi
   609 296E			main_game_vbi
   610 296E A5 B6		            lda game_restart
   611 2970 F0 2C		            beq no_restart
   612
   613 				; restart game
   614 				            
   615 2972 A9 00		            lda #0
   616 2974 85 B6		            sta game_restart
   617 				            
   618 2976 20 CA 2C		            jsr reset_score
   619 2979 20 98 2C		            jsr show_score_p1
   620 297C 20 B1 2C		            jsr show_score_p2
   621
   622 297F A6 9C		            ldx p1_angle
   623 2981 86 AA		            stx ball_angle_start
   624 2983 20 F1 2A		            jsr ball_to_start_position
   625 2986 20 00 2B		            jsr prepare_ball_end_position
   626
   627 2989 A9 00		            lda #0
   628 298B 85 A0		            sta mp_collision
   629 298D 85 A1		            sta in_collision
   630 298F 85 A3		            sta edge_delay
   631 2991 8D 1E D0		            sta HITCLR
   632
   633 2994 A9 02		            lda #2
   634 2996 85 B5		            sta player_turn
   635
   636 2998 20 9F 28		            jsr turn_color_ball
   637 299B 4C 10 2A		            jmp exit_vbi            
   638
   639 299E			no_restart
   640 299E A9 00		            lda #<display_list
   641 29A0 8D 30 02		            sta SDLSTL
   642 29A3 A9 40		            lda #>display_list
   643 29A5 8D 31 02		            sta SDLSTH
   644
   645 29A8 AD 08 D0		            lda M0PL
   646 29AB 85 A0		            sta mp_collision
   647 29AD AD 09 D0		            lda M1PL
   648 29B0 05 A0		            ora mp_collision
   649 29B2 85 A0		            sta mp_collision
   650 				 
   651 29B4 20 A0 2A		            jsr handle_player1
   652 29B7 20 B8 2A		            jsr handle_player2
   653
   654 				; handle ball
   655
   656 29BA 20 93 2B		            jsr wipe_ball         
   657
   658 				; Check ball collision with bat
   659
   660 29BD A5 A4		            lda bat_collision_delay
   661 29BF F0 05		            beq check_allowed
   662 29C1 C6 A4		            dec bat_collision_delay
   663 29C3 4C DD 29		            jmp move_one
   664
   665 29C6			check_allowed
   666 29C6 A5 A0		            lda mp_collision
   667 29C8 F0 0F		            beq reset_in_collision
   668
   669 29CA A5 A1		            lda in_collision
   670 29CC D0 0F		            bne no_first_hit
   671
   672 29CE E6 A1		            inc in_collision            
   673 29D0 20 2D 2B		            jsr bounce_bat_ball 
   674 				            
   675 29D3 20 2E 2A		            jsr start_sound_bat          
   676 				            
   677 29D6 4C DD 29		            jmp move_one
   678 				            
   679 29D9			reset_in_collision
   680 29D9 A9 00		            lda #0
   681 29DB 85 A1		            sta in_collision        
   682
   683 29DD			move_one
   684 29DD			no_first_hit
   685 29DD 20 1C 2E		            jsr move_current_xy
   686 29E0 F0 1B		            beq still_moving
   687
   688 				; edge detected
   689
   690 29E2 20 4C 2A		            jsr start_sound_edge
   691
   692 29E5 A5 AB		            lda ball_angle_end
   693 29E7 85 AA		            sta ball_angle_start
   694
   695 29E9 20 24 2B		            jsr ball_current_to_start_position
   696 29EC 20 00 2B		            jsr prepare_ball_end_position
   697
   698 29EF 20 6C 2A		            jsr update_score
   699 29F2 D0 34		            bne game_ends
   700
   701 				; switch turns
   702 29F4 A5 B5		            lda player_turn
   703 29F6 49 03		            eor #3              ; 1 => 2, 2 => 1
   704 29F8 85 B5		            sta player_turn
   705 29FA 20 9F 28		            jsr turn_color_ball
   706
   707 29FD			still_moving
   708 29FD A5 EB		            lda current_x+1
   709 29FF 85 A6		            sta ball_current_x
   710 2A01 A5 ED		            lda current_y+1
   711 2A03 85 A7		            sta ball_current_y
   712
   713 2A05 20 A8 2B		            jsr show_ball
   714
   715 2A08 A9 00		            lda #0
   716 2A0A 8D 18 D0		            sta $d018           
   717
   718 				; anything in A to clear collisions
   719 2A0D 8D 1E D0		            sta HITCLR
   720
   721 2A10			exit_vbi
   722
   723 				; always set header stuff
   724 2A10 A9 03		            lda #3
   725 2A12 8D 08 D0		            sta SIZEP0
   726 2A15 8D 09 D0		            sta SIZEP1
   727 				            
   728 				; background in PM0/1 for header
   729 2A18 A9 FF		            lda #255
   730 2A1A A2 07		            ldx #7
   731 2A1C			fill_pm_header
   732 2A1C 9D 00 12		            sta p0_area,x
   733 2A1F 9D 80 12		            sta p1_area,x
   734 2A22 CA			            dex
   735 2A23 10 F7		            bpl fill_pm_header
   736 				            
   737 2A25 4C 62 E4		            jmp $e462
   738
   739 2A28			game_ends
   740 2A28 20 FC 5E		            jsr music_normal_volume
   741 2A2B 4C 62 E4		            jmp $e462            
   742
   743 2A2E			start_sound_bat
   744 2A2E A9 0A		            lda #10
   745 2A30 85 8D		            sta volume_hit_bat
   746 2A32 60			            rts
   747 				            
   748 2A33			play_sound_bat
   749 2A33 A5 8D		            lda volume_hit_bat
   750 2A35 30 14		            bmi silenced_bat
   751
   752 2A37 A5 B5		            lda player_turn
   753 2A39 0A			            asl
   754 2A3A 0A			            asl
   755 2A3B 69 30		            adc #$30
   756 2A3D E5 B3		            sbc angle_diff_bat
   757 2A3F 8D 75 5F		            sta SHADOW+4    ; $d204
   758 2A42 A5 8D		            lda volume_hit_bat
   759 2A44 09 A0		            ora #$a0
   760 2A46 8D 76 5F		            sta SHADOW+5    ; $d205
   761 2A49 C6 8D		            dec volume_hit_bat
   762 2A4B			silenced_bat
   763 2A4B 60			            rts
   764
   765 2A4C			start_sound_edge
   766 2A4C A9 04		            lda #4
   767 2A4E 85 8E		            sta volume_hit_edge
   768 2A50 60			            rts
   769
   770 2A51			play_sound_edge
   771 2A51 A5 8E		            lda volume_hit_edge
   772 2A53 30 16		            bmi silenced_edge
   773 2A55 D0 06		            bne no_silenced_edge
   774 2A57 8D 76 5F		            sta SHADOW+5    ; $d205
   775 2A5A C6 8E		            dec volume_hit_edge
   776 2A5C 60			            rts            
   777
   778 2A5D			no_silenced_edge
   779 2A5D A9 08		            lda #$08
   780 2A5F 8D 75 5F		            sta SHADOW+4    ; $d204
   781 2A62 A5 8E		            lda volume_hit_edge
   782 2A64 09 26		            ora #$26
   783 2A66 8D 76 5F		            sta SHADOW+5    ; $d205
   784 2A69 C6 8E		            dec volume_hit_edge
   785 2A6B			silenced_edge
   786 2A6B 60			            rts
   787
   788 				; Update score
   789 				; Score > max score, then exit A = 1, otherwise A = 0
   790
   791 2A6C			update_score
   792 2A6C A5 B5		            lda player_turn
   793 2A6E C9 01		            cmp #1
   794 2A70 D0 12		            bne was_player2_turn
   795 				; was player 1 turn, so player 2 gets a point
   796 2A72 20 DF 2C		            jsr inc_score_p2
   797 2A75 20 B1 2C		            jsr show_score_p2
   798
   799 2A78 AD 15 41		            lda score_p2
   800 2A7B C9 11		            cmp #MAX_SCORE
   801 2A7D D0 17		            bne reset_edge_delay
   802
   803 2A7F A9 01		            lda #1
   804 2A81 85 8C		            sta mode_menu
   805 2A83 60			            rts
   806
   807 2A84			was_player2_turn
   808 2A84 20 D3 2C		            jsr inc_score_p1
   809 2A87 20 98 2C		            jsr show_score_p1
   810
   811 2A8A AD 14 41		            lda score_p1
   812 2A8D C9 11		            cmp #MAX_SCORE
   813 2A8F D0 05		            bne reset_edge_delay
   814
   815 2A91 A9 01		            lda #1
   816 2A93 85 8C		            sta mode_menu
   817 2A95 60			            rts
   818
   819 2A96			reset_edge_delay
   820 2A96 A9 0A		            lda #10
   821 2A98 85 A3		            sta edge_delay
   822
   823 2A9A			no_edge
   824
   825 2A9A A9 00		            lda #0      ; no end game
   826 				; anything in A to clear collisions
   827 2A9C 8D 1E D0		            sta HITCLR
   828 2A9F 60			            rts
   829
   830 				; player 1
   831 				; - wipe shape at previous y-position
   832 				; - move player using controller
   833 				; - set sprite positions
   834
   835 2AA0			handle_player1
   836 2AA0 20 00 2C		            jsr wipe_p1         ; wipe previous shape player 1
   837
   838 2AA3 A2 00		            ldx #0              ; player 1
   839 2AA5 20 D0 2A		            jsr move_player
   840 				            
   841 2AA8 20 CC 2B		            jsr show_p1
   842
   843 2AAB A5 94		            lda player1_x
   844 2AAD 18			            clc
   845 2AAE 69 20		            adc #left_margin
   846 2AB0 85 81		            sta shadow_HPOSP0
   847 2AB2 69 08		            adc #8
   848 2AB4 8D 02 D0		            sta HPOSP2
   849 2AB7 60			            rts
   850
   851 				; player 2
   852 				; - wipe shape at previous y-position
   853 				; - move player using controller
   854 				; - set sprite positions
   855
   856 2AB8			handle_player2
   857 2AB8 20 15 2C		            jsr wipe_p2         ; wipe previous shape player 2
   858
   859 2ABB A2 01		            ldx #1              ; player 2
   860 2ABD 20 D0 2A		            jsr move_player
   861 				                        
   862 2AC0 20 E6 2B		            jsr show_p2
   863
   864 2AC3 A5 95		            lda player2_x
   865 2AC5 18			            clc
   866 2AC6 69 20		            adc #left_margin
   867 2AC8 85 82		            sta shadow_HPOSP1
   868 2ACA 69 08		            adc #8
   869 2ACC 8D 03 D0		            sta HPOSP3
   870 2ACF 60			            rts
   871
   872 				; move player 1/2
   873 				; right - clockwise, left = anti-clockwise
   874
   875 				; X = 0, player 1
   876 				; X = 1, player 2
   877
   878 				; Y = driver mode:
   879 				; 0 : stick
   880 				; 1 : paddle
   881 				; 2 : driving
   882 				; 3 : computer
   883 				            
   884 2AD0			move_player
   885 2AD0 20 6E 26		            jsr main_driver
   886
   887 2AD3 B5 9C		            lda p1_angle,x
   888 2AD5 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   889 2AD7 49 40		            eor #64                     ; perpendicular to the circle angle
   890 2AD9 95 90		            sta p1_shape,x
   891
   892 2ADB B4 9C		            ldy p1_angle,x
   893 2ADD B9 00 30		            lda inner_x_tab,y
   894 2AE0 4A			            lsr
   895 2AE1 69 20		            adc #inner_x_margin/2
   896 2AE3 95 94		            sta player1_x,x
   897 2AE5 B9 00 31		            lda inner_y_tab,y
   898 2AE8 4A			            lsr
   899 2AE9 95 98		            sta player1_y,x
   900
   901 2AEB B4 90		            ldy p1_shape,x
   902 2AED 20 4F 2C		            jsr shape_to_ptr
   903
   904 2AF0 60			            rts
   905
   906 				; Set ball at start position
   907 				; - start angle current player
   908 				; - start position by inner table
   909 				; - collision delay set?
   910
   911 				; Set ball current position to start position
   912 				; input:
   913 				; X = angle of start position
   914 				; output:
   915 				; ball position: (ball_current_x, ball_current_y)
   916 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   917 2AF1			ball_to_start_position
   918 2AF1 BD 00 30		            lda inner_x_tab,x
   919 2AF4 85 A6		            sta ball_current_x
   920 2AF6 85 E6		            sta tmp_x1
   921 2AF8 BD 00 31		            lda inner_y_tab,x
   922 2AFB 85 A7		            sta ball_current_y
   923 2AFD 85 E7		            sta tmp_y1
   924 2AFF 60			            rts
   925
   926 				; Prepare ball end position
   927 				; - end angle current player
   928 				; - end position by outer table
   929 				; - calculate step size x,y
   930
   931 				; Input:
   932 				; - ball_angle_start
   933 				; - ball speed
   934 				; Output:
   935 				; - ball_andle_end
   936 				; - ball start position (tmp_x1, tmp_y1)
   937 				; - ball end position (tmp_x2, tmp_y2)
   938 				; - step size (step_x, step_y) for ball movement
   939 2B00			prepare_ball_end_position
   940 2B00 A5 AA		            lda ball_angle_start
   941 2B02 49 80		            eor #128        ; other side
   942 2B04 85 AB		            sta ball_angle_end
   943 2B06 AA			            tax
   944 2B07 20 88 2B		            jsr angle_to_end_position
   945 				                        
   946 2B0A 20 AF 2D		            jsr init_current_xy
   947 				            
   948 				; move current a little bit            
   949 2B0D 20 1C 2E		            jsr move_current_xy
   950 				; ignore end indicator, since we only just started
   951
   952
   953 2B10 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   954 2B12 85 A4		            sta bat_collision_delay
   955 2B14 60			            rts
   956
   957 				; x = angle 0..255
   958 2B15			outer_angle_to_start_position
   959 2B15 BD 00 16		            lda outer_x_256,x
   960 2B18 85 A6		            sta ball_current_x
   961 2B1A 85 E6		            sta tmp_x1
   962 2B1C BD 00 17		            lda outer_y_256,x
   963 2B1F 85 A7		            sta ball_current_y
   964 2B21 85 E7		            sta tmp_y1
   965 2B23 60			            rts
   966
   967 2B24			ball_current_to_start_position
   968 2B24 A5 A6		            lda ball_current_x
   969 2B26 85 E6		            sta tmp_x1
   970 2B28 A5 A7		            lda ball_current_y
   971 2B2A 85 E7		            sta tmp_y1
   972 2B2C 60			            rts
   973
   974 				; Ball collides with bat
   975 				; - start ball angle = end ball angle
   976 				; - calculate diff between bat and ball end angle
   977 				; - calculate new end angle
   978 				; - Set ball at start position
   979 				; - Prepare ball end position
   980
   981 2B2D			bounce_bat_ball
   982 				; set new start of ball
   983 				; @todo check ball angles
   984 				; set new ball start angle (= previous end angle)
   985 2B2D A5 AB		            lda ball_angle_end
   986 2B2F 85 AA		            sta ball_angle_start
   987 				            
   988 				; alternative?
   989 				            ;ldx ball_angle_start
   990 				            ;jsr ball_to_start_position          
   991 2B31 20 24 2B		            jsr ball_current_to_start_position
   992
   993 				; which player hit the ball?
   994 				; collision bits:
   995 				; xxxxx1x1 : 1 is player1 collision
   996 				; xxxx1010 : 2 is player2 collision
   997
   998 2B34 A5 A0		            lda mp_collision
   999 2B36 4A			            lsr
  1000 2B37 4A			            lsr
  1001 2B38 05 A0		            ora mp_collision
  1002 2B3A 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1003
  1004 				; who's turn is it and who bounced the ball?
  1005
  1006 2B3C 25 B5		            and player_turn
  1007 2B3E F0 06		            beq no_switch_turn
  1008
  1009 2B40 A5 B5		            lda player_turn
  1010 2B42 49 03		            eor #3              ; 1 => 2, 2 => 1
  1011 2B44 85 B5		            sta player_turn 
  1012
  1013 2B46			no_switch_turn
  1014 2B46 20 9F 28		            jsr turn_color_ball
  1015
  1016 2B49 A5 B5		            lda player_turn
  1017 2B4B 49 03		            eor #3
  1018 2B4D AA			            tax
  1019 2B4E CA			            dex                 ; index 0,1 (player = 1,2)
  1020 2B4F B5 9C		            lda p1_angle,x
  1021
  1022 				; Calculate diff between bat angle position and new ball start position
  1023 2B51 85 B0		            sta tmp_angle1
  1024
  1025 2B53 A5 AA		            lda ball_angle_start
  1026 2B55 85 B1		            sta tmp_angle2
  1027
  1028 2B57 20 EB 2C		            jsr calc_angle_diff
  1029
  1030 2B5A 0A			            asl
  1031 2B5B 0A			            asl
  1032 2B5C 0A			            asl
  1033 2B5D 85 B3		            sta angle_diff_bat
  1034
  1035 2B5F A5 B0		            lda tmp_angle1
  1036 2B61 18			            clc
  1037 2B62 65 B2		            adc add_to_angle
  1038 2B64 49 80		            eor #128            ; other side
  1039 2B66 85 B0		            sta tmp_angle1
  1040 				            
  1041 2B68 A5 B4		            lda tmp_angle_direction
  1042 2B6A D0 0A		            bne diff_clockwise
  1043 				; diff counter clockwise
  1044 2B6C A5 B0		            lda tmp_angle1
  1045 2B6E 18			            clc
  1046 2B6F 65 B3		            adc angle_diff_bat
  1047 2B71 85 B0		            sta tmp_angle1
  1048 2B73 4C 7D 2B		            jmp calc_done            
  1049
  1050 2B76			diff_clockwise
  1051 2B76 A5 B0		            lda tmp_angle1
  1052 2B78 38			            sec
  1053 2B79 E5 B3		            sbc angle_diff_bat
  1054 2B7B 85 B0		            sta tmp_angle1
  1055 				            
  1056 				; calculation done            
  1057 2B7D			calc_done
  1058 2B7D A5 B0		            lda tmp_angle1
  1059 2B7F 85 AB		            sta ball_angle_end
  1060 2B81 AA			            tax
  1061 2B82 20 88 2B		            jsr angle_to_end_position
  1062 				                        
  1063 2B85 4C AF 2D		            jmp init_current_xy
  1064
  1065 				; x = angle 0..255
  1066 2B88			angle_to_end_position
  1067 2B88 BD 00 16		            lda outer_x_256,x
  1068 2B8B 85 E8		            sta tmp_x2
  1069 2B8D BD 00 17		            lda outer_y_256,x
  1070 2B90 85 E9		            sta tmp_y2
  1071 2B92 60			            rts
  1072
  1073 2B93			wipe_ball
  1074 2B93 A5 A7		            lda ball_current_y
  1075 2B95 4A			            lsr
  1076 2B96 69 06		            adc #ball_top_margin
  1077 2B98 AA			            tax                 ; x = real y position on screen
  1078 2B99 A9 00		            lda #0
  1079 2B9B 9D 80 11		            sta msl_area,x
  1080 2B9E 9D 81 11		            sta msl_area+1,x
  1081 2BA1 9D 82 11		            sta msl_area+2,x
  1082 2BA4 9D 83 11		            sta msl_area+3,x
  1083 2BA7 60			            rts
  1084
  1085 2BA8			show_ball
  1086 2BA8 A5 A7		            lda ball_current_y
  1087 2BAA 4A			            lsr
  1088 2BAB 69 06		            adc #ball_top_margin
  1089 2BAD AA			            tax                 ; x = real y position on screen
  1090
  1091 2BAE A9 02		            lda #%00000010
  1092 2BB0 9D 80 11		            sta msl_area,x
  1093 2BB3 9D 83 11		            sta msl_area+3,x
  1094 2BB6 A9 07		            lda #%00000111
  1095 2BB8 9D 81 11		            sta msl_area+1,x
  1096 2BBB 9D 82 11		            sta msl_area+2,x
  1097 				            
  1098 2BBE A5 A6		            lda ball_current_x
  1099 2BC0 4A			            lsr
  1100 2BC1 69 45		            adc #ball_left_margin
  1101 2BC3 8D 05 D0		            sta HPOSM1
  1102 2BC6 69 02		            adc #2
  1103 2BC8 8D 04 D0		            sta HPOSM0
  1104 				                        
  1105 2BCB 60			            rts
  1106 				            
  1107 2BCC			show_p1
  1108 2BCC A5 98		            lda player1_y
  1109 2BCE 18			            clc
  1110 2BCF 69 01		            adc #upper_margin
  1111 2BD1 AA			            tax
  1112
  1113 2BD2 A0 00		            ldy #0
  1114 2BD4			show_shape1
  1115 2BD4 B1 84		            lda (shape_ptr),y
  1116 2BD6 9D 00 12		            sta p0_area,x 
  1117 2BD9 C8			            iny
  1118 2BDA B1 84		            lda (shape_ptr),y
  1119 2BDC 9D 00 13		            sta p2_area,x
  1120 2BDF E8			            inx
  1121 2BE0 C8			            iny
  1122 2BE1 C0 20		            cpy #32
  1123 2BE3 D0 EF		            bne show_shape1
  1124 2BE5 60			            rts
  1125
  1126 2BE6			show_p2
  1127 2BE6 A5 99		            lda player2_y
  1128 2BE8 18			            clc
  1129 2BE9 69 01		            adc #upper_margin
  1130 2BEB AA			            tax
  1131
  1132 2BEC A0 00		            ldy #0
  1133 2BEE			show_shape2
  1134 2BEE B1 84		            lda (shape_ptr),y
  1135 2BF0 9D 80 12		            sta p1_area,x
  1136 2BF3 C8			            iny
  1137 2BF4 B1 84		            lda (shape_ptr),y
  1138 2BF6 9D 80 13		            sta p3_area,x
  1139 2BF9 E8			            inx
  1140 2BFA C8			            iny
  1141 2BFB C0 20		            cpy #32
  1142 2BFD D0 EF		            bne show_shape2
  1143 2BFF 60			            rts
  1144
  1145 2C00			wipe_p1
  1146 2C00 A5 98		            lda player1_y
  1147 2C02 18			            clc
  1148 2C03 69 01		            adc #upper_margin
  1149 2C05 AA			            tax
  1150 				            
  1151 2C06 A0 10		            ldy #16
  1152 2C08 A9 00		            lda #0
  1153 2C0A			wipe_it1            
  1154 2C0A 9D 00 12		            sta p0_area,x 
  1155 2C0D 9D 00 13		            sta p2_area,x
  1156 2C10 E8			            inx
  1157 2C11 88			            dey
  1158 2C12 D0 F6		            bne wipe_it1 
  1159 2C14 60			            rts
  1160
  1161 2C15			wipe_p2
  1162 2C15 A5 99		            lda player2_y
  1163 2C17 18			            clc
  1164 2C18 69 01		            adc #upper_margin
  1165 2C1A AA			            tax
  1166 				            
  1167 2C1B A0 10		            ldy #16
  1168 2C1D A9 00		            lda #0
  1169 2C1F			wipe_it2            
  1170 2C1F 9D 80 12		            sta p1_area,x
  1171 2C22 9D 80 13		            sta p3_area,x
  1172 2C25 E8			            inx
  1173 2C26 88			            dey
  1174 2C27 D0 F6		            bne wipe_it2 
  1175 2C29 60			            rts
  1176
  1177 2C2A			make_shape_index
  1178 2C2A A9 00		            lda #<pm_shapes
  1179 2C2C 85 84		            sta shape_ptr
  1180 2C2E A9 60		            lda #>pm_shapes
  1181 2C30 85 85		            sta shape_ptr+1
  1182 				            
  1183 2C32 A2 00		            ldx #0
  1184 2C34			fill_pm_tab
  1185 2C34 A5 84		            lda shape_ptr
  1186 2C36 9D 00 43		            sta pm_shape_lo,x
  1187 2C39 A5 85		            lda shape_ptr+1
  1188 2C3B 9D 80 43		            sta pm_shape_hi,x
  1189 				            
  1190 2C3E A5 84		            lda shape_ptr
  1191 2C40 18			            clc
  1192 2C41 69 20		            adc #32
  1193 2C43 85 84		            sta shape_ptr
  1194 2C45 A5 85		            lda shape_ptr+1
  1195 2C47 69 00		            adc #0
  1196 2C49 85 85		            sta shape_ptr+1
  1197 				            
  1198 2C4B E8			            inx
  1199 2C4C 10 E6		            bpl fill_pm_tab
  1200 				            
  1201 2C4E 60			            rts
  1202 				            
  1203 				; there are 128 shapes, each 32 bytes
  1204
  1205 				; y = shape index
  1206 2C4F			shape_to_ptr
  1207 2C4F B9 00 43		            lda pm_shape_lo,y
  1208 2C52 85 84		            sta shape_ptr
  1209 2C54 B9 80 43		            lda pm_shape_hi,y
  1210 2C57 85 85		            sta shape_ptr+1
  1211
  1212 2C59 60			            rts
  1213
  1214 				; turn 1024 tables into 256 bytes for ball edge lookup
  1215 2C5A			make_outer_256
  1216 2C5A A0 00		            ldy #0
  1217 2C5C A2 00		            ldx #0
  1218 2C5E			conv_256
  1219 2C5E BD 00 34		            lda outer_x_tab,x
  1220 2C61 99 00 16		            sta outer_x_256,y
  1221 2C64 BD 00 35		            lda outer_x_tab+$100,x
  1222 2C67 99 40 16		            sta outer_x_256+64,y
  1223 2C6A BD 00 36		            lda outer_x_tab+$200,x
  1224 2C6D 99 80 16		            sta outer_x_256+128,y
  1225 2C70 BD 00 37		            lda outer_x_tab+$300,x
  1226 2C73 99 C0 16		            sta outer_x_256+192,y
  1227 				            
  1228 2C76 BD 00 38		            lda outer_y_tab,x
  1229 2C79 99 00 17		            sta outer_y_256,y
  1230 2C7C BD 00 39		            lda outer_y_tab+$100,x
  1231 2C7F 99 40 17		            sta outer_y_256+64,y
  1232 2C82 BD 00 3A		            lda outer_y_tab+$200,x
  1233 2C85 99 80 17		            sta outer_y_256+128,y
  1234 2C88 BD 00 3B		            lda outer_y_tab+$300,x
  1235 2C8B 99 C0 17		            sta outer_y_256+192,y
  1236
  1237 2C8E E8			            inx
  1238 2C8F E8			            inx
  1239 2C90 E8			            inx
  1240 2C91 E8			            inx
  1241 2C92 C8			            iny
  1242 2C93 C0 40		            cpy #64
  1243 2C95 D0 C7		            bne conv_256            
  1244 2C97 60			            rts
  1245
  1246 2C98			show_score_p1
  1247 2C98 AD 14 41		            lda score_p1
  1248 2C9B 4A			            lsr
  1249 2C9C 4A			            lsr
  1250 2C9D 4A			            lsr
  1251 2C9E 4A			            lsr
  1252 2C9F F0 02		            beq do_space1
  1253 2CA1 09 10		            ora #16
  1254 2CA3			do_space1
  1255 2CA3 8D F1 40		            sta score_chars_p1
  1256 2CA6 AD 14 41		            lda score_p1
  1257 2CA9 29 0F		            and #15
  1258 2CAB 09 10		            ora #16
  1259 2CAD 8D F2 40		            sta score_chars_p1+1
  1260 2CB0 60			            rts
  1261
  1262 2CB1			show_score_p2
  1263 2CB1 AD 15 41		            lda score_p2
  1264 2CB4 4A			            lsr
  1265 2CB5 4A			            lsr
  1266 2CB6 4A			            lsr
  1267 2CB7 4A			            lsr
  1268 2CB8 F0 02		            beq do_space2
  1269 2CBA 09 10		            ora #16
  1270 2CBC			do_space2
  1271 2CBC 8D 11 41		            sta score_chars_p2
  1272 2CBF AD 15 41		            lda score_p2
  1273 2CC2 29 0F		            and #15
  1274 2CC4 09 10		            ora #16
  1275 2CC6 8D 12 41		            sta score_chars_p2+1
  1276 2CC9 60			            rts
  1277 				                        
  1278 2CCA			reset_score
  1279 2CCA A9 00		            lda #0
  1280 2CCC 8D 14 41		            sta score_p1
  1281 2CCF 8D 15 41		            sta score_p2
  1282 2CD2 60			            rts            
  1283 				         
  1284 2CD3			inc_score_p1
  1285 2CD3 F8			            sed
  1286 2CD4 AD 14 41		            lda score_p1
  1287 2CD7 18			            clc
  1288 2CD8 69 01		            adc #1
  1289 2CDA 8D 14 41		            sta score_p1    
  1290 2CDD D8			            cld
  1291 2CDE 60			            rts
  1292
  1293 2CDF			inc_score_p2
  1294 2CDF F8			            sed
  1295 2CE0 AD 15 41		            lda score_p2
  1296 2CE3 18			            clc
  1297 2CE4 69 01		            adc #1
  1298 2CE6 8D 15 41		            sta score_p2
  1299 2CE9 D8			            cld
  1300 2CEA 60			            rts
  1301
  1302 				; calculate the difference between angle1 and angle2
  1303
  1304 				; input:
  1305 				; tmp_angle1 (0..255)
  1306 				; tmp_angle2 (0..255)
  1307
  1308 				; output:
  1309 				; tmp_angle_diff, A: difference between angle1 and angle2
  1310 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1311
  1312 2CEB			calc_angle_diff
  1313 2CEB A9 00		            lda #0
  1314 2CED 85 B2		            sta add_to_angle
  1315 2CEF 85 B4		            sta tmp_angle_direction
  1316
  1317 				; make sure we can compare angles, otherwise add $40 to angles
  1318 2CF1 A5 B0		            lda tmp_angle1
  1319 2CF3 C9 C0		            cmp #$c0
  1320 2CF5 B0 06		            bcs too_large
  1321 2CF7 A5 B1		            lda tmp_angle2
  1322 2CF9 C9 C0		            cmp #$c0
  1323 2CFB 90 12		            bcc not_too_large
  1324 2CFD			too_large
  1325 2CFD A5 B0		            lda tmp_angle1
  1326 2CFF 38			            sec
  1327 2D00 E9 40		            sbc #$40
  1328 2D02 85 B0		            sta tmp_angle1
  1329 				            
  1330 2D04 A5 B1		            lda tmp_angle2
  1331 2D06 38			            sec
  1332 2D07 E9 40		            sbc #$40
  1333 2D09 85 B1		            sta tmp_angle2
  1334 				            
  1335 2D0B A9 40		            lda #$40
  1336 2D0D 85 B2		            sta add_to_angle
  1337
  1338 2D0F			not_too_large
  1339 2D0F A5 B1		            lda tmp_angle2
  1340 2D11 C5 B0		            cmp tmp_angle1
  1341 2D13 90 0A		            bcc angle2_smaller_angle1
  1342 				; ball >= play
  1343 2D15 38			            sec
  1344 2D16 E5 B0		            sbc tmp_angle1
  1345 2D18 85 B7		            sta tmp_angle_diff
  1346 				            
  1347 2D1A E6 B4		            inc tmp_angle_direction
  1348 2D1C 4C 26 2D		            jmp diff_calculated
  1349 				                        
  1350 2D1F			angle2_smaller_angle1
  1351 2D1F A5 B0		            lda tmp_angle1
  1352 2D21 38			            sec
  1353 2D22 E5 B1		            sbc tmp_angle2
  1354 2D24 85 B7		            sta tmp_angle_diff
  1355
  1356 2D26			diff_calculated
  1357 2D26 A5 B7		            lda tmp_angle_diff           
  1358 2D28 60			            rts
  1359
  1360 				; X = angle
  1361 				; lookup magnitude of angle 0 to angle X
  1362 2D29			angle_to_magnitude
  1363 2D29 BD 00 3C		            lda magnitudes_lo,x
  1364 2D2C 85 B8		            sta magnitude
  1365 2D2E BD 00 3D		            lda magnitudes_hi,x
  1366 2D31 85 B9		            sta magnitude+1
  1367 2D33 60			            rts
  1368
  1369 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1370 2D34			calc_abs_tmp_dx
  1371 2D34 A5 E8		            lda tmp_x2
  1372 2D36 38			            sec
  1373 2D37 E5 E6		            sbc tmp_x1
  1374 2D39 B0 05		            bcs x2_le
  1375 2D3B 49 FF		            eor #255
  1376 2D3D 18			            clc
  1377 2D3E 69 01		            adc #1
  1378 2D40 85 F2		x2_le       sta tmp_dx
  1379
  1380 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1381 2D42			calc_abs_tmp_dy
  1382 2D42 A5 E9		            lda tmp_y2
  1383 2D44 38			            sec
  1384 2D45 E5 E7		            sbc tmp_y1
  1385 2D47 B0 05		            bcs y2_le
  1386 2D49 49 FF		            eor #255
  1387 2D4B 18			            clc
  1388 2D4C 69 01		            adc #1
  1389 2D4E 85 F3		y2_le       sta tmp_dy
  1390 2D50 60			            rts
  1391 				            
  1392 2D51			calc_dx_div_magnitude
  1393 2D51 A9 00		            lda #0
  1394 2D53 85 E2		            sta _dividend
  1395 2D55 A5 F2		            lda tmp_dx
  1396 2D57 85 E3		            sta _dividend+1
  1397
  1398 2D59 A5 B9		            lda magnitude+1
  1399 2D5B 85 E0		            sta _divisor
  1400 2D5D A9 00		            lda #0
  1401 2D5F 85 E1		            sta _divisor+1
  1402 				            
  1403 2D61 20 89 2D		            jsr _div16
  1404
  1405 				; todo multiply result with velocity            
  1406 2D64 A5 E2		            lda _result
  1407 2D66 85 EE		            sta step_x
  1408 2D68 A5 E3		            lda _result+1
  1409 2D6A 85 EF		            sta step_x+1
  1410 				            
  1411 2D6C 60			            rts
  1412 				            
  1413 2D6D			calc_dy_div_magnitude
  1414 2D6D A9 00		            lda #0
  1415 2D6F 85 E2		            sta _dividend
  1416 2D71 A5 F3		            lda tmp_dy
  1417 2D73 85 E3		            sta _dividend+1
  1418 				            
  1419 2D75 A5 B9		            lda magnitude+1
  1420 2D77 85 E0		            sta _divisor
  1421 2D79 A9 00		            lda #0
  1422 2D7B 85 E1		            sta _divisor+1
  1423
  1424 2D7D 20 89 2D		            jsr _div16
  1425 				            
  1426 				; todo multiply result with velocity
  1427 2D80 A5 E2		            lda _result
  1428 2D82 85 F0		            sta step_y
  1429 2D84 A5 E3		            lda _result+1
  1430 2D86 85 F1		            sta step_y+1
  1431 				            
  1432 2D88 60			            rts
  1433
  1434 				; divide 16bit
  1435 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1436
  1437 				; _result = _dividend / divisor
  1438
  1439 2D89 A9 00		_div16      lda #0          ;preset remainder to 0
  1440 2D8B 85 E4		            sta _remainder
  1441 2D8D 85 E5		            sta _remainder+1
  1442 2D8F A2 10		            ldx #16         ;repeat for each bit: ...
  1443
  1444 2D91 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1445 2D93 26 E3		            rol _dividend+1  
  1446 2D95 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1447 2D97 26 E5		            rol _remainder+1
  1448 2D99 A5 E4		            lda _remainder
  1449 2D9B 38			            sec
  1450 2D9C E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1451 2D9E A8			            tay         ;lb result -> Y, for we may need it later
  1452 2D9F A5 E5		            lda _remainder+1
  1453 2DA1 E5 E1		            sbc _divisor+1
  1454 2DA3 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1455
  1456 2DA5 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1457 2DA7 84 E4		            sty _remainder   
  1458 2DA9 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1459
  1460 2DAB CA			_div_skip   dex
  1461 2DAC D0 E3		            bne _div_loop 
  1462 2DAE 60			            rts
  1463
  1464 				; Calculations for step size
  1465
  1466 				; not optimised for speed or size
  1467 				; step should be set according to the angle
  1468
  1469 				; move in straight line (x1,y1) to (x2,y2)
  1470
  1471 				; 1. set start/end of line
  1472 				; set (tmp_x1, tmp_y1)
  1473 				; set (tmp_x2, tmp_y2)
  1474
  1475 				; 2. init. current_x, current_y
  1476 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1477 				; - calculates step sizes for x,y
  1478 				; - calculated directions for x,y
  1479 				;            jsr init_current_xy
  1480
  1481 				; 3. use current_x, current_y to plot or set a position
  1482 				;            lda current_x+1
  1483 				;            sta x_position
  1484 				;            lda current_y+1
  1485 				;            sta y_position
  1486 				;            jsr plot_pixel
  1487
  1488 				; 4. move current_x, current_y to next position on line
  1489 				; A=0 still moving
  1490 				;           move_current_xy
  1491
  1492 2DAF			init_current_xy
  1493 2DAF A9 7F		            lda #$7f      ; was 128 for half pixel
  1494 2DB1 85 EA		            sta current_x
  1495 2DB3 85 EC		            sta current_y
  1496
  1497 2DB5 A5 E6		            lda tmp_x1
  1498 2DB7 85 EB		            sta current_x+1
  1499 				            
  1500 2DB9 A5 E7		            lda tmp_y1
  1501 2DBB 85 ED		            sta current_y+1
  1502
  1503 				; dx = abs(tmp_x1 - tmp_x2)
  1504 2DBD 20 34 2D		            jsr calc_abs_tmp_dx
  1505
  1506 				; dy = abs(tmp_y1 - tmp_y2)
  1507 2DC0 20 42 2D		            jsr calc_abs_tmp_dy
  1508
  1509 				; set directions
  1510 2DC3 A5 E6		            lda tmp_x1
  1511 2DC5 C5 E8		            cmp tmp_x2
  1512 2DC7 90 04		            bcc x1_smaller_x2
  1513 				; x1 >= x2
  1514 2DC9 A9 01		            lda #1
  1515 2DCB D0 02		            bne set_dir_x
  1516 2DCD			x1_smaller_x2
  1517 2DCD A9 00		            lda #0
  1518 2DCF			set_dir_x
  1519 2DCF 85 FA		            sta dir_x
  1520 				            
  1521 2DD1 A5 E7		            lda tmp_y1
  1522 2DD3 C5 E9		            cmp tmp_y2
  1523 2DD5 90 04		            bcc y1_smaller_y2
  1524 				; y1 >= y2
  1525 2DD7 A9 01		            lda #1
  1526 2DD9 D0 02		            bne set_dir_y
  1527 2DDB			y1_smaller_y2
  1528 2DDB A9 00		            lda #0
  1529 2DDD			set_dir_y
  1530 2DDD 85 FB		            sta dir_y
  1531
  1532 				; Calculate diff between start angle and end angle
  1533
  1534 2DDF A5 AA		            lda ball_angle_start
  1535 2DE1 85 B0		            sta tmp_angle1
  1536 2DE3 A5 AB		            lda ball_angle_end
  1537 2DE5 85 B1		            sta tmp_angle2
  1538 				            
  1539 2DE7 20 EB 2C		            jsr calc_angle_diff
  1540
  1541 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1542 2DEA A6 B7		            ldx tmp_angle_diff
  1543 2DEC 20 29 2D		            jsr angle_to_magnitude
  1544 				            
  1545 2DEF 20 51 2D		            jsr calc_dx_div_magnitude
  1546 2DF2 20 6D 2D		            jsr calc_dy_div_magnitude
  1547 				            
  1548 				; Calculate step size by ball speed
  1549 				            
  1550 				; step_x = step_x * speed
  1551 				            
  1552 2DF5 A5 EE		            lda step_x
  1553 2DF7 85 F6		            sta _multiplicand
  1554 2DF9 A5 EF		            lda step_x+1
  1555 2DFB 85 F7		            sta _multiplicand+1
  1556 2DFD A5 AC		            lda ball_speed
  1557 2DFF 85 F8		            sta _multiplier
  1558
  1559 2E01 20 45 27		            jsr _multi8
  1560 				;result in .A (low byte, also in .X) and .Y (high byte)
  1561 2E04 85 EE		            sta step_x
  1562 2E06 84 EF		            sty step_x+1
  1563 2E08			skip_step_x_hi
  1564 				            
  1565 				; step_y = step_y * speed
  1566
  1567 2E08 A5 F0		            lda step_y
  1568 2E0A 85 F6		            sta _multiplicand
  1569 2E0C A5 F1		            lda step_y+1
  1570 2E0E 85 F7		            sta _multiplicand+1
  1571 2E10 A5 AC		            lda ball_speed
  1572 2E12 85 F8		            sta _multiplier
  1573
  1574 2E14 20 45 27		            jsr _multi8
  1575 				;result in .A (low byte, also in .X) and .Y (high byte)
  1576 2E17 85 F0		            sta step_y
  1577 2E19 84 F1		            sty step_y+1
  1578 2E1B			skip_step_y_hi
  1579
  1580 2E1B 60			            rts
  1581
  1582 				; Move ball position 
  1583 				; Add one step, until end reached
  1584 				; Input:
  1585 				; - step size (step_x, step_y)
  1586 				; - current ball position (current_x, current_y)
  1587 				; - end position (tmp_x2, tmp_y2)
  1588 				; Output:
  1589 				; A (0 = still moving, 1 = end reached)
  1590 2E1C			move_current_xy
  1591 2E1C A9 00		            lda #0
  1592 2E1E 85 FC		            sta line_end_x
  1593 2E20 85 FD		            sta line_end_y
  1594
  1595 				; sets line end indicators here
  1596 2E22 20 3F 2E		            jsr move_current_x
  1597 2E25 20 7F 2E		            jsr move_current_y
  1598
  1599 2E28 A5 FC		            lda line_end_x
  1600 2E2A 25 FD		            and line_end_y
  1601 2E2C F0 10		            beq no_end_reached
  1602 				            
  1603 				; set current to (x2,y2)
  1604 2E2E A5 E8		            lda tmp_x2
  1605 2E30 85 EB		            sta current_x+1
  1606 2E32 A5 E9		            lda tmp_y2
  1607 2E34 85 ED		            sta current_y+1
  1608 				            
  1609 2E36 A9 00		            lda #0
  1610 2E38 85 EA		            sta current_x
  1611 2E3A 85 EC		            sta current_y
  1612 				            
  1613 2E3C A9 01		            lda #1 ; end reached
  1614 				            
  1615 2E3E			no_end_reached  ; A = 0
  1616 2E3E 60			            rts
  1617
  1618 2E3F			move_current_x
  1619 2E3F A5 FA		            lda dir_x
  1620 2E41 D0 18		            bne move_current_left
  1621
  1622 				; move right, add
  1623 2E43 A5 EA		            lda current_x
  1624 2E45 18			            clc
  1625 2E46 65 EE		            adc step_x
  1626 2E48 85 EA		            sta current_x
  1627 2E4A A5 EB		            lda current_x+1
  1628 2E4C 65 EF		            adc step_x+1
  1629 2E4E 85 EB		            sta current_x+1
  1630
  1631 2E50 A5 EB		            lda current_x+1
  1632 2E52 C5 E8		            cmp tmp_x2
  1633 2E54 90 04		            bcc no_line_end
  1634 2E56			exact_end_x
  1635 2E56 A9 01		            lda #1
  1636 2E58 85 FC		            sta line_end_x 
  1637 2E5A			no_line_end
  1638 2E5A 60			            rts
  1639 				            
  1640 2E5B			move_current_left
  1641 2E5B A5 EA		            lda current_x
  1642 2E5D 38			            sec
  1643 2E5E E5 EE		            sbc step_x
  1644 2E60 90 01		            bcc clear_skip
  1645 2E62 EA			            nop
  1646 2E63			clear_skip
  1647 2E63 85 EA		            sta current_x
  1648 2E65 A5 EB		            lda current_x+1
  1649 2E67 E5 EF		            sbc step_x+1
  1650 2E69 85 EB		            sta current_x+1
  1651 2E6B 90 0B		            bcc below_zero
  1652 				                        
  1653 2E6D A5 E8		            lda tmp_x2
  1654 2E6F C5 EB		            cmp current_x+1
  1655 2E71 90 E7		            bcc no_line_end
  1656 2E73 A9 01		            lda #1
  1657 2E75 85 FC		            sta line_end_x            
  1658 2E77 60			            rts
  1659 2E78			below_zero            
  1660 2E78 A9 01		            lda #1
  1661 2E7A 85 FC		            sta line_end_x
  1662 2E7C 85 FD		            sta line_end_y
  1663 2E7E 60			            rts
  1664 2E7F			move_current_y
  1665 2E7F A5 FB		            lda dir_y
  1666 2E81 D0 18		            bne move_current_up
  1667
  1668 				; move down, add
  1669 2E83 A5 EC		            lda current_y
  1670 2E85 18			            clc
  1671 2E86 65 F0		            adc step_y
  1672 2E88 85 EC		            sta current_y
  1673 2E8A A5 ED		            lda current_y+1
  1674 2E8C 65 F1		            adc step_y+1
  1675 2E8E 85 ED		            sta current_y+1
  1676 				            
  1677 2E90 A5 ED		            lda current_y+1
  1678 2E92 C5 E9		            cmp tmp_y2
  1679 2E94 90 C4		            bcc no_line_end
  1680 2E96			exact_end_y
  1681 2E96 A9 01		            lda #1
  1682 2E98 85 FD		            sta line_end_y
  1683 2E9A 60			            rts
  1684
  1685 2E9B			move_current_up
  1686 2E9B A5 EC		            lda current_y
  1687 2E9D 38			            sec
  1688 2E9E E5 F0		            sbc step_y
  1689 2EA0 85 EC		            sta current_y
  1690 2EA2 A5 ED		            lda current_y+1
  1691 2EA4 E5 F1		            sbc step_y+1
  1692 2EA6 90 D0		            bcc below_zero
  1693 2EA8 85 ED		            sta current_y+1
  1694 				            
  1695 2EAA A5 E9		            lda tmp_y2
  1696 2EAC C5 ED		            cmp current_y+1
  1697 2EAE 90 AA		            bcc no_line_end
  1698 2EB0 A9 01		            lda #1
  1699 2EB2 85 FD		            sta line_end_y
  1700 2EB4 60			            rts                            
  1701 				            
  1702 2EB5			init_sprites
  1703 2EB5 A2 00		            ldx #0
  1704 2EB7 8A			            txa
  1705 2EB8			set_p
  1706 2EB8 9D 00 12		            sta p0_area,x
  1707 2EBB 9D 80 12		            sta p1_area,x
  1708 2EBE 9D 00 13		            sta p2_area,x
  1709 2EC1 9D 80 13		            sta p3_area,x
  1710 2EC4 E8			            inx
  1711 2EC5 10 F1		            bpl set_p
  1712
  1713 2EC7 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1714 2EC9 8D 6F 02		            sta GPRIOR
  1715
  1716 2ECC A9 10		            lda #>pm_area
  1717 2ECE 8D 07 D4		            sta PMBASE
  1718
  1719 2ED1 A9 03		            lda #3          ; P/M both on
  1720 2ED3 8D 1D D0		            sta GRACTL
  1721
  1722 2ED6 A9 90		            lda #$90
  1723 2ED8 8D 02 D0		            sta HPOSP2
  1724 2EDB A9 A0		            lda #$A0
  1725 2EDD 8D 03 D0		            sta HPOSP3  
  1726 2EE0 60			            rts
  1727
  1728 2EE1			init_colors
  1729 2EE1 A9 5A		            lda #BASE_COLOR_P1+10
  1730 2EE3 8D C2 02		            sta PCOLR2
  1731 2EE6 A9 BA		            lda #BASE_COLOR_P2+10
  1732 2EE8 8D C3 02		            sta PCOLR3
  1733 				            
  1734 2EEB A9 00		            lda #0
  1735 2EED 8D C6 02		            sta COLOR2
  1736
  1737 2EF0 A9 0E		            lda #HEADER_FG_COLOR
  1738 2EF2 8D C5 02		            sta COLOR1
  1739
  1740 2EF5 A9 50		            lda #HEADER_P1_COLOR
  1741 2EF7 8D C0 02		            sta PCOLR0
  1742 2EFA A9 B0		            lda #HEADER_P2_COLOR
  1743 2EFC 8D C1 02		            sta PCOLR1
  1744
  1745 2EFF 60			            rts
  1746
  1747 2F00			previous_consol
  1748 2F00 00			            dta 0
  1749
  1750 2F01			current_level_index
  1751 2F01 00			            dta 0
  1752 = 0004			NR_OF_LEVELS = 4
  1753 = 0000			INIT_LEVEL_INDEX = 0
  1754 2F02			level_speeds
  1755 2F02 02 04 06 08		            dta 2,4,6,8
  1756 				            
  1757 				; X = level (0..NR_OF_LEVELS)
  1758 2F06			set_level_ball_speed
  1759 2F06 BD 02 2F		            lda level_speeds,x
  1760 2F09 85 AC		            sta ball_speed
  1761 2F0B 8A			            txa
  1762 2F0C 18			            clc
  1763 2F0D 69 01		            adc #1
  1764 2F0F 09 10		            ora #16
  1765 2F11 8D 48 42		            sta level_char
  1766 2F14 60			            rts
  1767 				            
  1768 2F15			increase_level
  1769 2F15 EE 01 2F		            inc current_level_index
  1770 2F18 AD 01 2F		            lda current_level_index
  1771 2F1B C9 04		            cmp #NR_OF_LEVELS
  1772 2F1D D0 05		            bne ok_level
  1773 2F1F A9 00		            lda #INIT_LEVEL_INDEX
  1774 2F21 8D 01 2F		            sta current_level_index
  1775 2F24			ok_level           
  1776 2F24 60			            rts
  1777 				            
  1778 2F25			            .align $100
  1779 3000			inner_x_tab
  1780 = 3100			inner_y_tab = *+$100
  1781 3000-31FF> 70 72 75 77 +             ins 'data\in210.dat'
  1782 				      
  1783 3200			            .align $400            
  1784 				; outer circle 1024 plot points on 360 degrees
  1785 3400			outer_x_tab
  1786 = 3800			outer_y_tab = *+1024
  1787 3400-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1788 				           
  1789 3C00			            .align $400
  1790 				; table of magnitudes (length) between angle 0 and 0..255
  1791 				; fixed point 8.8 : hi.lo
  1792 3C00			magnitudes_lo
  1793 = 3D00			magnitudes_hi = *+256
  1794 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1795
  1796 3E00			            .align $400
  1797 4000			display_list
  1798 4000-41CC> C2		            dta $42+128         ; dli_header
  1799 4001 EC 40		            dta a(score_line)
  1800
  1801 				; 102 x 40 = 4080 bytes            
  1802 4003 4F			            dta $4f
  1803 4004			dl_screen_ptr1
  1804 4004 00 70		            dta a(screen_mem1)
  1805 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1806 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1807 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1808 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1809
  1810 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1811 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1812 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1813 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1814
  1815 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1816 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1817 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1818 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1819
  1820 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1821
  1822 				; 102 x 40 = 4080 bytes
  1823 406B 4F			            dta $4f
  1824 406C			dl_screen_ptr2
  1825 406C 00 80		            dta a(screen_mem2)
  1826 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1827 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1828 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1829 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1830
  1831 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1832 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1833 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1834 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1835
  1836 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1837 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1838 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1839 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1840
  1841 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1842
  1843 				; 20 x 40 = 800
  1844 40D3 4F			            dta $4f
  1845 40D4 00 90		            dta a(screen_mem3)       
  1846 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1847 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1848 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1849 				            
  1850 40E9 41			            dta $41
  1851 40EA 00 40		            dta a(display_list)
  1852
  1853 40EC			score_line  
  1854 40EC 00 2F 2E 25 00	            dta d' ONE '
  1855 40F1			score_chars_p1
  1856 40F1 0D 0D 00		            dta d'-- '
  1857
  1858 40F4 00 00 00 00 00 00 +             dta d'          '
  1859 40FE 00 00 00 00 00 00 +             dta d'          '
  1860
  1861 4108 00 00 00 00 00 34 +             dta d'     TWO '
  1862 4111			score_chars_p2
  1863 4111 0D 0D 00		            dta d'-- '
  1864
  1865 4114 00			score_p1    dta 0
  1866 4115 00			score_p2    dta 0
  1867
  1868 				            ;.align $400
  1869 				            
  1870 4116			menu_dl
  1871 4116 C2			            dta $42+128         ; dli_header
  1872 4117 EC 40		            dta a(score_line)
  1873 				            
  1874 4119 4F			            dta $4f
  1875 411A 00 70		            dta a(screen_mem1)
  1876 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1877 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1878 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1879 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1880
  1881 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1882 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1883 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1884 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1885
  1886 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1887 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f     ; dli_menu
  1888
  1889 				; 64 scanlines
  1890 416B 30			            dta $30
  1891 416C 47			            dta $47
  1892 416D 00 42		            dta a(menu_screen)
  1893 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1894
  1895 				; 60 lines
  1896 4176 4F			            dta $4f
  1897 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1898 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1899 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1900 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1901 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1902
  1903 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1904 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1905 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1906 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1907
  1908 				; 20 lines            
  1909 41B4 4F			            dta $4f
  1910 41B5 00 90		            dta a(screen_mem3)
  1911 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1912 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1913 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1914 				           
  1915 41CA 41			            dta $41
  1916 41CB 16 41		            dta a(menu_dl)
  1917
  1918 41CD			            .align $100
  1919 4200			menu_screen
  1920 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1921
  1922 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1923 421E			driver_screen
  1924 421E 00 00 00 00 00 00 +             dta d'            '
  1925 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1926 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1927 4248			level_char            
  1928 4248 11 00 00 00 00 00 +             dta d'1       '
  1929 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1930 4278			stick_text
  1931 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1932 4280			paddle_text
  1933 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1934 4288			driving_text
  1935 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1936 4290			computer_text
  1937 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1938
  1939 4298			driver_text_lo
  1940 4298 78			            dta <stick_text
  1941 4299 80			            dta <paddle_text
  1942 429A 88			            dta <driving_text
  1943 429B 90			            dta <computer_text
  1944 				            
  1945 429C			driver_text_hi
  1946 429C 42			            dta >stick_text
  1947 429D 42			            dta >paddle_text
  1948 429E 42			            dta >driving_text
  1949 429F 42			            dta >computer_text
  1950
  1951 42A0			            .align $100
  1952 = 4300			pm_shape_lo .ds 128
  1953 = 4380			pm_shape_hi .ds 128
  1954
  1955 4400			            .align $100
  1956 4400			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 4400			buffers
    44 = 4400			    .ds 256 * 9
    45
    46 4D00			intro_data
    47 4D00-5F79> 01 01 A1 34 +         ins     'intro.lz16'
    48 4FD8			intro_end
    49
    50 4FD8			loop_data
    51 4FD8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 5DD9			loop_end
    53
    54 5DD9			.proc get_byte
    55 5DD9 AD 34 12		    lda $1234
    56 5DDC EE DA 5D		    inc song_ptr
    57 5DDF D0 03		    bne skip
    58 5DE1 EE DB 5D		    inc song_ptr+1
    59 5DE4			skip
    60 5DE4 60			    rts
    61 				.endp
    62 = 5DDA			song_ptr = get_byte + 1
    63
    64 5DE5			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 5DE5			.proc play_first_frame
    70
    71 5DE5 20 D9 5D		    jsr get_byte                    ; IVO START move init here
    72 5DE8 8D 24 5E		    sta play_frame.init_chn_bits
    73 5DEB A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 5DED 85 D6		    sta bit_data
    75 5DEF A9 44		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 5DF1 8D 04 5E		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 5DF4 A2 08		    ldx #8
    80 5DF6 A0 00		    ldy #0
    81 5DF8 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 5DFA			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 5DFA 20 D9 5D		    jsr get_byte
    85 5DFD 9D 71 5F		    sta SHADOW, x
    86 5E00 94 C0		    sty chn_copy, x
    87 5E02			cbuf
    88 5E02 8D FF 44		    sta buffers + 255
    89 5E05 EE 04 5E		    inc cbuf + 2
    90 5E08 CA			    dex
    91 5E09 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 5E0B 84 D2		    sty bptr
    95 5E0D 84 D4		    sty cur_pos
    96 5E0F 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 5E10			.proc wait_frame
   103
   104 5E10 A5 14		    lda 20
   105 5E12			delay
   106 5E12 C5 14		    cmp 20
   107 5E14 F0 FC		    beq delay
   108 5E16 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 5E17			.proc play_frame
   115 5E17 A5 D7		    lda newsong
   116 5E19 F0 02		    beq continue
   117 5E1B D0 C8		    bne play_first_frame
   118
   119 5E1D			continue
   120 5E1D A4 D4		    ldy cur_pos                 ; IVO
   121
   122 5E1F A9 44		    lda #>buffers
   123 5E21 85 D3		    sta bptr+1
   124
   125 = 5E24			init_chn_bits=*+1
   126 5E23 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 5E25 85 D5		    sta chn_bits
   128 5E27 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 5E29			chn_loop:
   132 5E29 46 D5		    lsr chn_bits
   133 5E2B B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 5E2D B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 5E2F D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 5E31 46 D6		    lsr bit_data       ; Get next bit
   140 5E33 D0 06		    bne got_bit
   141 5E35 20 D9 5D		    jsr get_byte       ; Not enough bits, refill!
   142 5E38 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 5E39 85 D6		    sta bit_data       ;
   144 5E3B			got_bit:
   145 5E3B 20 D9 5D		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 5E3E B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 5E40 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 5E42 20 D9 5D		    jsr get_byte
   151 5E45 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 5E47			do_copy_byte:
   155 5E47 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 5E49 F6 C9		    inc chn_pos, x
   157 5E4B B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 5E4D B1 D2		    lda (bptr), y
   161
   162 5E4F			store:
   163 5E4F A4 D4		    ldy cur_pos
   164 5E51 9D 71 5F		    sta SHADOW, x        ; Store to output and buffer
   165 5E54 91 D2		    sta (bptr), y
   166
   167 5E56			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 5E56 E6 D3		    inc bptr+1
   170
   171 5E58 CA			    dex
   172 5E59 10 CE		    bpl chn_loop        ; Next channel
   173
   174 5E5B E6 D4		    inc cur_pos
   175 5E5D 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 5E5E			.proc check_end_song
   182 5E5E AD DB 5D		    lda song_ptr + 1
   183 = 5E62			song_end_high=*+1
   184 5E61 C9 00		    cmp #>0
   185 5E63 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 5E65 AD DA 5D		    lda song_ptr
   187 = 5E69			song_end_low=*+1
   188 5E68 C9 00		    cmp #<0
   189 5E6A D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 5E6C 38			    sec                     ; IVO....
   192 5E6D 60			    rts
   193 5E6E			not_equal
   194 5E6E 18			    clc
   195 5E6F 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 5E70			.proc music_init
   201 5E70 20 12 5F		    jsr detect_2nd_pokey
   202 5E73 20 4B 5F		    jsr clear_echo
   203
   204 5E76 A9 8C 8D D1 5E A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 5E80 A9 D8		    lda #<intro_end
   209 5E82 8D 69 5E		    sta check_end_song.song_end_low
   210 5E85 A9 4F		    lda #>intro_end
   211 5E87 8D 62 5E		    sta check_end_song.song_end_high
   212 5E8A A9 00		    lda #<(intro_data)
   213 5E8C 8D DA 5D		    sta song_ptr
   214 5E8F A9 4D		    lda #>(intro_data)
   215 5E91 8D DB 5D		    sta song_ptr+1
   216 5E94 A9 01		    lda #1
   217 5E96 85 D7		    sta newsong
   218 5E98 60			    rts
   219 				.endp
   220
   221 5E99			.proc play_song
   222 5E99			playloop
   223 5E99 20 17 5E		    jsr play_frame      ; generates tick two and beyond
   224 5E9C 20 C1 5E		    jsr adjust_volume
   225
   226 5E9F 20 5E 5E		    jsr check_end_song
   227 5EA2 90 03		    bcc no_end_song
   228 5EA4 20 A8 5E		    jsr restart_music
   229 5EA7			no_end_song
   230 5EA7 60			    rts
   231 				.endp
   232
   233 5EA8			.proc restart_music
   234 5EA8 A9 D9		    lda #<loop_end
   235 5EAA 8D 69 5E		    sta check_end_song.song_end_low
   236 5EAD A9 5D		    lda #>loop_end
   237 5EAF 8D 62 5E		    sta check_end_song.song_end_high
   238 5EB2 A9 D8		    lda #<(loop_data)
   239 5EB4 8D DA 5D		    sta song_ptr
   240 5EB7 A9 4F		    lda #>(loop_data)
   241 5EB9 8D DB 5D		    sta song_ptr+1
   242 5EBC A9 01		    lda #1
   243 5EBE 85 D7		    sta newsong
   244 5EC0 60			    rts
   245 				.endp
   246
   247 5EC1			.proc adjust_volume
   248 5EC1 A0 06		    ldy #6
   249 5EC3			adjust
   250 5EC3 B9 72 5F		    lda SHADOW+1,y
   251 5EC6 AA			    tax
   252 5EC7 29 F0		    and #$f0
   253 5EC9 99 72 5F		    sta SHADOW+1,y
   254 5ECC 8A			    txa
   255 5ECD 29 0F		    and #$0f
   256 5ECF AA			    tax
   257 = 5ED1			volume=*+1
   258 5ED0 BD 34 12		    lda $1234,x
   259 5ED3 19 72 5F		    ora SHADOW+1,y
   260 5ED6 99 72 5F		    sta SHADOW+1,y
   261 5ED9 88			    dey
   262 5EDA 88			    dey
   263 5EDB 10 E6		    bpl adjust
   264 				    
   265 5EDD 60			    rts
   266 				.endp
   267
   268 5EDE			.proc copy_shadow
   269 5EDE A2 08		    ldx #8
   270 5EE0			copy
   271 5EE0 BD 71 5F		    lda SHADOW,x
   272 5EE3 9D 00 D2		    sta POKEY,x
   273 5EE6 CA			    dex
   274 5EE7 10 F7		    bpl copy
   275
   276 5EE9 A5 D8		    lda stereo_pokey
   277 5EEB F0 0E		    beq end_copy
   278
   279 5EED A2 08		    ldx #8
   280 5EEF			copy2
   281 5EEF BD 83 5F		    lda ECHO,x
   282 5EF2 9D 10 D2		    sta POKEY+$10,x
   283 5EF5 CA			    dex
   284 5EF6 10 F7		    bpl copy2
   285
   286 5EF8 20 56 5F		    jsr shift_echo
   287
   288 5EFB			end_copy
   289 5EFB 60			    rts
   290 				.endp
   291
   292 5EFC			.proc music_normal_volume
   293 5EFC A9 8C 8D D1 5E A9 +     mwa #normal_volume adjust_volume.volume
   294 5F06 60			    rts
   295 				.endp
   296
   297 5F07			.proc music_low_volume
   298 5F07 A9 AC 8D D1 5E A9 +     mwa #quarter_volume adjust_volume.volume
   299 5F11 60			    rts
   300 				.endp
   301
   302 5F12			.proc detect_2nd_pokey
   303 5F12 20 10 5E		    jsr wait_frame
   304
   305 5F15 A9 00 8D 32 02	    mva #0 SSKCTL
   306 5F1A A9 00 8D 0F D2	    mva #0 SKCTL
   307 5F1F A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 5F24 20 10 5E		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 5F27 A9 03 8D 32 02	    mva #3 SSKCTL
   314 5F2C A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 5F31 20 10 5E		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 5F34 AD 1A D2		    lda RANDOM+$10
   322 5F37 CD 1A D2		    cmp RANDOM+$10
   323 5F3A F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 5F3C			detected_mono
   326 5F3C A9 00 85 D8		    mva #0 stereo_pokey
   327 5F40 60			    rts
   328
   329 5F41			detected_stereo
   330 5F41 A9 01 85 D8		    mva #1 stereo_pokey
   331 5F45 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 5F4A 60			    rts
   333 				.endp
   334
   335 5F4B			.proc clear_echo
   336 5F4B A0 11		    ldy #(endecho-echobuffer)-1
   337 5F4D			clear_echo_loop
   338 5F4D A9 00 99 7A 5F	    mva #0 echobuffer,y
   339 5F52 88 10 F8		    dey:bpl clear_echo_loop
   340 5F55 60			    rts
   341 				.endp
   342
   343 5F56			.proc shift_echo
   344 5F56 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 5F58			shift_loop
   346 5F58 B9 71 5F 99 7A 5F	    mva SHADOW,y SHADOW+9,y
   347 5F5E 88 10 F7		    dey:bpl shift_loop
   348 5F61 60			    rts
   349 				.endp
   350
   351 5F62			.proc music_off
   352 5F62 A9 00		    lda #0
   353 5F64 8D 72 5F		    sta shadow+1
   354 5F67 8D 74 5F		    sta shadow+3
   355 5F6A 8D 76 5F		    sta shadow+5
   356 5F6D 8D 78 5F		    sta shadow+7
   357 5F70 60			    rts
   358 				.endp
   359
   360 5F71			SHADOW              ; shadow pokey
   361 5F71 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 5F7A			echobuffer
   370 = 5F7A			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 5F83			ECHO
   373 = 5F83			    .ds 9
   374 5F8C			endecho
   375
   376 5F8C			normal_volume
   377 5F8C-5FBD> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 5F9C			half_volume
   379 5F9C 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 5FAC			quarter_volume
   381 5FAC 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
  1957
  1958 				; 4 KB
  1959 				; 128 x 32 bytes shapes
  1960 5FBE			            .align $1000
  1961 6000			pm_shapes
  1962 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1963
  1964 				; 9 KB for backdrop image
  1965 7000			            .align $1000
  1966 = 7000			screen_mem1 = * ; 4K
  1967 				;            org screen_mem1
  1968 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1969
  1970 7FF0			            .align $1000
  1971 = 8000			screen_mem2 = * ; 4K
  1972 				;            org screen_mem2
  1973 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1974
  1975 8FF0			            .align $1000
  1976 = 9000			screen_mem3 = * ; 1K
  1977 				;            org screen_mem3
  1978 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1979
  1980 02E0-02E1> DC 26		            run main
