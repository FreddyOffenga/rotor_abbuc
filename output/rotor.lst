mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-20
     4 				; Version 1.1.10
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players ONE and TWO move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; Optional for a later version:
    16 				; - add computer player(s)
    17 				; - add support for driving controllers
    18
    19 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    20
    21 				; color scheme
    22 = 0050			BASE_COLOR_P1   = $50   ; purple
    23 = 00B0			BASE_COLOR_P2   = $b0   ; green
    24
    25 = 000E			HEADER_FG_COLOR = 14
    26 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    27 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    28
    29 				; must be in decimal format, so $11 is 11
    30 = 0011			MAX_SCORE   = $11
    31
    32 = 1000			pm_area     = $1000
    33 = 1180			msl_area    = pm_area+$180
    34 = 1200			p0_area     = pm_area+$200
    35 = 1280			p1_area     = pm_area+$280
    36 = 1300			p2_area     = pm_area+$300
    37 = 1380			p3_area     = pm_area+$380
    38
    39 				; $1400 .. $1500 is overwritten, bug?
    40
    41 				; outer tables 256 for 360 degrees
    42 = 1600			outer_x_256     = $1600
    43 = 1700			outer_y_256     = $1700
    44
    45 = 1800			screen_y_lo     = $1800
    46 = 1900			screen_y_hi     = $1900
    47
    48 = 0140			WIDTH           = 320
    49 = 00C0			HEIGHT          = 192
    50
    51 = 0028			SCREEN_WIDTH    = 40
    52
    53 = 0030			outer_x_margin  = 48 ;47-32
    54 = 0040			inner_x_margin  = 64
    55
    56 = 00A0			circle_center_x = WIDTH/2
    57 = 0060			circle_center_y = HEIGHT/2
    58
    59 = 0006			ball_top_margin     = 6
    60 = 0045			ball_left_margin    = 64+5
    61
    62 				; pm upper margin
    63 = 0001			upper_margin    = 1
    64 = 0020			left_margin     = 32
    65
    66 = 0080			music_toggle    = $80
    67
    68 = 0081			shadow_HPOSP0   = $81
    69 = 0082			shadow_HPOSP1   = $82
    70
    71 = 0084			shape_ptr       = $84
    72 = 0086			tmp_screen      = $86
    73
    74 = 008C			mode_menu       = $8c
    75
    76 = 008D			volume_hit_bat  = $8d
    77 = 008E			volume_hit_edge = $8e
    78
    79 				; player vars must be in sequence for zp,x indexing
    80
    81 = 0090			p1_shape        = $90
    82 = 0091			p2_shape        = $91
    83
    84 = 0094			player1_x       = $94
    85 = 0095			player2_x       = $95
    86
    87 = 0098			player1_y       = $98
    88 = 0099			player2_y       = $99
    89
    90 = 009C			p1_angle        = $9c
    91 = 009D			p2_angle        = $9d
    92
    93 = 00A0			mp_collision    = $a0
    94 = 00A1			in_collision    = $a1
    95 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    96 = 00A3			edge_delay      = $a3
    97 = 00A4			bat_collision_delay = $a4
    98
    99 				; ball vars
   100 = 00A6			ball_current_x      = $a6
   101 = 00A7			ball_current_y      = $a7
   102 = 00AA			ball_angle_start    = $aa
   103 = 00AB			ball_angle_end      = $ab
   104 = 00AC			ball_speed          = $ac
   105
   106 = 00B0			tmp_angle1          = $b0
   107 = 00B1			tmp_angle2          = $b1
   108 = 00B2			add_to_angle        = $b2
   109 = 00B3			angle_diff_bat      = $b3
   110 = 00B4			tmp_angle_direction = $b4
   111 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   112 = 00B6			game_restart        = $b6
   113 = 00B7			tmp_angle_diff      = $b7
   114 = 00B8			magnitude           = $b8       ; word
   115
   116 				; $c0 - $df free for music
   117
   118 = 00E0			_divisor    = $e0   ; word
   119 = 00E2			_dividend   = $e2   ; word
   120 = 00E4			_remainder  = $e4   ; word
   121 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   122
   123 = 00E6			tmp_x1      = $e6   ; byte
   124 = 00E7			tmp_y1      = $e7   ; byte
   125 = 00E8			tmp_x2      = $e8   ; byte
   126 = 00E9			tmp_y2      = $e9   ; byte
   127
   128 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   129 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   130
   131 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   132 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   133
   134 = 00F2			tmp_dx      = $f2  ; byte
   135 = 00F3			tmp_dy      = $f3  ; byte
   136
   137 = 00F6			_multiplicand   = $f6   ; word
   138 = 00F8			_multiplier     = $f8   ; byte
   139
   140 				; direction:
   141 				; 0 : x1<x2 or y1<y2 = add
   142 				; 1 ; x1>=y2 or y1>=y2 = subtract
   143
   144 = 00FA			dir_x       = $fa  ; byte
   145 = 00FB			dir_y       = $fb  ; byte
   146
   147 = 00FC			line_end_x  = $fc  ; byte
   148 = 00FD			line_end_y  = $fd  ; byte
   149
   150 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-060B> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12 060B 60			            rts
    13
    14 02E2-02E3> 00 06		            ini first_screen_off
    15
    16 060C			            org $2000
    17 2000			rotor_font
    18 2000-23FF> 00 00 00 00 +             ins 'font\rotor.fnt'
    19
    20 2400			            org $610
    21 0610			intro_main
    22 0610-0725> A9 58		            lda #<dl_intro
    23 0612 8D 30 02		            sta $230
    24 0615 A9 06		            lda #>dl_intro
    25 0617 8D 31 02		            sta $231
    26
    27 061A A9 20		            lda #>rotor_font
    28 061C 8D F4 02		            sta 756
    29
    30 061F A9 00		            lda #0
    31 0621 8D C6 02		            sta 710
    32
    33 0624 A9 22		            lda #34
    34 0626 8D 2F 02		            sta 559
    35
    36 				; reset clock
    37 0629 A9 00		            lda #0
    38 062B 85 14		            sta 20
    39 062D 85 13		            sta 19
    40 				            
    41 062F 60			            rts
    42
    43 0630			footer_intro
    44 0630 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    45
    46 0658			dl_intro
    47 0658 70 70 70		            dta $70,$70,$70
    48
    49 065B 4F			            dta $4f
    50 065C 10 A0		            dta a(intro_image)
    51 065E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    52 0665 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    53 066D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    54 0675 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    55
    56 067D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    57 0685 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    58 068D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 0695 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60
    61 069D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62 06A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    63 06AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 06B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65
    66 06BD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    67
    68 06C3 4F			            dta $4f
    69 06C4 00 B0		            dta a(intro_image+$ff0)
    70 06C6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 06CD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72 06D5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    73 06DD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    74
    75 06E5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    76 06ED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    77 06F5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 06FD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79
    80 0705 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81 070D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    82 0715 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 071D 0F 0F		            dta $0f,$0f
    84 				            
    85 071F 20			            dta $20
    86 0720 42			            dta $42
    87 0721 30 06		            dta a(footer_intro)
    88
    89 0723 41			            dta $41
    90 0724 58 06		            dta a(dl_intro)
    91 				            
    92 0726			            org $a010
    93 A010			intro_image
    94 A010-BE0F> 42 08 11 29 +             ins 'gfx\intro\intro_v4_gr8_inverted.gr8'
    95
    96 02E2-02E3> 10 06		            ini intro_main
   151
   152 BE10			            org $2400            
   153
   154 2400			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2400			driver_tmp      .ds 2
     5 = 2402			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 2403			            .align $100
    11 2500			paddle_to_256
    12 = 2500			            .ds $100
    13
    14 				; paddle initial value
    15 2600			prev_paddle_value
    16 = 2600			            .ds 1
    17
    18 2601			driver_init
    19 2601-2F34> A9 00		            lda #0  ; stick
    20 2603 8D 02 24		            sta driver_mode
    21
    22 2606 AD 70 02		            lda PADDL0
    23 2609 8D 00 26		            sta prev_paddle_value
    24
    25 260C A9 00		            lda #0
    26 260E 85 9C		            sta p1_angle
    27 2610 A9 80		            lda #128
    28 2612 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2614 A9 00		            lda #0
    33 2616 8D 00 24		            sta driver_tmp
    34 2619 8D 01 24		            sta driver_tmp+1
    35 				            
    36 261C A2 00		            ldx #0
    37 261E			store_pv
    38 261E AD 01 24		            lda driver_tmp+1
    39 2621 9D 00 25		            sta paddle_to_256,x
    40 				            
    41 2624 AD 00 24		            lda driver_tmp
    42 2627 18			            clc
    43 2628 69 1F		            adc #<paddle_add
    44 262A 8D 00 24		            sta driver_tmp
    45 262D AD 01 24		            lda driver_tmp+1
    46 2630 69 01		            adc #>paddle_add
    47 2632 8D 01 24		            sta driver_tmp+1
    48 2635 E8			            inx
    49 2636 E0 E5		            cpx #paddle_vals
    50 2638 D0 E4		            bne store_pv
    51 263A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 263B			driver_detect
    63 263B AD 70 02		            lda PADDL0
    64 263E C9 E4		            cmp #228
    65 2640 D0 07		            bne paddle_detect
    66 2642 AD 71 02		            lda PADDL1
    67 2645 C9 E4		            cmp #228
    68 2647 F0 06		            beq no_paddle_detect
    69 2649			paddle_detect
    70 2649 A9 01		            lda #1
    71 264B 8D 02 24		            sta driver_mode
    72 264E 60			            rts
    73
    74 264F			no_paddle_detect
    75 264F AD 78 02		            lda STICK0
    76 2652 C9 0C		            cmp #12
    77 2654 D0 06		            bne no_driving_detect
    78 2656 A9 02		            lda #2
    79 2658 8D 02 24		            sta driver_mode
    80 265B 60			            rts
    81
    82 265C			no_driving_detect
    83 265C C9 07		            cmp #7      ; paddle button also gives this
    84 265E F0 04		            beq stick_detect    
    85 2660 C9 0B		            cmp #11     ; paddle button also gives this
    86 2662 D0 06		            bne no_stick_detect
    87 2664			stick_detect
    88 2664 A9 00		            lda #0
    89 2666 8D 02 24		            sta driver_mode
    90 2669 60			            rts
    91
    92 266A			no_stick_detect
    93 				; default is the last value
    94 266A AD 02 24		            lda driver_mode
    95 266D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 266E			main_driver            
   110 266E AC 02 24		            ldy driver_mode
   111 2671 B9 80 26		            lda driver_lo,y
   112 2674 8D 7E 26		            sta driver_ptr
   113 2677 B9 84 26		            lda driver_hi,y
   114 267A 8D 7F 26		            sta driver_ptr+1
   115
   116 = 267E			driver_ptr = *+1
   117 267D 4C FF FF		            jmp $ffff  
   118
   119 2680			driver_lo
   120 2680 88			            dta <driver_stick
   121 2681 CD			            dta <driver_paddle
   122 2682 88			            dta <driver_stick
   123 2683 88			            dta <driver_stick
   124
   125 2684			driver_hi
   126 2684 26			            dta >driver_stick
   127 2685 26			            dta >driver_paddle
   128 2686 26			            dta >driver_stick
   129 2687 26			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2688			driver_stick
   134 2688 BD 78 02		            lda STICK0,x
   135 268B C9 0F		            cmp #15
   136 268D F0 21		            beq move_done
   137 268F C9 0B		            cmp #11
   138 2691 D0 0E		            bne no_left
   139
   140 2693 D6 9C		            dec p1_angle,x
   141 2695 BD 84 02		            lda STRIG0,x
   142 2698 D0 04		            bne no_fast
   143 269A D6 9C		            dec p1_angle,x
   144 269C D6 9C		            dec p1_angle,x
   145 269E			no_fast
   146 				            
   147 269E 4C B0 26		            jmp move_done
   148 26A1 C9 07		no_left     cmp #7
   149 26A3 D0 0B		            bne move_done
   150
   151 26A5 F6 9C		            inc p1_angle,x
   152 26A7 BD 84 02		            lda STRIG0,x
   153 26AA D0 04		            bne no_fast_right
   154 26AC F6 9C		            inc p1_angle,x
   155 26AE F6 9C		            inc p1_angle,x
   156 26B0			no_fast_right
   157 26B0			move_done
   158 26B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 26B1			is_fire_button
   165 26B1 AD 02 24		            lda driver_mode
   166 26B4 C9 01		            cmp #1
   167 26B6 F0 04		            beq check_paddle_fire
   168 				            
   169 26B8 BD 84 02		            lda STRIG0,x
   170 26BB 60			            rts
   171
   172 26BC			check_paddle_fire
   173 26BC AD 78 02		            lda STICK0
   174 26BF C9 07		            cmp #7
   175 26C1 F0 07		            beq paddle_fire
   176 26C3 C9 0B		            cmp #11
   177 26C5 F0 03		            beq paddle_fire
   178 26C7 A9 00		            lda #0
   179 26C9 60			            rts
   180 26CA			paddle_fire
   181 26CA A9 01		            lda #1
   182 26CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 26CD			driver_paddle            
   187 26CD BD 70 02		            lda PADDL0,x
   188 26D0 A8			            tay
   189 26D1 B9 00 25		            lda paddle_to_256,y
   190 26D4 5D DA 26		            eor paddle_offsets,x
   191 26D7 95 9C		            sta p1_angle,x
   192 26D9 60			            rts
   193
   194 26DA			paddle_offsets
   195 26DA 00 00		            dta 0,0
   155 26DC			main
   156 26DC A9 FF		            lda #255
   157 26DE 8D FC 02		            sta 764
   158
   159 				; for fast loaders, wait 10 seconds or continue with spacebar
   160 26E1			wait_a_sec
   161 26E1 AD FC 02		            lda 764
   162 26E4 C9 FF		            cmp #255
   163 26E6 D0 06		            bne any_key_pressed
   164
   165 26E8 A5 13		            lda 19
   166 26EA C9 02		            cmp #2
   167 26EC 90 F3		            bcc wait_a_sec
   168
   169 26EE			any_key_pressed
   170 26EE A9 FF		            lda #255
   171 26F0 8D FC 02		            sta 764
   172
   173 				; start the game!
   174 				 
   175 26F3 A9 00		            lda #0
   176 26F5 8D 2F 02		            sta SDMCTL
   177 26F8 85 B6		            sta game_restart
   178
   179 26FA A9 80		            lda #128
   180 26FC 85 8D		            sta volume_hit_bat
   181 26FE 85 8E		            sta volume_hit_edge
   182 2700 85 80		            sta music_toggle        ; 128 = on, 0 = off
   183
   184 2702 A9 01		            lda #1
   185 2704 8D 44 02		            sta 580 ; coldstart
   186
   187 2707 20 01 26		            jsr driver_init
   188
   189 270A 20 3A 2C		            jsr make_shape_index
   190 				 
   191 270D 20 6A 2C		            jsr make_outer_256
   192 				            
   193 2710 20 2B 28		            jsr make_screen_y_tab
   194
   195 2713 20 76 28		            jsr invert_backdrop
   196
   197 2716 20 DA 2C		            jsr reset_score
   198 2719 20 A8 2C		            jsr show_score_p1
   199 271C 20 C1 2C		            jsr show_score_p2
   200 				                       
   201 271F 20 C5 2E		            jsr init_sprites
   202 2722 20 F1 2E		            jsr init_colors
   203
   204 				; init. game vars
   205 2725 A2 00		            ldx #INIT_LEVEL_INDEX
   206 2727 8E 11 2F		            stx current_level_index
   207 272A 20 16 2F		            jsr set_level_ball_speed
   208
   209 272D A9 01		            lda #1
   210 272F 85 8C		            sta mode_menu           ; start with menu
   211
   212 2731 20 6E 5E		            jsr music_init
   213
   214 				; start vbi
   215 				            
   216 2734 A9 C0		            lda #$c0
   217 2736 8D 0E D4		            sta NMIEN
   218 				            
   219 2739 A9 07		            lda #7          ; sets VVBLKI
   220 273B A0 BB		            ldy #<vbi
   221 273D A2 28		            ldx #>vbi
   222 273F 20 5C E4		            jsr $e45c       ; SETVBV
   223
   224 				; we're just sitting here while VBI does all the work :)
   225 2742 4C 42 27		loop        jmp loop
   226
   227 				;------------------------
   228 				; 8bit * 8bit = 16bit multiply
   229 				; By White Flame
   230 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   231 				; uses extra zp var _multiplicand+1
   232
   233 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   234 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   235
   236 				; In this version, both inputs must be unsigned
   237 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   238
   239 2745			_multi8
   240 2745 A9 00		            lda #$00
   241 2747 A8			            tay
   242 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   243 2748 F0 0D		            beq _enter_loop
   244 274A			_do_add
   245 274A 18			            clc
   246 274B 65 F6		            adc _multiplicand
   247 274D AA			            tax
   248
   249 274E 98			            tya
   250 274F 65 F7		            adc _multiplicand+1
   251 2751 A8			            tay
   252 2752 8A			            txa
   253 2753			_mul_loop
   254 2753 06 F6		            asl _multiplicand
   255 2755 26 F7		            rol _multiplicand+1
   256 2757			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   257 2757 46 F8		            lsr _multiplier
   258 2759 B0 EF		            bcs _do_add
   259 275B D0 F6		            bne _mul_loop
   260 275D 60			            rts
   261
   262 				; reset PM0/1 to playfield settings
   263 275E			dli_header
   264 275E 48			            pha
   265
   266 275F A9 08		            lda #8
   267 2761 8D 17 D0		            sta COLPF1
   268
   269 2764 A5 81		            lda shadow_HPOSP0
   270 2766 8D 00 D0		            sta HPOSP0
   271 2769 A5 82		            lda shadow_HPOSP1
   272 276B 8D 01 D0		            sta HPOSP1
   273
   274 276E A9 00		            lda #0
   275 2770 8D 08 D0		            sta SIZEP0
   276 2773 8D 09 D0		            sta SIZEP1
   277
   278 2776 A9 5A		            lda #BASE_COLOR_P1+10
   279 2778 8D 12 D0		            sta COLPM0
   280 277B A9 BA		            lda #BASE_COLOR_P2+10
   281 277D 8D 13 D0		            sta COLPM1
   282
   283 2780 A9 8C		            lda #<dli_menu
   284 2782 8D 00 02		            sta VDSLST
   285 2785 A9 27		            lda #>dli_menu
   286 2787 8D 01 02		            sta VDSLST+1
   287
   288 278A 68			            pla
   289 278B 40			            rti
   290
   291 278C			dli_menu
   292 278C 48			            pha
   293 278D 8A			            txa
   294 278E 48			            pha
   295 				            
   296 278F A9 00		            lda #0
   297 2791 8D 0A D4		            sta WSYNC
   298 2794 8D 1A D0		            sta COLBK
   299 2797 A9 0E		            lda #$0e
   300 2799 8D 0A D4		            sta WSYNC
   301 279C 8D 1A D0		            sta COLBK
   302 279F A9 0A		            lda #$0a
   303 27A1 8D 0A D4		            sta WSYNC
   304 27A4 8D 1A D0		            sta COLBK
   305 27A7 A9 00		            lda #0
   306 27A9 8D 0A D4		            sta WSYNC
   307 27AC 8D 1A D0		            sta COLBK
   308
   309 27AF A2 00		            ldx #0
   310 27B1			color_it1
   311 27B1 BD F3 27		            lda menu_colpf2,x
   312 27B4 8D 0A D4		            sta WSYNC
   313 27B7 8D 18 D0		            sta COLPF2
   314 27BA E8			            inx
   315 27BB E0 12		            cpx #18
   316 27BD D0 F2		            bne color_it1
   317
   318 27BF A2 00		            ldx #0
   319 27C1			color_it2
   320 27C1 BD 05 28		            lda menu_colpf0,x
   321 27C4 8D 0A D4		            sta WSYNC
   322 27C7 8D 16 D0		            sta COLPF0
   323 27CA E8			            inx
   324 27CB E0 26		            cpx #38
   325 27CD D0 F2		            bne color_it2
   326
   327 27CF A9 00		            lda #0
   328 27D1 8D 0A D4		            sta WSYNC
   329 27D4 8D 1A D0		            sta COLBK
   330 27D7 A9 0A		            lda #$0a
   331 27D9 8D 0A D4		            sta WSYNC
   332 27DC 8D 1A D0		            sta COLBK
   333 27DF A9 0E		            lda #$0e
   334 27E1 8D 0A D4		            sta WSYNC
   335 27E4 8D 1A D0		            sta COLBK
   336 27E7 A9 00		            lda #0
   337 27E9 8D 0A D4		            sta WSYNC
   338 27EC 8D 1A D0		            sta COLBK
   339 				            
   340 27EF 68			            pla
   341 27F0 AA			            tax
   342 27F1 68			            pla
   343 27F2 40			            rti
   344
   345 27F3			menu_colpf2
   346 27F3 50			            dta BASE_COLOR_P1
   347 27F4 50			            dta BASE_COLOR_P1
   348 27F5 50			            dta BASE_COLOR_P1
   349 27F6 50			            dta BASE_COLOR_P1
   350 27F7 50			            dta BASE_COLOR_P1
   351 27F8 50			            dta BASE_COLOR_P1
   352 27F9 50			            dta BASE_COLOR_P1
   353 27FA 50			            dta BASE_COLOR_P1
   354
   355 27FB B0			            dta BASE_COLOR_P2
   356 27FC B0			            dta BASE_COLOR_P2
   357 27FD B0			            dta BASE_COLOR_P2
   358 27FE B0			            dta BASE_COLOR_P2
   359 27FF B0			            dta BASE_COLOR_P2
   360 2800 B0			            dta BASE_COLOR_P2
   361 2801 B0			            dta BASE_COLOR_P2
   362 2802 B0			            dta BASE_COLOR_P2
   363
   364 2803 00 00		            dta 0,0
   365
   366 2805			menu_colpf0
   367 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   368 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   369 2805 00 00		            dta 0,0
   370 2807 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   371 280F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   372 2817 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   373 281F 00 00 00 00		            dta 0,0,0,0
   374 2823 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   375
   376 				; make pointers from y-position to screen memory
   377 				; screen memory is 3 blocks
   378 				; screen_mem1 : 102 lines, 4080 bytes
   379 				; screen_mem2 : 102 lines, 4080 bytes
   380 				; screen_mem3 :  20 lines,  800 bytes
   381
   382 282B			make_screen_y_tab
   383 282B A9 00		            lda #<screen_mem1
   384 282D 85 86		            sta tmp_screen
   385 282F A9 70		            lda #>screen_mem1
   386 2831 85 87		            sta tmp_screen+1
   387
   388 2833 A2 00		            ldx #0
   389 2835			fill_y_tab1
   390 2835 20 5E 28		            jsr store_y_line
   391 2838 E8			            inx
   392 2839 E0 66		            cpx #102
   393 283B D0 F8		            bne fill_y_tab1
   394
   395 				; x = 102
   396 283D A9 00		            lda #<screen_mem2
   397 283F 85 86		            sta tmp_screen
   398 2841 A9 80		            lda #>screen_mem2
   399 2843 85 87		            sta tmp_screen+1
   400
   401 2845			fill_y_tab2
   402 2845 20 5E 28		            jsr store_y_line
   403 2848 E8			            inx
   404 2849 E0 CC		            cpx #204
   405 284B D0 F8		            bne fill_y_tab2
   406
   407 284D A9 00		            lda #<screen_mem3
   408 284F 85 86		            sta tmp_screen
   409 2851 A9 90		            lda #>screen_mem3
   410 2853 85 87		            sta tmp_screen+1
   411
   412 				; x = 204
   413 2855			fill_y_tab3
   414 2855 20 5E 28		            jsr store_y_line
   415 2858 E8			            inx
   416 2859 E0 E0		            cpx #224
   417 285B D0 F8		            bne fill_y_tab3
   418 285D 60			            rts
   419
   420 285E			store_y_line
   421 285E A5 86		            lda tmp_screen
   422 2860 9D 00 18		            sta screen_y_lo,x
   423 2863 A5 87		            lda tmp_screen+1
   424 2865 9D 00 19		            sta screen_y_hi,x
   425 				            
   426 2868 A5 86		            lda tmp_screen
   427 286A 18			            clc
   428 286B 69 28		            adc #SCREEN_WIDTH
   429 286D 85 86		            sta tmp_screen
   430 286F A5 87		            lda tmp_screen+1
   431 2871 69 00		            adc #0
   432 2873 85 87		            sta tmp_screen+1
   433 2875 60			            rts
   434
   435 				; @todo invert backdrop image
   436 				; now we have to do it here :P
   437 2876			invert_backdrop
   438 2876 A9 00		            lda #<screen_mem1
   439 2878 85 86		            sta tmp_screen
   440 287A A9 70		            lda #>screen_mem1
   441 287C 85 87		            sta tmp_screen+1
   442 				            
   443 287E A2 10		            ldx #16     ; 16 pages = 4K
   444 2880 20 9E 28		            jsr do_x_pages
   445 				           
   446 2883 A9 00		            lda #<screen_mem2
   447 2885 85 86		            sta tmp_screen
   448 2887 A9 80		            lda #>screen_mem2
   449 2889 85 87		            sta tmp_screen+1
   450 				            
   451 288B A2 10		            ldx #16     ; 16 pages = 4K
   452 288D 20 9E 28		            jsr do_x_pages
   453
   454 2890 A9 00		            lda #<screen_mem3
   455 2892 85 86		            sta tmp_screen
   456 2894 A9 90		            lda #>screen_mem3
   457 2896 85 87		            sta tmp_screen+1
   458 				            
   459 2898 A2 04		            ldx #4     ; 4 pages = 1K
   460 289A 20 9E 28		            jsr do_x_pages
   461 289D 60			            rts
   462
   463 				; invert x pages, starting from tmp_screen
   464
   465 289E			do_x_pages
   466 289E A0 00		            ldy #0
   467 28A0			do_page
   468 28A0 B1 86		            lda (tmp_screen),y
   469 28A2 49 FF		            eor #$ff
   470 28A4 91 86		            sta (tmp_screen),y
   471 28A6 C8			            iny
   472 28A7 D0 F7		            bne do_page 
   473
   474 28A9 E6 87		            inc tmp_screen+1
   475 28AB CA			            dex
   476 28AC D0 F2		            bne do_page
   477 28AE 60			            rts
   478
   479 28AF			turn_color_ball
   480 28AF A6 B5		            ldx player_turn
   481 28B1 BD B8 28		            lda color_turn,x
   482 28B4 8D C7 02		            sta COLOR3
   483 28B7 60			            rts
   484 				            
   485 28B8 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   486
   487 				; A, X, Y are already saved by the OS
   488 28BB			vbi
   489 28BB 20 DC 5E		            jsr copy_shadow
   490
   491 28BE A5 80		            lda music_toggle
   492 28C0 F0 03		            beq skip_music
   493 28C2 20 97 5E		            jsr play_song
   494 28C5			skip_music
   495
   496 				; toggle music on/off with spacebar
   497 28C5 AD FC 02		            lda 764
   498 28C8 C9 21		            cmp #$21
   499 28CA D0 10		            bne no_spacebar
   500 28CC A5 80		            lda music_toggle
   501 28CE 49 80		            eor #128
   502 28D0 85 80		            sta music_toggle
   503 28D2 D0 03		            bne music_turned_on
   504 28D4 20 60 5F		            jsr music_off
   505
   506 28D7			music_turned_on
   507 28D7 A9 FF		            lda #255
   508 28D9 8D FC 02		            sta 764
   509
   510 28DC			no_spacebar
   511 28DC 20 43 2A		            jsr play_sound_bat
   512 28DF 20 61 2A		            jsr play_sound_edge
   513
   514 28E2 A9 5E		            lda #<dli_header
   515 28E4 8D 00 02		            sta VDSLST
   516 28E7 A9 27		            lda #>dli_header
   517 28E9 8D 01 02		            sta VDSLST+1
   518
   519 28EC A9 2E		            lda #%00101110  ; enable P/M DMA
   520 28EE 8D 2F 02		            sta SDMCTL
   521 28F1 A9 00		            lda #0
   522 28F3 85 4D		            sta 77      ; attract off
   523 28F5 A9 20		            lda #>rotor_font
   524 28F7 8D F4 02		            sta 756
   525
   526 28FA A9 30		            lda #$30
   527 28FC 8D 00 D0		            sta HPOSP0
   528 28FF A9 B0		            lda #$b0
   529 2901 8D 01 D0		            sta HPOSP1
   530
   531 				; menu switching thingy
   532
   533 2904 AD 1F D0		            lda CONSOL
   534 2907 C9 03		            cmp #3
   535 2909 D0 0C		            bne no_option_pressed
   536
   537 290B			go_menu_mode            
   538 290B 20 FA 5E		            jsr music_normal_volume
   539 				            
   540 290E 20 A3 2B		            jsr wipe_ball
   541 				            
   542 2911 A9 01		            lda #1
   543 2913 85 8C		            sta mode_menu
   544 2915 D0 12		            bne check_mode_menu
   545
   546 2917			no_option_pressed
   547 2917 C9 06		            cmp #6
   548 2919 D0 0E		            bne check_mode_menu
   549 				            
   550 				; reset game
   551
   552 291B			reset_game
   553 291B 20 05 5F		            jsr music_low_volume
   554
   555 291E 20 A3 2B		            jsr wipe_ball
   556 				            
   557 2921 A9 01		            lda #1
   558 2923 85 B6		            sta game_restart
   559
   560 2925 A9 00		            lda #0
   561 2927 85 8C		            sta mode_menu
   562
   563 2929			check_mode_menu
   564 2929 A5 8C		            lda mode_menu
   565 292B F0 51		            beq main_game_vbi
   566
   567 				; within menu vbi
   568 				            
   569 292D AD 1F D0		            lda CONSOL
   570 2930 C9 05		            cmp #5          ; select
   571 2932 D0 18		            bne no_level_select
   572 				            
   573 2934 AD 10 2F		            lda previous_consol
   574 2937 C9 05		            cmp #5
   575 2939 F0 14		            beq wait_depressed
   576 				            
   577 293B 20 25 2F		            jsr increase_level
   578 293E AE 11 2F		            ldx current_level_index
   579 2941 20 16 2F		            jsr set_level_ball_speed            
   580
   581 2944 A9 05		            lda #5
   582 2946 8D 10 2F		            sta previous_consol
   583 2949 4C 4F 29		            jmp wait_depressed
   584
   585 294C			no_level_select
   586 294C 8D 10 2F		            sta previous_consol
   587
   588 294F			wait_depressed        
   589 294F A9 16		            lda #<menu_dl
   590 2951 8D 30 02		            sta SDLSTL
   591 2954 A9 41		            lda #>menu_dl
   592 2956 8D 31 02		            sta SDLSTH
   593
   594 				; detect/show controller type (used for both players)
   595 2959 20 65 29		            jsr detect_show_driver
   596
   597 295C 20 B0 2A		            jsr handle_player1
   598 295F 20 C8 2A		            jsr handle_player2
   599
   600 2962 4C 20 2A		            jmp exit_vbi
   601
   602 				; X = port/driver to detect
   603 2965			detect_show_driver
   604 2965 20 3B 26		            jsr driver_detect
   605 2968 A8			            tay
   606 2969 B9 D4 42		            lda driver_text_lo,y
   607 296C 85 86		            sta tmp_screen
   608 296E B9 D8 42		            lda driver_text_hi,y
   609 2971 85 87		            sta tmp_screen+1
   610
   611 2973 A0 07		            ldy #7
   612 2975			show_driv
   613 2975 B1 86		            lda (tmp_screen),y
   614 2977 99 5A 42		            sta driver_screen,y
   615 297A 88			            dey
   616 297B 10 F8		            bpl show_driv
   617 297D 60			            rts
   618
   619 				; main game vbi
   620 297E			main_game_vbi
   621 297E A5 B6		            lda game_restart
   622 2980 F0 2C		            beq no_restart
   623
   624 				; restart game
   625 				            
   626 2982 A9 00		            lda #0
   627 2984 85 B6		            sta game_restart
   628 				            
   629 2986 20 DA 2C		            jsr reset_score
   630 2989 20 A8 2C		            jsr show_score_p1
   631 298C 20 C1 2C		            jsr show_score_p2
   632
   633 298F A6 9C		            ldx p1_angle
   634 2991 86 AA		            stx ball_angle_start
   635 2993 20 01 2B		            jsr ball_to_start_position
   636 2996 20 10 2B		            jsr prepare_ball_end_position
   637
   638 2999 A9 00		            lda #0
   639 299B 85 A0		            sta mp_collision
   640 299D 85 A1		            sta in_collision
   641 299F 85 A3		            sta edge_delay
   642 29A1 8D 1E D0		            sta HITCLR
   643
   644 29A4 A9 02		            lda #2
   645 29A6 85 B5		            sta player_turn
   646
   647 29A8 20 AF 28		            jsr turn_color_ball
   648 29AB 4C 20 2A		            jmp exit_vbi            
   649
   650 29AE			no_restart
   651 29AE A9 00		            lda #<display_list
   652 29B0 8D 30 02		            sta SDLSTL
   653 29B3 A9 40		            lda #>display_list
   654 29B5 8D 31 02		            sta SDLSTH
   655
   656 29B8 AD 08 D0		            lda M0PL
   657 29BB 85 A0		            sta mp_collision
   658 29BD AD 09 D0		            lda M1PL
   659 29C0 05 A0		            ora mp_collision
   660 29C2 85 A0		            sta mp_collision
   661 				 
   662 29C4 20 B0 2A		            jsr handle_player1
   663 29C7 20 C8 2A		            jsr handle_player2
   664
   665 				; handle ball
   666
   667 29CA 20 A3 2B		            jsr wipe_ball         
   668
   669 				; Check ball collision with bat
   670
   671 29CD A5 A4		            lda bat_collision_delay
   672 29CF F0 05		            beq check_allowed
   673 29D1 C6 A4		            dec bat_collision_delay
   674 29D3 4C ED 29		            jmp move_one
   675
   676 29D6			check_allowed
   677 29D6 A5 A0		            lda mp_collision
   678 29D8 F0 0F		            beq reset_in_collision
   679
   680 29DA A5 A1		            lda in_collision
   681 29DC D0 0F		            bne no_first_hit
   682
   683 29DE E6 A1		            inc in_collision            
   684 29E0 20 3D 2B		            jsr bounce_bat_ball 
   685 				            
   686 29E3 20 3E 2A		            jsr start_sound_bat          
   687 				            
   688 29E6 4C ED 29		            jmp move_one
   689 				            
   690 29E9			reset_in_collision
   691 29E9 A9 00		            lda #0
   692 29EB 85 A1		            sta in_collision        
   693
   694 29ED			move_one
   695 29ED			no_first_hit
   696 29ED 20 2C 2E		            jsr move_current_xy
   697 29F0 F0 1B		            beq still_moving
   698
   699 				; edge detected
   700
   701 29F2 20 5C 2A		            jsr start_sound_edge
   702
   703 29F5 A5 AB		            lda ball_angle_end
   704 29F7 85 AA		            sta ball_angle_start
   705
   706 29F9 20 34 2B		            jsr ball_current_to_start_position
   707 29FC 20 10 2B		            jsr prepare_ball_end_position
   708
   709 29FF 20 7C 2A		            jsr update_score
   710 2A02 D0 34		            bne game_ends
   711
   712 				; switch turns
   713 2A04 A5 B5		            lda player_turn
   714 2A06 49 03		            eor #3              ; 1 => 2, 2 => 1
   715 2A08 85 B5		            sta player_turn
   716 2A0A 20 AF 28		            jsr turn_color_ball
   717
   718 2A0D			still_moving
   719 2A0D A5 EB		            lda current_x+1
   720 2A0F 85 A6		            sta ball_current_x
   721 2A11 A5 ED		            lda current_y+1
   722 2A13 85 A7		            sta ball_current_y
   723
   724 2A15 20 B8 2B		            jsr show_ball
   725
   726 2A18 A9 00		            lda #0
   727 2A1A 8D 18 D0		            sta $d018           
   728
   729 				; anything in A to clear collisions
   730 2A1D 8D 1E D0		            sta HITCLR
   731
   732 2A20			exit_vbi
   733
   734 				; always set header stuff
   735 2A20 A9 03		            lda #3
   736 2A22 8D 08 D0		            sta SIZEP0
   737 2A25 8D 09 D0		            sta SIZEP1
   738
   739 				; background in PM0/1 for header
   740 2A28 A9 FF		            lda #255
   741 2A2A A2 07		            ldx #7
   742 2A2C			fill_pm_header
   743 2A2C 9D 00 12		            sta p0_area,x
   744 2A2F 9D 80 12		            sta p1_area,x
   745 2A32 CA			            dex
   746 2A33 10 F7		            bpl fill_pm_header
   747
   748 2A35 4C 62 E4		            jmp $e462
   749
   750 2A38			game_ends
   751 2A38 20 FA 5E		            jsr music_normal_volume
   752 2A3B 4C 62 E4		            jmp $e462            
   753
   754 2A3E			start_sound_bat
   755 2A3E A9 0A		            lda #10
   756 2A40 85 8D		            sta volume_hit_bat
   757 2A42 60			            rts
   758
   759 2A43			play_sound_bat
   760 2A43 A5 8D		            lda volume_hit_bat
   761 2A45 30 14		            bmi silenced_bat
   762
   763 2A47 A5 B5		            lda player_turn
   764 2A49 0A			            asl
   765 2A4A 0A			            asl
   766 2A4B 69 30		            adc #$30
   767 2A4D E5 B3		            sbc angle_diff_bat
   768 2A4F 8D 73 5F		            sta SHADOW+4    ; $d204
   769 2A52 A5 8D		            lda volume_hit_bat
   770 2A54 09 A0		            ora #$a0
   771 2A56 8D 74 5F		            sta SHADOW+5    ; $d205
   772 2A59 C6 8D		            dec volume_hit_bat
   773 2A5B			silenced_bat
   774 2A5B 60			            rts
   775
   776 2A5C			start_sound_edge
   777 2A5C A9 04		            lda #4
   778 2A5E 85 8E		            sta volume_hit_edge
   779 2A60 60			            rts
   780
   781 2A61			play_sound_edge
   782 2A61 A5 8E		            lda volume_hit_edge
   783 2A63 30 16		            bmi silenced_edge
   784 2A65 D0 06		            bne no_silenced_edge
   785 2A67 8D 74 5F		            sta SHADOW+5    ; $d205
   786 2A6A C6 8E		            dec volume_hit_edge
   787 2A6C 60			            rts            
   788
   789 2A6D			no_silenced_edge
   790 2A6D A9 08		            lda #$08
   791 2A6F 8D 73 5F		            sta SHADOW+4    ; $d204
   792 2A72 A5 8E		            lda volume_hit_edge
   793 2A74 09 26		            ora #$26
   794 2A76 8D 74 5F		            sta SHADOW+5    ; $d205
   795 2A79 C6 8E		            dec volume_hit_edge
   796 2A7B			silenced_edge
   797 2A7B 60			            rts
   798
   799 				; Update score
   800 				; Score > max score, then exit A = 1, otherwise A = 0
   801
   802 2A7C			update_score
   803 2A7C A5 B5		            lda player_turn
   804 2A7E C9 01		            cmp #1
   805 2A80 D0 12		            bne was_player2_turn
   806 				; was player 1 turn, so player 2 gets a point
   807 2A82 20 EF 2C		            jsr inc_score_p2
   808 2A85 20 C1 2C		            jsr show_score_p2
   809
   810 2A88 AD 15 41		            lda score_p2
   811 2A8B C9 11		            cmp #MAX_SCORE
   812 2A8D D0 17		            bne reset_edge_delay
   813
   814 2A8F A9 01		            lda #1
   815 2A91 85 8C		            sta mode_menu
   816 2A93 60			            rts
   817
   818 2A94			was_player2_turn
   819 2A94 20 E3 2C		            jsr inc_score_p1
   820 2A97 20 A8 2C		            jsr show_score_p1
   821
   822 2A9A AD 14 41		            lda score_p1
   823 2A9D C9 11		            cmp #MAX_SCORE
   824 2A9F D0 05		            bne reset_edge_delay
   825
   826 2AA1 A9 01		            lda #1
   827 2AA3 85 8C		            sta mode_menu
   828 2AA5 60			            rts
   829
   830 2AA6			reset_edge_delay
   831 2AA6 A9 0A		            lda #10
   832 2AA8 85 A3		            sta edge_delay
   833
   834 2AAA			no_edge
   835
   836 2AAA A9 00		            lda #0      ; no end game
   837 				; anything in A to clear collisions
   838 2AAC 8D 1E D0		            sta HITCLR
   839 2AAF 60			            rts
   840
   841 				; player 1
   842 				; - wipe shape at previous y-position
   843 				; - move player using controller
   844 				; - set sprite positions
   845
   846 2AB0			handle_player1
   847 2AB0 20 10 2C		            jsr wipe_p1         ; wipe previous shape player 1
   848
   849 2AB3 A2 00		            ldx #0              ; player 1
   850 2AB5 20 E0 2A		            jsr move_player
   851 				            
   852 2AB8 20 DC 2B		            jsr show_p1
   853
   854 2ABB A5 94		            lda player1_x
   855 2ABD 18			            clc
   856 2ABE 69 20		            adc #left_margin
   857 2AC0 85 81		            sta shadow_HPOSP0
   858 2AC2 69 08		            adc #8
   859 2AC4 8D 02 D0		            sta HPOSP2
   860 2AC7 60			            rts
   861
   862 				; player 2
   863 				; - wipe shape at previous y-position
   864 				; - move player using controller
   865 				; - set sprite positions
   866
   867 2AC8			handle_player2
   868 2AC8 20 25 2C		            jsr wipe_p2         ; wipe previous shape player 2
   869
   870 2ACB A2 01		            ldx #1              ; player 2
   871 2ACD 20 E0 2A		            jsr move_player
   872 				                        
   873 2AD0 20 F6 2B		            jsr show_p2
   874
   875 2AD3 A5 95		            lda player2_x
   876 2AD5 18			            clc
   877 2AD6 69 20		            adc #left_margin
   878 2AD8 85 82		            sta shadow_HPOSP1
   879 2ADA 69 08		            adc #8
   880 2ADC 8D 03 D0		            sta HPOSP3
   881 2ADF 60			            rts
   882
   883 				; move player 1/2
   884 				; right - clockwise, left = anti-clockwise
   885
   886 				; X = 0, player 1
   887 				; X = 1, player 2
   888
   889 				; Y = driver mode:
   890 				; 0 : stick
   891 				; 1 : paddle
   892 				; 2 : driving
   893 				; 3 : computer
   894 				            
   895 2AE0			move_player
   896 2AE0 20 6E 26		            jsr main_driver
   897
   898 2AE3 B5 9C		            lda p1_angle,x
   899 2AE5 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   900 2AE7 49 40		            eor #64                     ; perpendicular to the circle angle
   901 2AE9 95 90		            sta p1_shape,x
   902
   903 2AEB B4 9C		            ldy p1_angle,x
   904 2AED B9 00 30		            lda inner_x_tab,y
   905 2AF0 4A			            lsr
   906 2AF1 69 20		            adc #inner_x_margin/2
   907 2AF3 95 94		            sta player1_x,x
   908 2AF5 B9 00 31		            lda inner_y_tab,y
   909 2AF8 4A			            lsr
   910 2AF9 95 98		            sta player1_y,x
   911
   912 2AFB B4 90		            ldy p1_shape,x
   913 2AFD 20 5F 2C		            jsr shape_to_ptr
   914
   915 2B00 60			            rts
   916
   917 				; Set ball at start position
   918 				; - start angle current player
   919 				; - start position by inner table
   920 				; - collision delay set?
   921
   922 				; Set ball current position to start position
   923 				; input:
   924 				; X = angle of start position
   925 				; output:
   926 				; ball position: (ball_current_x, ball_current_y)
   927 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   928 2B01			ball_to_start_position
   929 2B01 BD 00 30		            lda inner_x_tab,x
   930 2B04 85 A6		            sta ball_current_x
   931 2B06 85 E6		            sta tmp_x1
   932 2B08 BD 00 31		            lda inner_y_tab,x
   933 2B0B 85 A7		            sta ball_current_y
   934 2B0D 85 E7		            sta tmp_y1
   935 2B0F 60			            rts
   936
   937 				; Prepare ball end position
   938 				; - end angle current player
   939 				; - end position by outer table
   940 				; - calculate step size x,y
   941
   942 				; Input:
   943 				; - ball_angle_start
   944 				; - ball speed
   945 				; Output:
   946 				; - ball_andle_end
   947 				; - ball start position (tmp_x1, tmp_y1)
   948 				; - ball end position (tmp_x2, tmp_y2)
   949 				; - step size (step_x, step_y) for ball movement
   950 2B10			prepare_ball_end_position
   951 2B10 A5 AA		            lda ball_angle_start
   952 2B12 49 80		            eor #128        ; other side
   953 2B14 85 AB		            sta ball_angle_end
   954 2B16 AA			            tax
   955 2B17 20 98 2B		            jsr angle_to_end_position
   956 				                        
   957 2B1A 20 BF 2D		            jsr init_current_xy
   958 				            
   959 				; move current a little bit            
   960 2B1D 20 2C 2E		            jsr move_current_xy
   961 				; ignore end indicator, since we only just started
   962
   963
   964 2B20 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   965 2B22 85 A4		            sta bat_collision_delay
   966 2B24 60			            rts
   967
   968 				; x = angle 0..255
   969 2B25			outer_angle_to_start_position
   970 2B25 BD 00 16		            lda outer_x_256,x
   971 2B28 85 A6		            sta ball_current_x
   972 2B2A 85 E6		            sta tmp_x1
   973 2B2C BD 00 17		            lda outer_y_256,x
   974 2B2F 85 A7		            sta ball_current_y
   975 2B31 85 E7		            sta tmp_y1
   976 2B33 60			            rts
   977
   978 2B34			ball_current_to_start_position
   979 2B34 A5 A6		            lda ball_current_x
   980 2B36 85 E6		            sta tmp_x1
   981 2B38 A5 A7		            lda ball_current_y
   982 2B3A 85 E7		            sta tmp_y1
   983 2B3C 60			            rts
   984
   985 				; Ball collides with bat
   986 				; - start ball angle = end ball angle
   987 				; - calculate diff between bat and ball end angle
   988 				; - calculate new end angle
   989 				; - Set ball at start position
   990 				; - Prepare ball end position
   991
   992 2B3D			bounce_bat_ball
   993 				; set new start of ball
   994 				; @todo check ball angles
   995 				; set new ball start angle (= previous end angle)
   996 2B3D A5 AB		            lda ball_angle_end
   997 2B3F 85 AA		            sta ball_angle_start
   998 				            
   999 				; alternative?
  1000 				            ;ldx ball_angle_start
  1001 				            ;jsr ball_to_start_position          
  1002 2B41 20 34 2B		            jsr ball_current_to_start_position
  1003
  1004 				; which player hit the ball?
  1005 				; collision bits:
  1006 				; xxxxx1x1 : 1 is player1 collision
  1007 				; xxxx1010 : 2 is player2 collision
  1008
  1009 2B44 A5 A0		            lda mp_collision
  1010 2B46 4A			            lsr
  1011 2B47 4A			            lsr
  1012 2B48 05 A0		            ora mp_collision
  1013 2B4A 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1014
  1015 				; who's turn is it and who bounced the ball?
  1016
  1017 2B4C 25 B5		            and player_turn
  1018 2B4E F0 06		            beq no_switch_turn
  1019
  1020 2B50 A5 B5		            lda player_turn
  1021 2B52 49 03		            eor #3              ; 1 => 2, 2 => 1
  1022 2B54 85 B5		            sta player_turn 
  1023
  1024 2B56			no_switch_turn
  1025 2B56 20 AF 28		            jsr turn_color_ball
  1026
  1027 2B59 A5 B5		            lda player_turn
  1028 2B5B 49 03		            eor #3
  1029 2B5D AA			            tax
  1030 2B5E CA			            dex                 ; index 0,1 (player = 1,2)
  1031 2B5F B5 9C		            lda p1_angle,x
  1032
  1033 				; Calculate diff between bat angle position and new ball start position
  1034 2B61 85 B0		            sta tmp_angle1
  1035
  1036 2B63 A5 AA		            lda ball_angle_start
  1037 2B65 85 B1		            sta tmp_angle2
  1038
  1039 2B67 20 FB 2C		            jsr calc_angle_diff
  1040
  1041 2B6A 0A			            asl
  1042 2B6B 0A			            asl
  1043 2B6C 0A			            asl
  1044 2B6D 85 B3		            sta angle_diff_bat
  1045
  1046 2B6F A5 B0		            lda tmp_angle1
  1047 2B71 18			            clc
  1048 2B72 65 B2		            adc add_to_angle
  1049 2B74 49 80		            eor #128            ; other side
  1050 2B76 85 B0		            sta tmp_angle1
  1051 				            
  1052 2B78 A5 B4		            lda tmp_angle_direction
  1053 2B7A D0 0A		            bne diff_clockwise
  1054 				; diff counter clockwise
  1055 2B7C A5 B0		            lda tmp_angle1
  1056 2B7E 18			            clc
  1057 2B7F 65 B3		            adc angle_diff_bat
  1058 2B81 85 B0		            sta tmp_angle1
  1059 2B83 4C 8D 2B		            jmp calc_done            
  1060
  1061 2B86			diff_clockwise
  1062 2B86 A5 B0		            lda tmp_angle1
  1063 2B88 38			            sec
  1064 2B89 E5 B3		            sbc angle_diff_bat
  1065 2B8B 85 B0		            sta tmp_angle1
  1066 				            
  1067 				; calculation done            
  1068 2B8D			calc_done
  1069 2B8D A5 B0		            lda tmp_angle1
  1070 2B8F 85 AB		            sta ball_angle_end
  1071 2B91 AA			            tax
  1072 2B92 20 98 2B		            jsr angle_to_end_position
  1073 				                        
  1074 2B95 4C BF 2D		            jmp init_current_xy
  1075
  1076 				; x = angle 0..255
  1077 2B98			angle_to_end_position
  1078 2B98 BD 00 16		            lda outer_x_256,x
  1079 2B9B 85 E8		            sta tmp_x2
  1080 2B9D BD 00 17		            lda outer_y_256,x
  1081 2BA0 85 E9		            sta tmp_y2
  1082 2BA2 60			            rts
  1083
  1084 2BA3			wipe_ball
  1085 2BA3 A5 A7		            lda ball_current_y
  1086 2BA5 4A			            lsr
  1087 2BA6 69 06		            adc #ball_top_margin
  1088 2BA8 AA			            tax                 ; x = real y position on screen
  1089 2BA9 A9 00		            lda #0
  1090 2BAB 9D 80 11		            sta msl_area,x
  1091 2BAE 9D 81 11		            sta msl_area+1,x
  1092 2BB1 9D 82 11		            sta msl_area+2,x
  1093 2BB4 9D 83 11		            sta msl_area+3,x
  1094 2BB7 60			            rts
  1095
  1096 2BB8			show_ball
  1097 2BB8 A5 A7		            lda ball_current_y
  1098 2BBA 4A			            lsr
  1099 2BBB 69 06		            adc #ball_top_margin
  1100 2BBD AA			            tax                 ; x = real y position on screen
  1101
  1102 2BBE A9 02		            lda #%00000010
  1103 2BC0 9D 80 11		            sta msl_area,x
  1104 2BC3 9D 83 11		            sta msl_area+3,x
  1105 2BC6 A9 07		            lda #%00000111
  1106 2BC8 9D 81 11		            sta msl_area+1,x
  1107 2BCB 9D 82 11		            sta msl_area+2,x
  1108 				            
  1109 2BCE A5 A6		            lda ball_current_x
  1110 2BD0 4A			            lsr
  1111 2BD1 69 45		            adc #ball_left_margin
  1112 2BD3 8D 05 D0		            sta HPOSM1
  1113 2BD6 69 02		            adc #2
  1114 2BD8 8D 04 D0		            sta HPOSM0
  1115 				                        
  1116 2BDB 60			            rts
  1117 				            
  1118 2BDC			show_p1
  1119 2BDC A5 98		            lda player1_y
  1120 2BDE 18			            clc
  1121 2BDF 69 01		            adc #upper_margin
  1122 2BE1 AA			            tax
  1123
  1124 2BE2 A0 00		            ldy #0
  1125 2BE4			show_shape1
  1126 2BE4 B1 84		            lda (shape_ptr),y
  1127 2BE6 9D 00 12		            sta p0_area,x 
  1128 2BE9 C8			            iny
  1129 2BEA B1 84		            lda (shape_ptr),y
  1130 2BEC 9D 00 13		            sta p2_area,x
  1131 2BEF E8			            inx
  1132 2BF0 C8			            iny
  1133 2BF1 C0 20		            cpy #32
  1134 2BF3 D0 EF		            bne show_shape1
  1135 2BF5 60			            rts
  1136
  1137 2BF6			show_p2
  1138 2BF6 A5 99		            lda player2_y
  1139 2BF8 18			            clc
  1140 2BF9 69 01		            adc #upper_margin
  1141 2BFB AA			            tax
  1142
  1143 2BFC A0 00		            ldy #0
  1144 2BFE			show_shape2
  1145 2BFE B1 84		            lda (shape_ptr),y
  1146 2C00 9D 80 12		            sta p1_area,x
  1147 2C03 C8			            iny
  1148 2C04 B1 84		            lda (shape_ptr),y
  1149 2C06 9D 80 13		            sta p3_area,x
  1150 2C09 E8			            inx
  1151 2C0A C8			            iny
  1152 2C0B C0 20		            cpy #32
  1153 2C0D D0 EF		            bne show_shape2
  1154 2C0F 60			            rts
  1155
  1156 2C10			wipe_p1
  1157 2C10 A5 98		            lda player1_y
  1158 2C12 18			            clc
  1159 2C13 69 01		            adc #upper_margin
  1160 2C15 AA			            tax
  1161 				            
  1162 2C16 A0 10		            ldy #16
  1163 2C18 A9 00		            lda #0
  1164 2C1A			wipe_it1            
  1165 2C1A 9D 00 12		            sta p0_area,x 
  1166 2C1D 9D 00 13		            sta p2_area,x
  1167 2C20 E8			            inx
  1168 2C21 88			            dey
  1169 2C22 D0 F6		            bne wipe_it1 
  1170 2C24 60			            rts
  1171
  1172 2C25			wipe_p2
  1173 2C25 A5 99		            lda player2_y
  1174 2C27 18			            clc
  1175 2C28 69 01		            adc #upper_margin
  1176 2C2A AA			            tax
  1177 				            
  1178 2C2B A0 10		            ldy #16
  1179 2C2D A9 00		            lda #0
  1180 2C2F			wipe_it2            
  1181 2C2F 9D 80 12		            sta p1_area,x
  1182 2C32 9D 80 13		            sta p3_area,x
  1183 2C35 E8			            inx
  1184 2C36 88			            dey
  1185 2C37 D0 F6		            bne wipe_it2 
  1186 2C39 60			            rts
  1187
  1188 2C3A			make_shape_index
  1189 2C3A A9 00		            lda #<pm_shapes
  1190 2C3C 85 84		            sta shape_ptr
  1191 2C3E A9 60		            lda #>pm_shapes
  1192 2C40 85 85		            sta shape_ptr+1
  1193 				            
  1194 2C42 A2 00		            ldx #0
  1195 2C44			fill_pm_tab
  1196 2C44 A5 84		            lda shape_ptr
  1197 2C46 9D 00 43		            sta pm_shape_lo,x
  1198 2C49 A5 85		            lda shape_ptr+1
  1199 2C4B 9D 80 43		            sta pm_shape_hi,x
  1200 				            
  1201 2C4E A5 84		            lda shape_ptr
  1202 2C50 18			            clc
  1203 2C51 69 20		            adc #32
  1204 2C53 85 84		            sta shape_ptr
  1205 2C55 A5 85		            lda shape_ptr+1
  1206 2C57 69 00		            adc #0
  1207 2C59 85 85		            sta shape_ptr+1
  1208 				            
  1209 2C5B E8			            inx
  1210 2C5C 10 E6		            bpl fill_pm_tab
  1211 				            
  1212 2C5E 60			            rts
  1213 				            
  1214 				; there are 128 shapes, each 32 bytes
  1215
  1216 				; y = shape index
  1217 2C5F			shape_to_ptr
  1218 2C5F B9 00 43		            lda pm_shape_lo,y
  1219 2C62 85 84		            sta shape_ptr
  1220 2C64 B9 80 43		            lda pm_shape_hi,y
  1221 2C67 85 85		            sta shape_ptr+1
  1222
  1223 2C69 60			            rts
  1224
  1225 				; turn 1024 tables into 256 bytes for ball edge lookup
  1226 2C6A			make_outer_256
  1227 2C6A A0 00		            ldy #0
  1228 2C6C A2 00		            ldx #0
  1229 2C6E			conv_256
  1230 2C6E BD 00 34		            lda outer_x_tab,x
  1231 2C71 99 00 16		            sta outer_x_256,y
  1232 2C74 BD 00 35		            lda outer_x_tab+$100,x
  1233 2C77 99 40 16		            sta outer_x_256+64,y
  1234 2C7A BD 00 36		            lda outer_x_tab+$200,x
  1235 2C7D 99 80 16		            sta outer_x_256+128,y
  1236 2C80 BD 00 37		            lda outer_x_tab+$300,x
  1237 2C83 99 C0 16		            sta outer_x_256+192,y
  1238 				            
  1239 2C86 BD 00 38		            lda outer_y_tab,x
  1240 2C89 99 00 17		            sta outer_y_256,y
  1241 2C8C BD 00 39		            lda outer_y_tab+$100,x
  1242 2C8F 99 40 17		            sta outer_y_256+64,y
  1243 2C92 BD 00 3A		            lda outer_y_tab+$200,x
  1244 2C95 99 80 17		            sta outer_y_256+128,y
  1245 2C98 BD 00 3B		            lda outer_y_tab+$300,x
  1246 2C9B 99 C0 17		            sta outer_y_256+192,y
  1247
  1248 2C9E E8			            inx
  1249 2C9F E8			            inx
  1250 2CA0 E8			            inx
  1251 2CA1 E8			            inx
  1252 2CA2 C8			            iny
  1253 2CA3 C0 40		            cpy #64
  1254 2CA5 D0 C7		            bne conv_256            
  1255 2CA7 60			            rts
  1256
  1257 2CA8			show_score_p1
  1258 2CA8 AD 14 41		            lda score_p1
  1259 2CAB 4A			            lsr
  1260 2CAC 4A			            lsr
  1261 2CAD 4A			            lsr
  1262 2CAE 4A			            lsr
  1263 2CAF F0 02		            beq do_space1
  1264 2CB1 09 10		            ora #16
  1265 2CB3			do_space1
  1266 2CB3 8D F1 40		            sta score_chars_p1
  1267 2CB6 AD 14 41		            lda score_p1
  1268 2CB9 29 0F		            and #15
  1269 2CBB 09 10		            ora #16
  1270 2CBD 8D F2 40		            sta score_chars_p1+1
  1271 2CC0 60			            rts
  1272
  1273 2CC1			show_score_p2
  1274 2CC1 AD 15 41		            lda score_p2
  1275 2CC4 4A			            lsr
  1276 2CC5 4A			            lsr
  1277 2CC6 4A			            lsr
  1278 2CC7 4A			            lsr
  1279 2CC8 F0 02		            beq do_space2
  1280 2CCA 09 10		            ora #16
  1281 2CCC			do_space2
  1282 2CCC 8D 11 41		            sta score_chars_p2
  1283 2CCF AD 15 41		            lda score_p2
  1284 2CD2 29 0F		            and #15
  1285 2CD4 09 10		            ora #16
  1286 2CD6 8D 12 41		            sta score_chars_p2+1
  1287 2CD9 60			            rts
  1288 				                        
  1289 2CDA			reset_score
  1290 2CDA A9 00		            lda #0
  1291 2CDC 8D 14 41		            sta score_p1
  1292 2CDF 8D 15 41		            sta score_p2
  1293 2CE2 60			            rts            
  1294 				         
  1295 2CE3			inc_score_p1
  1296 2CE3 F8			            sed
  1297 2CE4 AD 14 41		            lda score_p1
  1298 2CE7 18			            clc
  1299 2CE8 69 01		            adc #1
  1300 2CEA 8D 14 41		            sta score_p1    
  1301 2CED D8			            cld
  1302 2CEE 60			            rts
  1303
  1304 2CEF			inc_score_p2
  1305 2CEF F8			            sed
  1306 2CF0 AD 15 41		            lda score_p2
  1307 2CF3 18			            clc
  1308 2CF4 69 01		            adc #1
  1309 2CF6 8D 15 41		            sta score_p2
  1310 2CF9 D8			            cld
  1311 2CFA 60			            rts
  1312
  1313 				; calculate the difference between angle1 and angle2
  1314
  1315 				; input:
  1316 				; tmp_angle1 (0..255)
  1317 				; tmp_angle2 (0..255)
  1318
  1319 				; output:
  1320 				; tmp_angle_diff, A: difference between angle1 and angle2
  1321 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1322
  1323 2CFB			calc_angle_diff
  1324 2CFB A9 00		            lda #0
  1325 2CFD 85 B2		            sta add_to_angle
  1326 2CFF 85 B4		            sta tmp_angle_direction
  1327
  1328 				; make sure we can compare angles, otherwise add $40 to angles
  1329 2D01 A5 B0		            lda tmp_angle1
  1330 2D03 C9 C0		            cmp #$c0
  1331 2D05 B0 06		            bcs too_large
  1332 2D07 A5 B1		            lda tmp_angle2
  1333 2D09 C9 C0		            cmp #$c0
  1334 2D0B 90 12		            bcc not_too_large
  1335 2D0D			too_large
  1336 2D0D A5 B0		            lda tmp_angle1
  1337 2D0F 38			            sec
  1338 2D10 E9 40		            sbc #$40
  1339 2D12 85 B0		            sta tmp_angle1
  1340 				            
  1341 2D14 A5 B1		            lda tmp_angle2
  1342 2D16 38			            sec
  1343 2D17 E9 40		            sbc #$40
  1344 2D19 85 B1		            sta tmp_angle2
  1345 				            
  1346 2D1B A9 40		            lda #$40
  1347 2D1D 85 B2		            sta add_to_angle
  1348
  1349 2D1F			not_too_large
  1350 2D1F A5 B1		            lda tmp_angle2
  1351 2D21 C5 B0		            cmp tmp_angle1
  1352 2D23 90 0A		            bcc angle2_smaller_angle1
  1353 				; ball >= play
  1354 2D25 38			            sec
  1355 2D26 E5 B0		            sbc tmp_angle1
  1356 2D28 85 B7		            sta tmp_angle_diff
  1357 				            
  1358 2D2A E6 B4		            inc tmp_angle_direction
  1359 2D2C 4C 36 2D		            jmp diff_calculated
  1360 				                        
  1361 2D2F			angle2_smaller_angle1
  1362 2D2F A5 B0		            lda tmp_angle1
  1363 2D31 38			            sec
  1364 2D32 E5 B1		            sbc tmp_angle2
  1365 2D34 85 B7		            sta tmp_angle_diff
  1366
  1367 2D36			diff_calculated
  1368 2D36 A5 B7		            lda tmp_angle_diff           
  1369 2D38 60			            rts
  1370
  1371 				; X = angle
  1372 				; lookup magnitude of angle 0 to angle X
  1373 2D39			angle_to_magnitude
  1374 2D39 BD 00 3C		            lda magnitudes_lo,x
  1375 2D3C 85 B8		            sta magnitude
  1376 2D3E BD 00 3D		            lda magnitudes_hi,x
  1377 2D41 85 B9		            sta magnitude+1
  1378 2D43 60			            rts
  1379
  1380 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1381 2D44			calc_abs_tmp_dx
  1382 2D44 A5 E8		            lda tmp_x2
  1383 2D46 38			            sec
  1384 2D47 E5 E6		            sbc tmp_x1
  1385 2D49 B0 05		            bcs x2_le
  1386 2D4B 49 FF		            eor #255
  1387 2D4D 18			            clc
  1388 2D4E 69 01		            adc #1
  1389 2D50 85 F2		x2_le       sta tmp_dx
  1390
  1391 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1392 2D52			calc_abs_tmp_dy
  1393 2D52 A5 E9		            lda tmp_y2
  1394 2D54 38			            sec
  1395 2D55 E5 E7		            sbc tmp_y1
  1396 2D57 B0 05		            bcs y2_le
  1397 2D59 49 FF		            eor #255
  1398 2D5B 18			            clc
  1399 2D5C 69 01		            adc #1
  1400 2D5E 85 F3		y2_le       sta tmp_dy
  1401 2D60 60			            rts
  1402 				            
  1403 2D61			calc_dx_div_magnitude
  1404 2D61 A9 00		            lda #0
  1405 2D63 85 E2		            sta _dividend
  1406 2D65 A5 F2		            lda tmp_dx
  1407 2D67 85 E3		            sta _dividend+1
  1408
  1409 2D69 A5 B9		            lda magnitude+1
  1410 2D6B 85 E0		            sta _divisor
  1411 2D6D A9 00		            lda #0
  1412 2D6F 85 E1		            sta _divisor+1
  1413 				            
  1414 2D71 20 99 2D		            jsr _div16
  1415
  1416 				; todo multiply result with velocity            
  1417 2D74 A5 E2		            lda _result
  1418 2D76 85 EE		            sta step_x
  1419 2D78 A5 E3		            lda _result+1
  1420 2D7A 85 EF		            sta step_x+1
  1421 				            
  1422 2D7C 60			            rts
  1423 				            
  1424 2D7D			calc_dy_div_magnitude
  1425 2D7D A9 00		            lda #0
  1426 2D7F 85 E2		            sta _dividend
  1427 2D81 A5 F3		            lda tmp_dy
  1428 2D83 85 E3		            sta _dividend+1
  1429 				            
  1430 2D85 A5 B9		            lda magnitude+1
  1431 2D87 85 E0		            sta _divisor
  1432 2D89 A9 00		            lda #0
  1433 2D8B 85 E1		            sta _divisor+1
  1434
  1435 2D8D 20 99 2D		            jsr _div16
  1436 				            
  1437 				; todo multiply result with velocity
  1438 2D90 A5 E2		            lda _result
  1439 2D92 85 F0		            sta step_y
  1440 2D94 A5 E3		            lda _result+1
  1441 2D96 85 F1		            sta step_y+1
  1442 				            
  1443 2D98 60			            rts
  1444
  1445 				; divide 16bit
  1446 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1447
  1448 				; _result = _dividend / divisor
  1449
  1450 2D99 A9 00		_div16      lda #0          ;preset remainder to 0
  1451 2D9B 85 E4		            sta _remainder
  1452 2D9D 85 E5		            sta _remainder+1
  1453 2D9F A2 10		            ldx #16         ;repeat for each bit: ...
  1454
  1455 2DA1 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1456 2DA3 26 E3		            rol _dividend+1  
  1457 2DA5 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1458 2DA7 26 E5		            rol _remainder+1
  1459 2DA9 A5 E4		            lda _remainder
  1460 2DAB 38			            sec
  1461 2DAC E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1462 2DAE A8			            tay         ;lb result -> Y, for we may need it later
  1463 2DAF A5 E5		            lda _remainder+1
  1464 2DB1 E5 E1		            sbc _divisor+1
  1465 2DB3 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1466
  1467 2DB5 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1468 2DB7 84 E4		            sty _remainder   
  1469 2DB9 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1470
  1471 2DBB CA			_div_skip   dex
  1472 2DBC D0 E3		            bne _div_loop 
  1473 2DBE 60			            rts
  1474
  1475 				; Calculations for step size
  1476
  1477 				; not optimised for speed or size
  1478 				; step should be set according to the angle
  1479
  1480 				; move in straight line (x1,y1) to (x2,y2)
  1481
  1482 				; 1. set start/end of line
  1483 				; set (tmp_x1, tmp_y1)
  1484 				; set (tmp_x2, tmp_y2)
  1485
  1486 				; 2. init. current_x, current_y
  1487 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1488 				; - calculates step sizes for x,y
  1489 				; - calculated directions for x,y
  1490 				;            jsr init_current_xy
  1491
  1492 				; 3. use current_x, current_y to plot or set a position
  1493 				;            lda current_x+1
  1494 				;            sta x_position
  1495 				;            lda current_y+1
  1496 				;            sta y_position
  1497 				;            jsr plot_pixel
  1498
  1499 				; 4. move current_x, current_y to next position on line
  1500 				; A=0 still moving
  1501 				;           move_current_xy
  1502
  1503 2DBF			init_current_xy
  1504 2DBF A9 7F		            lda #$7f      ; was 128 for half pixel
  1505 2DC1 85 EA		            sta current_x
  1506 2DC3 85 EC		            sta current_y
  1507
  1508 2DC5 A5 E6		            lda tmp_x1
  1509 2DC7 85 EB		            sta current_x+1
  1510 				            
  1511 2DC9 A5 E7		            lda tmp_y1
  1512 2DCB 85 ED		            sta current_y+1
  1513
  1514 				; dx = abs(tmp_x1 - tmp_x2)
  1515 2DCD 20 44 2D		            jsr calc_abs_tmp_dx
  1516
  1517 				; dy = abs(tmp_y1 - tmp_y2)
  1518 2DD0 20 52 2D		            jsr calc_abs_tmp_dy
  1519
  1520 				; set directions
  1521 2DD3 A5 E6		            lda tmp_x1
  1522 2DD5 C5 E8		            cmp tmp_x2
  1523 2DD7 90 04		            bcc x1_smaller_x2
  1524 				; x1 >= x2
  1525 2DD9 A9 01		            lda #1
  1526 2DDB D0 02		            bne set_dir_x
  1527 2DDD			x1_smaller_x2
  1528 2DDD A9 00		            lda #0
  1529 2DDF			set_dir_x
  1530 2DDF 85 FA		            sta dir_x
  1531 				            
  1532 2DE1 A5 E7		            lda tmp_y1
  1533 2DE3 C5 E9		            cmp tmp_y2
  1534 2DE5 90 04		            bcc y1_smaller_y2
  1535 				; y1 >= y2
  1536 2DE7 A9 01		            lda #1
  1537 2DE9 D0 02		            bne set_dir_y
  1538 2DEB			y1_smaller_y2
  1539 2DEB A9 00		            lda #0
  1540 2DED			set_dir_y
  1541 2DED 85 FB		            sta dir_y
  1542
  1543 				; Calculate diff between start angle and end angle
  1544
  1545 2DEF A5 AA		            lda ball_angle_start
  1546 2DF1 85 B0		            sta tmp_angle1
  1547 2DF3 A5 AB		            lda ball_angle_end
  1548 2DF5 85 B1		            sta tmp_angle2
  1549 				            
  1550 2DF7 20 FB 2C		            jsr calc_angle_diff
  1551
  1552 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1553 2DFA A6 B7		            ldx tmp_angle_diff
  1554 2DFC 20 39 2D		            jsr angle_to_magnitude
  1555 				            
  1556 2DFF 20 61 2D		            jsr calc_dx_div_magnitude
  1557 2E02 20 7D 2D		            jsr calc_dy_div_magnitude
  1558 				            
  1559 				; Calculate step size by ball speed
  1560 				            
  1561 				; step_x = step_x * speed
  1562 				            
  1563 2E05 A5 EE		            lda step_x
  1564 2E07 85 F6		            sta _multiplicand
  1565 2E09 A5 EF		            lda step_x+1
  1566 2E0B 85 F7		            sta _multiplicand+1
  1567 2E0D A5 AC		            lda ball_speed
  1568 2E0F 85 F8		            sta _multiplier
  1569
  1570 2E11 20 45 27		            jsr _multi8
  1571 				;result in .A (low byte, also in .X) and .Y (high byte)
  1572 2E14 85 EE		            sta step_x
  1573 2E16 84 EF		            sty step_x+1
  1574 2E18			skip_step_x_hi
  1575 				            
  1576 				; step_y = step_y * speed
  1577
  1578 2E18 A5 F0		            lda step_y
  1579 2E1A 85 F6		            sta _multiplicand
  1580 2E1C A5 F1		            lda step_y+1
  1581 2E1E 85 F7		            sta _multiplicand+1
  1582 2E20 A5 AC		            lda ball_speed
  1583 2E22 85 F8		            sta _multiplier
  1584
  1585 2E24 20 45 27		            jsr _multi8
  1586 				;result in .A (low byte, also in .X) and .Y (high byte)
  1587 2E27 85 F0		            sta step_y
  1588 2E29 84 F1		            sty step_y+1
  1589 2E2B			skip_step_y_hi
  1590
  1591 2E2B 60			            rts
  1592
  1593 				; Move ball position 
  1594 				; Add one step, until end reached
  1595 				; Input:
  1596 				; - step size (step_x, step_y)
  1597 				; - current ball position (current_x, current_y)
  1598 				; - end position (tmp_x2, tmp_y2)
  1599 				; Output:
  1600 				; A (0 = still moving, 1 = end reached)
  1601 2E2C			move_current_xy
  1602 2E2C A9 00		            lda #0
  1603 2E2E 85 FC		            sta line_end_x
  1604 2E30 85 FD		            sta line_end_y
  1605
  1606 				; sets line end indicators here
  1607 2E32 20 4F 2E		            jsr move_current_x
  1608 2E35 20 8F 2E		            jsr move_current_y
  1609
  1610 2E38 A5 FC		            lda line_end_x
  1611 2E3A 25 FD		            and line_end_y
  1612 2E3C F0 10		            beq no_end_reached
  1613 				            
  1614 				; set current to (x2,y2)
  1615 2E3E A5 E8		            lda tmp_x2
  1616 2E40 85 EB		            sta current_x+1
  1617 2E42 A5 E9		            lda tmp_y2
  1618 2E44 85 ED		            sta current_y+1
  1619 				            
  1620 2E46 A9 00		            lda #0
  1621 2E48 85 EA		            sta current_x
  1622 2E4A 85 EC		            sta current_y
  1623 				            
  1624 2E4C A9 01		            lda #1 ; end reached
  1625 				            
  1626 2E4E			no_end_reached  ; A = 0
  1627 2E4E 60			            rts
  1628
  1629 2E4F			move_current_x
  1630 2E4F A5 FA		            lda dir_x
  1631 2E51 D0 18		            bne move_current_left
  1632
  1633 				; move right, add
  1634 2E53 A5 EA		            lda current_x
  1635 2E55 18			            clc
  1636 2E56 65 EE		            adc step_x
  1637 2E58 85 EA		            sta current_x
  1638 2E5A A5 EB		            lda current_x+1
  1639 2E5C 65 EF		            adc step_x+1
  1640 2E5E 85 EB		            sta current_x+1
  1641
  1642 2E60 A5 EB		            lda current_x+1
  1643 2E62 C5 E8		            cmp tmp_x2
  1644 2E64 90 04		            bcc no_line_end
  1645 2E66			exact_end_x
  1646 2E66 A9 01		            lda #1
  1647 2E68 85 FC		            sta line_end_x 
  1648 2E6A			no_line_end
  1649 2E6A 60			            rts
  1650 				            
  1651 2E6B			move_current_left
  1652 2E6B A5 EA		            lda current_x
  1653 2E6D 38			            sec
  1654 2E6E E5 EE		            sbc step_x
  1655 2E70 90 01		            bcc clear_skip
  1656 2E72 EA			            nop
  1657 2E73			clear_skip
  1658 2E73 85 EA		            sta current_x
  1659 2E75 A5 EB		            lda current_x+1
  1660 2E77 E5 EF		            sbc step_x+1
  1661 2E79 85 EB		            sta current_x+1
  1662 2E7B 90 0B		            bcc below_zero
  1663 				                        
  1664 2E7D A5 E8		            lda tmp_x2
  1665 2E7F C5 EB		            cmp current_x+1
  1666 2E81 90 E7		            bcc no_line_end
  1667 2E83 A9 01		            lda #1
  1668 2E85 85 FC		            sta line_end_x            
  1669 2E87 60			            rts
  1670 2E88			below_zero            
  1671 2E88 A9 01		            lda #1
  1672 2E8A 85 FC		            sta line_end_x
  1673 2E8C 85 FD		            sta line_end_y
  1674 2E8E 60			            rts
  1675 2E8F			move_current_y
  1676 2E8F A5 FB		            lda dir_y
  1677 2E91 D0 18		            bne move_current_up
  1678
  1679 				; move down, add
  1680 2E93 A5 EC		            lda current_y
  1681 2E95 18			            clc
  1682 2E96 65 F0		            adc step_y
  1683 2E98 85 EC		            sta current_y
  1684 2E9A A5 ED		            lda current_y+1
  1685 2E9C 65 F1		            adc step_y+1
  1686 2E9E 85 ED		            sta current_y+1
  1687 				            
  1688 2EA0 A5 ED		            lda current_y+1
  1689 2EA2 C5 E9		            cmp tmp_y2
  1690 2EA4 90 C4		            bcc no_line_end
  1691 2EA6			exact_end_y
  1692 2EA6 A9 01		            lda #1
  1693 2EA8 85 FD		            sta line_end_y
  1694 2EAA 60			            rts
  1695
  1696 2EAB			move_current_up
  1697 2EAB A5 EC		            lda current_y
  1698 2EAD 38			            sec
  1699 2EAE E5 F0		            sbc step_y
  1700 2EB0 85 EC		            sta current_y
  1701 2EB2 A5 ED		            lda current_y+1
  1702 2EB4 E5 F1		            sbc step_y+1
  1703 2EB6 90 D0		            bcc below_zero
  1704 2EB8 85 ED		            sta current_y+1
  1705 				            
  1706 2EBA A5 E9		            lda tmp_y2
  1707 2EBC C5 ED		            cmp current_y+1
  1708 2EBE 90 AA		            bcc no_line_end
  1709 2EC0 A9 01		            lda #1
  1710 2EC2 85 FD		            sta line_end_y
  1711 2EC4 60			            rts                            
  1712 				            
  1713 2EC5			init_sprites
  1714 2EC5 A2 00		            ldx #0
  1715 2EC7 8A			            txa
  1716 2EC8			set_p
  1717 2EC8 9D 00 12		            sta p0_area,x
  1718 2ECB 9D 80 12		            sta p1_area,x
  1719 2ECE 9D 00 13		            sta p2_area,x
  1720 2ED1 9D 80 13		            sta p3_area,x
  1721 2ED4 E8			            inx
  1722 2ED5 10 F1		            bpl set_p
  1723
  1724 2ED7 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  1725 2ED9 8D 6F 02		            sta GPRIOR
  1726
  1727 2EDC A9 10		            lda #>pm_area
  1728 2EDE 8D 07 D4		            sta PMBASE
  1729
  1730 2EE1 A9 03		            lda #3          ; P/M both on
  1731 2EE3 8D 1D D0		            sta GRACTL
  1732
  1733 2EE6 A9 90		            lda #$90
  1734 2EE8 8D 02 D0		            sta HPOSP2
  1735 2EEB A9 A0		            lda #$A0
  1736 2EED 8D 03 D0		            sta HPOSP3  
  1737 2EF0 60			            rts
  1738
  1739 2EF1			init_colors
  1740 2EF1 A9 5A		            lda #BASE_COLOR_P1+10
  1741 2EF3 8D C2 02		            sta PCOLR2
  1742 2EF6 A9 BA		            lda #BASE_COLOR_P2+10
  1743 2EF8 8D C3 02		            sta PCOLR3
  1744 				            
  1745 2EFB A9 00		            lda #0
  1746 2EFD 8D C6 02		            sta COLOR2
  1747
  1748 2F00 A9 0E		            lda #HEADER_FG_COLOR
  1749 2F02 8D C5 02		            sta COLOR1
  1750
  1751 2F05 A9 50		            lda #HEADER_P1_COLOR
  1752 2F07 8D C0 02		            sta PCOLR0
  1753 2F0A A9 B0		            lda #HEADER_P2_COLOR
  1754 2F0C 8D C1 02		            sta PCOLR1
  1755
  1756 2F0F 60			            rts
  1757
  1758 2F10			previous_consol
  1759 2F10 00			            dta 0
  1760
  1761 2F11			current_level_index
  1762 2F11 00			            dta 0
  1763 = 0004			NR_OF_LEVELS = 4
  1764 = 0000			INIT_LEVEL_INDEX = 0
  1765 2F12			level_speeds
  1766 2F12 02 04 06 08		            dta 2,4,6,8
  1767 				            
  1768 				; X = level (0..NR_OF_LEVELS)
  1769 2F16			set_level_ball_speed
  1770 2F16 BD 12 2F		            lda level_speeds,x
  1771 2F19 85 AC		            sta ball_speed
  1772 2F1B 8A			            txa
  1773 2F1C 18			            clc
  1774 2F1D 69 01		            adc #1
  1775 2F1F 09 10		            ora #16
  1776 2F21 8D 84 42		            sta level_char
  1777 2F24 60			            rts
  1778 				            
  1779 2F25			increase_level
  1780 2F25 EE 11 2F		            inc current_level_index
  1781 2F28 AD 11 2F		            lda current_level_index
  1782 2F2B C9 04		            cmp #NR_OF_LEVELS
  1783 2F2D D0 05		            bne ok_level
  1784 2F2F A9 00		            lda #INIT_LEVEL_INDEX
  1785 2F31 8D 11 2F		            sta current_level_index
  1786 2F34			ok_level           
  1787 2F34 60			            rts
  1788 				            
  1789 2F35			            .align $100
  1790 3000			inner_x_tab
  1791 = 3100			inner_y_tab = *+$100
  1792 3000-31FF> 70 72 75 77 +             ins 'data\in210.dat'
  1793 				      
  1794 3200			            .align $400            
  1795 				; outer circle 1024 plot points on 360 degrees
  1796 3400			outer_x_tab
  1797 = 3800			outer_y_tab = *+1024
  1798 3400-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1799 				           
  1800 3C00			            .align $400
  1801 				; table of magnitudes (length) between angle 0 and 0..255
  1802 				; fixed point 8.8 : hi.lo
  1803 3C00			magnitudes_lo
  1804 = 3D00			magnitudes_hi = *+256
  1805 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1806
  1807 3E00			            .align $400
  1808 4000			display_list
  1809 4000-41CD> C2		            dta $42+128         ; dli_header
  1810 4001 EC 40		            dta a(score_line)
  1811
  1812 				; 102 x 40 = 4080 bytes            
  1813 4003 4F			            dta $4f
  1814 4004			dl_screen_ptr1
  1815 4004 00 70		            dta a(screen_mem1)
  1816 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1817 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1818 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1819 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1820
  1821 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1822 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1823 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1824 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1825
  1826 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1827 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1828 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1829 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1830
  1831 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1832
  1833 				; 102 x 40 = 4080 bytes
  1834 406B 4F			            dta $4f
  1835 406C			dl_screen_ptr2
  1836 406C 00 80		            dta a(screen_mem2)
  1837 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1838 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1839 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1840 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1841
  1842 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1843 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1844 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1845 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1846
  1847 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1848 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1849 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1850 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1851
  1852 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1853
  1854 				; 20 x 40 = 800
  1855 40D3 4F			            dta $4f
  1856 40D4 00 90		            dta a(screen_mem3)       
  1857 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1858 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1859 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1860 				            
  1861 40E9 41			            dta $41
  1862 40EA 00 40		            dta a(display_list)
  1863
  1864 40EC			score_line  
  1865 40EC 00 2F 2E 25 00	            dta d' ONE '
  1866 40F1			score_chars_p1
  1867 40F1 0D 0D 00		            dta d'-- '
  1868
  1869 40F4 00 00 00 00 00 00 +             dta d'          '
  1870 40FE 00 00 00 00 00 00 +             dta d'          '
  1871
  1872 4108 00 00 00 00 00 34 +             dta d'     TWO '
  1873 4111			score_chars_p2
  1874 4111 0D 0D 00		            dta d'-- '
  1875
  1876 4114 00			score_p1    dta 0
  1877 4115 00			score_p2    dta 0
  1878
  1879 				            ;.align $400
  1880 				            
  1881 4116			menu_dl
  1882 4116 C2			            dta $42+128         ; dli_header
  1883 4117 EC 40		            dta a(score_line)
  1884 				            
  1885 4119 4F			            dta $4f
  1886 411A 00 70		            dta a(screen_mem1)
  1887 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1888 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1889 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1890 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1891
  1892 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1893 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1894 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1895 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1896
  1897 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1898 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f     ; dli_menu
  1899
  1900 				; 64 scanlines
  1901 416B 30			            dta $30
  1902 416C 42			            dta $42
  1903 416D 00 42		            dta a(menu_screen)
  1904 416F 02			            dta 2
  1905 4170 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1906
  1907 				; 60 lines
  1908 4177 4F			            dta $4f
  1909 4178 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1910 417A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1911 4181 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1912 4189 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1913 4191 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1914
  1915 4199 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1916 41A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1917 41A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1918 41B1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1919
  1920 				; 20 lines            
  1921 41B5 4F			            dta $4f
  1922 41B6 00 90		            dta a(screen_mem3)
  1923 41B8 0F 0F 0F		            dta $0f,$0f,$0f            
  1924 41BB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1925 41C3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1926 				           
  1927 41CB 41			            dta $41
  1928 41CC 16 41		            dta a(menu_dl)
  1929
  1930 41CE			            .align $100
  1931 4200			menu_screen
  1932 4200-42DB> 00 00 00 00 +             dta d'              '
  1933 420E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  1934 421A 00 00 00 00 00 00 +             dta d'              '
  1935 4228 00 00 00 00 00 00 +             dta d'              '
  1936 4236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  1937 4242 00 00 00 00 00 00 +             dta d'              '
  1938
  1939 4250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1940 425A			driver_screen
  1941 425A 00 00 00 00 00 00 +             dta d'            '
  1942 4266 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1943 4278 00 00 00 00 00 00 +             dta d'      LEVEL '
  1944 4284			level_char            
  1945 4284 11 00 00 00 00 00 +             dta d'1       '
  1946 428C 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1947 42B4			stick_text
  1948 42B4 33 34 29 23 2B 00 +             dta d'STICK   '
  1949 42BC			paddle_text
  1950 42BC 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1951 42C4			driving_text
  1952 42C4 24 32 29 36 29 2E +             dta d'DRIVING '
  1953 42CC			computer_text
  1954 42CC 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1955
  1956 42D4			driver_text_lo
  1957 42D4 B4			            dta <stick_text
  1958 42D5 BC			            dta <paddle_text
  1959 42D6 C4			            dta <driving_text
  1960 42D7 CC			            dta <computer_text
  1961 				            
  1962 42D8			driver_text_hi
  1963 42D8 42			            dta >stick_text
  1964 42D9 42			            dta >paddle_text
  1965 42DA 42			            dta >driving_text
  1966 42DB 42			            dta >computer_text
  1967
  1968 42DC			            .align $100
  1969 = 4300			pm_shape_lo .ds 128
  1970 = 4380			pm_shape_hi .ds 128
  1971
  1972 4400			            .align $100
  1973 4400			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 4400			buffers
    44 = 4400			    .ds 256 * 9
    45
    46 4D00			intro_data
    47 4D00-5F77> 01 01 A1 34 +         ins     'intro.lz16'
    48 4FD8			intro_end
    49
    50 4FD8			loop_data
    51 4FD8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 5DD7			loop_end
    53
    54 5DD7			.proc get_byte
    55 5DD7 AD 34 12		    lda $1234
    56 5DDA EE D8 5D		    inc song_ptr
    57 5DDD D0 03		    bne skip
    58 5DDF EE D9 5D		    inc song_ptr+1
    59 5DE2			skip
    60 5DE2 60			    rts
    61 				.endp
    62 = 5DD8			song_ptr = get_byte + 1
    63
    64 5DE3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 5DE3			.proc play_first_frame
    70
    71 5DE3 20 D7 5D		    jsr get_byte                    ; IVO START move init here
    72 5DE6 8D 22 5E		    sta play_frame.init_chn_bits
    73 5DE9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 5DEB 85 D6		    sta bit_data
    75 5DED A9 44		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 5DEF 8D 02 5E		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 5DF2 A2 08		    ldx #8
    80 5DF4 A0 00		    ldy #0
    81 5DF6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 5DF8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 5DF8 20 D7 5D		    jsr get_byte
    85 5DFB 9D 6F 5F		    sta SHADOW, x
    86 5DFE 94 C0		    sty chn_copy, x
    87 5E00			cbuf
    88 5E00 8D FF 44		    sta buffers + 255
    89 5E03 EE 02 5E		    inc cbuf + 2
    90 5E06 CA			    dex
    91 5E07 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 5E09 84 D2		    sty bptr
    95 5E0B 84 D4		    sty cur_pos
    96 5E0D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 5E0E			.proc wait_frame
   103
   104 5E0E A5 14		    lda 20
   105 5E10			delay
   106 5E10 C5 14		    cmp 20
   107 5E12 F0 FC		    beq delay
   108 5E14 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 5E15			.proc play_frame
   115 5E15 A5 D7		    lda newsong
   116 5E17 F0 02		    beq continue
   117 5E19 D0 C8		    bne play_first_frame
   118
   119 5E1B			continue
   120 5E1B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 5E1D A9 44		    lda #>buffers
   123 5E1F 85 D3		    sta bptr+1
   124
   125 = 5E22			init_chn_bits=*+1
   126 5E21 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 5E23 85 D5		    sta chn_bits
   128 5E25 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 5E27			chn_loop:
   132 5E27 46 D5		    lsr chn_bits
   133 5E29 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 5E2B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 5E2D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 5E2F 46 D6		    lsr bit_data       ; Get next bit
   140 5E31 D0 06		    bne got_bit
   141 5E33 20 D7 5D		    jsr get_byte       ; Not enough bits, refill!
   142 5E36 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 5E37 85 D6		    sta bit_data       ;
   144 5E39			got_bit:
   145 5E39 20 D7 5D		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 5E3C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 5E3E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 5E40 20 D7 5D		    jsr get_byte
   151 5E43 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 5E45			do_copy_byte:
   155 5E45 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 5E47 F6 C9		    inc chn_pos, x
   157 5E49 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 5E4B B1 D2		    lda (bptr), y
   161
   162 5E4D			store:
   163 5E4D A4 D4		    ldy cur_pos
   164 5E4F 9D 6F 5F		    sta SHADOW, x        ; Store to output and buffer
   165 5E52 91 D2		    sta (bptr), y
   166
   167 5E54			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 5E54 E6 D3		    inc bptr+1
   170
   171 5E56 CA			    dex
   172 5E57 10 CE		    bpl chn_loop        ; Next channel
   173
   174 5E59 E6 D4		    inc cur_pos
   175 5E5B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 5E5C			.proc check_end_song
   182 5E5C AD D9 5D		    lda song_ptr + 1
   183 = 5E60			song_end_high=*+1
   184 5E5F C9 00		    cmp #>0
   185 5E61 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 5E63 AD D8 5D		    lda song_ptr
   187 = 5E67			song_end_low=*+1
   188 5E66 C9 00		    cmp #<0
   189 5E68 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 5E6A 38			    sec                     ; IVO....
   192 5E6B 60			    rts
   193 5E6C			not_equal
   194 5E6C 18			    clc
   195 5E6D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 5E6E			.proc music_init
   201 5E6E 20 10 5F		    jsr detect_2nd_pokey
   202 5E71 20 49 5F		    jsr clear_echo
   203
   204 5E74 A9 8A 8D CF 5E A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 5E7E A9 D8		    lda #<intro_end
   209 5E80 8D 67 5E		    sta check_end_song.song_end_low
   210 5E83 A9 4F		    lda #>intro_end
   211 5E85 8D 60 5E		    sta check_end_song.song_end_high
   212 5E88 A9 00		    lda #<(intro_data)
   213 5E8A 8D D8 5D		    sta song_ptr
   214 5E8D A9 4D		    lda #>(intro_data)
   215 5E8F 8D D9 5D		    sta song_ptr+1
   216 5E92 A9 01		    lda #1
   217 5E94 85 D7		    sta newsong
   218 5E96 60			    rts
   219 				.endp
   220
   221 5E97			.proc play_song
   222 5E97			playloop
   223 5E97 20 15 5E		    jsr play_frame      ; generates tick two and beyond
   224 5E9A 20 BF 5E		    jsr adjust_volume
   225
   226 5E9D 20 5C 5E		    jsr check_end_song
   227 5EA0 90 03		    bcc no_end_song
   228 5EA2 20 A6 5E		    jsr restart_music
   229 5EA5			no_end_song
   230 5EA5 60			    rts
   231 				.endp
   232
   233 5EA6			.proc restart_music
   234 5EA6 A9 D7		    lda #<loop_end
   235 5EA8 8D 67 5E		    sta check_end_song.song_end_low
   236 5EAB A9 5D		    lda #>loop_end
   237 5EAD 8D 60 5E		    sta check_end_song.song_end_high
   238 5EB0 A9 D8		    lda #<(loop_data)
   239 5EB2 8D D8 5D		    sta song_ptr
   240 5EB5 A9 4F		    lda #>(loop_data)
   241 5EB7 8D D9 5D		    sta song_ptr+1
   242 5EBA A9 01		    lda #1
   243 5EBC 85 D7		    sta newsong
   244 5EBE 60			    rts
   245 				.endp
   246
   247 5EBF			.proc adjust_volume
   248 5EBF A0 06		    ldy #6
   249 5EC1			adjust
   250 5EC1 B9 70 5F		    lda SHADOW+1,y
   251 5EC4 AA			    tax
   252 5EC5 29 F0		    and #$f0
   253 5EC7 99 70 5F		    sta SHADOW+1,y
   254 5ECA 8A			    txa
   255 5ECB 29 0F		    and #$0f
   256 5ECD AA			    tax
   257 = 5ECF			volume=*+1
   258 5ECE BD 34 12		    lda $1234,x
   259 5ED1 19 70 5F		    ora SHADOW+1,y
   260 5ED4 99 70 5F		    sta SHADOW+1,y
   261 5ED7 88			    dey
   262 5ED8 88			    dey
   263 5ED9 10 E6		    bpl adjust
   264 				    
   265 5EDB 60			    rts
   266 				.endp
   267
   268 5EDC			.proc copy_shadow
   269 5EDC A2 08		    ldx #8
   270 5EDE			copy
   271 5EDE BD 6F 5F		    lda SHADOW,x
   272 5EE1 9D 00 D2		    sta POKEY,x
   273 5EE4 CA			    dex
   274 5EE5 10 F7		    bpl copy
   275
   276 5EE7 A5 D8		    lda stereo_pokey
   277 5EE9 F0 0E		    beq end_copy
   278
   279 5EEB A2 08		    ldx #8
   280 5EED			copy2
   281 5EED BD 81 5F		    lda ECHO,x
   282 5EF0 9D 10 D2		    sta POKEY+$10,x
   283 5EF3 CA			    dex
   284 5EF4 10 F7		    bpl copy2
   285
   286 5EF6 20 54 5F		    jsr shift_echo
   287
   288 5EF9			end_copy
   289 5EF9 60			    rts
   290 				.endp
   291
   292 5EFA			.proc music_normal_volume
   293 5EFA A9 8A 8D CF 5E A9 +     mwa #normal_volume adjust_volume.volume
   294 5F04 60			    rts
   295 				.endp
   296
   297 5F05			.proc music_low_volume
   298 5F05 A9 AA 8D CF 5E A9 +     mwa #quarter_volume adjust_volume.volume
   299 5F0F 60			    rts
   300 				.endp
   301
   302 5F10			.proc detect_2nd_pokey
   303 5F10 20 0E 5E		    jsr wait_frame
   304
   305 5F13 A9 00 8D 32 02	    mva #0 SSKCTL
   306 5F18 A9 00 8D 0F D2	    mva #0 SKCTL
   307 5F1D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 5F22 20 0E 5E		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 5F25 A9 03 8D 32 02	    mva #3 SSKCTL
   314 5F2A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 5F2F 20 0E 5E		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 5F32 AD 1A D2		    lda RANDOM+$10
   322 5F35 CD 1A D2		    cmp RANDOM+$10
   323 5F38 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 5F3A			detected_mono
   326 5F3A A9 00 85 D8		    mva #0 stereo_pokey
   327 5F3E 60			    rts
   328
   329 5F3F			detected_stereo
   330 5F3F A9 01 85 D8		    mva #1 stereo_pokey
   331 5F43 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 5F48 60			    rts
   333 				.endp
   334
   335 5F49			.proc clear_echo
   336 5F49 A0 11		    ldy #(endecho-echobuffer)-1
   337 5F4B			clear_echo_loop
   338 5F4B A9 00 99 78 5F	    mva #0 echobuffer,y
   339 5F50 88 10 F8		    dey:bpl clear_echo_loop
   340 5F53 60			    rts
   341 				.endp
   342
   343 5F54			.proc shift_echo
   344 5F54 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 5F56			shift_loop
   346 5F56 B9 6F 5F 99 78 5F	    mva SHADOW,y SHADOW+9,y
   347 5F5C 88 10 F7		    dey:bpl shift_loop
   348 5F5F 60			    rts
   349 				.endp
   350
   351 5F60			.proc music_off
   352 5F60 A9 00		    lda #0
   353 5F62 8D 70 5F		    sta shadow+1
   354 5F65 8D 72 5F		    sta shadow+3
   355 5F68 8D 74 5F		    sta shadow+5
   356 5F6B 8D 76 5F		    sta shadow+7
   357 5F6E 60			    rts
   358 				.endp
   359
   360 5F6F			SHADOW              ; shadow pokey
   361 5F6F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 5F78			echobuffer
   370 = 5F78			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 5F81			ECHO
   373 = 5F81			    .ds 9
   374 5F8A			endecho
   375
   376 5F8A			normal_volume
   377 5F8A-5FBB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 5F9A			half_volume
   379 5F9A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 5FAA			quarter_volume
   381 5FAA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
  1974
  1975 				; 4 KB
  1976 				; 128 x 32 bytes shapes
  1977 5FBC			            .align $1000
  1978 6000			pm_shapes
  1979 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1980
  1981 				; 9 KB for backdrop image
  1982 7000			            .align $1000
  1983 = 7000			screen_mem1 = * ; 4K
  1984 				;            org screen_mem1
  1985 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1986
  1987 7FF0			            .align $1000
  1988 = 8000			screen_mem2 = * ; 4K
  1989 				;            org screen_mem2
  1990 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1991
  1992 8FF0			            .align $1000
  1993 = 9000			screen_mem3 = * ; 1K
  1994 				;            org screen_mem3
  1995 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1996
  1997 02E0-02E1> DC 26		            run main
