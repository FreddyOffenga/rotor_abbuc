mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R
     2
     3 				; F#READY, 2023-07-16
     4 				; Version 1.0.0
     5 				; For ABBUC Software Competition 2023
     6
     7 				; Casual game for two players
     8 				; (computer player not yet implemented)
     9
    10 				; Main idea:
    11 				; - two players red and blue move in a circle
    12 				; - the ball gets color of player to indicate who should catch it
    13 				; - when the ball hits the circle, the other player gets a point
    14
    15 				; TODO
    16 				; - add music by IvoP
    17 				; - add sound when ball hits edge
    18
    19 				; Optional for a later version:
    20 				; - add computer player(s)
    21 				; - add support for driving controllers
    22 				; - break part of outer circle when ball hits
    23
    24 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 				; collision
    50 = D000			M0PF        = $d000
    51 = D001			M1PF        = $d001
    52 = D002			M2PF        = $d002
    53 = D003			M3PF        = $d003
    54
    55 = D004			P0PF        = $d004
    56 = D005			P1PF        = $d005
    57 = D006			P2PF        = $d006
    58 = D007			P3PF        = $d007
    59
    60 = D008			M0PL        = $d008
    61 = D009			M1PL        = $d009
    62 = D00A			M2PL        = $d00a
    63 = D00B			M3PL        = $d00b
    64
    65 = D00C			P0PL        = $d00c
    66 = D00D			P1PL        = $d00d
    67 = D00E			P2PL        = $d00e
    68 = D00F			P3PL        = $d00f
    69
    70 = D016			COLPF0      = $d016
    71 = D017			COLPF1      = $d017
    72 = D018			COLPF2      = $d018
    73 = D019			COLPF3      = $d019
    74 = D01A			COLBK       = $d01a
    75
    76 = D01D			GRACTL      = $d01d
    77 = D01E			HITCLR      = $d01e
    78 = D01F			CONSOL      = $d01f
    79
    80 = D200			AUDF1       = $d200
    81 = D201			AUDC1       = $d201
    82 = D202			AUDF2       = $d202
    83 = D203			AUDC2       = $d203
    84 = D204			AUDF3       = $d204
    85 = D205			AUDC3       = $d205
    86 = D206			AUDF4       = $d206
    87 = D207			AUDC4       = $d207
    88 = D208			AUDCTL      = $d208
    89
    90 = D20A			RANDOM      = $d20a
    91
    92 = D407			PMBASE      = $d407
    93 = D40A			WSYNC       = $d40a
    94 = D40E			NMIEN       = $d40e
    25
    26 				; must be in decimal format, so $11 is 11
    27 = 0011			MAX_SCORE   = $11
    28
    29 = 1000			pm_area     = $1000
    30 = 1180			msl_area    = pm_area+$180
    31 = 1200			p0_area     = pm_area+$200
    32 = 1280			p1_area     = pm_area+$280
    33 = 1300			p2_area     = pm_area+$300
    34 = 1380			p3_area     = pm_area+$380
    35
    36 				; $1400 .. $1500 is overwritten, bug?
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1600			outer_x_256     = $1600
    40 = 1700			outer_y_256     = $1700
    41
    42 = 1800			screen_y_lo     = $1800
    43 = 1900			screen_y_hi     = $1900
    44
    45 = 0140			WIDTH           = 320
    46 = 00C0			HEIGHT          = 192
    47
    48 = 0028			SCREEN_WIDTH    = 40
    49
    50 = 0030			outer_x_margin  = 48 ;47-32
    51 = 0040			inner_x_margin  = 64
    52
    53 = 00A0			circle_center_x = WIDTH/2
    54 = 0060			circle_center_y = HEIGHT/2
    55
    56 = 0006			ball_top_margin     = 6
    57 = 0045			ball_left_margin    = 64+5
    58
    59 				; pm upper margin
    60 = 0001			upper_margin    = 1
    61 = 0020			left_margin     = 32
    62
    63 = 0084			shape_ptr       = $84
    64 = 0086			tmp_screen      = $86
    65
    66 = 008C			mode_menu       = $8c
    67
    68 = 008D			volume_hit_bat  = $8d
    69
    70 				; player vars must be in sequence for zp,x indexing
    71
    72 = 0090			p1_shape        = $90
    73 = 0091			p2_shape        = $91
    74
    75 = 0094			player1_x       = $94
    76 = 0095			player2_x       = $95
    77
    78 = 0098			player1_y       = $98
    79 = 0099			player2_y       = $99
    80
    81 = 009C			p1_angle        = $9c
    82 = 009D			p2_angle        = $9d
    83
    84 = 00A0			mp_collision    = $a0
    85 = 00A1			in_collision    = $a1
    86 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
    87 = 00A3			edge_delay      = $a3
    88 = 00A4			bat_collision_delay = $a4
    89
    90 				; ball vars
    91 = 00A6			ball_current_x      = $a6
    92 = 00A7			ball_current_y      = $a7
    93 = 00AA			ball_angle_start    = $aa
    94 = 00AB			ball_angle_end      = $ab
    95 = 00AC			ball_speed          = $ac
    96
    97 = 00B0			tmp_angle1          = $b0
    98 = 00B1			tmp_angle2          = $b1
    99 = 00B2			add_to_angle        = $b2
   100 = 00B3			angle_diff_bat      = $b3
   101 = 00B4			tmp_angle_direction = $b4
   102 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   103 = 00B6			game_restart        = $b6
   104 = 00B7			tmp_angle_diff      = $b7
   105 = 00B8			magnitude           = $b8       ; word
   106
   107 				; $c0 - $df free for music
   108
   109 = 00E0			_divisor    = $e0   ; word
   110 = 00E2			_dividend   = $e2   ; word
   111 = 00E4			_remainder  = $e4   ; word
   112 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   113
   114 = 00E6			tmp_x1      = $e6   ; byte
   115 = 00E7			tmp_y1      = $e7   ; byte
   116 = 00E8			tmp_x2      = $e8   ; byte
   117 = 00E9			tmp_y2      = $e9   ; byte
   118
   119 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   120 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   121
   122 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   123 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   124
   125 = 00F2			tmp_dx      = $f2  ; byte
   126 = 00F3			tmp_dy      = $f3  ; byte
   127
   128 = 00F6			_multiplicand   = $f6   ; word
   129 = 00F8			_multiplier     = $f8   ; byte
   130
   131 				; direction:
   132 				; 0 : x1<x2 or y1<y2 = add
   133 				; 1 ; x1>=y2 or y1>=y2 = subtract
   134
   135 = 00FA			dir_x       = $fa  ; byte
   136 = 00FB			dir_y       = $fb  ; byte
   137
   138 = 00FC			line_end_x  = $fc  ; byte
   139 = 00FD			line_end_y  = $fd  ; byte
   140
   141 				            org $2000
   142
   143 				            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 2000			driver_tmp      .ds 2
     5 = 2002			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 				            .align $100
    11 				paddle_to_256
    12 = 2100			            .ds $100
    13
    14 				; paddle initial value
    15 				prev_paddle_value
    16 = 2200			            .ds 1
    17
    18 				driver_init
    19 FFFF> 2201-2A80> A9 00	            lda #0  ; stick
    20 2203 8D 02 20		            sta driver_mode
    21
    22 2206 AD 70 02		            lda PADDL0
    23 2209 8D 00 22		            sta prev_paddle_value
    24
    25 220C A9 00		            lda #0
    26 220E 85 9C		            sta p1_angle
    27 2210 A9 80		            lda #128
    28 2212 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 2214 A9 00		            lda #0
    33 2216 8D 00 20		            sta driver_tmp
    34 2219 8D 01 20		            sta driver_tmp+1
    35 				            
    36 221C A2 00		            ldx #0
    37 221E			store_pv
    38 221E AD 01 20		            lda driver_tmp+1
    39 2221 9D 00 21		            sta paddle_to_256,x
    40 				            
    41 2224 AD 00 20		            lda driver_tmp
    42 2227 18			            clc
    43 2228 69 1F		            adc #<paddle_add
    44 222A 8D 00 20		            sta driver_tmp
    45 222D AD 01 20		            lda driver_tmp+1
    46 2230 69 01		            adc #>paddle_add
    47 2232 8D 01 20		            sta driver_tmp+1
    48 2235 E8			            inx
    49 2236 E0 E5		            cpx #paddle_vals
    50 2238 D0 E4		            bne store_pv
    51 223A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 223B			driver_detect
    63 223B AD 70 02		            lda PADDL0
    64 223E C9 E4		            cmp #228
    65 2240 D0 07		            bne paddle_detect
    66 2242 AD 71 02		            lda PADDL1
    67 2245 C9 E4		            cmp #228
    68 2247 F0 06		            beq no_paddle_detect
    69 2249			paddle_detect
    70 2249 A9 01		            lda #1
    71 224B 8D 02 20		            sta driver_mode
    72 224E 60			            rts
    73
    74 224F			no_paddle_detect
    75 224F AD 78 02		            lda STICK0
    76 2252 C9 0C		            cmp #12
    77 2254 D0 06		            bne no_driving_detect
    78 2256 A9 02		            lda #2
    79 2258 8D 02 20		            sta driver_mode
    80 225B 60			            rts
    81
    82 225C			no_driving_detect
    83 225C C9 07		            cmp #7      ; paddle button also gives this
    84 225E F0 04		            beq stick_detect    
    85 2260 C9 0B		            cmp #11     ; paddle button also gives this
    86 2262 D0 06		            bne no_stick_detect
    87 2264			stick_detect
    88 2264 A9 00		            lda #0
    89 2266 8D 02 20		            sta driver_mode
    90 2269 60			            rts
    91
    92 226A			no_stick_detect
    93 				; default is the last value
    94 226A AD 02 20		            lda driver_mode
    95 226D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 226E			main_driver            
   110 226E AC 02 20		            ldy driver_mode
   111 2271 B9 80 22		            lda driver_lo,y
   112 2274 8D 7E 22		            sta driver_ptr
   113 2277 B9 84 22		            lda driver_hi,y
   114 227A 8D 7F 22		            sta driver_ptr+1
   115
   116 = 227E			driver_ptr = *+1
   117 227D 4C FF FF		            jmp $ffff  
   118
   119 2280			driver_lo
   120 2280 88			            dta <driver_stick
   121 2281 CD			            dta <driver_paddle
   122 2282 88			            dta <driver_stick
   123 2283 88			            dta <driver_stick
   124
   125 2284			driver_hi
   126 2284 22			            dta >driver_stick
   127 2285 22			            dta >driver_paddle
   128 2286 22			            dta >driver_stick
   129 2287 22			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 2288			driver_stick
   134 2288 BD 78 02		            lda STICK0,x
   135 228B C9 0F		            cmp #15
   136 228D F0 21		            beq move_done
   137 228F C9 0B		            cmp #11
   138 2291 D0 0E		            bne no_left
   139
   140 2293 D6 9C		            dec p1_angle,x
   141 2295 BD 84 02		            lda STRIG0,x
   142 2298 D0 04		            bne no_fast
   143 229A D6 9C		            dec p1_angle,x
   144 229C D6 9C		            dec p1_angle,x
   145 229E			no_fast
   146 				            
   147 229E 4C B0 22		            jmp move_done
   148 22A1 C9 07		no_left     cmp #7
   149 22A3 D0 0B		            bne move_done
   150
   151 22A5 F6 9C		            inc p1_angle,x
   152 22A7 BD 84 02		            lda STRIG0,x
   153 22AA D0 04		            bne no_fast_right
   154 22AC F6 9C		            inc p1_angle,x
   155 22AE F6 9C		            inc p1_angle,x
   156 22B0			no_fast_right
   157 22B0			move_done
   158 22B0 60			            rts
   159
   160 				; X=port number to check (paddle uses only port 1)
   161 				; check fire button (paddle uses left/right stick as fire button)
   162 				; A=0 not pressed, 1=pressed
   163
   164 22B1			is_fire_button
   165 22B1 AD 02 20		            lda driver_mode
   166 22B4 C9 01		            cmp #1
   167 22B6 F0 04		            beq check_paddle_fire
   168 				            
   169 22B8 BD 84 02		            lda STRIG0,x
   170 22BB 60			            rts
   171 22BC			check_paddle_fire
   172
   173 22BC AD 78 02		            lda STICK0
   174 22BF C9 07		            cmp #7
   175 22C1 F0 07		            beq paddle_fire
   176 22C3 C9 0B		            cmp #11
   177 22C5 F0 03		            beq paddle_fire
   178 22C7 A9 00		            lda #0
   179 22C9 60			            rts
   180 22CA			paddle_fire
   181 22CA A9 01		            lda #1
   182 22CC 60			            rts
   183
   184 				; paddle driver
   185 				            
   186 22CD			driver_paddle            
   187 22CD BD 70 02		            lda PADDL0,x
   188 22D0 A8			            tay
   189 22D1 B9 00 21		            lda paddle_to_256,y
   190 22D4 5D DA 22		            eor paddle_offsets,x
   191 22D7 95 9C		            sta p1_angle,x
   192 22D9 60			            rts
   193
   194 22DA			paddle_offsets
   195 22DA 00 80		            dta 0,128
   144 22DC			main         
   145 22DC A9 00		            lda #0
   146 22DE 8D 2F 02		            sta SDMCTL
   147 22E1 85 B6		            sta game_restart
   148 22E3 A5 01		            lda 1
   149 22E5 8D 44 02		            sta 580 ; coldstart
   150
   151 22E8 20 01 22		            jsr driver_init
   152
   153 22EB 20 8A 27		            jsr make_shape_index
   154 				 
   155 22EE 20 BA 27		            jsr make_outer_256
   156 				            
   157 22F1 20 D8 23		            jsr make_screen_y_tab
   158
   159 22F4 20 23 24		            jsr invert_backdrop
   160
   161 22F7 20 2A 28		            jsr reset_score
   162 22FA 20 F8 27		            jsr show_score_p1
   163 22FD 20 11 28		            jsr show_score_p2
   164 				                       
   165 2300 20 15 2A		            jsr init_sprites
   166 2303 20 41 2A		            jsr init_colors
   167
   168 				; init. game vars
   169 2306 A2 00		            ldx #INIT_LEVEL_INDEX
   170 2308 8E 5D 2A		            stx current_level_index
   171 230B 20 62 2A		            jsr set_level_ball_speed
   172
   173 230E A9 01		            lda #1
   174 2310 85 8C		            sta mode_menu           ; start with menu
   175
   176 				; start vbi
   177 				            
   178 2312 A9 49		            lda #<dli_menu
   179 2314 8D 00 02		            sta VDSLST
   180 2317 A9 23		            lda #>dli_menu
   181 2319 8D 01 02		            sta VDSLST+1
   182 				            
   183 231C 20 70 B2		            jsr music_init
   184 				            
   185 231F A9 C0		            lda #$c0
   186 2321 8D 0E D4		            sta NMIEN
   187 				            
   188 2324 A9 07		            lda #7          ; sets VVBLKI
   189 2326 A0 68		            ldy #<vbi
   190 2328 A2 24		            ldx #>vbi
   191 232A 20 5C E4		            jsr $e45c       ; SETVBV
   192
   193 				; we're just sitting here while VBI does all the work :)
   194 232D 4C 2D 23		loop        jmp loop
   195
   196 				;------------------------
   197 				; 8bit * 8bit = 16bit multiply
   198 				; By White Flame
   199 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   200 				; uses extra zp var _multiplicand+1
   201
   202 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   203 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   204
   205 				; In this version, both inputs must be unsigned
   206 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   207
   208 2330			_multi8
   209 2330 A9 00		            lda #$00
   210 2332 A8			            tay
   211 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   212 2333 F0 0D		            beq _enter_loop
   213 2335			_do_add
   214 2335 18			            clc
   215 2336 65 F6		            adc _multiplicand
   216 2338 AA			            tax
   217
   218 2339 98			            tya
   219 233A 65 F7		            adc _multiplicand+1
   220 233C A8			            tay
   221 233D 8A			            txa
   222 233E			_mul_loop
   223 233E 06 F6		            asl _multiplicand
   224 2340 26 F7		            rol _multiplicand+1
   225 2342			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   226 2342 46 F8		            lsr _multiplier
   227 2344 B0 EF		            bcs _do_add
   228 2346 D0 F6		            bne _mul_loop
   229 2348 60			            rts
   230
   231 2349			dli_menu
   232 2349 48			            pha
   233 234A 8A			            txa
   234 234B 48			            pha
   235 				            
   236 234C A9 00		            lda #0
   237 234E 8D 0A D4		            sta WSYNC
   238 2351 8D 1A D0		            sta COLBK
   239 2354 A9 0E		            lda #$0e
   240 2356 8D 0A D4		            sta WSYNC
   241 2359 8D 1A D0		            sta COLBK
   242 235C A9 0A		            lda #$0a
   243 235E 8D 0A D4		            sta WSYNC
   244 2361 8D 1A D0		            sta COLBK
   245 2364 A9 00		            lda #0
   246 2366 8D 0A D4		            sta WSYNC
   247 2369 8D 1A D0		            sta COLBK
   248
   249 236C A2 00		            ldx #0
   250 236E			color_it            
   251 236E BD A0 23		            lda menu_colpf0,x
   252 2371 8D 0A D4		            sta WSYNC
   253 2374 8D 16 D0		            sta COLPF0
   254 2377 E8			            inx
   255 2378 E0 38		            cpx #56
   256 237A D0 F2		            bne color_it
   257
   258 237C A9 00		            lda #0
   259 237E 8D 0A D4		            sta WSYNC
   260 2381 8D 1A D0		            sta COLBK
   261 2384 A9 0A		            lda #$0a
   262 2386 8D 0A D4		            sta WSYNC
   263 2389 8D 1A D0		            sta COLBK
   264 238C A9 0E		            lda #$0e
   265 238E 8D 0A D4		            sta WSYNC
   266 2391 8D 1A D0		            sta COLBK
   267 2394 A9 00		            lda #0
   268 2396 8D 0A D4		            sta WSYNC
   269 2399 8D 1A D0		            sta COLBK
   270 				            
   271 239C 68			            pla
   272 239D AA			            tax
   273 239E 68			            pla
   274 239F 40			            rti
   275
   276 23A0			menu_colpf0
   277 23A0 00 00 28 28 2A 2A +             dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   278 23A8 7C 7C 7A 7A 78 78 +             dta $7c,$7c,$7a,$7a,$78,$78,0,0
   279 23B0 00 00 00 00		            dta 0,0,0,0
   280 23B4 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   281 23BC 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   282 23C4 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   283 23CC 00 00 00 00		            dta 0,0,0,0
   284 23D0 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   285
   286 				; make pointers from y-position to screen memory
   287 				; screen memory is 3 blocks
   288 				; screen_mem1 : 102 lines, 4080 bytes
   289 				; screen_mem2 : 102 lines, 4080 bytes
   290 				; screen_mem3 :  20 lines,  800 bytes
   291
   292 23D8			make_screen_y_tab
   293 23D8 A9 00		            lda #<screen_mem1
   294 23DA 85 86		            sta tmp_screen
   295 23DC A9 70		            lda #>screen_mem1
   296 23DE 85 87		            sta tmp_screen+1
   297
   298 23E0 A2 00		            ldx #0
   299 23E2			fill_y_tab1
   300 23E2 20 0B 24		            jsr store_y_line
   301 23E5 E8			            inx
   302 23E6 E0 66		            cpx #102
   303 23E8 D0 F8		            bne fill_y_tab1
   304
   305 				; x = 102
   306 23EA A9 00		            lda #<screen_mem2
   307 23EC 85 86		            sta tmp_screen
   308 23EE A9 80		            lda #>screen_mem2
   309 23F0 85 87		            sta tmp_screen+1
   310
   311 23F2			fill_y_tab2
   312 23F2 20 0B 24		            jsr store_y_line
   313 23F5 E8			            inx
   314 23F6 E0 CC		            cpx #204
   315 23F8 D0 F8		            bne fill_y_tab2
   316
   317 23FA A9 00		            lda #<screen_mem3
   318 23FC 85 86		            sta tmp_screen
   319 23FE A9 90		            lda #>screen_mem3
   320 2400 85 87		            sta tmp_screen+1
   321
   322 				; x = 204
   323 2402			fill_y_tab3
   324 2402 20 0B 24		            jsr store_y_line
   325 2405 E8			            inx
   326 2406 E0 E0		            cpx #224
   327 2408 D0 F8		            bne fill_y_tab3
   328 240A 60			            rts
   329
   330 240B			store_y_line
   331 240B A5 86		            lda tmp_screen
   332 240D 9D 00 18		            sta screen_y_lo,x
   333 2410 A5 87		            lda tmp_screen+1
   334 2412 9D 00 19		            sta screen_y_hi,x
   335 				            
   336 2415 A5 86		            lda tmp_screen
   337 2417 18			            clc
   338 2418 69 28		            adc #SCREEN_WIDTH
   339 241A 85 86		            sta tmp_screen
   340 241C A5 87		            lda tmp_screen+1
   341 241E 69 00		            adc #0
   342 2420 85 87		            sta tmp_screen+1
   343 2422 60			            rts
   344
   345 				; @todo invert backdrop image
   346 				; now we have to do it here :P
   347 2423			invert_backdrop
   348 2423 A9 00		            lda #<screen_mem1
   349 2425 85 86		            sta tmp_screen
   350 2427 A9 70		            lda #>screen_mem1
   351 2429 85 87		            sta tmp_screen+1
   352 				            
   353 242B A2 10		            ldx #16     ; 16 pages = 4K
   354 242D 20 4B 24		            jsr do_x_pages
   355 				           
   356 2430 A9 00		            lda #<screen_mem2
   357 2432 85 86		            sta tmp_screen
   358 2434 A9 80		            lda #>screen_mem2
   359 2436 85 87		            sta tmp_screen+1
   360 				            
   361 2438 A2 10		            ldx #16     ; 16 pages = 4K
   362 243A 20 4B 24		            jsr do_x_pages
   363
   364 243D A9 00		            lda #<screen_mem3
   365 243F 85 86		            sta tmp_screen
   366 2441 A9 90		            lda #>screen_mem3
   367 2443 85 87		            sta tmp_screen+1
   368 				            
   369 2445 A2 04		            ldx #4     ; 4 pages = 1K
   370 2447 20 4B 24		            jsr do_x_pages
   371 244A 60			            rts
   372
   373 				; invert x pages, starting from tmp_screen
   374
   375 244B			do_x_pages
   376 244B A0 00		            ldy #0
   377 244D			do_page
   378 244D B1 86		            lda (tmp_screen),y
   379 244F 49 FF		            eor #$ff
   380 2451 91 86		            sta (tmp_screen),y
   381 2453 C8			            iny
   382 2454 D0 F7		            bne do_page 
   383
   384 2456 E6 87		            inc tmp_screen+1
   385 2458 CA			            dex
   386 2459 D0 F2		            bne do_page
   387 245B 60			            rts
   388
   389 245C			turn_color_ball
   390 245C A6 B5		            ldx player_turn
   391 245E BD 65 24		            lda color_turn,x
   392 2461 8D C7 02		            sta COLOR3
   393 2464 60			            rts
   394 				            
   395 2465 00 26 76		color_turn  dta 0,$26,$76                           
   396
   397 				; A, X, Y are already saved by the OS
   398 2468			vbi                 
   399 2468 A9 2E		            lda #%00101110  ; enable P/M DMA
   400 246A 8D 2F 02		            sta SDMCTL
   401 246D A9 00		            lda #0
   402 246F 85 4D		            sta 77      ; attract off
   403 2471 A9 38		            lda #>rotor_font
   404 2473 8D F4 02		            sta 756
   405
   406 				; menu switching thingy
   407
   408 2476 AD 1F D0		            lda CONSOL
   409 2479 C9 03		            cmp #3
   410 247B D0 0C		            bne no_option_pressed
   411
   412 247D			go_menu_mode            
   413 247D 20 32 B3		            jsr music_normal_volume
   414 				            
   415 2480 20 F3 26		            jsr wipe_ball
   416 				            
   417 2483 A9 01		            lda #1
   418 2485 85 8C		            sta mode_menu
   419 2487 D0 12		            bne check_mode_menu
   420
   421 2489			no_option_pressed
   422 2489 C9 06		            cmp #6
   423 248B D0 0E		            bne check_mode_menu
   424 				            
   425 				; reset game
   426
   427 248D			reset_game
   428 248D 20 3D B3		            jsr music_low_volume
   429
   430 2490 20 F3 26		            jsr wipe_ball
   431 				            
   432 2493 A9 01		            lda #1
   433 2495 85 B6		            sta game_restart
   434
   435 2497 A9 00		            lda #0
   436 2499 85 8C		            sta mode_menu
   437
   438 249B			check_mode_menu
   439 249B A5 8C		            lda mode_menu
   440 249D F0 51		            beq main_game_vbi
   441
   442 				; within menu vbi
   443 				            
   444 249F AD 1F D0		            lda CONSOL
   445 24A2 C9 05		            cmp #5          ; select
   446 24A4 D0 18		            bne no_level_select
   447 				            
   448 24A6 AD 5C 2A		            lda previous_consol
   449 24A9 C9 05		            cmp #5
   450 24AB F0 14		            beq wait_depressed
   451 				            
   452 24AD 20 71 2A		            jsr increase_level
   453 24B0 AE 5D 2A		            ldx current_level_index
   454 24B3 20 62 2A		            jsr set_level_ball_speed            
   455
   456 24B6 A9 05		            lda #5
   457 24B8 8D 5C 2A		            sta previous_consol
   458 24BB 4C C1 24		            jmp wait_depressed
   459
   460 24BE			no_level_select
   461 24BE 8D 5C 2A		            sta previous_consol
   462
   463 24C1			wait_depressed        
   464 24C1 A9 16		            lda #<menu_dl
   465 24C3 8D 30 02		            sta SDLSTL
   466 24C6 A9 41		            lda #>menu_dl
   467 24C8 8D 31 02		            sta SDLSTH
   468
   469 				; detect/show controller type (used for both players)
   470 24CB 20 D7 24		            jsr detect_show_driver
   471
   472 24CE 20 F9 25		            jsr handle_player1
   473 24D1 20 12 26		            jsr handle_player2
   474
   475 24D4 4C 89 25		            jmp exit_vbi
   476
   477 				; X = port/driver to detect
   478 24D7			detect_show_driver
   479 24D7 20 3B 22		            jsr driver_detect
   480 24DA A8			            tay
   481 24DB B9 98 42		            lda driver_text_lo,y
   482 24DE 85 86		            sta tmp_screen
   483 24E0 B9 9C 42		            lda driver_text_hi,y
   484 24E3 85 87		            sta tmp_screen+1
   485
   486 24E5 A0 07		            ldy #7
   487 24E7			show_driv
   488 24E7 B1 86		            lda (tmp_screen),y
   489 24E9 99 1E 42		            sta driver_screen,y
   490 24EC 88			            dey
   491 24ED 10 F8		            bpl show_driv
   492 24EF 60			            rts
   493
   494 				; main game vbi
   495 24F0			main_game_vbi
   496 24F0 A5 B6		            lda game_restart
   497 24F2 F0 2F		            beq no_restart
   498
   499 				; restart game
   500 				            
   501 24F4 A9 00		            lda #0
   502 24F6 85 B6		            sta game_restart
   503 				            
   504 24F8 20 98 25		            jsr sound_off
   505 				            
   506 24FB 20 2A 28		            jsr reset_score
   507 24FE 20 F8 27		            jsr show_score_p1
   508 2501 20 11 28		            jsr show_score_p2
   509
   510 2504 A6 9C		            ldx p1_angle
   511 2506 86 AA		            stx ball_angle_start
   512 2508 20 4C 26		            jsr ball_to_start_position
   513 250B 20 5B 26		            jsr prepare_ball_end_position
   514
   515 250E A9 00		            lda #0
   516 2510 85 A0		            sta mp_collision
   517 2512 85 A1		            sta in_collision
   518 2514 85 A3		            sta edge_delay
   519 2516 8D 1E D0		            sta HITCLR
   520
   521 2519 A9 02		            lda #2
   522 251B 85 B5		            sta player_turn         ; blue's turn
   523
   524 251D 20 5C 24		            jsr turn_color_ball
   525 2520 4C 89 25		            jmp exit_vbi            
   526
   527 2523			no_restart
   528 2523 A9 00		            lda #<display_list
   529 2525 8D 30 02		            sta SDLSTL
   530 2528 A9 40		            lda #>display_list
   531 252A 8D 31 02		            sta SDLSTH
   532
   533 252D AD 08 D0		            lda M0PL
   534 2530 85 A0		            sta mp_collision
   535 2532 AD 09 D0		            lda M1PL
   536 2535 05 A0		            ora mp_collision
   537 2537 85 A0		            sta mp_collision
   538 				 
   539 2539 20 F9 25		            jsr handle_player1
   540 253C 20 12 26		            jsr handle_player2
   541
   542 				; handle ball
   543
   544 253F 20 F3 26		            jsr wipe_ball         
   545
   546 				; Check ball collision with bat
   547
   548 2542 A5 A4		            lda bat_collision_delay
   549 2544 F0 05		            beq check_allowed
   550 2546 C6 A4		            dec bat_collision_delay
   551 2548 4C 62 25		            jmp move_one
   552
   553 254B			check_allowed
   554 254B A5 A0		            lda mp_collision
   555 254D F0 0F		            beq reset_in_collision
   556
   557 254F A5 A1		            lda in_collision
   558 2551 D0 0F		            bne no_first_hit
   559
   560 2553 E6 A1		            inc in_collision            
   561 2555 20 88 26		            jsr bounce_bat_ball 
   562 				            
   563 2558 20 A1 25		            jsr start_sound_bat          
   564 				            
   565 255B 4C 62 25		            jmp move_one
   566 				            
   567 255E			reset_in_collision
   568 255E A9 00		            lda #0
   569 2560 85 A1		            sta in_collision   
   570 				            ;jsr sound_off         
   571
   572 2562			move_one
   573 2562			no_first_hit
   574 2562 20 7C 29		            jsr move_current_xy
   575 2565 F0 0F		            beq still_moving
   576 2567			do_reset
   577 2567 A5 AB		            lda ball_angle_end
   578 2569 85 AA		            sta ball_angle_start
   579
   580 256B 20 7F 26		            jsr ball_current_to_start_position
   581 256E 20 5B 26		            jsr prepare_ball_end_position
   582
   583 2571 20 C5 25		            jsr update_score
   584 2574 D0 1C		            bne game_ends
   585 2576			still_moving
   586 2576 A5 EB		            lda current_x+1
   587 2578 85 A6		            sta ball_current_x
   588 257A A5 ED		            lda current_y+1
   589 257C 85 A7		            sta ball_current_y
   590
   591 257E 20 08 27		            jsr show_ball
   592
   593 2581 A9 00		            lda #0
   594 2583 8D 18 D0		            sta $d018           
   595
   596 				; anything in A to clear collisions
   597 2586 8D 1E D0		            sta HITCLR
   598
   599 2589			exit_vbi
   600 2589 20 9B B2		            jsr play_song
   601 258C 20 A6 25		            jsr play_sound_bat
   602 258F 4C 62 E4		            jmp $e462
   603
   604 2592			game_ends
   605 2592 20 32 B3		            jsr music_normal_volume
   606 2595 4C 62 E4		            jmp $e462            
   607
   608 2598			sound_off
   609 2598 A9 00		            lda #0
   610 259A 8D 04 D2		            sta AUDF3
   611 259D 8D 05 D2		            sta AUDC3
   612 25A0 60			            rts
   613
   614 25A1			start_sound_bat
   615 25A1 A9 0F		            lda #15
   616 25A3 85 8D		            sta volume_hit_bat
   617 25A5 60			            rts
   618 				            
   619 25A6			play_sound_bat
   620 25A6 A5 8D		            lda volume_hit_bat
   621 25A8 F0 1A		            beq silenced_bat
   622
   623 25AA A5 B5		            lda player_turn
   624 25AC 0A			            asl
   625 25AD 0A			            asl
   626 25AE 69 30		            adc #$30
   627 25B0 E5 B3		            sbc angle_diff_bat
   628 25B2 8D 9C B3		            sta SHADOW+4
   629 25B5 8D 04 D2		            sta AUDF3
   630 25B8 A5 8D		            lda volume_hit_bat
   631 25BA 09 A0		            ora #$a0
   632 25BC 8D 9D B3		            sta SHADOW+5
   633 25BF 8D 05 D2		            sta AUDC3
   634 25C2 C6 8D		            dec volume_hit_bat
   635 25C4			silenced_bat
   636 25C4 60			            rts
   637
   638 				; Update score
   639 				; Score > max score, then exit A = 1, otherwise A = 0
   640
   641 25C5			update_score
   642 25C5 A5 B5		            lda player_turn
   643 25C7 C9 01		            cmp #1
   644 25C9 D0 12		            bne was_player2_turn
   645 				; was player 1 turn, so player 2 gets a point
   646 25CB 20 3F 28		            jsr inc_score_p2
   647 25CE 20 11 28		            jsr show_score_p2
   648
   649 25D1 AD 15 41		            lda score_p2
   650 25D4 C9 11		            cmp #MAX_SCORE
   651 25D6 D0 17		            bne reset_edge_delay
   652
   653 25D8 A9 01		            lda #1
   654 25DA 85 8C		            sta mode_menu
   655 25DC 60			            rts
   656
   657 25DD			was_player2_turn
   658 25DD 20 33 28		            jsr inc_score_p1
   659 25E0 20 F8 27		            jsr show_score_p1
   660
   661 25E3 AD 14 41		            lda score_p1
   662 25E6 C9 11		            cmp #MAX_SCORE
   663 25E8 D0 05		            bne reset_edge_delay
   664
   665 25EA A9 01		            lda #1
   666 25EC 85 8C		            sta mode_menu
   667 25EE 60			            rts
   668
   669 25EF			reset_edge_delay
   670 25EF A9 0A		            lda #10
   671 25F1 85 A3		            sta edge_delay
   672
   673 25F3			no_edge
   674
   675 25F3 A9 00		            lda #0      ; no end game
   676 				; anything in A to clear collisions
   677 25F5 8D 1E D0		            sta HITCLR
   678 25F8 60			            rts
   679
   680 				; player 1
   681 				; - wipe shape at previous y-position
   682 				; - move player using controller
   683 				; - set sprite positions
   684
   685 25F9			handle_player1
   686 25F9 20 60 27		            jsr wipe_p1         ; wipe previous shape player 1
   687
   688 25FC A2 00		            ldx #0              ; player 1
   689 25FE 20 2B 26		            jsr move_player
   690 				            
   691 2601 20 2C 27		            jsr show_p1
   692
   693 2604 A5 94		            lda player1_x
   694 2606 18			            clc
   695 2607 69 20		            adc #left_margin
   696 2609 8D 00 D0		            sta HPOSP0
   697 260C 69 08		            adc #8
   698 260E 8D 01 D0		            sta HPOSP1
   699 2611 60			            rts
   700
   701 				; player 2
   702 				; - wipe shape at previous y-position
   703 				; - move player using controller
   704 				; - set sprite positions
   705
   706 2612			handle_player2
   707 2612 20 75 27		            jsr wipe_p2         ; wipe previous shape player 2
   708
   709 2615 A2 01		            ldx #1              ; player 2
   710 2617 20 2B 26		            jsr move_player
   711 				                        
   712 261A 20 46 27		            jsr show_p2
   713
   714 261D A5 95		            lda player2_x
   715 261F 18			            clc
   716 2620 69 20		            adc #left_margin
   717 2622 8D 02 D0		            sta HPOSP2
   718 2625 69 08		            adc #8
   719 2627 8D 03 D0		            sta HPOSP3
   720 262A 60			            rts
   721
   722 				; move player 1/2
   723 				; right - clockwise, left = anti-clockwise
   724
   725 				; X = 0, player 1
   726 				; X = 1, player 2
   727
   728 				; Y = driver mode:
   729 				; 0 : stick
   730 				; 1 : paddle
   731 				; 2 : driving
   732 				; 3 : computer
   733 				            
   734 262B			move_player
   735 262B 20 6E 22		            jsr main_driver
   736
   737 262E B5 9C		            lda p1_angle,x
   738 2630 29 7F		            and #127                    ; restrict angle to 0..179 degrees
   739 2632 49 40		            eor #64                     ; perpendicular to the circle angle
   740 2634 95 90		            sta p1_shape,x
   741
   742 2636 B4 9C		            ldy p1_angle,x
   743 2638 B9 00 2B		            lda inner_x_tab,y
   744 263B 4A			            lsr
   745 263C 69 20		            adc #inner_x_margin/2
   746 263E 95 94		            sta player1_x,x
   747 2640 B9 00 2C		            lda inner_y_tab,y
   748 2643 4A			            lsr
   749 2644 95 98		            sta player1_y,x
   750
   751 2646 B4 90		            ldy p1_shape,x
   752 2648 20 AF 27		            jsr shape_to_ptr
   753
   754 264B 60			            rts
   755
   756 				; Set ball at start position
   757 				; - start angle current player
   758 				; - start position by inner table
   759 				; - collision delay set?
   760
   761 				; Set ball current position to start position
   762 				; input:
   763 				; X = angle of start position
   764 				; output:
   765 				; ball position: (ball_current_x, ball_current_y)
   766 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
   767 264C			ball_to_start_position
   768 264C BD 00 2B		            lda inner_x_tab,x
   769 264F 85 A6		            sta ball_current_x
   770 2651 85 E6		            sta tmp_x1
   771 2653 BD 00 2C		            lda inner_y_tab,x
   772 2656 85 A7		            sta ball_current_y
   773 2658 85 E7		            sta tmp_y1
   774 265A 60			            rts
   775
   776 				; Prepare ball end position
   777 				; - end angle current player
   778 				; - end position by outer table
   779 				; - calculate step size x,y
   780
   781 				; Input:
   782 				; - ball_angle_start
   783 				; - ball speed
   784 				; Output:
   785 				; - ball_andle_end
   786 				; - ball start position (tmp_x1, tmp_y1)
   787 				; - ball end position (tmp_x2, tmp_y2)
   788 				; - step size (step_x, step_y) for ball movement
   789 265B			prepare_ball_end_position
   790 265B A5 AA		            lda ball_angle_start
   791 265D 49 80		            eor #128        ; other side
   792 265F 85 AB		            sta ball_angle_end
   793 2661 AA			            tax
   794 2662 20 E8 26		            jsr angle_to_end_position
   795 				                        
   796 2665 20 0F 29		            jsr init_current_xy
   797 				            
   798 				; move current a little bit            
   799 2668 20 7C 29		            jsr move_current_xy
   800 				; ignore end indicator, since we only just started
   801
   802
   803 266B A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
   804 266D 85 A4		            sta bat_collision_delay
   805 266F 60			            rts
   806
   807 				; x = angle 0..255
   808 2670			outer_angle_to_start_position
   809 2670 BD 00 16		            lda outer_x_256,x
   810 2673 85 A6		            sta ball_current_x
   811 2675 85 E6		            sta tmp_x1
   812 2677 BD 00 17		            lda outer_y_256,x
   813 267A 85 A7		            sta ball_current_y
   814 267C 85 E7		            sta tmp_y1
   815 267E 60			            rts
   816
   817 267F			ball_current_to_start_position
   818 267F A5 A6		            lda ball_current_x
   819 2681 85 E6		            sta tmp_x1
   820 2683 A5 A7		            lda ball_current_y
   821 2685 85 E7		            sta tmp_y1
   822 2687 60			            rts
   823
   824 				; Ball collides with bat
   825 				; - start ball angle = end ball angle
   826 				; - calculate diff between bat and ball end angle
   827 				; - calculate new end angle
   828 				; - Set ball at start position
   829 				; - Prepare ball end position
   830
   831 2688			bounce_bat_ball
   832 				; set new start of ball
   833 				; @todo check ball angles
   834 				; set new ball start angle (= previous end angle)
   835 2688 A5 AB		            lda ball_angle_end
   836 268A 85 AA		            sta ball_angle_start
   837 				            
   838 				; alternative?
   839 				            ;ldx ball_angle_start
   840 				            ;jsr ball_to_start_position          
   841 268C 20 7F 26		            jsr ball_current_to_start_position
   842
   843 				; which player hit the ball?
   844 268F A9 01		            lda #1
   845 2691 85 A2		            sta player_nr_hit
   846 2693 A5 A0		            lda mp_collision
   847 2695 29 03		            and #%00000011      ; pm0/1 hit = player 1 hit
   848 2697 D0 04		            bne p1_hit
   849 2699 A9 02		            lda #2
   850 269B 85 A2		            sta player_nr_hit   ; no p1 hit, must be p2
   851 269D			p1_hit            
   852
   853 				; who's turn is it and who bounced the ball?
   854
   855 269D A5 B5		            lda player_turn
   856 269F 25 A2		            and player_nr_hit
   857 26A1 F0 06		            beq no_switch_turn
   858
   859 26A3 A5 B5		            lda player_turn
   860 26A5 49 03		            eor #3              ; 1 => 2, 2 => 1
   861 26A7 85 B5		            sta player_turn 
   862
   863 26A9			no_switch_turn
   864 26A9 20 5C 24		            jsr turn_color_ball
   865 				            
   866 26AC A6 A2		            ldx player_nr_hit
   867 26AE CA			            dex                     ; index 0,1 (player = 1,2)
   868 26AF B5 9C		            lda p1_angle,x
   869
   870 				; Calculate diff between bat angle position and new ball start position
   871 26B1 85 B0		            sta tmp_angle1
   872
   873 26B3 A5 AA		            lda ball_angle_start
   874 26B5 85 B1		            sta tmp_angle2
   875
   876 26B7 20 4B 28		            jsr calc_angle_diff
   877
   878 26BA 0A			            asl
   879 26BB 0A			            asl
   880 26BC 0A			            asl
   881 26BD 85 B3		            sta angle_diff_bat
   882
   883 26BF A5 B0		            lda tmp_angle1
   884 26C1 18			            clc
   885 26C2 65 B2		            adc add_to_angle
   886 26C4 49 80		            eor #128            ; other side
   887 26C6 85 B0		            sta tmp_angle1
   888 				            
   889 26C8 A5 B4		            lda tmp_angle_direction
   890 26CA D0 0A		            bne diff_clockwise
   891 				; diff counter clockwise
   892 26CC A5 B0		            lda tmp_angle1
   893 26CE 18			            clc
   894 26CF 65 B3		            adc angle_diff_bat
   895 26D1 85 B0		            sta tmp_angle1
   896 26D3 4C DD 26		            jmp calc_done            
   897
   898 26D6			diff_clockwise
   899 26D6 A5 B0		            lda tmp_angle1
   900 26D8 38			            sec
   901 26D9 E5 B3		            sbc angle_diff_bat
   902 26DB 85 B0		            sta tmp_angle1
   903 				            
   904 				; calculation done            
   905 26DD			calc_done
   906 26DD A5 B0		            lda tmp_angle1
   907 26DF 85 AB		            sta ball_angle_end
   908 26E1 AA			            tax
   909 26E2 20 E8 26		            jsr angle_to_end_position
   910 				                        
   911 26E5 4C 0F 29		            jmp init_current_xy
   912
   913 				; x = angle 0..255
   914 26E8			angle_to_end_position
   915 26E8 BD 00 16		            lda outer_x_256,x
   916 26EB 85 E8		            sta tmp_x2
   917 26ED BD 00 17		            lda outer_y_256,x
   918 26F0 85 E9		            sta tmp_y2
   919 26F2 60			            rts
   920
   921 26F3			wipe_ball
   922 26F3 A5 A7		            lda ball_current_y
   923 26F5 4A			            lsr
   924 26F6 69 06		            adc #ball_top_margin
   925 26F8 AA			            tax                 ; x = real y position on screen
   926 26F9 A9 00		            lda #0
   927 26FB 9D 80 11		            sta msl_area,x
   928 26FE 9D 81 11		            sta msl_area+1,x
   929 2701 9D 82 11		            sta msl_area+2,x
   930 2704 9D 83 11		            sta msl_area+3,x
   931 2707 60			            rts
   932
   933 2708			show_ball
   934 2708 A5 A7		            lda ball_current_y
   935 270A 4A			            lsr
   936 270B 69 06		            adc #ball_top_margin
   937 270D AA			            tax                 ; x = real y position on screen
   938
   939 270E A9 02		            lda #%00000010
   940 2710 9D 80 11		            sta msl_area,x
   941 2713 9D 83 11		            sta msl_area+3,x
   942 2716 A9 07		            lda #%00000111
   943 2718 9D 81 11		            sta msl_area+1,x
   944 271B 9D 82 11		            sta msl_area+2,x
   945 				            
   946 271E A5 A6		            lda ball_current_x
   947 2720 4A			            lsr
   948 2721 69 45		            adc #ball_left_margin
   949 2723 8D 05 D0		            sta HPOSM1
   950 2726 69 02		            adc #2
   951 2728 8D 04 D0		            sta HPOSM0
   952 				                        
   953 272B 60			            rts
   954 				            
   955 272C			show_p1
   956 272C A5 98		            lda player1_y
   957 272E 18			            clc
   958 272F 69 01		            adc #upper_margin
   959 2731 AA			            tax
   960
   961 2732 A0 00		            ldy #0
   962 2734			show_shape1
   963 2734 B1 84		            lda (shape_ptr),y
   964 2736 9D 00 12		            sta p0_area,x 
   965 2739 C8			            iny
   966 273A B1 84		            lda (shape_ptr),y
   967 273C 9D 80 12		            sta p1_area,x
   968 273F E8			            inx
   969 2740 C8			            iny
   970 2741 C0 20		            cpy #32
   971 2743 D0 EF		            bne show_shape1
   972 2745 60			            rts
   973
   974 2746			show_p2
   975 2746 A5 99		            lda player2_y
   976 2748 18			            clc
   977 2749 69 01		            adc #upper_margin
   978 274B AA			            tax
   979
   980 274C A0 00		            ldy #0
   981 274E			show_shape2
   982 274E B1 84		            lda (shape_ptr),y
   983 2750 9D 00 13		            sta p2_area,x 
   984 2753 C8			            iny
   985 2754 B1 84		            lda (shape_ptr),y
   986 2756 9D 80 13		            sta p3_area,x
   987 2759 E8			            inx
   988 275A C8			            iny
   989 275B C0 20		            cpy #32
   990 275D D0 EF		            bne show_shape2
   991 275F 60			            rts
   992
   993 2760			wipe_p1
   994 2760 A5 98		            lda player1_y
   995 2762 18			            clc
   996 2763 69 01		            adc #upper_margin
   997 2765 AA			            tax
   998 				            
   999 2766 A0 10		            ldy #16
  1000 2768 A9 00		            lda #0
  1001 276A			wipe_it1            
  1002 276A 9D 00 12		            sta p0_area,x 
  1003 276D 9D 80 12		            sta p1_area,x
  1004 2770 E8			            inx
  1005 2771 88			            dey
  1006 2772 D0 F6		            bne wipe_it1 
  1007 2774 60			            rts
  1008
  1009 2775			wipe_p2
  1010 2775 A5 99		            lda player2_y
  1011 2777 18			            clc
  1012 2778 69 01		            adc #upper_margin
  1013 277A AA			            tax
  1014 				            
  1015 277B A0 10		            ldy #16
  1016 277D A9 00		            lda #0
  1017 277F			wipe_it2            
  1018 277F 9D 00 13		            sta p2_area,x 
  1019 2782 9D 80 13		            sta p3_area,x
  1020 2785 E8			            inx
  1021 2786 88			            dey
  1022 2787 D0 F6		            bne wipe_it2 
  1023 2789 60			            rts
  1024
  1025 278A			make_shape_index
  1026 278A A9 00		            lda #<pm_shapes
  1027 278C 85 84		            sta shape_ptr
  1028 278E A9 50		            lda #>pm_shapes
  1029 2790 85 85		            sta shape_ptr+1
  1030 				            
  1031 2792 A2 00		            ldx #0
  1032 2794			fill_pm_tab
  1033 2794 A5 84		            lda shape_ptr
  1034 2796 9D 00 60		            sta pm_shape_lo,x
  1035 2799 A5 85		            lda shape_ptr+1
  1036 279B 9D 80 60		            sta pm_shape_hi,x
  1037 				            
  1038 279E A5 84		            lda shape_ptr
  1039 27A0 18			            clc
  1040 27A1 69 20		            adc #32
  1041 27A3 85 84		            sta shape_ptr
  1042 27A5 A5 85		            lda shape_ptr+1
  1043 27A7 69 00		            adc #0
  1044 27A9 85 85		            sta shape_ptr+1
  1045 				            
  1046 27AB E8			            inx
  1047 27AC 10 E6		            bpl fill_pm_tab
  1048 				            
  1049 27AE 60			            rts
  1050 				            
  1051 				; there are 128 shapes, each 32 bytes
  1052
  1053 				; y = shape index
  1054 27AF			shape_to_ptr
  1055 27AF B9 00 60		            lda pm_shape_lo,y
  1056 27B2 85 84		            sta shape_ptr
  1057 27B4 B9 80 60		            lda pm_shape_hi,y
  1058 27B7 85 85		            sta shape_ptr+1
  1059
  1060 27B9 60			            rts
  1061
  1062 				; turn 1024 tables into 256 bytes for ball edge lookup
  1063 27BA			make_outer_256
  1064 27BA A0 00		            ldy #0
  1065 27BC A2 00		            ldx #0
  1066 27BE			conv_256
  1067 27BE BD 00 30		            lda outer_x_tab,x
  1068 27C1 99 00 16		            sta outer_x_256,y
  1069 27C4 BD 00 31		            lda outer_x_tab+$100,x
  1070 27C7 99 40 16		            sta outer_x_256+64,y
  1071 27CA BD 00 32		            lda outer_x_tab+$200,x
  1072 27CD 99 80 16		            sta outer_x_256+128,y
  1073 27D0 BD 00 33		            lda outer_x_tab+$300,x
  1074 27D3 99 C0 16		            sta outer_x_256+192,y
  1075 				            
  1076 27D6 BD 00 34		            lda outer_y_tab,x
  1077 27D9 99 00 17		            sta outer_y_256,y
  1078 27DC BD 00 35		            lda outer_y_tab+$100,x
  1079 27DF 99 40 17		            sta outer_y_256+64,y
  1080 27E2 BD 00 36		            lda outer_y_tab+$200,x
  1081 27E5 99 80 17		            sta outer_y_256+128,y
  1082 27E8 BD 00 37		            lda outer_y_tab+$300,x
  1083 27EB 99 C0 17		            sta outer_y_256+192,y
  1084
  1085 27EE E8			            inx
  1086 27EF E8			            inx
  1087 27F0 E8			            inx
  1088 27F1 E8			            inx
  1089 27F2 C8			            iny
  1090 27F3 C0 40		            cpy #64
  1091 27F5 D0 C7		            bne conv_256            
  1092 27F7 60			            rts
  1093
  1094 27F8			show_score_p1
  1095 27F8 AD 14 41		            lda score_p1
  1096 27FB 4A			            lsr
  1097 27FC 4A			            lsr
  1098 27FD 4A			            lsr
  1099 27FE 4A			            lsr
  1100 27FF F0 02		            beq do_space1
  1101 2801 09 10		            ora #16
  1102 2803			do_space1
  1103 2803 8D F1 40		            sta score_chars_p1
  1104 2806 AD 14 41		            lda score_p1
  1105 2809 29 0F		            and #15
  1106 280B 09 10		            ora #16
  1107 280D 8D F2 40		            sta score_chars_p1+1
  1108 2810 60			            rts
  1109
  1110 2811			show_score_p2
  1111 2811 AD 15 41		            lda score_p2
  1112 2814 4A			            lsr
  1113 2815 4A			            lsr
  1114 2816 4A			            lsr
  1115 2817 4A			            lsr
  1116 2818 F0 02		            beq do_space2
  1117 281A 09 10		            ora #16
  1118 281C			do_space2
  1119 281C 8D 11 41		            sta score_chars_p2
  1120 281F AD 15 41		            lda score_p2
  1121 2822 29 0F		            and #15
  1122 2824 09 10		            ora #16
  1123 2826 8D 12 41		            sta score_chars_p2+1
  1124 2829 60			            rts
  1125 				                        
  1126 282A			reset_score
  1127 282A A9 00		            lda #0
  1128 282C 8D 14 41		            sta score_p1
  1129 282F 8D 15 41		            sta score_p2
  1130 2832 60			            rts            
  1131 				         
  1132 2833			inc_score_p1
  1133 2833 F8			            sed
  1134 2834 AD 14 41		            lda score_p1
  1135 2837 18			            clc
  1136 2838 69 01		            adc #1
  1137 283A 8D 14 41		            sta score_p1    
  1138 283D D8			            cld
  1139 283E 60			            rts
  1140
  1141 283F			inc_score_p2
  1142 283F F8			            sed
  1143 2840 AD 15 41		            lda score_p2
  1144 2843 18			            clc
  1145 2844 69 01		            adc #1
  1146 2846 8D 15 41		            sta score_p2
  1147 2849 D8			            cld
  1148 284A 60			            rts
  1149
  1150 				; calculate the difference between angle1 and angle2
  1151
  1152 				; input:
  1153 				; tmp_angle1 (0..255)
  1154 				; tmp_angle2 (0..255)
  1155
  1156 				; output:
  1157 				; tmp_angle_diff, A: difference between angle1 and angle2
  1158 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1159
  1160 284B			calc_angle_diff
  1161 284B A9 00		            lda #0
  1162 284D 85 B2		            sta add_to_angle
  1163 284F 85 B4		            sta tmp_angle_direction
  1164
  1165 				; make sure we can compare angles, otherwise add $40 to angles
  1166 2851 A5 B0		            lda tmp_angle1
  1167 2853 C9 C0		            cmp #$c0
  1168 2855 B0 06		            bcs too_large
  1169 2857 A5 B1		            lda tmp_angle2
  1170 2859 C9 C0		            cmp #$c0
  1171 285B 90 12		            bcc not_too_large
  1172 285D			too_large
  1173 285D A5 B0		            lda tmp_angle1
  1174 285F 38			            sec
  1175 2860 E9 40		            sbc #$40
  1176 2862 85 B0		            sta tmp_angle1
  1177 				            
  1178 2864 A5 B1		            lda tmp_angle2
  1179 2866 38			            sec
  1180 2867 E9 40		            sbc #$40
  1181 2869 85 B1		            sta tmp_angle2
  1182 				            
  1183 286B A9 40		            lda #$40
  1184 286D 85 B2		            sta add_to_angle
  1185
  1186 286F			not_too_large
  1187 286F A5 B1		            lda tmp_angle2
  1188 2871 C5 B0		            cmp tmp_angle1
  1189 2873 90 0A		            bcc angle2_smaller_angle1
  1190 				; ball >= play
  1191 2875 38			            sec
  1192 2876 E5 B0		            sbc tmp_angle1
  1193 2878 85 B7		            sta tmp_angle_diff
  1194 				            
  1195 287A E6 B4		            inc tmp_angle_direction
  1196 287C 4C 86 28		            jmp diff_calculated
  1197 				                        
  1198 287F			angle2_smaller_angle1
  1199 287F A5 B0		            lda tmp_angle1
  1200 2881 38			            sec
  1201 2882 E5 B1		            sbc tmp_angle2
  1202 2884 85 B7		            sta tmp_angle_diff
  1203
  1204 2886			diff_calculated
  1205 2886 A5 B7		            lda tmp_angle_diff           
  1206 2888 60			            rts
  1207
  1208 				; X = angle
  1209 				; lookup magnitude of angle 0 to angle X
  1210 2889			angle_to_magnitude
  1211 2889 BD 00 3C		            lda magnitudes_lo,x
  1212 288C 85 B8		            sta magnitude
  1213 288E BD 00 3D		            lda magnitudes_hi,x
  1214 2891 85 B9		            sta magnitude+1
  1215 2893 60			            rts
  1216
  1217 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1218 2894			calc_abs_tmp_dx
  1219 2894 A5 E8		            lda tmp_x2
  1220 2896 38			            sec
  1221 2897 E5 E6		            sbc tmp_x1
  1222 2899 B0 05		            bcs x2_le
  1223 289B 49 FF		            eor #255
  1224 289D 18			            clc
  1225 289E 69 01		            adc #1
  1226 28A0 85 F2		x2_le       sta tmp_dx
  1227
  1228 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1229 28A2			calc_abs_tmp_dy
  1230 28A2 A5 E9		            lda tmp_y2
  1231 28A4 38			            sec
  1232 28A5 E5 E7		            sbc tmp_y1
  1233 28A7 B0 05		            bcs y2_le
  1234 28A9 49 FF		            eor #255
  1235 28AB 18			            clc
  1236 28AC 69 01		            adc #1
  1237 28AE 85 F3		y2_le       sta tmp_dy
  1238 28B0 60			            rts
  1239 				            
  1240 28B1			calc_dx_div_magnitude
  1241 28B1 A9 00		            lda #0
  1242 28B3 85 E2		            sta _dividend
  1243 28B5 A5 F2		            lda tmp_dx
  1244 28B7 85 E3		            sta _dividend+1
  1245
  1246 28B9 A5 B9		            lda magnitude+1
  1247 28BB 85 E0		            sta _divisor
  1248 28BD A9 00		            lda #0
  1249 28BF 85 E1		            sta _divisor+1
  1250 				            
  1251 28C1 20 E9 28		            jsr _div16
  1252
  1253 				; todo multiply result with velocity            
  1254 28C4 A5 E2		            lda _result
  1255 28C6 85 EE		            sta step_x
  1256 28C8 A5 E3		            lda _result+1
  1257 28CA 85 EF		            sta step_x+1
  1258 				            
  1259 28CC 60			            rts
  1260 				            
  1261 28CD			calc_dy_div_magnitude
  1262 28CD A9 00		            lda #0
  1263 28CF 85 E2		            sta _dividend
  1264 28D1 A5 F3		            lda tmp_dy
  1265 28D3 85 E3		            sta _dividend+1
  1266 				            
  1267 28D5 A5 B9		            lda magnitude+1
  1268 28D7 85 E0		            sta _divisor
  1269 28D9 A9 00		            lda #0
  1270 28DB 85 E1		            sta _divisor+1
  1271
  1272 28DD 20 E9 28		            jsr _div16
  1273 				            
  1274 				; todo multiply result with velocity
  1275 28E0 A5 E2		            lda _result
  1276 28E2 85 F0		            sta step_y
  1277 28E4 A5 E3		            lda _result+1
  1278 28E6 85 F1		            sta step_y+1
  1279 				            
  1280 28E8 60			            rts
  1281
  1282 				; divide 16bit
  1283 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1284
  1285 				; _result = _dividend / divisor
  1286
  1287 28E9 A9 00		_div16      lda #0          ;preset remainder to 0
  1288 28EB 85 E4		            sta _remainder
  1289 28ED 85 E5		            sta _remainder+1
  1290 28EF A2 10		            ldx #16         ;repeat for each bit: ...
  1291
  1292 28F1 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1293 28F3 26 E3		            rol _dividend+1  
  1294 28F5 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1295 28F7 26 E5		            rol _remainder+1
  1296 28F9 A5 E4		            lda _remainder
  1297 28FB 38			            sec
  1298 28FC E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1299 28FE A8			            tay         ;lb result -> Y, for we may need it later
  1300 28FF A5 E5		            lda _remainder+1
  1301 2901 E5 E1		            sbc _divisor+1
  1302 2903 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1303
  1304 2905 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1305 2907 84 E4		            sty _remainder   
  1306 2909 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1307
  1308 290B CA			_div_skip   dex
  1309 290C D0 E3		            bne _div_loop 
  1310 290E 60			            rts
  1311
  1312 				; Calculations for step size
  1313
  1314 				; not optimised for speed or size
  1315 				; step should be set according to the angle
  1316
  1317 				; move in straight line (x1,y1) to (x2,y2)
  1318
  1319 				; 1. set start/end of line
  1320 				; set (tmp_x1, tmp_y1)
  1321 				; set (tmp_x2, tmp_y2)
  1322
  1323 				; 2. init. current_x, current_y
  1324 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1325 				; - calculates step sizes for x,y
  1326 				; - calculated directions for x,y
  1327 				;            jsr init_current_xy
  1328
  1329 				; 3. use current_x, current_y to plot or set a position
  1330 				;            lda current_x+1
  1331 				;            sta x_position
  1332 				;            lda current_y+1
  1333 				;            sta y_position
  1334 				;            jsr plot_pixel
  1335
  1336 				; 4. move current_x, current_y to next position on line
  1337 				; A=0 still moving
  1338 				;           move_current_xy
  1339
  1340 290F			init_current_xy
  1341 290F A9 7F		            lda #$7f      ; was 128 for half pixel
  1342 2911 85 EA		            sta current_x
  1343 2913 85 EC		            sta current_y
  1344
  1345 2915 A5 E6		            lda tmp_x1
  1346 2917 85 EB		            sta current_x+1
  1347 				            
  1348 2919 A5 E7		            lda tmp_y1
  1349 291B 85 ED		            sta current_y+1
  1350
  1351 				; dx = abs(tmp_x1 - tmp_x2)
  1352 291D 20 94 28		            jsr calc_abs_tmp_dx
  1353
  1354 				; dy = abs(tmp_y1 - tmp_y2)
  1355 2920 20 A2 28		            jsr calc_abs_tmp_dy
  1356
  1357 				; set directions
  1358 2923 A5 E6		            lda tmp_x1
  1359 2925 C5 E8		            cmp tmp_x2
  1360 2927 90 04		            bcc x1_smaller_x2
  1361 				; x1 >= x2
  1362 2929 A9 01		            lda #1
  1363 292B D0 02		            bne set_dir_x
  1364 292D			x1_smaller_x2
  1365 292D A9 00		            lda #0
  1366 292F			set_dir_x
  1367 292F 85 FA		            sta dir_x
  1368 				            
  1369 2931 A5 E7		            lda tmp_y1
  1370 2933 C5 E9		            cmp tmp_y2
  1371 2935 90 04		            bcc y1_smaller_y2
  1372 				; y1 >= y2
  1373 2937 A9 01		            lda #1
  1374 2939 D0 02		            bne set_dir_y
  1375 293B			y1_smaller_y2
  1376 293B A9 00		            lda #0
  1377 293D			set_dir_y
  1378 293D 85 FB		            sta dir_y
  1379
  1380 				; Calculate diff between start angle and end angle
  1381
  1382 293F A5 AA		            lda ball_angle_start
  1383 2941 85 B0		            sta tmp_angle1
  1384 2943 A5 AB		            lda ball_angle_end
  1385 2945 85 B1		            sta tmp_angle2
  1386 				            
  1387 2947 20 4B 28		            jsr calc_angle_diff
  1388
  1389 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1390 294A A6 B7		            ldx tmp_angle_diff
  1391 294C 20 89 28		            jsr angle_to_magnitude
  1392 				            
  1393 294F 20 B1 28		            jsr calc_dx_div_magnitude
  1394 2952 20 CD 28		            jsr calc_dy_div_magnitude
  1395 				            
  1396 				; Calculate step size by ball speed
  1397 				            
  1398 				; step_x = step_x * speed
  1399 				            
  1400 2955 A5 EE		            lda step_x
  1401 2957 85 F6		            sta _multiplicand
  1402 2959 A5 EF		            lda step_x+1
  1403 295B 85 F7		            sta _multiplicand+1
  1404 295D A5 AC		            lda ball_speed
  1405 295F 85 F8		            sta _multiplier
  1406
  1407 2961 20 30 23		            jsr _multi8
  1408 				;result in .A (low byte, also in .X) and .Y (high byte)
  1409 2964 85 EE		            sta step_x
  1410 2966 84 EF		            sty step_x+1
  1411 2968			skip_step_x_hi
  1412 				            
  1413 				; step_y = step_y * speed
  1414
  1415 2968 A5 F0		            lda step_y
  1416 296A 85 F6		            sta _multiplicand
  1417 296C A5 F1		            lda step_y+1
  1418 296E 85 F7		            sta _multiplicand+1
  1419 2970 A5 AC		            lda ball_speed
  1420 2972 85 F8		            sta _multiplier
  1421
  1422 2974 20 30 23		            jsr _multi8
  1423 				;result in .A (low byte, also in .X) and .Y (high byte)
  1424 2977 85 F0		            sta step_y
  1425 2979 84 F1		            sty step_y+1
  1426 297B			skip_step_y_hi
  1427
  1428 297B 60			            rts
  1429
  1430 				; Move ball position 
  1431 				; Add one step, until end reached
  1432 				; Input:
  1433 				; - step size (step_x, step_y)
  1434 				; - current ball position (current_x, current_y)
  1435 				; - end position (tmp_x2, tmp_y2)
  1436 				; Output:
  1437 				; A (0 = still moving, 1 = end reached)
  1438 297C			move_current_xy
  1439 297C A9 00		            lda #0
  1440 297E 85 FC		            sta line_end_x
  1441 2980 85 FD		            sta line_end_y
  1442
  1443 				; sets line end indicators here
  1444 2982 20 9F 29		            jsr move_current_x
  1445 2985 20 DF 29		            jsr move_current_y
  1446
  1447 2988 A5 FC		            lda line_end_x
  1448 298A 25 FD		            and line_end_y
  1449 298C F0 10		            beq no_end_reached
  1450 				            
  1451 				; set current to (x2,y2)
  1452 298E A5 E8		            lda tmp_x2
  1453 2990 85 EB		            sta current_x+1
  1454 2992 A5 E9		            lda tmp_y2
  1455 2994 85 ED		            sta current_y+1
  1456 				            
  1457 2996 A9 00		            lda #0
  1458 2998 85 EA		            sta current_x
  1459 299A 85 EC		            sta current_y
  1460 				            
  1461 299C A9 01		            lda #1 ; end reached
  1462 				            
  1463 299E			no_end_reached  ; A = 0
  1464 299E 60			            rts
  1465
  1466 299F			move_current_x
  1467 299F A5 FA		            lda dir_x
  1468 29A1 D0 18		            bne move_current_left
  1469
  1470 				; move right, add
  1471 29A3 A5 EA		            lda current_x
  1472 29A5 18			            clc
  1473 29A6 65 EE		            adc step_x
  1474 29A8 85 EA		            sta current_x
  1475 29AA A5 EB		            lda current_x+1
  1476 29AC 65 EF		            adc step_x+1
  1477 29AE 85 EB		            sta current_x+1
  1478
  1479 29B0 A5 EB		            lda current_x+1
  1480 29B2 C5 E8		            cmp tmp_x2
  1481 29B4 90 04		            bcc no_line_end
  1482 29B6			exact_end_x
  1483 29B6 A9 01		            lda #1
  1484 29B8 85 FC		            sta line_end_x 
  1485 29BA			no_line_end
  1486 29BA 60			            rts
  1487 				            
  1488 29BB			move_current_left
  1489 29BB A5 EA		            lda current_x
  1490 29BD 38			            sec
  1491 29BE E5 EE		            sbc step_x
  1492 29C0 90 01		            bcc clear_skip
  1493 29C2 EA			            nop
  1494 29C3			clear_skip
  1495 29C3 85 EA		            sta current_x
  1496 29C5 A5 EB		            lda current_x+1
  1497 29C7 E5 EF		            sbc step_x+1
  1498 29C9 85 EB		            sta current_x+1
  1499 29CB 90 0B		            bcc below_zero
  1500 				                        
  1501 29CD A5 E8		            lda tmp_x2
  1502 29CF C5 EB		            cmp current_x+1
  1503 29D1 90 E7		            bcc no_line_end
  1504 29D3 A9 01		            lda #1
  1505 29D5 85 FC		            sta line_end_x            
  1506 29D7 60			            rts
  1507 29D8			below_zero            
  1508 29D8 A9 01		            lda #1
  1509 29DA 85 FC		            sta line_end_x
  1510 29DC 85 FD		            sta line_end_y
  1511 29DE 60			            rts
  1512 29DF			move_current_y
  1513 29DF A5 FB		            lda dir_y
  1514 29E1 D0 18		            bne move_current_up
  1515
  1516 				; move down, add
  1517 29E3 A5 EC		            lda current_y
  1518 29E5 18			            clc
  1519 29E6 65 F0		            adc step_y
  1520 29E8 85 EC		            sta current_y
  1521 29EA A5 ED		            lda current_y+1
  1522 29EC 65 F1		            adc step_y+1
  1523 29EE 85 ED		            sta current_y+1
  1524 				            
  1525 29F0 A5 ED		            lda current_y+1
  1526 29F2 C5 E9		            cmp tmp_y2
  1527 29F4 90 C4		            bcc no_line_end
  1528 29F6			exact_end_y
  1529 29F6 A9 01		            lda #1
  1530 29F8 85 FD		            sta line_end_y
  1531 29FA 60			            rts
  1532
  1533 29FB			move_current_up
  1534 29FB A5 EC		            lda current_y
  1535 29FD 38			            sec
  1536 29FE E5 F0		            sbc step_y
  1537 2A00 85 EC		            sta current_y
  1538 2A02 A5 ED		            lda current_y+1
  1539 2A04 E5 F1		            sbc step_y+1
  1540 2A06 90 D0		            bcc below_zero
  1541 2A08 85 ED		            sta current_y+1
  1542 				            
  1543 2A0A A5 E9		            lda tmp_y2
  1544 2A0C C5 ED		            cmp current_y+1
  1545 2A0E 90 AA		            bcc no_line_end
  1546 2A10 A9 01		            lda #1
  1547 2A12 85 FD		            sta line_end_y
  1548 2A14 60			            rts                            
  1549 				            
  1550 2A15			init_sprites
  1551 2A15 A2 00		            ldx #0
  1552 2A17 8A			            txa
  1553 2A18			set_p
  1554 2A18 9D 00 12		            sta p0_area,x
  1555 2A1B 9D 80 12		            sta p1_area,x
  1556 2A1E 9D 00 13		            sta p2_area,x
  1557 2A21 9D 80 13		            sta p3_area,x
  1558 2A24 E8			            inx
  1559 2A25 10 F1		            bpl set_p               
  1560
  1561 2A27 A9 11		            lda #%0010001  ; missile = 5th player, prio player 0..3
  1562 2A29 8D 6F 02		            sta GPRIOR
  1563 				    
  1564 2A2C A9 10		            lda #>pm_area
  1565 2A2E 8D 07 D4		            sta PMBASE
  1566 				    
  1567 2A31 A9 03		            lda #3          ; P/M both on
  1568 2A33 8D 1D D0		            sta GRACTL
  1569 				    
  1570 2A36 A9 90		            lda #$90
  1571 2A38 8D 02 D0		            sta HPOSP2
  1572 2A3B A9 A0		            lda #$A0
  1573 2A3D 8D 03 D0		            sta HPOSP3  
  1574 2A40 60			            rts            
  1575
  1576 2A41			init_colors
  1577 2A41 A9 2A		            lda #$2a
  1578 2A43 8D C0 02		            sta PCOLR0
  1579 2A46 8D C1 02		            sta PCOLR1
  1580 				            
  1581 2A49 A9 7A		            lda #$7a
  1582 2A4B 8D C2 02		            sta PCOLR2
  1583 2A4E 8D C3 02		            sta PCOLR3
  1584 				            
  1585 2A51 A9 00		            lda #0
  1586 2A53 8D C6 02		            sta COLOR2
  1587 2A56 A9 08		            lda #8
  1588 2A58 8D C5 02		            sta COLOR1
  1589 2A5B 60			            rts
  1590
  1591 2A5C			previous_consol
  1592 2A5C 00			            dta 0
  1593
  1594 2A5D			current_level_index
  1595 2A5D 00			            dta 0
  1596 = 0004			NR_OF_LEVELS = 4
  1597 = 0000			INIT_LEVEL_INDEX = 0
  1598 2A5E			level_speeds
  1599 2A5E 02 04 06 08		            dta 2,4,6,8
  1600 				            
  1601 				; X = level (0..NR_OF_LEVELS)
  1602 2A62			set_level_ball_speed
  1603 2A62 BD 5E 2A		            lda level_speeds,x
  1604 2A65 85 AC		            sta ball_speed
  1605 2A67 8A			            txa
  1606 2A68 18			            clc
  1607 2A69 69 01		            adc #1
  1608 2A6B 09 10		            ora #16
  1609 2A6D 8D 48 42		            sta level_char
  1610 2A70 60			            rts
  1611 				            
  1612 2A71			increase_level
  1613 2A71 EE 5D 2A		            inc current_level_index
  1614 2A74 AD 5D 2A		            lda current_level_index
  1615 2A77 C9 04		            cmp #NR_OF_LEVELS
  1616 2A79 D0 05		            bne ok_level
  1617 2A7B A9 00		            lda #INIT_LEVEL_INDEX
  1618 2A7D 8D 5D 2A		            sta current_level_index
  1619 2A80			ok_level           
  1620 2A80 60			            rts
  1621 				            
  1622 2A81			            .align $100
  1623 2B00			inner_x_tab
  1624 = 2C00			inner_y_tab = *+$100
  1625 2B00-2CFF> 70 72 75 77 +             ins 'data\in210.dat'
  1626 				      
  1627 2D00			            .align $400            
  1628 				; outer circle 1024 plot points on 360 degrees
  1629 3000			outer_x_tab
  1630 = 3400			outer_y_tab = *+1024
  1631 3000-3DFF> 70 70 71 72 +             ins 'data\out224.dat'
  1632
  1633 3800			            .align $400
  1634 3800			rotor_font
  1635 3800 00 00 00 00 00 00 +             ins 'font\rotor.fnt'
  1636 				           
  1637 3C00			            .align $400
  1638 				; table of magnitudes (length) between angle 0 and 0..255
  1639 				; fixed point 8.8 : hi.lo
  1640 3C00			magnitudes_lo
  1641 = 3D00			magnitudes_hi = *+256
  1642 3C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  1643
  1644 3E00			            .align $400
  1645 4000			display_list
  1646 4000-41CC> 42		            dta $42
  1647 4001 EC 40		            dta a(score_line)
  1648
  1649 				; 102 x 40 = 4080 bytes            
  1650 4003 4F			            dta $4f
  1651 4004			dl_screen_ptr1
  1652 4004 00 70		            dta a(screen_mem1)
  1653 4006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1654 400D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1655 4015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1656 401D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1657
  1658 4025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1659 402D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1660 4035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1661 403D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1662
  1663 4045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1664 404D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1665 4055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1666 405D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1667
  1668 4065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1669
  1670 				; 102 x 40 = 4080 bytes
  1671 406B 4F			            dta $4f
  1672 406C			dl_screen_ptr2
  1673 406C 00 80		            dta a(screen_mem2)
  1674 406E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1675 4075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1676 407D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1677 4085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1678
  1679 408D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1680 4095 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1681 409D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1682 40A5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1683
  1684 40AD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1685 40B5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1686 40BD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1687 40C5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1688
  1689 40CD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  1690
  1691 				; 20 x 40 = 800
  1692 40D3 4F			            dta $4f
  1693 40D4 00 90		            dta a(screen_mem3)       
  1694 40D6 0F 0F 0F		            dta $0f,$0f,$0f
  1695 40D9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1696 40E1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1697 				            
  1698 40E9 41			            dta $41
  1699 40EA 00 40		            dta a(display_list)
  1700
  1701 40EC			score_line  
  1702 40EC 00 32 25 24 00	            dta d' RED '
  1703 40F1			score_chars_p1
  1704 40F1 0D 0D 00		            dta d'-- '
  1705
  1706 40F4 00 00 00 00 00 00 +             dta d'          '
  1707 40FE 00 00 00 00 00 00 +             dta d'          '
  1708
  1709 4108 00 00 00 00 22 2C +             dta d'    BLUE '
  1710 4111			score_chars_p2
  1711 4111 0D 0D 00		            dta d'-- '
  1712
  1713 4114 00			score_p1    dta 0
  1714 4115 00			score_p2    dta 0
  1715
  1716 				            ;.align $400
  1717 				            
  1718 4116			menu_dl
  1719 4116 42			            dta $42
  1720 4117 EC 40		            dta a(score_line)
  1721 				            
  1722 4119 4F			            dta $4f
  1723 411A 00 70		            dta a(screen_mem1)
  1724 411C 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1725 4123 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1726 412B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1727 4133 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1728
  1729 413B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1730 4143 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1731 414B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1732 4153 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1733
  1734 415B 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1735 4163 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$8f
  1736
  1737 				; 64 scanlines
  1738 416B 30			            dta $30
  1739 416C 47			            dta $47
  1740 416D 00 42		            dta a(menu_screen)
  1741 416F 30 06 06 06 30 02 +             dta $30,6,6,6,$30,2,$30
  1742
  1743 				; 60 lines
  1744 4176 4F			            dta $4f
  1745 4177 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  1746 4179 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  1747 4180 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1748 4188 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1749 4190 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1750
  1751 4198 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1752 41A0 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1753 41A8 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1754 41B0 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  1755
  1756 				; 20 lines            
  1757 41B4 4F			            dta $4f
  1758 41B5 00 90		            dta a(screen_mem3)
  1759 41B7 0F 0F 0F		            dta $0f,$0f,$0f            
  1760 41BA 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  1761 41C2 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
  1762 				           
  1763 41CA 41			            dta $41
  1764 41CB 16 41		            dta a(menu_dl)
  1765
  1766 41CD			            .align $100
  1767 4200			menu_screen
  1768 4200-429F> 00 00 00 00 +             dta d'     R O T O R      '
  1769
  1770 4214 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  1771 421E			driver_screen
  1772 421E 00 00 00 00 00 00 +             dta d'            '
  1773 422A 00 12 00 30 2C 21 +             dta d' 2 PLAYER GAME    '
  1774 423C 00 00 00 00 00 00 +             dta d'      LEVEL '
  1775 4248			level_char            
  1776 4248 11 00 00 00 00 00 +             dta d'1       '
  1777 4250 80 80 80 80 80 B3 +             dta d'     START to play | OPTION for menu    '*
  1778 4278			stick_text
  1779 4278 33 34 29 23 2B 00 +             dta d'STICK   '
  1780 4280			paddle_text
  1781 4280 30 21 24 24 2C 25 +             dta d'PADDLE  '
  1782 4288			driving_text
  1783 4288 24 32 29 36 29 2E +             dta d'DRIVING '
  1784 4290			computer_text
  1785 4290 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  1786
  1787 4298			driver_text_lo
  1788 4298 78			            dta <stick_text
  1789 4299 80			            dta <paddle_text
  1790 429A 88			            dta <driving_text
  1791 429B 90			            dta <computer_text
  1792 				            
  1793 429C			driver_text_hi
  1794 429C 42			            dta >stick_text
  1795 429D 42			            dta >paddle_text
  1796 429E 42			            dta >driving_text
  1797 429F 42			            dta >computer_text
  1798
  1799 42A0			            .align $1000
  1800
  1801 				; 128 x 32 bytes shapes            
  1802 5000			pm_shapes
  1803 5000-5FFF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  1804
  1805 = 6000			pm_shape_lo .ds 128
  1806 = 6080			pm_shape_hi .ds 128
  1807
  1808 6100			            .align $1000
  1809 = 7000			screen_mem1 = * ; $9000     ; 4K
  1810 				;            org screen_mem1
  1811 7000-7FEF> FF FF F1 07 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  1812
  1813 7FF0			            .align $1000
  1814 = 8000			screen_mem2 = * ; $a000     ; 4K
  1815 				;            org screen_mem2
  1816 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  1817
  1818 8FF0			            .align $1000
  1819 = 9000			screen_mem3 = * ; $b000     ; 1K
  1820 				;            org screen_mem3
  1821 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  1822
  1823 9320			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 9320			    org $c0
    29
    30 00C0			zp
    31 = 00C0			chn_copy    .ds     9
    32 = 00C9			chn_pos     .ds     9
    33 = 00D2			bptr        .ds     2
    34 = 00D4			cur_pos     .ds     1
    35 = 00D5			chn_bits    .ds     1
    36 00D6-00D6> 01		bit_data    .byte   1
    37
    38 = 00D7			newsong     .ds     1       ; IVO
    39
    40 = 00D8			stereo_pokey    .ds     1
    41
    42 = D200			POKEY = $D200
    43
    44 00D9			    org $9800
    45 9800			buffers
    46 = 9800			    .ds 256 * 9
    47
    48 A100			intro_data
    49 A100-B397> 01 01 A1 34 +         ins     'intro.lz16'
    50 A3D8			intro_end
    51
    52 A3D8			loop_data
    53 A3D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    54 B1D9			loop_end
    55
    56 B1D9			.proc get_byte
    57 B1D9 AD 34 12		    lda $1234
    58 B1DC EE DA B1		    inc song_ptr
    59 B1DF D0 03		    bne skip
    60 B1E1 EE DB B1		    inc song_ptr+1
    61 B1E4			skip
    62 B1E4 60			    rts
    63 				.endp
    64 = B1DA			song_ptr = get_byte + 1
    65
    66 B1E5			start
    67
    68 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    69 				; Song Initialization - this runs in the first tick:
    70 				;
    71 B1E5			.proc play_first_frame
    72
    73 B1E5 20 D9 B1		    jsr get_byte                    ; IVO START move init here
    74 B1E8 8D 24 B2		    sta play_frame.init_chn_bits
    75 B1EB A9 01		    lda #1                          ; IVO set to 1 at init(!)
    76 B1ED 85 D6		    sta bit_data
    77 B1EF A9 98		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    78 B1F1 8D 04 B2		    sta cbuf+2                      ; IVO END
    79
    80 				    ; Init all channels:
    81 B1F4 A2 08		    ldx #8
    82 B1F6 A0 00		    ldy #0
    83 B1F8 84 D7		    sty newsong                     ; IVO signal first frame is played
    84 B1FA			clear
    85 				    ; Read just init value and store into buffer and POKEY
    86 B1FA 20 D9 B1		    jsr get_byte
    87 B1FD 9D 98 B3		    sta SHADOW, x
    88 B200 94 C0		    sty chn_copy, x
    89 B202			cbuf
    90 B202 8D FF 98		    sta buffers + 255
    91 B205 EE 04 B2		    inc cbuf + 2
    92 B208 CA			    dex
    93 B209 10 EF		    bpl clear
    94
    95 				    ; Initialize buffer pointer:
    96 B20B 84 D2		    sty bptr
    97 B20D 84 D4		    sty cur_pos
    98 B20F 60			    rts                     ; IVO turn into subroutine
    99 				.endp
   100
   101 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102 				; Wait for next frame
   103 				;
   104 B210			.proc wait_frame
   105
   106 B210 A5 14		    lda 20
   107 B212			delay
   108 B212 C5 14		    cmp 20
   109 B214 F0 FC		    beq delay
   110 B216 60			    rts                     ; IVO turn into subroutine
   111 				.endp
   112
   113 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   114 				; Play one frame of the song
   115 				;
   116 B217			.proc play_frame
   117 B217 A5 D7		    lda newsong
   118 B219 F0 02		    beq continue
   119 B21B D0 C8		    bne play_first_frame
   120
   121 B21D			continue
   122 B21D A4 D4		    ldy cur_pos                 ; IVO
   123
   124 B21F A9 98		    lda #>buffers
   125 B221 85 D3		    sta bptr+1
   126
   127 = B224			init_chn_bits=*+1
   128 B223 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   129 B225 85 D5		    sta chn_bits
   130 B227 A2 08		    ldx #8
   131
   132 				    ; Loop through all "channels", one for each POKEY register
   133 B229			chn_loop:
   134 B229 46 D5		    lsr chn_bits
   135 B22B B0 29		    bcs skip_chn       ; C=1 : skip this channel
   136
   137 B22D B5 C0		    lda chn_copy, x    ; Get status of this stream
   138 B22F D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   139
   140 				    ; We are decoding a new match/literal
   141 B231 46 D6		    lsr bit_data       ; Get next bit
   142 B233 D0 06		    bne got_bit
   143 B235 20 D9 B1		    jsr get_byte       ; Not enough bits, refill!
   144 B238 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   145 B239 85 D6		    sta bit_data       ;
   146 B23B			got_bit:
   147 B23B 20 D9 B1		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   148 B23E B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   149
   150 B240 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   151
   152 B242 20 D9 B1		    jsr get_byte
   153 B245 95 C0		    sta chn_copy, x    ; Store in "copy length"
   154
   155 				                        ; And start copying first byte
   156 B247			do_copy_byte:
   157 B247 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   158 B249 F6 C9		    inc chn_pos, x
   159 B24B B4 C9		    ldy chn_pos, x
   160
   161 				    ; Now, read old data, jump to data store
   162 B24D B1 D2		    lda (bptr), y
   163
   164 B24F			store:
   165 B24F A4 D4		    ldy cur_pos
   166 B251 9D 98 B3		    sta SHADOW, x        ; Store to output and buffer
   167 B254 91 D2		    sta (bptr), y
   168
   169 B256			skip_chn:
   170 				    ; Increment channel buffer pointer
   171 B256 E6 D3		    inc bptr+1
   172
   173 B258 CA			    dex
   174 B259 10 CE		    bpl chn_loop        ; Next channel
   175
   176 B25B E6 D4		    inc cur_pos
   177 B25D 60			    rts                 ; IVO once per frame
   178 				.endp
   179
   180 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181 				; Check for ending of song and jump to the next frame
   182 				;
   183 B25E			.proc check_end_song
   184 B25E AD DB B1		    lda song_ptr + 1
   185 = B262			song_end_high=*+1
   186 B261 C9 00		    cmp #>0
   187 B263 D0 09		    bne not_equal           ; IVO turn into subroutine
   188 B265 AD DA B1		    lda song_ptr
   189 = B269			song_end_low=*+1
   190 B268 C9 00		    cmp #<0
   191 B26A D0 02		    bne not_equal           ; IVO turn intro subroutine
   192
   193 B26C 38			    sec                     ; IVO....
   194 B26D 60			    rts
   195 B26E			not_equal
   196 B26E 18			    clc
   197 B26F 60			    rts
   198 				.endp
   199
   200 				; IVO everything below
   201
   202 B270			.proc music_init
   203 B270 20 48 B3		    jsr detect_2nd_pokey
   204 B273 20 81 B3		    jsr clear_echo
   205
   206 B276 A9 B3 8D D6 B2 A9 +     mwa #normal_volume adjust_volume.volume
   207 				;    mwa #half_volume adjust_volume.volume
   208 				;    mwa #quarter_volume adjust_volume.volume
   209
   210 B280 A9 D8		    lda #<intro_end
   211 B282 8D 69 B2		    sta check_end_song.song_end_low
   212 B285 A9 A3		    lda #>intro_end
   213 B287 8D 62 B2		    sta check_end_song.song_end_high
   214 B28A A9 00		    lda #<(intro_data)
   215 B28C 8D DA B1		    sta song_ptr
   216 B28F A9 A1		    lda #>(intro_data)
   217 B291 8D DB B1		    sta song_ptr+1
   218 B294 A9 01		    lda #1
   219 B296 85 D7		    sta newsong
   220 B298 20 9B B2		    jsr play_song
   221
   222 				.endp
   223
   224 B29B			.proc play_song
   225 B29B			playloop
   226 B29B 20 17 B2		    jsr play_frame      ; generates tick two and beyond
   227 B29E 20 C6 B2		    jsr adjust_volume
   228 				    ;jsr wait_frame
   229 B2A1 20 E3 B2		    jsr copy_shadow
   230
   231 				    ;jsr console_keys
   232
   233 B2A4 20 5E B2		    jsr check_end_song
   234 B2A7 90 03		    bcc no_end_song
   235 B2A9 20 AD B2		    jsr restart_music
   236 B2AC			no_end_song
   237 B2AC 60			    rts
   238 				.endp
   239
   240 B2AD			.proc restart_music
   241 B2AD A9 D9		    lda #<loop_end
   242 B2AF 8D 69 B2		    sta check_end_song.song_end_low
   243 B2B2 A9 B1		    lda #>loop_end
   244 B2B4 8D 62 B2		    sta check_end_song.song_end_high
   245 B2B7 A9 D8		    lda #<(loop_data)
   246 B2B9 8D DA B1		    sta song_ptr
   247 B2BC A9 A3		    lda #>(loop_data)
   248 B2BE 8D DB B1		    sta song_ptr+1
   249 B2C1 A9 01		    lda #1
   250 B2C3 85 D7		    sta newsong
   251 B2C5 60			    rts
   252 				.endp
   253
   254 B2C6			.proc adjust_volume
   255 B2C6 A0 06		    ldy #6
   256 B2C8			adjust
   257 B2C8 B9 99 B3		    lda SHADOW+1,y
   258 B2CB AA			    tax
   259 B2CC 29 F0		    and #$f0
   260 B2CE 99 99 B3		    sta SHADOW+1,y
   261 B2D1 8A			    txa
   262 B2D2 29 0F		    and #$0f
   263 B2D4 AA			    tax
   264 = B2D6			volume=*+1
   265 B2D5 BD 34 12		    lda $1234,x
   266 B2D8 19 99 B3		    ora SHADOW+1,y
   267 B2DB 99 99 B3		    sta SHADOW+1,y
   268 B2DE 88			    dey
   269 B2DF 88			    dey
   270 B2E0 10 E6		    bpl adjust
   271 				    
   272 B2E2 60			    rts
   273 				.endp
   274
   275 B2E3			.proc copy_shadow
   276 B2E3 A2 08		    ldx #8
   277 B2E5			copy
   278 B2E5 BD 98 B3		    lda SHADOW,x
   279 B2E8 9D 00 D2		    sta POKEY,x
   280 B2EB CA			    dex
   281 B2EC 10 F7		    bpl copy
   282
   283 B2EE A5 D8		    lda stereo_pokey
   284 B2F0 F0 0E		    beq end_copy
   285
   286 B2F2 A2 08		    ldx #8
   287 B2F4			copy2
   288 B2F4 BD AA B3		    lda ECHO,x
   289 B2F7 9D 10 D2		    sta POKEY+$10,x
   290 B2FA CA			    dex
   291 B2FB 10 F7		    bpl copy2
   292
   293 B2FD 20 8C B3		    jsr shift_echo
   294
   295 B300			end_copy
   296 B300 60			    rts
   297 				.endp
   298
   299 B301			.proc console_keys
   300 B301 AD 1F D0		    lda $d01f
   301 B304 C9 03		    cmp #3
   302 B306 F0 09		    beq option
   303 B308 C9 05		    cmp #5
   304 B30A F0 10		    beq select
   305 B30C C9 06		    cmp #6
   306 B30E F0 17		    beq start
   307 B310 60			    rts
   308
   309 B311			option
   310 B311 A9 B3 8D D6 B2 A9 +     mwa #normal_volume adjust_volume.volume
   311 B31B 60			    rts
   312 B31C			select
   313 B31C A9 C3 8D D6 B2 A9 +     mwa #half_volume adjust_volume.volume
   314 B326 60			    rts
   315 B327			start
   316 B327 A9 D3 8D D6 B2 A9 +     mwa #quarter_volume adjust_volume.volume
   317 B331 60			    rts
   318 				.endp
   319
   320 B332			.proc music_normal_volume
   321 B332 A9 B3 8D D6 B2 A9 +     mwa #normal_volume adjust_volume.volume
   322 B33C 60			    rts
   323 				.endp
   324
   325 B33D			.proc music_low_volume
   326 B33D A9 D3 8D D6 B2 A9 +     mwa #quarter_volume adjust_volume.volume
   327 B347 60			    rts
   328 				.endp
   329
   330 B348			.proc detect_2nd_pokey
   331 B348 20 10 B2		    jsr wait_frame
   332
   333 B34B A9 00 8D 32 02	    mva #0 SSKCTL
   334 B350 A9 00 8D 0F D2	    mva #0 SKCTL
   335 B355 A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   336
   337 B35A 20 10 B2		    jsr wait_frame
   338
   339 				    ; Restart SKCTL. This starts all the poly counters
   340
   341 B35D A9 03 8D 32 02	    mva #3 SSKCTL
   342 B362 A9 03 8D 0F D2	    mva #3 SKCTL
   343
   344 B367 20 10 B2		    jsr wait_frame
   345
   346 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   347 				    ; Its RANDOM should not change.
   348
   349 B36A AD 1A D2		    lda RANDOM+$10
   350 B36D CD 1A D2		    cmp RANDOM+$10
   351 B370 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   352
   353 B372			detected_mono
   354 B372 A9 00 85 D8		    mva #0 stereo_pokey
   355 B376 60			    rts
   356
   357 B377			detected_stereo
   358 B377 A9 01 85 D8		    mva #1 stereo_pokey
   359 B37B A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   360 B380 60			    rts
   361 				.endp
   362
   363 B381			.proc clear_echo
   364 B381 A0 11		    ldy #(endecho-echobuffer)-1
   365 B383			clear_echo_loop
   366 B383 A9 00 99 A1 B3	    mva #0 echobuffer,y
   367 B388 88 10 F8		    dey:bpl clear_echo_loop
   368 B38B 60			    rts
   369 				.endp
   370
   371 B38C			.proc shift_echo
   372 B38C A0 11		    ldy #(ECHO-echobuffer)-1+9
   373 B38E			shift_loop
   374 B38E B9 98 B3 99 A1 B3	    mva SHADOW,y SHADOW+9,y
   375 B394 88 10 F7		    dey:bpl shift_loop
   376 B397 60			    rts
   377 				.endp
   378
   379 B398			SHADOW              ; shadow pokey
   380 = B398			    .ds 9
   381
   382 				                    ; fake stereo effect:
   383 				                    ; 0*9 = small
   384 				                    ; 1*9 = medium
   385 				                    ; 2*9 = big
   386 				                    ; >3 too big imho
   387
   388 B3A1			echobuffer
   389 = B3A1			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   390
   391 B3AA			ECHO
   392 = B3AA			    .ds 9
   393 B3B3			endecho
   394
   395 B3B3			normal_volume
   396 B3B3-B3E4> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   397 B3C3			half_volume
   398 B3C3 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   399 B3D3			quarter_volume
   400 B3D3 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   401
   402 				    ;run main
   403
  1824
  1825 02E0-02E1> DC 22		            run main
