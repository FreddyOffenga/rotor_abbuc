mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-09-24
     4 				; Version 2.1.0
     5 				; For cartridge release
     6
     7 				; Casual game for two players
     8
     9 				; Main idea:
    10 				; - two players ONE and TWO move in a circle
    11 				; - the ball gets color of player to indicate who should catch it
    12 				; - when the ball hits the circle, the other player gets a point
    13
    14 				; TODO
    15 				; - new score system; ball hit = point?
    16
    17 				; Optional for a later version:
    18 				; - add support for driving controllers
    19
    20 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D407			PMBASE      = $d407
   104 = D40A			WSYNC       = $d40a
   105 = D40E			NMIEN       = $d40e
    21
    22 				; color scheme
    23 = 0050			BASE_COLOR_P1   = $50   ; purple
    24 = 00B0			BASE_COLOR_P2   = $b0   ; green
    25
    26 = 000E			HEADER_FG_COLOR = 14
    27 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    28 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    29
    30 				; must be in decimal format, so $11 is 11
    31 = 0011			MAX_SCORE   = $11
    32
    33 = 0C00			pm_area     = $0c00
    34 = 0D80			msl_area    = pm_area+$180
    35 = 0E00			p0_area     = pm_area+$200
    36 = 0E80			p1_area     = pm_area+$280
    37 = 0F00			p2_area     = pm_area+$300
    38 = 0F80			p3_area     = pm_area+$380
    39
    40 				; outer tables 256 for 360 degrees
    41 = 1000			outer_x_256     = $1000
    42 = 1100			outer_y_256     = $1100
    43
    44 = 1200			screen_y_lo     = $1200
    45 = 1300			screen_y_hi     = $1300
    46
    47 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    48 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    49
    50 = 0140			WIDTH           = 320
    51 = 00C0			HEIGHT          = 192
    52
    53 = 0028			SCREEN_WIDTH    = 40
    54
    55 = 0030			outer_x_margin  = 48 ;47-32
    56 = 0040			inner_x_margin  = 64
    57
    58 = 00A0			circle_center_x = WIDTH/2
    59 = 0060			circle_center_y = HEIGHT/2
    60
    61 = 0006			ball_top_margin     = 6
    62 = 0045			ball_left_margin    = 64+5
    63
    64 				; pm upper margin
    65 = 0001			upper_margin    = 1
    66 = 0020			left_margin     = 32
    67
    68 = 0080			music_toggle    = $80
    69
    70 = 0081			shadow_HPOSP0   = $81
    71 = 0082			shadow_HPOSP1   = $82
    72
    73 = 0083			winner_color    = $83
    74
    75 = 0084			shape_ptr       = $84
    76 = 0086			tmp_screen      = $86
    77
    78 = 0088			stick_slow_speed = $88
    79 = 0089			stick_fast_speed = $89
    80
    81 = 008A			player_mode     = $8a
    82 = 0000			MODE_2_PLAYER   = 0
    83 = 0001			MODE_1_PLAYER   = 1
    84 = 0002			MODE_DEMO       = 2
    85 = 0003			NR_OF_PLAYER_MODES = 3
    86 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00B0			tmp_angle1          = $b0
   126 = 00B1			tmp_angle2          = $b1
   127 = 00B2			add_to_angle        = $b2
   128 = 00B3			angle_diff_bat      = $b3
   129 = 00B4			tmp_angle_direction = $b4
   130 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   131 = 00B6			game_restart        = $b6
   132 = 00B7			tmp_angle_diff      = $b7
   133 = 00B8			magnitude           = $b8       ; word
   134
   135 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   136 = 00BA			cpu1_angle_end      = cpu_angle_end
   137 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   138
   139 				; $c0 - $df free for music
   140
   141 = 00E0			_divisor    = $e0   ; word
   142 = 00E2			_dividend   = $e2   ; word
   143 = 00E4			_remainder  = $e4   ; word
   144 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   145
   146 = 00E6			tmp_x1      = $e6   ; byte
   147 = 00E7			tmp_y1      = $e7   ; byte
   148 = 00E8			tmp_x2      = $e8   ; byte
   149 = 00E9			tmp_y2      = $e9   ; byte
   150
   151 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   152 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   153
   154 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   155 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   156
   157 = 00F2			tmp_dx      = $f2  ; byte
   158 = 00F3			tmp_dy      = $f3  ; byte
   159
   160 = 00F6			_multiplicand   = $f6   ; word
   161 = 00F8			_multiplier     = $f8   ; byte
   162
   163 				; direction:
   164 				; 0 : x1<x2 or y1<y2 = add
   165 				; 1 ; x1>=y2 or y1>=y2 = subtract
   166
   167 = 00FA			dir_x       = $fa  ; byte
   168 = 00FB			dir_y       = $fb  ; byte
   169
   170 = 00FC			line_end_x  = $fc  ; byte
   171 = 00FD			line_end_y  = $fd  ; byte
   172
   173 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   174
   175 				; real data is loaded at $2000 ($1700+$900)
   176 BE10			            org $1700
   177 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   178
   179 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1 				; drivers for game
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 3401			driver_init
    19 3401-3F0B> A9 00		            lda #0  ; stick
    20 3403 8D BE 32		            sta driver_mode
    21
    22 3406 AD 70 02		            lda PADDL0
    23 3409 8D 00 34		            sta prev_paddle_value
    24
    25 340C A9 00		            lda #0
    26 340E 85 9C		            sta p1_angle
    27 3410 A9 80		            lda #128
    28 3412 85 9D		            sta p2_angle
    29
    30 				; init paddle table
    31
    32 3414 A9 00		            lda #0
    33 3416 8D BC 32		            sta driver_tmp
    34 3419 8D BD 32		            sta driver_tmp+1
    35 				            
    36 341C A2 00		            ldx #0
    37 341E			store_pv
    38 341E AD BD 32		            lda driver_tmp+1
    39 3421 9D 00 33		            sta paddle_to_256,x
    40 				            
    41 3424 AD BC 32		            lda driver_tmp
    42 3427 18			            clc
    43 3428 69 1F		            adc #<paddle_add
    44 342A 8D BC 32		            sta driver_tmp
    45 342D AD BD 32		            lda driver_tmp+1
    46 3430 69 01		            adc #>paddle_add
    47 3432 8D BD 32		            sta driver_tmp+1
    48 3435 E8			            inx
    49 3436 E0 E5		            cpx #paddle_vals
    50 3438 D0 E4		            bne store_pv
    51 343A 60			            rts
    52
    53 				; stick detect by using left/right
    54 				; paddle by connecting/rotate
    55 				; driving controller by rotate
    56
    57 				; return A = driver mode
    58 				; 0 = stick detected
    59 				; 1 = paddle detected
    60 				; 2 = driving detected
    61
    62 343B			driver_detect
    63 343B AD 70 02		            lda PADDL0
    64 343E C9 E4		            cmp #228
    65 3440 D0 07		            bne paddle_detect
    66 3442 AD 71 02		            lda PADDL1
    67 3445 C9 E4		            cmp #228
    68 3447 F0 06		            beq no_paddle_detect
    69 3449			paddle_detect
    70 3449 A9 01		            lda #1
    71 344B 8D BE 32		            sta driver_mode
    72 344E 60			            rts
    73
    74 344F			no_paddle_detect
    75 344F AD 78 02		            lda STICK0
    76 3452 C9 0C		            cmp #12
    77 3454 D0 06		            bne no_driving_detect
    78 3456 A9 02		            lda #2
    79 3458 8D BE 32		            sta driver_mode
    80 345B 60			            rts
    81
    82 345C			no_driving_detect
    83 345C C9 07		            cmp #7      ; paddle button also gives this
    84 345E F0 04		            beq stick_detect    
    85 3460 C9 0B		            cmp #11     ; paddle button also gives this
    86 3462 D0 06		            bne no_stick_detect
    87 3464			stick_detect
    88 3464 A9 00		            lda #0
    89 3466 8D BE 32		            sta driver_mode
    90 3469 60			            rts
    91
    92 346A			no_stick_detect
    93 				; default is the last value
    94 346A AD BE 32		            lda driver_mode
    95 346D 60			            rts
    96
    97 				; move player 1/2
    98 				; right - clockwise, left = anti-clockwise
    99
   100 				; X = 0, player 1
   101 				; X = 1, player 2
   102
   103 				; A = driver mode:
   104 				; 0 : stick
   105 				; 1 : paddle
   106 				; 2 : driving
   107 				; 3 : computer
   108
   109 346E			main_driver            
   110 346E AC BE 32		            ldy driver_mode
   111 3471 B9 80 34		            lda driver_lo,y
   112 3474 8D 7E 34		            sta driver_ptr
   113 3477 B9 84 34		            lda driver_hi,y
   114 347A 8D 7F 34		            sta driver_ptr+1
   115
   116 = 347E			driver_ptr = *+1
   117 347D 4C FF FF		            jmp $ffff  
   118
   119 3480			driver_lo
   120 3480 88			            dta <driver_stick
   121 3481 F6			            dta <driver_paddle
   122 3482 88			            dta <driver_stick
   123 3483 88			            dta <driver_stick
   124
   125 3484			driver_hi
   126 3484 34			            dta >driver_stick
   127 3485 34			            dta >driver_paddle
   128 3486 34			            dta >driver_stick
   129 3487 34			            dta >driver_stick
   130
   131 				; joystick driver
   132
   133 3488			driver_stick
   134 3488 BD 78 02		            lda STICK0,x
   135 348B C9 0F		            cmp #15
   136 348D F0 31		            beq move_done
   137 348F C9 0B		            cmp #11
   138 3491 D0 16		            bne no_left
   139
   140 3493 B5 9C		            lda p1_angle,x
   141 3495 38			            sec
   142 3496 E5 88		            sbc stick_slow_speed
   143 3498 95 9C		            sta p1_angle,x
   144
   145 349A BD 84 02		            lda STRIG0,x
   146 349D D0 07		            bne no_fast
   147
   148 349F B5 9C		            lda p1_angle,x
   149 34A1 38			            sec
   150 34A2 E5 89		            sbc stick_fast_speed
   151 34A4 95 9C		            sta p1_angle,x
   152 34A6			no_fast
   153 				            
   154 34A6 4C C0 34		            jmp move_done
   155 34A9 C9 07		no_left     cmp #7
   156 34AB D0 13		            bne move_done
   157
   158 34AD B5 9C		            lda p1_angle,x
   159 34AF 18			            clc
   160 34B0 65 88		            adc stick_slow_speed
   161 34B2 95 9C		            sta p1_angle,x
   162
   163 34B4 BD 84 02		            lda STRIG0,x
   164 34B7 D0 07		            bne no_fast_right
   165
   166 34B9 B5 9C		            lda p1_angle,x
   167 34BB 18			            clc
   168 34BC 65 89		            adc stick_fast_speed
   169 34BE 95 9C		            sta p1_angle,x
   170 34C0			no_fast_right
   171 34C0			move_done
   172 34C0 60			            rts
   173
   174 				; check if player1 button is pressed
   175 				; A=0 not pressed, 1=pressed
   176
   177 34C1			is_player1_button_pressed
   178 34C1 AD BE 32		            lda driver_mode
   179 34C4 C9 01		            cmp #1
   180 34C6 F0 07		            beq check_player1_paddle_fire
   181
   182 34C8 AD 84 02		            lda STRIG0
   183 34CB F0 1C		            beq fire_pressed
   184 34CD D0 24		            bne fire_not_pressed
   185
   186 34CF			check_player1_paddle_fire
   187 34CF AD 78 02		            lda STICK0
   188 34D2 C9 0B		            cmp #11
   189 34D4 F0 13		            beq fire_pressed
   190 34D6 D0 1B		            bne fire_not_pressed
   191
   192 				; X=port number to check (paddle uses only port 1)
   193 				; check fire button (paddle uses left/right stick as fire button)
   194 				; A=0 not pressed, 1=pressed
   195
   196 34D8			is_both_buttons
   197 34D8 AD BE 32		            lda driver_mode
   198 34DB C9 01		            cmp #1
   199 34DD F0 0D		            beq check_paddle_fire
   200
   201 34DF AD 84 02		            lda STRIG0
   202 34E2 D0 0F		            bne fire_not_pressed
   203 34E4 AD 85 02		            lda STRIG1
   204 34E7 D0 0A		            bne fire_not_pressed
   205
   206 34E9			fire_pressed
   207 34E9 A9 01		            lda #1
   208 34EB 60			            rts
   209
   210 34EC			check_paddle_fire
   211 34EC AD 78 02		            lda STICK0
   212 34EF C9 03		            cmp #3
   213 34F1 F0 F6		            beq fire_pressed
   214
   215 34F3			fire_not_pressed
   216 34F3 A9 00		            lda #0
   217 34F5 60			            rts
   218
   219 				; paddle driver
   220 				            
   221 34F6			driver_paddle            
   222 34F6 BD 70 02		            lda PADDL0,x
   223 34F9 A8			            tay
   224 34FA B9 00 33		            lda paddle_to_256,y
   225 34FD 5D 03 35		            eor paddle_offsets,x
   226 3500 95 9C		            sta p1_angle,x
   227 3502 60			            rts
   228
   229 3503			paddle_offsets
   230 3503 00 00		            dta 0,0
   180
   181 3505			reset_pressed
   182 3505 20 00 9C		            jsr intro_main
   183
   184 3508			main
   185 3508 A9 FF		            lda #255
   186 350A 8D FC 02		            sta 764
   187
   188 				; for fast loaders, wait 10 seconds or continue with spacebar
   189 350D			wait_a_sec
   190 350D AD FC 02		            lda 764
   191 3510 C9 FF		            cmp #255
   192 3512 D0 06		            bne any_key_pressed
   193
   194 3514 A5 13		            lda 19
   195 3516 C9 02		            cmp #2
   196 3518 90 F3		            bcc wait_a_sec
   197
   198 351A			any_key_pressed
   199 351A A9 FF		            lda #255
   200 351C 8D FC 02		            sta 764
   201
   202 				; start the game!
   203 				 
   204 351F A9 00		            lda #0
   205 3521 8D 2F 02		            sta SDMCTL
   206 3524 85 B6		            sta game_restart
   207 3526 85 8F		            sta end_screen_delay
   208 3528 85 83		            sta winner_color
   209
   210 352A A9 80		            lda #128
   211 352C 85 8D		            sta volume_hit_bat
   212 352E 85 8E		            sta volume_hit_edge
   213 3530 85 80		            sta music_toggle        ; 128 = on, 0 = off
   214
   215 3532 A9 01		            lda #1
   216 3534 8D 44 02		            sta 580 ; coldstart
   217
   218 				;            lda #1
   219 				;            sta 9   ; boot
   220
   221 				;            lda #<reset_pressed
   222 				;            sta $0a
   223 				;            lda #>reset_pressed
   224 				;            sta $0b
   225
   226 3537 20 01 34		            jsr driver_init
   227
   228 353A 20 DA 3B		            jsr make_shape_index
   229
   230 353D 20 0A 3C		            jsr make_outer_256
   231
   232 3540 20 6E 36		            jsr make_screen_y_tab
   233
   234 3543 20 B9 36		            jsr invert_backdrop
   235 3546 A9 60		            lda #$60
   236 3548 8D B9 36		            sta invert_backdrop ; dirty hack to fix warm reset :P
   237
   238 354B 20 7A 3C		            jsr reset_score
   239 354E 20 48 3C		            jsr show_score_p1
   240 3551 20 61 3C		            jsr show_score_p2
   241
   242 3554 20 65 3E		            jsr init_sprites
   243 3557 20 91 3E		            jsr init_colors
   244
   245 				; init. game vars
   246 355A A2 00		            ldx #INIT_LEVEL_INDEX
   247 355C 8E B1 3E		            stx current_level_index
   248 355F 20 C7 3E		            jsr set_level_ball_speed
   249
   250 3562 A9 00		            lda #INIT_PLAYER_MODE
   251 3564 85 8A		            sta player_mode
   252 3566 20 FD 3E		            jsr show_player_mode
   253
   254 3569 A9 01		            lda #STATE_IN_MENU
   255 356B 85 8C		            sta game_state           ; start with menu
   256
   257 356D 20 6E 31		            jsr music_init
   258
   259 3570 20 FE 36		            jsr show_menu_options
   260
   261 3573 A9 00		            lda #<display_list
   262 3575 8D 30 02		            sta SDLSTL
   263 3578 A9 50		            lda #>display_list
   264 357A 8D 31 02		            sta SDLSTH
   265
   266 				; start vbi
   267
   268 357D A9 C0		            lda #$c0
   269 357F 8D 0E D4		            sta NMIEN
   270
   271 3582 A9 07		            lda #7          ; sets VVBLKI
   272 3584 A0 50		            ldy #<vbi
   273 3586 A2 37		            ldx #>vbi
   274 3588 20 5C E4		            jsr $e45c       ; SETVBV
   275
   276 				; we're just sitting here while VBI does all the work :)
   277 358B 4C 8B 35		loop        jmp loop
   278
   279 				;------------------------
   280 				; 8bit * 8bit = 16bit multiply
   281 				; By White Flame
   282 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   283 				; uses extra zp var _multiplicand+1
   284
   285 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   286 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   287
   288 				; In this version, both inputs must be unsigned
   289 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   290
   291 358E			_multi8
   292 358E A9 00		            lda #$00
   293 3590 A8			            tay
   294 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   295 3591 F0 0D		            beq _enter_loop
   296 3593			_do_add
   297 3593 18			            clc
   298 3594 65 F6		            adc _multiplicand
   299 3596 AA			            tax
   300
   301 3597 98			            tya
   302 3598 65 F7		            adc _multiplicand+1
   303 359A A8			            tay
   304 359B 8A			            txa
   305 359C			_mul_loop
   306 359C 06 F6		            asl _multiplicand
   307 359E 26 F7		            rol _multiplicand+1
   308 35A0			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   309 35A0 46 F8		            lsr _multiplier
   310 35A2 B0 EF		            bcs _do_add
   311 35A4 D0 F6		            bne _mul_loop
   312 35A6 60			            rts
   313
   314 				; reset PM0/1 to playfield settings
   315 35A7			dli_header
   316 35A7 48			            pha
   317
   318 35A8 A9 08		            lda #8
   319 35AA 8D 17 D0		            sta COLPF1
   320
   321 35AD A5 81		            lda shadow_HPOSP0
   322 35AF 8D 00 D0		            sta HPOSP0
   323 35B2 A5 82		            lda shadow_HPOSP1
   324 35B4 8D 01 D0		            sta HPOSP1
   325
   326 35B7 A9 00		            lda #0
   327 35B9 8D 08 D0		            sta SIZEP0
   328 35BC 8D 09 D0		            sta SIZEP1
   329
   330 35BF A9 5A		            lda #BASE_COLOR_P1+10
   331 35C1 8D 12 D0		            sta COLPM0
   332 35C4 A9 BA		            lda #BASE_COLOR_P2+10
   333 35C6 8D 13 D0		            sta COLPM1
   334
   335 35C9 A9 D5		            lda #<dli_menu
   336 35CB 8D 00 02		            sta VDSLST
   337 35CE A9 35		            lda #>dli_menu
   338 35D0 8D 01 02		            sta VDSLST+1
   339
   340 35D3 68			            pla
   341 35D4 40			            rti
   342
   343 35D5			dli_menu
   344 35D5 48			            pha
   345 35D6 8A			            txa
   346 35D7 48			            pha
   347
   348 35D8 A9 0E		            lda #$0e
   349 35DA 8D 0A D4		            sta WSYNC
   350 35DD 8D 1A D0		            sta COLBK
   351 35E0 A9 0A		            lda #$0a
   352 35E2 8D 0A D4		            sta WSYNC
   353 35E5 8D 1A D0		            sta COLBK
   354 35E8 A9 00		            lda #0
   355 35EA 8D 0A D4		            sta WSYNC
   356 35ED 8D 1A D0		            sta COLBK
   357
   358 35F0 A2 00		            ldx #0
   359 35F2			color_it1
   360 35F2 BD 36 36		            lda menu_colpf2,x
   361 35F5 8D 0A D4		            sta WSYNC
   362 35F8 8D 18 D0		            sta COLPF2
   363 35FB E8			            inx
   364 35FC E0 12		            cpx #18
   365 35FE D0 F2		            bne color_it1
   366
   367 3600 A2 00		            ldx #0
   368 3602			color_it2
   369 3602 BD 48 36		            lda menu_colpf0,x
   370 3605 05 83		            ora winner_color
   371 3607 8D 0A D4		            sta WSYNC
   372 360A 8D 16 D0		            sta COLPF0
   373 360D E8			            inx
   374 360E E0 26		            cpx #38
   375 3610 D0 F0		            bne color_it2
   376
   377 3612 A9 00		            lda #0
   378 3614 8D 0A D4		            sta WSYNC
   379 3617 8D 1A D0		            sta COLBK
   380 361A A9 0A		            lda #$0a
   381 361C 8D 0A D4		            sta WSYNC
   382 361F 8D 1A D0		            sta COLBK
   383 3622 A9 0E		            lda #$0e
   384 3624 8D 0A D4		            sta WSYNC
   385 3627 8D 1A D0		            sta COLBK
   386 362A A9 00		            lda #0
   387 362C 8D 0A D4		            sta WSYNC
   388 362F 8D 1A D0		            sta COLBK
   389 				            
   390 3632 68			            pla
   391 3633 AA			            tax
   392 3634 68			            pla
   393 3635 40			            rti
   394
   395 3636			menu_colpf2
   396 3636 50			            dta BASE_COLOR_P1
   397 3637 50			            dta BASE_COLOR_P1
   398 3638 50			            dta BASE_COLOR_P1
   399 3639 50			            dta BASE_COLOR_P1
   400 363A 50			            dta BASE_COLOR_P1
   401 363B 50			            dta BASE_COLOR_P1
   402 363C 50			            dta BASE_COLOR_P1
   403 363D 50			            dta BASE_COLOR_P1
   404
   405 363E B0			            dta BASE_COLOR_P2
   406 363F B0			            dta BASE_COLOR_P2
   407 3640 B0			            dta BASE_COLOR_P2
   408 3641 B0			            dta BASE_COLOR_P2
   409 3642 B0			            dta BASE_COLOR_P2
   410 3643 B0			            dta BASE_COLOR_P2
   411 3644 B0			            dta BASE_COLOR_P2
   412 3645 B0			            dta BASE_COLOR_P2
   413
   414 3646 00 00		            dta 0,0
   415
   416 3648			menu_colpf0
   417 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   418 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   419 3648 00 00		            dta 0,0
   420 364A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   421 3652 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   422 365A 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   423 3662 00 00 00 00		            dta 0,0,0,0
   424 3666 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   425
   426 				; make pointers from y-position to screen memory
   427 				; screen memory is 3 blocks
   428 				; screen_mem1 : 102 lines, 4080 bytes
   429 				; screen_mem2 : 102 lines, 4080 bytes
   430 				; screen_mem3 :  20 lines,  800 bytes
   431
   432 366E			make_screen_y_tab
   433 366E A9 00		            lda #<screen_mem1
   434 3670 85 86		            sta tmp_screen
   435 3672 A9 70		            lda #>screen_mem1
   436 3674 85 87		            sta tmp_screen+1
   437
   438 3676 A2 00		            ldx #0
   439 3678			fill_y_tab1
   440 3678 20 A1 36		            jsr store_y_line
   441 367B E8			            inx
   442 367C E0 66		            cpx #102
   443 367E D0 F8		            bne fill_y_tab1
   444
   445 				; x = 102
   446 3680 A9 00		            lda #<screen_mem2
   447 3682 85 86		            sta tmp_screen
   448 3684 A9 80		            lda #>screen_mem2
   449 3686 85 87		            sta tmp_screen+1
   450
   451 3688			fill_y_tab2
   452 3688 20 A1 36		            jsr store_y_line
   453 368B E8			            inx
   454 368C E0 CC		            cpx #204
   455 368E D0 F8		            bne fill_y_tab2
   456
   457 3690 A9 00		            lda #<screen_mem3
   458 3692 85 86		            sta tmp_screen
   459 3694 A9 90		            lda #>screen_mem3
   460 3696 85 87		            sta tmp_screen+1
   461
   462 				; x = 204
   463 3698			fill_y_tab3
   464 3698 20 A1 36		            jsr store_y_line
   465 369B E8			            inx
   466 369C E0 E0		            cpx #224
   467 369E D0 F8		            bne fill_y_tab3
   468 36A0 60			            rts
   469
   470 36A1			store_y_line
   471 36A1 A5 86		            lda tmp_screen
   472 36A3 9D 00 12		            sta screen_y_lo,x
   473 36A6 A5 87		            lda tmp_screen+1
   474 36A8 9D 00 13		            sta screen_y_hi,x
   475 				            
   476 36AB A5 86		            lda tmp_screen
   477 36AD 18			            clc
   478 36AE 69 28		            adc #SCREEN_WIDTH
   479 36B0 85 86		            sta tmp_screen
   480 36B2 A5 87		            lda tmp_screen+1
   481 36B4 69 00		            adc #0
   482 36B6 85 87		            sta tmp_screen+1
   483 36B8 60			            rts
   484
   485 				; @todo invert backdrop image
   486 				; now we have to do it here :P
   487 36B9			invert_backdrop
   488 36B9 A9 00		            lda #<screen_mem1
   489 36BB 85 86		            sta tmp_screen
   490 36BD A9 70		            lda #>screen_mem1
   491 36BF 85 87		            sta tmp_screen+1
   492 				            
   493 36C1 A2 10		            ldx #16     ; 16 pages = 4K
   494 36C3 20 E1 36		            jsr do_x_pages
   495 				           
   496 36C6 A9 00		            lda #<screen_mem2
   497 36C8 85 86		            sta tmp_screen
   498 36CA A9 80		            lda #>screen_mem2
   499 36CC 85 87		            sta tmp_screen+1
   500 				            
   501 36CE A2 10		            ldx #16     ; 16 pages = 4K
   502 36D0 20 E1 36		            jsr do_x_pages
   503
   504 36D3 A9 00		            lda #<screen_mem3
   505 36D5 85 86		            sta tmp_screen
   506 36D7 A9 90		            lda #>screen_mem3
   507 36D9 85 87		            sta tmp_screen+1
   508 				            
   509 36DB A2 04		            ldx #4     ; 4 pages = 1K
   510 36DD 20 E1 36		            jsr do_x_pages
   511 36E0 60			            rts
   512
   513 				; invert x pages, starting from tmp_screen
   514
   515 36E1			do_x_pages
   516 36E1 A0 00		            ldy #0
   517 36E3			do_page
   518 36E3 B1 86		            lda (tmp_screen),y
   519 36E5 49 FF		            eor #$ff
   520 36E7 91 86		            sta (tmp_screen),y
   521 36E9 C8			            iny
   522 36EA D0 F7		            bne do_page 
   523
   524 36EC E6 87		            inc tmp_screen+1
   525 36EE CA			            dex
   526 36EF D0 F2		            bne do_page
   527 36F1 60			            rts
   528
   529 36F2			turn_color_ball
   530 36F2 A6 B5		            ldx player_turn
   531 36F4 BD FB 36		            lda color_turn,x
   532 36F7 8D C7 02		            sta COLOR3
   533 36FA 60			            rts
   534 				            
   535 36FB 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   536
   537 36FE			show_menu_options
   538 36FE A9 50		            lda #<controller_text
   539 3700 8D F6 50		            sta menu_line1_ptr
   540 3703 A9 52		            lda #>controller_text
   541 3705 8D F7 50		            sta menu_line1_ptr+1
   542
   543 3708 20 FD 3E		            jsr show_player_mode
   544
   545 370B A9 A0		            lda #<level_text
   546 370D 8D FC 50		            sta menu_line3_ptr
   547 3710 A9 52		            lda #>level_text
   548 3712 8D FD 50		            sta menu_line3_ptr+1
   549
   550 3715 A9 00		            lda #0
   551 3717 85 83		            sta winner_color
   552 3719 60			            rts
   553
   554 371A			show_end_screen
   555 371A A9 FC		            lda #<empty_text
   556 371C 8D F6 50		            sta menu_line1_ptr
   557 371F 8D FC 50		            sta menu_line3_ptr
   558 3722 A9 52		            lda #>empty_text
   559 3724 8D F7 50		            sta menu_line1_ptr+1
   560 3727 8D FD 50		            sta menu_line3_ptr+1
   561
   562 372A AD 2E 51		            lda score_p1
   563 372D CD 2F 51		            cmp score_p2
   564 3730 90 0F		            bcc player_2_wins
   565
   566 3732 A9 10		            lda #<winner_one_text
   567 3734 8D F9 50		            sta menu_line2_ptr
   568 3737 A9 53		            lda #>winner_one_text
   569 3739 8D FA 50		            sta menu_line2_ptr+1
   570
   571 373C A9 50		            lda #BASE_COLOR_P1
   572 373E 85 83		            sta winner_color
   573 3740 60			            rts
   574
   575 3741			player_2_wins
   576 3741 A9 24		            lda #<winner_two_text
   577 3743 8D F9 50		            sta menu_line2_ptr
   578 3746 A9 53		            lda #>winner_two_text
   579 3748 8D FA 50		            sta menu_line2_ptr+1
   580
   581 374B A9 B0		            lda #BASE_COLOR_P2
   582 374D 85 83		            sta winner_color
   583
   584 374F 60			            rts
   585
   586 				; A, X, Y are already saved by the OS
   587 3750			vbi
   588 3750 20 DC 31		            jsr copy_shadow
   589
   590 3753 A5 80		            lda music_toggle
   591 3755 F0 03		            beq skip_music
   592 3757 20 97 31		            jsr play_song
   593 375A			skip_music
   594
   595 				; toggle music on/off with spacebar
   596 375A AD FC 02		            lda 764
   597 375D C9 21		            cmp #$21
   598 375F D0 10		            bne no_spacebar
   599 3761 A5 80		            lda music_toggle
   600 3763 49 80		            eor #128
   601 3765 85 80		            sta music_toggle
   602 3767 D0 03		            bne music_turned_on
   603 3769 20 60 32		            jsr music_off
   604
   605 376C			music_turned_on
   606 376C A9 FF		            lda #255
   607 376E 8D FC 02		            sta 764
   608
   609 3771			no_spacebar
   610 3771 20 67 39		            jsr play_sound_bat
   611 3774 20 85 39		            jsr play_sound_edge
   612
   613 3777 A9 A7		            lda #<dli_header
   614 3779 8D 00 02		            sta VDSLST
   615 377C A9 35		            lda #>dli_header
   616 377E 8D 01 02		            sta VDSLST+1
   617
   618 3781 A9 2E		            lda #%00101110  ; enable P/M DMA
   619 3783 8D 2F 02		            sta SDMCTL
   620 3786 A9 00		            lda #0
   621 3788 85 4D		            sta 77      ; attract off
   622 378A A9 98		            lda #>rotor_font
   623 378C 8D F4 02		            sta 756
   624
   625 378F A9 30		            lda #$30
   626 3791 8D 00 D0		            sta HPOSP0
   627 3794 A9 B0		            lda #$b0
   628 3796 8D 01 D0		            sta HPOSP1
   629
   630 				; menu switching thingy
   631
   632 3799 AD 1F D0		            lda CONSOL
   633 379C C9 03		            cmp #3  ; option button
   634 379E D0 1B		            bne no_option_pressed
   635 37A0 A5 8C		            lda game_state
   636 37A2 C9 01		            cmp #STATE_IN_MENU
   637 37A4 F0 2F		            beq check_game_state
   638
   639 				; prevent menu option directly after leaving in-game state
   640 37A6 A9 03		            lda #3
   641 37A8 8D B0 3E		            sta previous_consol
   642
   643 37AB			go_menu_mode
   644 37AB 20 2B 3B		            jsr wipe_ball
   645
   646 37AE 20 FA 31		            jsr music_normal_volume
   647
   648 37B1 20 FE 36		            jsr show_menu_options
   649
   650 37B4 A9 01		            lda #STATE_IN_MENU
   651 37B6 85 8C		            sta game_state
   652 37B8 4C D5 37		            jmp check_game_state
   653
   654 37BB			no_option_pressed
   655 37BB C9 06		            cmp #6  ; start pressed
   656 37BD D0 16		            bne check_game_state
   657
   658 				; reset game
   659
   660 37BF			reset_game
   661 37BF 20 05 32		            jsr music_low_volume
   662
   663 37C2 20 2B 3B		            jsr wipe_ball
   664
   665 37C5 A9 00		            lda #0
   666 37C7 85 BA		            sta cpu1_angle_end
   667 37C9 A9 80		            lda #128
   668 37CB 85 BB		            sta cpu2_angle_end
   669
   670 37CD A9 01		            lda #1
   671 37CF 85 B6		            sta game_restart
   672
   673 37D1 A9 00		            lda #STATE_IN_GAME
   674 37D3 85 8C		            sta game_state
   675
   676 37D5			check_game_state
   677 37D5 A5 8C		            lda game_state
   678 37D7 D0 03		            bne no_main_game_state
   679 37D9 4C 75 38		            jmp main_game_vbi
   680
   681 37DC			no_main_game_state
   682 37DC C9 02		            cmp #STATE_IN_END
   683 37DE D0 1C		            bne menu_vbi
   684
   685 				; end screen vbi
   686 37E0 A5 8F		            lda end_screen_delay
   687 37E2 D0 10		            bne stay_in_end_screen
   688
   689 37E4 20 A6 31		            jsr restart_music
   690 37E7 20 FA 31		            jsr music_normal_volume
   691
   692 				; here we show the menu again
   693 37EA 20 FE 36		            jsr show_menu_options
   694
   695 37ED A9 01		            lda #STATE_IN_MENU
   696 37EF 85 8C		            sta game_state
   697 37F1 4C FC 37		            jmp menu_vbi
   698
   699 37F4			stay_in_end_screen
   700 37F4 20 49 39		            jsr play_sound_end_game
   701 37F7 C6 8F		            dec end_screen_delay
   702 37F9 4C 41 38		            jmp wait_depressed
   703
   704 				; within menu vbi
   705
   706 37FC			menu_vbi
   707 37FC A5 8A		            lda player_mode
   708 37FE F0 07		            beq check_human_buttons
   709
   710 3800 20 C1 34		            jsr is_player1_button_pressed
   711 3803 D0 BA		            bne reset_game
   712 3805 F0 05		            beq check_consol_buttons
   713
   714 3807			check_human_buttons
   715 3807 20 D8 34		            jsr is_both_buttons
   716 380A D0 B3		            bne reset_game
   717
   718 380C			check_consol_buttons
   719 380C AD 1F D0		            lda CONSOL
   720 380F C9 05		            cmp #5          ; select
   721 3811 D0 18		            bne no_level_select
   722 				            
   723 3813 AD B0 3E		            lda previous_consol
   724 3816 C9 05		            cmp #5
   725 3818 F0 27		            beq wait_depressed
   726
   727 381A 20 E0 3E		            jsr increase_level
   728 381D AE B1 3E		            ldx current_level_index
   729 3820 20 C7 3E		            jsr set_level_ball_speed
   730
   731 3823 A9 05		            lda #5
   732 3825 8D B0 3E		            sta previous_consol
   733 3828 4C 41 38		            jmp wait_depressed
   734
   735 382B			no_level_select
   736 382B C9 03		            cmp #3          ; option
   737 382D D0 0F		            bne no_player_mode_select
   738
   739 382F AD B0 3E		            lda previous_consol
   740 3832 C9 03		            cmp #3
   741 3834 F0 0B		            beq wait_depressed
   742
   743 3836 20 F0 3E		            jsr increase_player_mode
   744 3839 20 FD 3E		            jsr show_player_mode
   745
   746 383C A9 03		            lda #3
   747 383E			no_player_mode_select
   748 383E 8D B0 3E		            sta previous_consol
   749
   750 3841			wait_depressed
   751 3841 A9 01		            lda #1      ; dl jump
   752 3843 8D 55 50		            sta menu_dl_hook
   753 3846 A9 EE		            lda #<menu_dl_part
   754 3848 8D 56 50		            sta menu_dl_hook+1
   755 384B A9 50		            lda #>menu_dl_part
   756 384D 8D 57 50		            sta menu_dl_hook+2
   757
   758 				; detect/show controller type (used for both players)
   759 3850 20 5C 38		            jsr detect_show_driver
   760
   761 3853 20 D4 39		            jsr handle_player1
   762 3856 20 FF 39		            jsr handle_player2
   763
   764 3859 4C 1E 39		            jmp exit_vbi
   765
   766 				; X = port/driver to detect
   767 385C			detect_show_driver
   768 385C 20 3B 34		            jsr driver_detect
   769 385F A8			            tay
   770 3860 B9 38 53		            lda driver_text_lo,y
   771 3863 85 86		            sta tmp_screen
   772 3865 B9 3C 53		            lda driver_text_hi,y
   773 3868 85 87		            sta tmp_screen+1
   774
   775 386A A0 07		            ldy #7
   776 386C			show_driv
   777 386C B1 86		            lda (tmp_screen),y
   778 386E 99 5A 52		            sta driver_screen,y
   779 3871 88			            dey
   780 3872 10 F8		            bpl show_driv
   781 3874 60			            rts
   782
   783 				; main game vbi
   784 3875			main_game_vbi
   785 3875 A5 B6		            lda game_restart
   786 3877 F0 2F		            beq no_restart
   787
   788 				; restart game
   789
   790 3879 20 61 39		            jsr silence_end
   791
   792 387C A9 00		            lda #0
   793 387E 85 B6		            sta game_restart
   794 				            
   795 3880 20 7A 3C		            jsr reset_score
   796 3883 20 48 3C		            jsr show_score_p1
   797 3886 20 61 3C		            jsr show_score_p2
   798
   799 3889 A6 9C		            ldx p1_angle
   800 388B 86 AA		            stx ball_angle_start
   801 388D 20 86 3A		            jsr ball_to_start_position
   802 3890 20 95 3A		            jsr prepare_ball_end_position
   803
   804 3893 A9 00		            lda #0
   805 3895 85 A0		            sta mp_collision
   806 3897 85 A1		            sta in_collision
   807 3899 85 A3		            sta edge_delay
   808 389B 8D 1E D0		            sta HITCLR
   809
   810 389E A9 02		            lda #2
   811 38A0 85 B5		            sta player_turn
   812 				            ;jsr set_cpu_angle_end
   813
   814 38A2 20 F2 36		            jsr turn_color_ball
   815 38A5 4C 1E 39		            jmp exit_vbi
   816
   817 38A8			no_restart
   818 				; remove menu hook
   819 38A8 A9 0F		            lda #$0f        ; dl gfx 8
   820 38AA 8D 55 50		            sta menu_dl_hook
   821 38AD 8D 56 50		            sta menu_dl_hook+1
   822 38B0 8D 57 50		            sta menu_dl_hook+2
   823
   824 38B3 AD 08 D0		            lda M0PL
   825 38B6 85 A0		            sta mp_collision
   826 38B8 AD 09 D0		            lda M1PL
   827 38BB 05 A0		            ora mp_collision
   828 38BD 85 A0		            sta mp_collision
   829 				 
   830 38BF 20 D4 39		            jsr handle_player1
   831 38C2 20 FF 39		            jsr handle_player2
   832
   833 				; handle ball
   834
   835 38C5 20 2B 3B		            jsr wipe_ball         
   836
   837 				; Check ball collision with bat
   838
   839 38C8 A5 A4		            lda bat_collision_delay
   840 38CA F0 05		            beq check_allowed
   841 38CC C6 A4		            dec bat_collision_delay
   842 38CE 4C E8 38		            jmp move_one
   843
   844 38D1			check_allowed
   845 38D1 A5 A0		            lda mp_collision
   846 38D3 F0 0F		            beq reset_in_collision
   847
   848 38D5 A5 A1		            lda in_collision
   849 38D7 D0 0F		            bne no_first_hit
   850
   851 38D9 E6 A1		            inc in_collision            
   852 38DB 20 C2 3A		            jsr bounce_bat_ball 
   853 				            
   854 38DE 20 44 39		            jsr start_sound_bat          
   855 				            
   856 38E1 4C E8 38		            jmp move_one
   857 				            
   858 38E4			reset_in_collision
   859 38E4 A9 00		            lda #0
   860 38E6 85 A1		            sta in_collision        
   861
   862 38E8			move_one
   863 38E8			no_first_hit
   864 38E8 20 CC 3D		            jsr move_current_xy
   865 38EB F0 1E		            beq still_moving
   866
   867 				; edge detected
   868
   869 38ED 20 80 39		            jsr start_sound_edge
   870
   871 38F0 A5 AB		            lda ball_angle_end
   872 38F2 85 AA		            sta ball_angle_start
   873
   874 38F4 20 B9 3A		            jsr ball_current_to_start_position
   875 38F7 20 95 3A		            jsr prepare_ball_end_position
   876
   877 38FA 20 A0 39		            jsr update_score
   878 38FD D0 37		            bne game_ends
   879
   880 				; switch turns
   881 38FF A5 B5		            lda player_turn
   882 3901 49 03		            eor #3              ; 1 => 2, 2 => 1
   883 3903 85 B5		            sta player_turn
   884 3905 20 F2 36		            jsr turn_color_ball
   885 3908 20 28 3A		            jsr set_cpu_angle_end
   886
   887 390B			still_moving
   888 390B A5 EB		            lda current_x+1
   889 390D 85 A6		            sta ball_current_x
   890 390F A5 ED		            lda current_y+1
   891 3911 85 A7		            sta ball_current_y
   892
   893 3913 20 40 3B		            jsr show_ball
   894
   895 3916 A9 00		            lda #0
   896 3918 8D 18 D0		            sta $d018           
   897
   898 				; anything in A to clear collisions
   899 391B 8D 1E D0		            sta HITCLR
   900
   901 391E			exit_vbi
   902
   903 				; always set header stuff
   904 391E A9 03		            lda #3
   905 3920 8D 08 D0		            sta SIZEP0
   906 3923 8D 09 D0		            sta SIZEP1
   907
   908 				; background in PM0/1 for header
   909 3926 A9 FF		            lda #255
   910 3928 A2 07		            ldx #7
   911 392A			fill_pm_header
   912 392A 9D 00 0E		            sta p0_area,x
   913 392D 9D 80 0E		            sta p1_area,x
   914 3930 CA			            dex
   915 3931 10 F7		            bpl fill_pm_header
   916
   917 3933 4C 62 E4		            jmp $e462
   918
   919 3936			game_ends
   920 3936 A9 FF		            lda #255
   921 3938 85 8F		            sta end_screen_delay
   922
   923 393A 20 1A 37		            jsr show_end_screen
   924
   925 393D A9 02		            lda #STATE_IN_END
   926 393F 85 8C		            sta game_state
   927
   928 3941 4C 1E 39		            jmp exit_vbi
   929
   930 3944			start_sound_bat
   931 3944 A9 0A		            lda #10
   932 3946 85 8D		            sta volume_hit_bat
   933 3948 60			            rts
   934
   935 3949			play_sound_end_game
   936 3949 20 60 32		            jsr music_off
   937
   938 394C A5 8F		            lda end_screen_delay
   939 394E C9 C0		            cmp #192
   940 3950 90 0F		            bcc silence_end
   941 3952 4A			            lsr
   942 3953 25 8F		            and end_screen_delay
   943 3955 4A			            lsr
   944 3956 09 20		            ora #$20
   945 3958 8D 73 32		            sta SHADOW+4
   946 				            ;lda end_screen_delay
   947 395B A9 AA		            lda #$aa
   948 395D 8D 74 32		            sta SHADOW+5
   949 3960 60			            rts
   950 3961			silence_end
   951 3961 A9 00		            lda #0
   952 3963 8D 74 32		            sta SHADOW+5
   953 3966 60			            rts
   954
   955 3967			play_sound_bat
   956 3967 A5 8D		            lda volume_hit_bat
   957 3969 30 14		            bmi silenced_bat
   958
   959 396B A5 B5		            lda player_turn
   960 396D 0A			            asl
   961 396E 0A			            asl
   962 396F 69 30		            adc #$30
   963 3971 E5 B3		            sbc angle_diff_bat
   964 3973 8D 73 32		            sta SHADOW+4    ; $d204
   965 3976 A5 8D		            lda volume_hit_bat
   966 3978 09 A0		            ora #$a0
   967 397A 8D 74 32		            sta SHADOW+5    ; $d205
   968 397D C6 8D		            dec volume_hit_bat
   969 397F			silenced_bat
   970 397F 60			            rts
   971
   972 3980			start_sound_edge
   973 3980 A9 04		            lda #4
   974 3982 85 8E		            sta volume_hit_edge
   975 3984 60			            rts
   976
   977 3985			play_sound_edge
   978 3985 A5 8E		            lda volume_hit_edge
   979 3987 30 16		            bmi silenced_edge
   980 3989 D0 06		            bne no_silenced_edge
   981 398B 8D 74 32		            sta SHADOW+5    ; $d205
   982 398E C6 8E		            dec volume_hit_edge
   983 3990 60			            rts            
   984
   985 3991			no_silenced_edge
   986 3991 A9 08		            lda #$08
   987 3993 8D 73 32		            sta SHADOW+4    ; $d204
   988 3996 A5 8E		            lda volume_hit_edge
   989 3998 09 26		            ora #$26
   990 399A 8D 74 32		            sta SHADOW+5    ; $d205
   991 399D C6 8E		            dec volume_hit_edge
   992 399F			silenced_edge
   993 399F 60			            rts
   994
   995 				; Update score
   996 				; Score > max score, then exit A = 1, otherwise A = 0
   997
   998 39A0			update_score
   999 39A0 A5 B5		            lda player_turn
  1000 39A2 C9 01		            cmp #1
  1001 39A4 D0 12		            bne was_player2_turn
  1002 				; was player 1 turn, so player 2 gets a point
  1003 39A6 20 8F 3C		            jsr inc_score_p2
  1004 39A9 20 61 3C		            jsr show_score_p2
  1005
  1006 39AC AD 2F 51		            lda score_p2
  1007 39AF C9 11		            cmp #MAX_SCORE
  1008 39B1 D0 17		            bne reset_edge_delay
  1009
  1010 39B3 A9 01		            lda #STATE_IN_MENU
  1011 39B5 85 8C		            sta game_state
  1012 39B7 60			            rts
  1013
  1014 39B8			was_player2_turn
  1015 39B8 20 83 3C		            jsr inc_score_p1
  1016 39BB 20 48 3C		            jsr show_score_p1
  1017
  1018 39BE AD 2E 51		            lda score_p1
  1019 39C1 C9 11		            cmp #MAX_SCORE
  1020 39C3 D0 05		            bne reset_edge_delay
  1021
  1022 39C5 A9 01		            lda #STATE_IN_MENU
  1023 39C7 85 8C		            sta game_state
  1024 39C9 60			            rts
  1025
  1026 39CA			reset_edge_delay
  1027 39CA A9 0A		            lda #10
  1028 39CC 85 A3		            sta edge_delay
  1029
  1030 39CE			no_edge
  1031
  1032 39CE A9 00		            lda #0      ; no end game
  1033 				; anything in A to clear collisions
  1034 39D0 8D 1E D0		            sta HITCLR
  1035 39D3 60			            rts
  1036
  1037 				; player 1
  1038 				; - wipe shape at previous y-position
  1039 				; - move player using controller
  1040 				; - set sprite positions
  1041
  1042 39D4			handle_player1
  1043 39D4 20 B0 3B		            jsr wipe_p1         ; wipe previous shape player 1
  1044
  1045 39D7 A5 8A		            lda player_mode
  1046 39D9 C9 02		            cmp #2
  1047 39DB F0 0C		            beq do_p1_is_computer
  1048
  1049 39DD A2 00		            ldx #0              ; player 1
  1050 39DF 20 6E 34		            jsr main_driver
  1051 39E2 20 68 3A		            jsr move_player
  1052 				            
  1053 39E5 20 64 3B		            jsr show_p1
  1054 39E8 60			            rts
  1055
  1056 				; p1 now controlled by computer
  1057 39E9			do_p1_is_computer
  1058 39E9 A5 8C		            lda game_state
  1059 39EB D0 3A		            bne not_in_game
  1060
  1061 39ED A2 00		            ldx #0              ; player 1
  1062
  1063 39EF A5 B5		            lda player_turn
  1064 39F1 C9 01		            cmp #1
  1065 39F3 D0 03		            bne not_p1_turn
  1066
  1067 39F5 20 39 3A		            jsr cpu_controller
  1068 39F8			not_p1_turn
  1069
  1070 39F8 20 68 3A		            jsr move_player
  1071 39FB 20 64 3B		            jsr show_p1
  1072 39FE 60			            rts
  1073
  1074 				; player 2
  1075 				; - wipe shape at previous y-position
  1076 				; - move player using controller
  1077 				; - set sprite positions
  1078
  1079 39FF			handle_player2
  1080 39FF 20 C5 3B		            jsr wipe_p2         ; wipe previous shape player 2
  1081
  1082 3A02 A5 8A		            lda player_mode
  1083 3A04 D0 0C		            bne do_p2_is_computer
  1084
  1085 3A06 A2 01		            ldx #1              ; player 2
  1086 3A08 20 6E 34		            jsr main_driver
  1087 3A0B 20 68 3A		            jsr move_player
  1088 				                        
  1089 3A0E 20 8A 3B		            jsr show_p2
  1090 3A11 60			            rts
  1091
  1092 				; p2 now controlled by computer
  1093 3A12			do_p2_is_computer
  1094 3A12 A5 8C		            lda game_state
  1095 3A14 D0 11		            bne not_in_game
  1096
  1097 3A16 A2 01		            ldx #1              ; player 2
  1098
  1099 3A18 A5 B5		            lda player_turn
  1100 3A1A C9 02		            cmp #2
  1101 3A1C D0 03		            bne not_p2_turn
  1102
  1103 3A1E 20 39 3A		            jsr cpu_controller
  1104
  1105 3A21			not_p2_turn
  1106 3A21 20 68 3A		            jsr move_player
  1107 3A24 20 8A 3B		            jsr show_p2
  1108
  1109 3A27			not_in_game
  1110 3A27 60			            rts
  1111
  1112 3A28			set_cpu_angle_end
  1113 3A28 A6 B5		            ldx player_turn
  1114 3A2A CA			            dex
  1115 3A2B AD 0A D2		            lda RANDOM
  1116 3A2E 29 07		            and #7
  1117 3A30 18			            clc
  1118 3A31 65 AB		            adc ball_angle_end
  1119 3A33 38			            sec
  1120 3A34 E9 03		            sbc #3
  1121 3A36 95 BA		            sta cpu_angle_end,x
  1122 3A38 60			            rts
  1123
  1124 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1125
  1126 3A39			cpu_controller
  1127 				;            lda ball_angle_end  ; current ball end
  1128 3A39 B5 BA		            lda cpu_angle_end,x
  1129 3A3B 85 B0		            sta tmp_angle1
  1130 3A3D B5 9C		            lda p1_angle,x
  1131 3A3F 85 B1		            sta tmp_angle2
  1132
  1133 3A41 20 9B 3C		            jsr calc_angle_diff
  1134
  1135 3A44 A5 B7		            lda tmp_angle_diff
  1136 3A46 F0 1F		            beq comp_in_catch_position
  1137 3A48 A5 B4		            lda tmp_angle_direction
  1138 3A4A D0 0E		            bne move_comp_clockwise
  1139
  1140 3A4C AD 0A D2		            lda RANDOM
  1141 3A4F 29 03		            and #3
  1142 3A51 D0 14		            bne comp_in_catch_position
  1143 3A53 B5 9C		            lda p1_angle,x
  1144 3A55 65 88		            adc stick_slow_speed
  1145 3A57 95 9C		            sta p1_angle,x
  1146 3A59 60			            rts
  1147 3A5A			move_comp_clockwise
  1148
  1149 3A5A AD 0A D2		            lda RANDOM
  1150 3A5D 29 03		            and #3
  1151 3A5F D0 06		            bne comp_in_catch_position
  1152
  1153 3A61 B5 9C		            lda p1_angle,x
  1154 3A63 E5 88		            sbc stick_slow_speed
  1155 3A65 95 9C		            sta p1_angle,x
  1156 3A67			comp_in_catch_position
  1157 3A67 60			            rts
  1158
  1159 				; move player 1/2
  1160 				; right - clockwise, left = anti-clockwise
  1161
  1162 				; X = 0, player 1
  1163 				; X = 1, player 2
  1164
  1165 				; Y = driver mode:
  1166 				; 0 : stick
  1167 				; 1 : paddle
  1168 				; 2 : driving
  1169 				; 3 : computer
  1170 				            
  1171 3A68			move_player
  1172 3A68 B5 9C		            lda p1_angle,x
  1173 3A6A 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1174 3A6C 49 40		            eor #64                     ; perpendicular to the circle angle
  1175 3A6E 95 90		            sta p1_shape,x
  1176
  1177 3A70 B4 9C		            ldy p1_angle,x
  1178 3A72 B9 00 40		            lda inner_x_tab,y
  1179 3A75 4A			            lsr
  1180 3A76 69 20		            adc #inner_x_margin/2
  1181 3A78 95 94		            sta player1_x,x
  1182 3A7A B9 00 41		            lda inner_y_tab,y
  1183 3A7D 4A			            lsr
  1184 3A7E 95 98		            sta player1_y,x
  1185
  1186 3A80 B4 90		            ldy p1_shape,x
  1187 3A82 20 FF 3B		            jsr shape_to_ptr
  1188
  1189 3A85 60			            rts
  1190
  1191 				; Set ball at start position
  1192 				; - start angle current player
  1193 				; - start position by inner table
  1194 				; - collision delay set?
  1195
  1196 				; Set ball current position to start position
  1197 				; input:
  1198 				; X = angle of start position
  1199 				; output:
  1200 				; ball position: (ball_current_x, ball_current_y)
  1201 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1202 3A86			ball_to_start_position
  1203 3A86 BD 00 40		            lda inner_x_tab,x
  1204 3A89 85 A6		            sta ball_current_x
  1205 3A8B 85 E6		            sta tmp_x1
  1206 3A8D BD 00 41		            lda inner_y_tab,x
  1207 3A90 85 A7		            sta ball_current_y
  1208 3A92 85 E7		            sta tmp_y1
  1209 3A94 60			            rts
  1210
  1211 				; Prepare ball end position
  1212 				; - end angle current player
  1213 				; - end position by outer table
  1214 				; - calculate step size x,y
  1215
  1216 				; Input:
  1217 				; - ball_angle_start
  1218 				; - ball speed
  1219 				; Output:
  1220 				; - ball_andle_end
  1221 				; - ball start position (tmp_x1, tmp_y1)
  1222 				; - ball end position (tmp_x2, tmp_y2)
  1223 				; - step size (step_x, step_y) for ball movement
  1224 3A95			prepare_ball_end_position
  1225 3A95 A5 AA		            lda ball_angle_start
  1226 3A97 49 80		            eor #128        ; other side
  1227 3A99 85 AB		            sta ball_angle_end
  1228 3A9B AA			            tax
  1229 3A9C 20 20 3B		            jsr angle_to_end_position
  1230 				                        
  1231 3A9F 20 5F 3D		            jsr init_current_xy
  1232 				            
  1233 				; move current a little bit            
  1234 3AA2 20 CC 3D		            jsr move_current_xy
  1235 				; ignore end indicator, since we only just started
  1236
  1237
  1238 3AA5 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1239 3AA7 85 A4		            sta bat_collision_delay
  1240 3AA9 60			            rts
  1241
  1242 				; x = angle 0..255
  1243 3AAA			outer_angle_to_start_position
  1244 3AAA BD 00 10		            lda outer_x_256,x
  1245 3AAD 85 A6		            sta ball_current_x
  1246 3AAF 85 E6		            sta tmp_x1
  1247 3AB1 BD 00 11		            lda outer_y_256,x
  1248 3AB4 85 A7		            sta ball_current_y
  1249 3AB6 85 E7		            sta tmp_y1
  1250 3AB8 60			            rts
  1251
  1252 3AB9			ball_current_to_start_position
  1253 3AB9 A5 A6		            lda ball_current_x
  1254 3ABB 85 E6		            sta tmp_x1
  1255 3ABD A5 A7		            lda ball_current_y
  1256 3ABF 85 E7		            sta tmp_y1
  1257 3AC1 60			            rts
  1258
  1259 				; Ball collides with bat
  1260 				; - start ball angle = end ball angle
  1261 				; - calculate diff between bat and ball end angle
  1262 				; - calculate new end angle
  1263 				; - Set ball at start position
  1264 				; - Prepare ball end position
  1265
  1266 3AC2			bounce_bat_ball
  1267 				; set new start of ball
  1268 				; @todo check ball angles
  1269 				; set new ball start angle (= previous end angle)
  1270 3AC2 A5 AB		            lda ball_angle_end
  1271 3AC4 85 AA		            sta ball_angle_start
  1272 				            
  1273 				; alternative?
  1274 				            ;ldx ball_angle_start
  1275 				            ;jsr ball_to_start_position          
  1276 3AC6 20 B9 3A		            jsr ball_current_to_start_position
  1277
  1278 				; which player hit the ball?
  1279 				; collision bits:
  1280 				; xxxxx1x1 : 1 is player1 collision
  1281 				; xxxx1010 : 2 is player2 collision
  1282
  1283 3AC9 A5 A0		            lda mp_collision
  1284 3ACB 4A			            lsr
  1285 3ACC 4A			            lsr
  1286 3ACD 05 A0		            ora mp_collision
  1287 3ACF 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1288
  1289 				; who's turn is it and who bounced the ball?
  1290
  1291 3AD1 25 B5		            and player_turn
  1292 3AD3 F0 06		            beq no_switch_turn
  1293
  1294 3AD5 A5 B5		            lda player_turn
  1295 3AD7 49 03		            eor #3              ; 1 => 2, 2 => 1
  1296 3AD9 85 B5		            sta player_turn
  1297
  1298 3ADB			no_switch_turn
  1299 3ADB 20 F2 36		            jsr turn_color_ball
  1300
  1301 3ADE A5 B5		            lda player_turn
  1302 3AE0 49 03		            eor #3
  1303 3AE2 AA			            tax
  1304 3AE3 CA			            dex                 ; index 0,1 (player = 1,2)
  1305 3AE4 B5 9C		            lda p1_angle,x
  1306
  1307 				; Calculate diff between bat angle position and new ball start position
  1308 3AE6 85 B0		            sta tmp_angle1
  1309
  1310 3AE8 A5 AA		            lda ball_angle_start
  1311 3AEA 85 B1		            sta tmp_angle2
  1312
  1313 3AEC 20 9B 3C		            jsr calc_angle_diff
  1314
  1315 3AEF 0A			            asl
  1316 3AF0 0A			            asl
  1317 3AF1 0A			            asl
  1318 3AF2 85 B3		            sta angle_diff_bat
  1319
  1320 3AF4 A5 B0		            lda tmp_angle1
  1321 3AF6 18			            clc
  1322 3AF7 65 B2		            adc add_to_angle
  1323 3AF9 49 80		            eor #128            ; other side
  1324 3AFB 85 B0		            sta tmp_angle1
  1325 				            
  1326 3AFD A5 B4		            lda tmp_angle_direction
  1327 3AFF D0 0A		            bne diff_clockwise
  1328 				; diff counter clockwise
  1329 3B01 A5 B0		            lda tmp_angle1
  1330 3B03 18			            clc
  1331 3B04 65 B3		            adc angle_diff_bat
  1332 3B06 85 B0		            sta tmp_angle1
  1333 3B08 4C 12 3B		            jmp calc_done            
  1334
  1335 3B0B			diff_clockwise
  1336 3B0B A5 B0		            lda tmp_angle1
  1337 3B0D 38			            sec
  1338 3B0E E5 B3		            sbc angle_diff_bat
  1339 3B10 85 B0		            sta tmp_angle1
  1340 				            
  1341 				; calculation done            
  1342 3B12			calc_done
  1343 3B12 A5 B0		            lda tmp_angle1
  1344 3B14 85 AB		            sta ball_angle_end
  1345 3B16 AA			            tax
  1346 3B17 20 20 3B		            jsr angle_to_end_position
  1347
  1348 3B1A 20 28 3A		            jsr set_cpu_angle_end                        
  1349
  1350 3B1D 4C 5F 3D		            jmp init_current_xy
  1351
  1352 				; x = angle 0..255
  1353 3B20			angle_to_end_position
  1354 3B20 BD 00 10		            lda outer_x_256,x
  1355 3B23 85 E8		            sta tmp_x2
  1356 3B25 BD 00 11		            lda outer_y_256,x
  1357 3B28 85 E9		            sta tmp_y2
  1358 3B2A 60			            rts
  1359
  1360 3B2B			wipe_ball
  1361 3B2B A5 A7		            lda ball_current_y
  1362 3B2D 4A			            lsr
  1363 3B2E 69 06		            adc #ball_top_margin
  1364 3B30 AA			            tax                 ; x = real y position on screen
  1365 3B31 A9 00		            lda #0
  1366 3B33 9D 80 0D		            sta msl_area,x
  1367 3B36 9D 81 0D		            sta msl_area+1,x
  1368 3B39 9D 82 0D		            sta msl_area+2,x
  1369 3B3C 9D 83 0D		            sta msl_area+3,x
  1370 3B3F 60			            rts
  1371
  1372 3B40			show_ball
  1373 3B40 A5 A7		            lda ball_current_y
  1374 3B42 4A			            lsr
  1375 3B43 69 06		            adc #ball_top_margin
  1376 3B45 AA			            tax                 ; x = real y position on screen
  1377
  1378 3B46 A9 02		            lda #%00000010
  1379 3B48 9D 80 0D		            sta msl_area,x
  1380 3B4B 9D 83 0D		            sta msl_area+3,x
  1381 3B4E A9 07		            lda #%00000111
  1382 3B50 9D 81 0D		            sta msl_area+1,x
  1383 3B53 9D 82 0D		            sta msl_area+2,x
  1384 				            
  1385 3B56 A5 A6		            lda ball_current_x
  1386 3B58 4A			            lsr
  1387 3B59 69 45		            adc #ball_left_margin
  1388 3B5B 8D 05 D0		            sta HPOSM1
  1389 3B5E 69 02		            adc #2
  1390 3B60 8D 04 D0		            sta HPOSM0
  1391 				                        
  1392 3B63 60			            rts
  1393 				            
  1394 3B64			show_p1
  1395 				; y position
  1396 3B64 A5 98		            lda player1_y
  1397 3B66 18			            clc
  1398 3B67 69 01		            adc #upper_margin
  1399 3B69 AA			            tax
  1400
  1401 3B6A A0 00		            ldy #0
  1402 3B6C			show_shape1
  1403 3B6C B1 84		            lda (shape_ptr),y
  1404 3B6E 9D 00 0E		            sta p0_area,x 
  1405 3B71 C8			            iny
  1406 3B72 B1 84		            lda (shape_ptr),y
  1407 3B74 9D 00 0F		            sta p2_area,x
  1408 3B77 E8			            inx
  1409 3B78 C8			            iny
  1410 3B79 C0 20		            cpy #32
  1411 3B7B D0 EF		            bne show_shape1
  1412
  1413 				; x position
  1414 3B7D A5 94		            lda player1_x
  1415 3B7F 18			            clc
  1416 3B80 69 20		            adc #left_margin
  1417 3B82 85 81		            sta shadow_HPOSP0
  1418 3B84 69 08		            adc #8
  1419 3B86 8D 02 D0		            sta HPOSP2
  1420 3B89 60			            rts
  1421
  1422 3B8A			show_p2
  1423 				; y position
  1424 3B8A A5 99		            lda player2_y
  1425 3B8C 18			            clc
  1426 3B8D 69 01		            adc #upper_margin
  1427 3B8F AA			            tax
  1428
  1429 3B90 A0 00		            ldy #0
  1430 3B92			show_shape2
  1431 3B92 B1 84		            lda (shape_ptr),y
  1432 3B94 9D 80 0E		            sta p1_area,x
  1433 3B97 C8			            iny
  1434 3B98 B1 84		            lda (shape_ptr),y
  1435 3B9A 9D 80 0F		            sta p3_area,x
  1436 3B9D E8			            inx
  1437 3B9E C8			            iny
  1438 3B9F C0 20		            cpy #32
  1439 3BA1 D0 EF		            bne show_shape2
  1440
  1441 				; x position
  1442 3BA3 A5 95		            lda player2_x
  1443 3BA5 18			            clc
  1444 3BA6 69 20		            adc #left_margin
  1445 3BA8 85 82		            sta shadow_HPOSP1
  1446 3BAA 69 08		            adc #8
  1447 3BAC 8D 03 D0		            sta HPOSP3
  1448 3BAF 60			            rts
  1449
  1450 3BB0			wipe_p1
  1451 3BB0 A5 98		            lda player1_y
  1452 3BB2 18			            clc
  1453 3BB3 69 01		            adc #upper_margin
  1454 3BB5 AA			            tax
  1455 				            
  1456 3BB6 A0 10		            ldy #16
  1457 3BB8 A9 00		            lda #0
  1458 3BBA			wipe_it1            
  1459 3BBA 9D 00 0E		            sta p0_area,x 
  1460 3BBD 9D 00 0F		            sta p2_area,x
  1461 3BC0 E8			            inx
  1462 3BC1 88			            dey
  1463 3BC2 D0 F6		            bne wipe_it1 
  1464 3BC4 60			            rts
  1465
  1466 3BC5			wipe_p2
  1467 3BC5 A5 99		            lda player2_y
  1468 3BC7 18			            clc
  1469 3BC8 69 01		            adc #upper_margin
  1470 3BCA AA			            tax
  1471 				            
  1472 3BCB A0 10		            ldy #16
  1473 3BCD A9 00		            lda #0
  1474 3BCF			wipe_it2            
  1475 3BCF 9D 80 0E		            sta p1_area,x
  1476 3BD2 9D 80 0F		            sta p3_area,x
  1477 3BD5 E8			            inx
  1478 3BD6 88			            dey
  1479 3BD7 D0 F6		            bne wipe_it2 
  1480 3BD9 60			            rts
  1481
  1482 3BDA			make_shape_index
  1483 3BDA A9 00		            lda #<pm_shapes
  1484 3BDC 85 84		            sta shape_ptr
  1485 3BDE A9 60		            lda #>pm_shapes
  1486 3BE0 85 85		            sta shape_ptr+1
  1487 				            
  1488 3BE2 A2 00		            ldx #0
  1489 3BE4			fill_pm_tab
  1490 3BE4 A5 84		            lda shape_ptr
  1491 3BE6 9D 00 14		            sta pm_shape_lo,x
  1492 3BE9 A5 85		            lda shape_ptr+1
  1493 3BEB 9D 80 14		            sta pm_shape_hi,x
  1494 				            
  1495 3BEE A5 84		            lda shape_ptr
  1496 3BF0 18			            clc
  1497 3BF1 69 20		            adc #32
  1498 3BF3 85 84		            sta shape_ptr
  1499 3BF5 A5 85		            lda shape_ptr+1
  1500 3BF7 69 00		            adc #0
  1501 3BF9 85 85		            sta shape_ptr+1
  1502 				            
  1503 3BFB E8			            inx
  1504 3BFC 10 E6		            bpl fill_pm_tab
  1505 				            
  1506 3BFE 60			            rts
  1507 				            
  1508 				; there are 128 shapes, each 32 bytes
  1509
  1510 				; y = shape index
  1511 3BFF			shape_to_ptr
  1512 3BFF B9 00 14		            lda pm_shape_lo,y
  1513 3C02 85 84		            sta shape_ptr
  1514 3C04 B9 80 14		            lda pm_shape_hi,y
  1515 3C07 85 85		            sta shape_ptr+1
  1516
  1517 3C09 60			            rts
  1518
  1519 				; turn 1024 tables into 256 bytes for ball edge lookup
  1520 3C0A			make_outer_256
  1521 3C0A A0 00		            ldy #0
  1522 3C0C A2 00		            ldx #0
  1523 3C0E			conv_256
  1524 3C0E BD 00 44		            lda outer_x_tab,x
  1525 3C11 99 00 10		            sta outer_x_256,y
  1526 3C14 BD 00 45		            lda outer_x_tab+$100,x
  1527 3C17 99 40 10		            sta outer_x_256+64,y
  1528 3C1A BD 00 46		            lda outer_x_tab+$200,x
  1529 3C1D 99 80 10		            sta outer_x_256+128,y
  1530 3C20 BD 00 47		            lda outer_x_tab+$300,x
  1531 3C23 99 C0 10		            sta outer_x_256+192,y
  1532 				            
  1533 3C26 BD 00 48		            lda outer_y_tab,x
  1534 3C29 99 00 11		            sta outer_y_256,y
  1535 3C2C BD 00 49		            lda outer_y_tab+$100,x
  1536 3C2F 99 40 11		            sta outer_y_256+64,y
  1537 3C32 BD 00 4A		            lda outer_y_tab+$200,x
  1538 3C35 99 80 11		            sta outer_y_256+128,y
  1539 3C38 BD 00 4B		            lda outer_y_tab+$300,x
  1540 3C3B 99 C0 11		            sta outer_y_256+192,y
  1541
  1542 3C3E E8			            inx
  1543 3C3F E8			            inx
  1544 3C40 E8			            inx
  1545 3C41 E8			            inx
  1546 3C42 C8			            iny
  1547 3C43 C0 40		            cpy #64
  1548 3C45 D0 C7		            bne conv_256            
  1549 3C47 60			            rts
  1550
  1551 3C48			show_score_p1
  1552 3C48 AD 2E 51		            lda score_p1
  1553 3C4B 4A			            lsr
  1554 3C4C 4A			            lsr
  1555 3C4D 4A			            lsr
  1556 3C4E 4A			            lsr
  1557 3C4F F0 02		            beq do_space1
  1558 3C51 09 10		            ora #16
  1559 3C53			do_space1
  1560 3C53 8D 0B 51		            sta score_chars_p1
  1561 3C56 AD 2E 51		            lda score_p1
  1562 3C59 29 0F		            and #15
  1563 3C5B 09 10		            ora #16
  1564 3C5D 8D 0C 51		            sta score_chars_p1+1
  1565 3C60 60			            rts
  1566
  1567 3C61			show_score_p2
  1568 3C61 AD 2F 51		            lda score_p2
  1569 3C64 4A			            lsr
  1570 3C65 4A			            lsr
  1571 3C66 4A			            lsr
  1572 3C67 4A			            lsr
  1573 3C68 F0 02		            beq do_space2
  1574 3C6A 09 10		            ora #16
  1575 3C6C			do_space2
  1576 3C6C 8D 2B 51		            sta score_chars_p2
  1577 3C6F AD 2F 51		            lda score_p2
  1578 3C72 29 0F		            and #15
  1579 3C74 09 10		            ora #16
  1580 3C76 8D 2C 51		            sta score_chars_p2+1
  1581 3C79 60			            rts
  1582 				                        
  1583 3C7A			reset_score
  1584 3C7A A9 00		            lda #0
  1585 3C7C 8D 2E 51		            sta score_p1
  1586 3C7F 8D 2F 51		            sta score_p2
  1587 3C82 60			            rts            
  1588 				         
  1589 3C83			inc_score_p1
  1590 3C83 F8			            sed
  1591 3C84 AD 2E 51		            lda score_p1
  1592 3C87 18			            clc
  1593 3C88 69 01		            adc #1
  1594 3C8A 8D 2E 51		            sta score_p1    
  1595 3C8D D8			            cld
  1596 3C8E 60			            rts
  1597
  1598 3C8F			inc_score_p2
  1599 3C8F F8			            sed
  1600 3C90 AD 2F 51		            lda score_p2
  1601 3C93 18			            clc
  1602 3C94 69 01		            adc #1
  1603 3C96 8D 2F 51		            sta score_p2
  1604 3C99 D8			            cld
  1605 3C9A 60			            rts
  1606
  1607 				; calculate the difference between angle1 and angle2
  1608
  1609 				; input:
  1610 				; tmp_angle1 (0..255)
  1611 				; tmp_angle2 (0..255)
  1612
  1613 				; output:
  1614 				; tmp_angle_diff, A: difference between angle1 and angle2
  1615 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1616
  1617 3C9B			calc_angle_diff
  1618 3C9B A9 00		            lda #0
  1619 3C9D 85 B2		            sta add_to_angle
  1620 3C9F 85 B4		            sta tmp_angle_direction
  1621
  1622 				; make sure we can compare angles, otherwise add $40 to angles
  1623 3CA1 A5 B0		            lda tmp_angle1
  1624 3CA3 C9 C0		            cmp #$c0
  1625 3CA5 B0 06		            bcs too_large
  1626 3CA7 A5 B1		            lda tmp_angle2
  1627 3CA9 C9 C0		            cmp #$c0
  1628 3CAB 90 12		            bcc not_too_large
  1629 3CAD			too_large
  1630 3CAD A5 B0		            lda tmp_angle1
  1631 3CAF 38			            sec
  1632 3CB0 E9 40		            sbc #$40
  1633 3CB2 85 B0		            sta tmp_angle1
  1634 				            
  1635 3CB4 A5 B1		            lda tmp_angle2
  1636 3CB6 38			            sec
  1637 3CB7 E9 40		            sbc #$40
  1638 3CB9 85 B1		            sta tmp_angle2
  1639 				            
  1640 3CBB A9 40		            lda #$40
  1641 3CBD 85 B2		            sta add_to_angle
  1642
  1643 3CBF			not_too_large
  1644 3CBF A5 B1		            lda tmp_angle2
  1645 3CC1 C5 B0		            cmp tmp_angle1
  1646 3CC3 90 0A		            bcc angle2_smaller_angle1
  1647 				; ball >= play
  1648 3CC5 38			            sec
  1649 3CC6 E5 B0		            sbc tmp_angle1
  1650 3CC8 85 B7		            sta tmp_angle_diff
  1651 				            
  1652 3CCA E6 B4		            inc tmp_angle_direction
  1653 3CCC 4C D6 3C		            jmp diff_calculated
  1654 				                        
  1655 3CCF			angle2_smaller_angle1
  1656 3CCF A5 B0		            lda tmp_angle1
  1657 3CD1 38			            sec
  1658 3CD2 E5 B1		            sbc tmp_angle2
  1659 3CD4 85 B7		            sta tmp_angle_diff
  1660
  1661 3CD6			diff_calculated
  1662 3CD6 A5 B7		            lda tmp_angle_diff           
  1663 3CD8 60			            rts
  1664
  1665 				; X = angle
  1666 				; lookup magnitude of angle 0 to angle X
  1667 3CD9			angle_to_magnitude
  1668 3CD9 BD 00 4C		            lda magnitudes_lo,x
  1669 3CDC 85 B8		            sta magnitude
  1670 3CDE BD 00 4D		            lda magnitudes_hi,x
  1671 3CE1 85 B9		            sta magnitude+1
  1672 3CE3 60			            rts
  1673
  1674 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1675 3CE4			calc_abs_tmp_dx
  1676 3CE4 A5 E8		            lda tmp_x2
  1677 3CE6 38			            sec
  1678 3CE7 E5 E6		            sbc tmp_x1
  1679 3CE9 B0 05		            bcs x2_le
  1680 3CEB 49 FF		            eor #255
  1681 3CED 18			            clc
  1682 3CEE 69 01		            adc #1
  1683 3CF0 85 F2		x2_le       sta tmp_dx
  1684
  1685 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1686 3CF2			calc_abs_tmp_dy
  1687 3CF2 A5 E9		            lda tmp_y2
  1688 3CF4 38			            sec
  1689 3CF5 E5 E7		            sbc tmp_y1
  1690 3CF7 B0 05		            bcs y2_le
  1691 3CF9 49 FF		            eor #255
  1692 3CFB 18			            clc
  1693 3CFC 69 01		            adc #1
  1694 3CFE 85 F3		y2_le       sta tmp_dy
  1695 3D00 60			            rts
  1696 				            
  1697 3D01			calc_dx_div_magnitude
  1698 3D01 A9 00		            lda #0
  1699 3D03 85 E2		            sta _dividend
  1700 3D05 A5 F2		            lda tmp_dx
  1701 3D07 85 E3		            sta _dividend+1
  1702
  1703 3D09 A5 B9		            lda magnitude+1
  1704 3D0B 85 E0		            sta _divisor
  1705 3D0D A9 00		            lda #0
  1706 3D0F 85 E1		            sta _divisor+1
  1707 				            
  1708 3D11 20 39 3D		            jsr _div16
  1709
  1710 				; todo multiply result with velocity            
  1711 3D14 A5 E2		            lda _result
  1712 3D16 85 EE		            sta step_x
  1713 3D18 A5 E3		            lda _result+1
  1714 3D1A 85 EF		            sta step_x+1
  1715 				            
  1716 3D1C 60			            rts
  1717 				            
  1718 3D1D			calc_dy_div_magnitude
  1719 3D1D A9 00		            lda #0
  1720 3D1F 85 E2		            sta _dividend
  1721 3D21 A5 F3		            lda tmp_dy
  1722 3D23 85 E3		            sta _dividend+1
  1723 				            
  1724 3D25 A5 B9		            lda magnitude+1
  1725 3D27 85 E0		            sta _divisor
  1726 3D29 A9 00		            lda #0
  1727 3D2B 85 E1		            sta _divisor+1
  1728
  1729 3D2D 20 39 3D		            jsr _div16
  1730 				            
  1731 				; todo multiply result with velocity
  1732 3D30 A5 E2		            lda _result
  1733 3D32 85 F0		            sta step_y
  1734 3D34 A5 E3		            lda _result+1
  1735 3D36 85 F1		            sta step_y+1
  1736 				            
  1737 3D38 60			            rts
  1738
  1739 				; divide 16bit
  1740 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1741
  1742 				; _result = _dividend / divisor
  1743
  1744 3D39 A9 00		_div16      lda #0          ;preset remainder to 0
  1745 3D3B 85 E4		            sta _remainder
  1746 3D3D 85 E5		            sta _remainder+1
  1747 3D3F A2 10		            ldx #16         ;repeat for each bit: ...
  1748
  1749 3D41 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1750 3D43 26 E3		            rol _dividend+1  
  1751 3D45 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1752 3D47 26 E5		            rol _remainder+1
  1753 3D49 A5 E4		            lda _remainder
  1754 3D4B 38			            sec
  1755 3D4C E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1756 3D4E A8			            tay         ;lb result -> Y, for we may need it later
  1757 3D4F A5 E5		            lda _remainder+1
  1758 3D51 E5 E1		            sbc _divisor+1
  1759 3D53 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1760
  1761 3D55 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1762 3D57 84 E4		            sty _remainder   
  1763 3D59 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1764
  1765 3D5B CA			_div_skip   dex
  1766 3D5C D0 E3		            bne _div_loop 
  1767 3D5E 60			            rts
  1768
  1769 				; Calculations for step size
  1770
  1771 				; not optimised for speed or size
  1772 				; step should be set according to the angle
  1773
  1774 				; move in straight line (x1,y1) to (x2,y2)
  1775
  1776 				; 1. set start/end of line
  1777 				; set (tmp_x1, tmp_y1)
  1778 				; set (tmp_x2, tmp_y2)
  1779
  1780 				; 2. init. current_x, current_y
  1781 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1782 				; - calculates step sizes for x,y
  1783 				; - calculated directions for x,y
  1784 				;            jsr init_current_xy
  1785
  1786 				; 3. use current_x, current_y to plot or set a position
  1787 				;            lda current_x+1
  1788 				;            sta x_position
  1789 				;            lda current_y+1
  1790 				;            sta y_position
  1791 				;            jsr plot_pixel
  1792
  1793 				; 4. move current_x, current_y to next position on line
  1794 				; A=0 still moving
  1795 				;           move_current_xy
  1796
  1797 3D5F			init_current_xy
  1798 3D5F A9 7F		            lda #$7f      ; was 128 for half pixel
  1799 3D61 85 EA		            sta current_x
  1800 3D63 85 EC		            sta current_y
  1801
  1802 3D65 A5 E6		            lda tmp_x1
  1803 3D67 85 EB		            sta current_x+1
  1804 				            
  1805 3D69 A5 E7		            lda tmp_y1
  1806 3D6B 85 ED		            sta current_y+1
  1807
  1808 				; dx = abs(tmp_x1 - tmp_x2)
  1809 3D6D 20 E4 3C		            jsr calc_abs_tmp_dx
  1810
  1811 				; dy = abs(tmp_y1 - tmp_y2)
  1812 3D70 20 F2 3C		            jsr calc_abs_tmp_dy
  1813
  1814 				; set directions
  1815 3D73 A5 E6		            lda tmp_x1
  1816 3D75 C5 E8		            cmp tmp_x2
  1817 3D77 90 04		            bcc x1_smaller_x2
  1818 				; x1 >= x2
  1819 3D79 A9 01		            lda #1
  1820 3D7B D0 02		            bne set_dir_x
  1821 3D7D			x1_smaller_x2
  1822 3D7D A9 00		            lda #0
  1823 3D7F			set_dir_x
  1824 3D7F 85 FA		            sta dir_x
  1825 				            
  1826 3D81 A5 E7		            lda tmp_y1
  1827 3D83 C5 E9		            cmp tmp_y2
  1828 3D85 90 04		            bcc y1_smaller_y2
  1829 				; y1 >= y2
  1830 3D87 A9 01		            lda #1
  1831 3D89 D0 02		            bne set_dir_y
  1832 3D8B			y1_smaller_y2
  1833 3D8B A9 00		            lda #0
  1834 3D8D			set_dir_y
  1835 3D8D 85 FB		            sta dir_y
  1836
  1837 				; Calculate diff between start angle and end angle
  1838
  1839 3D8F A5 AA		            lda ball_angle_start
  1840 3D91 85 B0		            sta tmp_angle1
  1841 3D93 A5 AB		            lda ball_angle_end
  1842 3D95 85 B1		            sta tmp_angle2
  1843 				            
  1844 3D97 20 9B 3C		            jsr calc_angle_diff
  1845
  1846 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1847 3D9A A6 B7		            ldx tmp_angle_diff
  1848 3D9C 20 D9 3C		            jsr angle_to_magnitude
  1849 				            
  1850 3D9F 20 01 3D		            jsr calc_dx_div_magnitude
  1851 3DA2 20 1D 3D		            jsr calc_dy_div_magnitude
  1852 				            
  1853 				; Calculate step size by ball speed
  1854 				            
  1855 				; step_x = step_x * speed
  1856 				            
  1857 3DA5 A5 EE		            lda step_x
  1858 3DA7 85 F6		            sta _multiplicand
  1859 				            ;lda step_x+1
  1860 3DA9 A9 00		            lda #0
  1861 3DAB 85 F7		            sta _multiplicand+1
  1862 3DAD A5 AC		            lda ball_speed
  1863 3DAF 85 F8		            sta _multiplier
  1864
  1865 3DB1 20 8E 35		            jsr _multi8
  1866 				;result in .A (low byte, also in .X) and .Y (high byte)
  1867 3DB4 85 EE		            sta step_x
  1868 3DB6 84 EF		            sty step_x+1
  1869 3DB8			skip_step_x_hi
  1870 				            
  1871 				; step_y = step_y * speed
  1872
  1873 3DB8 A5 F0		            lda step_y
  1874 3DBA 85 F6		            sta _multiplicand
  1875 				            ;lda step_y+1
  1876 3DBC A9 00		            lda #0
  1877 3DBE 85 F7		            sta _multiplicand+1
  1878 3DC0 A5 AC		            lda ball_speed
  1879 3DC2 85 F8		            sta _multiplier
  1880
  1881 3DC4 20 8E 35		            jsr _multi8
  1882 				;result in .A (low byte, also in .X) and .Y (high byte)
  1883 3DC7 85 F0		            sta step_y
  1884 3DC9 84 F1		            sty step_y+1
  1885 3DCB			skip_step_y_hi
  1886
  1887 3DCB 60			            rts
  1888
  1889 				; Move ball position 
  1890 				; Add one step, until end reached
  1891 				; Input:
  1892 				; - step size (step_x, step_y)
  1893 				; - current ball position (current_x, current_y)
  1894 				; - end position (tmp_x2, tmp_y2)
  1895 				; Output:
  1896 				; A (0 = still moving, 1 = end reached)
  1897 3DCC			move_current_xy
  1898 3DCC A9 00		            lda #0
  1899 3DCE 85 FC		            sta line_end_x
  1900 3DD0 85 FD		            sta line_end_y
  1901
  1902 				; sets line end indicators here
  1903 3DD2 20 EF 3D		            jsr move_current_x
  1904 3DD5 20 2F 3E		            jsr move_current_y
  1905
  1906 3DD8 A5 FC		            lda line_end_x
  1907 3DDA 25 FD		            and line_end_y
  1908 3DDC F0 10		            beq no_end_reached
  1909 				            
  1910 				; set current to (x2,y2)
  1911 3DDE A5 E8		            lda tmp_x2
  1912 3DE0 85 EB		            sta current_x+1
  1913 3DE2 A5 E9		            lda tmp_y2
  1914 3DE4 85 ED		            sta current_y+1
  1915 				            
  1916 3DE6 A9 00		            lda #0
  1917 3DE8 85 EA		            sta current_x
  1918 3DEA 85 EC		            sta current_y
  1919 				            
  1920 3DEC A9 01		            lda #1 ; end reached
  1921 				            
  1922 3DEE			no_end_reached  ; A = 0
  1923 3DEE 60			            rts
  1924
  1925 3DEF			move_current_x
  1926 3DEF A5 FA		            lda dir_x
  1927 3DF1 D0 18		            bne move_current_left
  1928
  1929 				; move right, add
  1930 3DF3 A5 EA		            lda current_x
  1931 3DF5 18			            clc
  1932 3DF6 65 EE		            adc step_x
  1933 3DF8 85 EA		            sta current_x
  1934 3DFA A5 EB		            lda current_x+1
  1935 3DFC 65 EF		            adc step_x+1
  1936 3DFE 85 EB		            sta current_x+1
  1937
  1938 3E00 A5 EB		            lda current_x+1
  1939 3E02 C5 E8		            cmp tmp_x2
  1940 3E04 90 04		            bcc no_line_end
  1941 3E06			exact_end_x
  1942 3E06 A9 01		            lda #1
  1943 3E08 85 FC		            sta line_end_x 
  1944 3E0A			no_line_end
  1945 3E0A 60			            rts
  1946 				            
  1947 3E0B			move_current_left
  1948 3E0B A5 EA		            lda current_x
  1949 3E0D 38			            sec
  1950 3E0E E5 EE		            sbc step_x
  1951 3E10 90 01		            bcc clear_skip
  1952 3E12 EA			            nop
  1953 3E13			clear_skip
  1954 3E13 85 EA		            sta current_x
  1955 3E15 A5 EB		            lda current_x+1
  1956 3E17 E5 EF		            sbc step_x+1
  1957 3E19 85 EB		            sta current_x+1
  1958 3E1B 90 0B		            bcc below_zero
  1959 				                        
  1960 3E1D A5 E8		            lda tmp_x2
  1961 3E1F C5 EB		            cmp current_x+1
  1962 3E21 90 E7		            bcc no_line_end
  1963 3E23 A9 01		            lda #1
  1964 3E25 85 FC		            sta line_end_x            
  1965 3E27 60			            rts
  1966 3E28			below_zero            
  1967 3E28 A9 01		            lda #1
  1968 3E2A 85 FC		            sta line_end_x
  1969 3E2C 85 FD		            sta line_end_y
  1970 3E2E 60			            rts
  1971 3E2F			move_current_y
  1972 3E2F A5 FB		            lda dir_y
  1973 3E31 D0 18		            bne move_current_up
  1974
  1975 				; move down, add
  1976 3E33 A5 EC		            lda current_y
  1977 3E35 18			            clc
  1978 3E36 65 F0		            adc step_y
  1979 3E38 85 EC		            sta current_y
  1980 3E3A A5 ED		            lda current_y+1
  1981 3E3C 65 F1		            adc step_y+1
  1982 3E3E 85 ED		            sta current_y+1
  1983 				            
  1984 3E40 A5 ED		            lda current_y+1
  1985 3E42 C5 E9		            cmp tmp_y2
  1986 3E44 90 C4		            bcc no_line_end
  1987 3E46			exact_end_y
  1988 3E46 A9 01		            lda #1
  1989 3E48 85 FD		            sta line_end_y
  1990 3E4A 60			            rts
  1991
  1992 3E4B			move_current_up
  1993 3E4B A5 EC		            lda current_y
  1994 3E4D 38			            sec
  1995 3E4E E5 F0		            sbc step_y
  1996 3E50 85 EC		            sta current_y
  1997 3E52 A5 ED		            lda current_y+1
  1998 3E54 E5 F1		            sbc step_y+1
  1999 3E56 90 D0		            bcc below_zero
  2000 3E58 85 ED		            sta current_y+1
  2001 				            
  2002 3E5A A5 E9		            lda tmp_y2
  2003 3E5C C5 ED		            cmp current_y+1
  2004 3E5E 90 AA		            bcc no_line_end
  2005 3E60 A9 01		            lda #1
  2006 3E62 85 FD		            sta line_end_y
  2007 3E64 60			            rts                            
  2008 				            
  2009 3E65			init_sprites
  2010 3E65 A2 00		            ldx #0
  2011 3E67 8A			            txa
  2012 3E68			set_p
  2013 3E68 9D 00 0E		            sta p0_area,x
  2014 3E6B 9D 80 0E		            sta p1_area,x
  2015 3E6E 9D 00 0F		            sta p2_area,x
  2016 3E71 9D 80 0F		            sta p3_area,x
  2017 3E74 E8			            inx
  2018 3E75 10 F1		            bpl set_p
  2019
  2020 3E77 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2021 3E79 8D 6F 02		            sta GPRIOR
  2022
  2023 3E7C A9 0C		            lda #>pm_area
  2024 3E7E 8D 07 D4		            sta PMBASE
  2025
  2026 3E81 A9 03		            lda #3          ; P/M both on
  2027 3E83 8D 1D D0		            sta GRACTL
  2028
  2029 3E86 A9 90		            lda #$90
  2030 3E88 8D 02 D0		            sta HPOSP2
  2031 3E8B A9 A0		            lda #$A0
  2032 3E8D 8D 03 D0		            sta HPOSP3  
  2033 3E90 60			            rts
  2034
  2035 3E91			init_colors
  2036 3E91 A9 5A		            lda #BASE_COLOR_P1+10
  2037 3E93 8D C2 02		            sta PCOLR2
  2038 3E96 A9 BA		            lda #BASE_COLOR_P2+10
  2039 3E98 8D C3 02		            sta PCOLR3
  2040 				            
  2041 3E9B A9 00		            lda #0
  2042 3E9D 8D C6 02		            sta COLOR2
  2043
  2044 3EA0 A9 0E		            lda #HEADER_FG_COLOR
  2045 3EA2 8D C5 02		            sta COLOR1
  2046
  2047 3EA5 A9 50		            lda #HEADER_P1_COLOR
  2048 3EA7 8D C0 02		            sta PCOLR0
  2049 3EAA A9 B0		            lda #HEADER_P2_COLOR
  2050 3EAC 8D C1 02		            sta PCOLR1
  2051
  2052 3EAF 60			            rts
  2053
  2054 3EB0			previous_consol
  2055 3EB0 00			            dta 0
  2056
  2057 3EB1			current_level_index
  2058 3EB1 00			            dta 0
  2059 = 0007			NR_OF_LEVELS = 7
  2060 = 0000			INIT_LEVEL_INDEX = 0
  2061 3EB2			level_speeds
  2062 3EB2 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2063 				;level_speeds_lo
  2064 				;            dta 128
  2065 3EB9			stick_slow_speed_tab
  2066 3EB9 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2067 3EC0			stick_fast_speed_tab
  2068 3EC0 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2069
  2070 				; X = level (0..NR_OF_LEVELS)
  2071 3EC7			set_level_ball_speed
  2072 3EC7 BD B9 3E		            lda stick_slow_speed_tab,x
  2073 3ECA 85 88		            sta stick_slow_speed
  2074 3ECC BD C0 3E		            lda stick_fast_speed_tab,x
  2075 3ECF 85 89		            sta stick_fast_speed
  2076
  2077 3ED1 BD B2 3E		            lda level_speeds,x
  2078 3ED4 85 AC		            sta ball_speed
  2079 3ED6 8A			            txa
  2080 3ED7 18			            clc
  2081 3ED8 69 01		            adc #1
  2082 3EDA 09 10		            ora #16
  2083 3EDC 8D AC 52		            sta level_char
  2084 3EDF 60			            rts
  2085 				            
  2086 3EE0			increase_level
  2087 3EE0 EE B1 3E		            inc current_level_index
  2088 3EE3 AD B1 3E		            lda current_level_index
  2089 3EE6 C9 07		            cmp #NR_OF_LEVELS
  2090 3EE8 D0 05		            bne ok_level
  2091 3EEA A9 00		            lda #INIT_LEVEL_INDEX
  2092 3EEC 8D B1 3E		            sta current_level_index
  2093 3EEF			ok_level           
  2094 3EEF 60			            rts
  2095
  2096 3EF0			increase_player_mode
  2097 3EF0 E6 8A		            inc player_mode
  2098 3EF2 A5 8A		            lda player_mode
  2099 3EF4 C9 03		            cmp #NR_OF_PLAYER_MODES
  2100 3EF6 D0 04		            bne ok_player_mode
  2101 3EF8 A9 00		            lda #INIT_PLAYER_MODE
  2102 3EFA 85 8A		            sta player_mode
  2103 3EFC			ok_player_mode
  2104 3EFC 60			            rts
  2105
  2106 3EFD			show_player_mode
  2107 3EFD A6 8A		            ldx player_mode
  2108 3EFF BD 40 53		            lda player_mode_lo,x
  2109 3F02 8D F9 50		            sta menu_line2_ptr
  2110 3F05 BD 43 53		            lda player_mode_hi,x
  2111 3F08 8D FA 50		            sta menu_line2_ptr+1
  2112 3F0B 60			            rts
  2113
  2114 3F0C			            .align $100
  2115 4000			inner_x_tab
  2116 = 4100			inner_y_tab = *+$100
  2117 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2118 				      
  2119 4200			            .align $400            
  2120 				; outer circle 1024 plot points on 360 degrees
  2121 4400			outer_x_tab
  2122 = 4800			outer_y_tab = *+1024
  2123 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2124 				           
  2125 4C00			            .align $400
  2126 				; table of magnitudes (length) between angle 0 and 0..255
  2127 				; fixed point 8.8 : hi.lo
  2128 4C00			magnitudes_lo
  2129 = 4D00			magnitudes_hi = *+256
  2130 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2131
  2132 4E00			            .align $400
  2133 5000			display_list
  2134 5000-512F> C2		            dta $42+128         ; dli_header
  2135 5001 06 51		            dta a(score_line)
  2136
  2137 				; 102 x 40 = 4080 bytes            
  2138 5003 4F			            dta $4f
  2139 5004 00 70		            dta a(screen_mem1)
  2140 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2141 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2142 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2143 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2144
  2145 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2146 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2147 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2148 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2149
  2150 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2151 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2152 5055			menu_dl_hook
  2153 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2154 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2155
  2156 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2157
  2158 				; 42 + 60 = 102, 4080 bytes
  2159 506B 4F			            dta $4f
  2160 506C 00 80		            dta a(screen_mem2)
  2161 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2162
  2163 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2164 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2165 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2166 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2167
  2168 5095 0F 0F		            dta $0f,$0f
  2169
  2170 				; 60 lines
  2171 5097			menu_dl_end
  2172 5097 4F			            dta $4f
  2173 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2174 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2175 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2176 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2177 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2178
  2179 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2180 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2181 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2182 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2183
  2184 				; 20 x 40 = 800
  2185 50D5 4F			            dta $4f
  2186 50D6 00 90		            dta a(screen_mem3)       
  2187 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2188 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2189 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2190 				            
  2191 50EB 41			            dta $41
  2192 50EC 00 50		            dta a(display_list)
  2193
  2194 50EE			menu_dl_part
  2195 50EE 80			            dta 128 ; dli_menu
  2196 50EF 20			            dta $20
  2197 50F0 42			            dta $42
  2198 50F1 00 52		            dta a(rotor_logo_text)
  2199 50F3 02			            dta 2
  2200 50F4 30			            dta $30
  2201 50F5 46			            dta $46
  2202 50F6			menu_line1_ptr
  2203 50F6 50 52		            dta a(controller_text)
  2204 50F8 46			            dta $46
  2205 50F9			menu_line2_ptr
  2206 50F9 64 52		            dta a(two_player_text)
  2207 50FB 46			            dta $46
  2208 50FC			menu_line3_ptr
  2209 50FC A0 52		            dta a(level_text)
  2210 50FE 30			            dta $30
  2211 50FF 42			            dta $42
  2212 5100 B4 52		            dta a(start_text)
  2213 5102 10			            dta $10
  2214 5103 01			            dta $01 ; jump
  2215 5104 97 50		            dta a(menu_dl_end)
  2216
  2217 5106			score_line  
  2218 5106 00 2F 2E 25 00	            dta d' ONE '
  2219 510B			score_chars_p1
  2220 510B 0D 0D 00		            dta d'-- '
  2221
  2222 510E 00 00 00 00 00 00 +             dta d'          '
  2223 5118 00 00 00 00 00 00 +             dta d'          '
  2224
  2225 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2226 512B			score_chars_p2
  2227 512B 0D 0D 00		            dta d'-- '
  2228
  2229 512E 00			score_p1    dta 0
  2230 512F 00			score_p2    dta 0
  2231
  2232 5130			            .align $100
  2233 5200			rotor_logo_text
  2234 5200-5345> 00 00 00 00 +             dta d'              '
  2235 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2236 521A 40			            dta $40
  2237 521B 00 00 00 00 00 00 +             dta d'             '
  2238 5228 00 00 00 00 00 00 +             dta d'              '
  2239 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2240 5242 00 00 00 00 00 00 +             dta d'              '
  2241
  2242 5250			controller_text
  2243 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2244 525A			driver_screen
  2245 525A 00 00 00 00 00 00 +             dta d'          '
  2246
  2247 5264			two_player_text
  2248 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2249
  2250 5278			one_player_text
  2251 5278 00 00 00 00 28 35 +             dta d'    HUMAN VS CPU    '
  2252
  2253 528C			demo_player_text
  2254 528C 00 00 00 00 00 23 +             dta d'     CPU VS CPU     '
  2255
  2256 52A0			level_text
  2257 52A0 00 00 00 00 00 00 +             dta d'      LEVEL '
  2258 52AC			level_char            
  2259 52AC 11 00 00 00 00 00 +             dta d'1       '
  2260
  2261 52B4			start_text
  2262 52B4 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2263 52DC			stick_text
  2264 52DC 33 34 29 23 2B 00 +             dta d'STICK   '
  2265 52E4			paddle_text
  2266 52E4 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2267 52EC			driving_text
  2268 52EC 24 32 29 36 29 2E +             dta d'DRIVING '
  2269 52F4			computer_text
  2270 52F4 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2271
  2272 52FC			empty_text
  2273 52FC 00 00 00 00 00 00 +             dta d'                    '
  2274 5310			winner_one_text
  2275 5310 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2276 5324			winner_two_text
  2277 5324 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2278
  2279 5338			driver_text_lo
  2280 5338 DC			            dta <stick_text
  2281 5339 E4			            dta <paddle_text
  2282 533A EC			            dta <driving_text
  2283 533B F4			            dta <computer_text
  2284 				            
  2285 533C			driver_text_hi
  2286 533C 52			            dta >stick_text
  2287 533D 52			            dta >paddle_text
  2288 533E 52			            dta >driving_text
  2289 533F 52			            dta >computer_text
  2290
  2291 5340			player_mode_lo
  2292 5340 64			            dta <two_player_text
  2293 5341 78			            dta <one_player_text
  2294 5342 8C			            dta <demo_player_text
  2295
  2296 5343			player_mode_hi
  2297 5343 52			            dta >two_player_text
  2298 5344 52			            dta >one_player_text
  2299 5345 52			            dta >demo_player_text
  2300
  2301 				; 4 KB
  2302 				; 128 x 32 bytes shapes
  2303 5346			            .align $1000
  2304 6000			pm_shapes
  2305 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2306
  2307 				; 9 KB for backdrop image
  2308 7000			            .align $1000
  2309 = 7000			screen_mem1 = * ; 4K
  2310 				;            org screen_mem1
  2311 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2312
  2313 7FF0			            .align $1000
  2314 = 8000			screen_mem2 = * ; 4K
  2315 				;            org screen_mem2
  2316 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2317
  2318 8FF0			            .align $1000
  2319 = 9000			screen_mem3 = * ; 1K
  2320 				;            org screen_mem3
  2321 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2322
  2323 02E0-02E1> 08 35		            run main
