mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-03
     4 				; Version 2.4.2
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for driving controllers
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				; TODO
    19 				; - new score system; ball hit = point?
    20
    21 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D300			PORTA       = $d300
   104
   105 = D407			PMBASE      = $d407
   106 = D40A			WSYNC       = $d40a
   107 = D40E			NMIEN       = $d40e
    22
    23 				; color scheme
    24 = 0050			BASE_COLOR_P1   = $50   ; purple
    25 = 00B0			BASE_COLOR_P2   = $b0   ; green
    26
    27 = 000E			HEADER_FG_COLOR = 14
    28 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    29 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    30
    31 				; must be in decimal format, so $11 is 11
    32 = 0011			MAX_SCORE   = $11
    33
    34 = 0C00			pm_area     = $0c00
    35 = 0D80			msl_area    = pm_area+$180
    36 = 0E00			p0_area     = pm_area+$200
    37 = 0E80			p1_area     = pm_area+$280
    38 = 0F00			p2_area     = pm_area+$300
    39 = 0F80			p3_area     = pm_area+$380
    40
    41 				; outer tables 256 for 360 degrees
    42 = 1000			outer_x_256     = $1000
    43 = 1100			outer_y_256     = $1100
    44
    45 = 1200			screen_y_lo     = $1200
    46 = 1300			screen_y_hi     = $1300
    47
    48 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    49 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    50
    51 = 0140			WIDTH           = 320
    52 = 00C0			HEIGHT          = 192
    53
    54 = 0028			SCREEN_WIDTH    = 40
    55
    56 = 0030			outer_x_margin  = 48 ;47-32
    57 = 0040			inner_x_margin  = 64
    58
    59 = 00A0			circle_center_x = WIDTH/2
    60 = 0060			circle_center_y = HEIGHT/2
    61
    62 = 0006			ball_top_margin     = 6
    63 = 0045			ball_left_margin    = 64+5
    64
    65 				; pm upper margin
    66 = 0001			upper_margin    = 1
    67 = 0020			left_margin     = 32
    68
    69 = 0080			music_toggle    = $80
    70
    71 = 0081			shadow_HPOSP0   = $81
    72 = 0082			shadow_HPOSP1   = $82
    73
    74 = 0083			winner_color    = $83
    75
    76 = 0084			shape_ptr       = $84
    77 = 0086			tmp_screen      = $86
    78
    79 = 0088			stick_slow_speed = $88
    80 = 0089			stick_fast_speed = $89
    81
    82 = 008A			player_mode     = $8a
    83 = 0000			MODE_2_PLAYER   = 0
    84 = 0001			MODE_1_PLAYER   = 1
    85 = 0002			MODE_DEMO       = 2
    86 = 0003			NR_OF_PLAYER_MODES = 3
    87 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    88
    89 = 008C			game_state      = $8c
    90 = 0000			STATE_IN_GAME   = 0
    91 = 0001			STATE_IN_MENU   = 1
    92 = 0002			STATE_IN_END    = 2
    93
    94 = 008D			volume_hit_bat  = $8d
    95 = 008E			volume_hit_edge = $8e
    96
    97 = 008F			end_screen_delay = $8f
    98
    99 				; player vars must be in sequence for zp,x indexing
   100
   101 = 0090			p1_shape        = $90
   102 = 0091			p2_shape        = $91
   103
   104 = 0094			player1_x       = $94
   105 = 0095			player2_x       = $95
   106
   107 = 0098			player1_y       = $98
   108 = 0099			player2_y       = $99
   109
   110 = 009C			p1_angle        = $9c
   111 = 009D			p2_angle        = $9d
   112
   113 = 00A0			mp_collision    = $a0
   114 = 00A1			in_collision    = $a1
   115 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   116 = 00A3			edge_delay      = $a3
   117 = 00A4			bat_collision_delay = $a4
   118
   119 				; ball vars
   120 = 00A6			ball_current_x      = $a6
   121 = 00A7			ball_current_y      = $a7
   122 = 00AA			ball_angle_start    = $aa
   123 = 00AB			ball_angle_end      = $ab
   124 = 00AC			ball_speed          = $ac
   125
   126 = 00AD			edge_collision      = $ad
   127 = 00AE			edge_hit_count      = $ae
   128
   129 = 00B0			tmp_angle1          = $b0
   130 = 00B1			tmp_angle2          = $b1
   131 = 00B2			add_to_angle        = $b2
   132 = 00B3			angle_diff_bat      = $b3
   133 = 00B4			tmp_angle_direction = $b4
   134 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   135 = 00B6			game_restart        = $b6
   136 = 00B7			tmp_angle_diff      = $b7
   137 = 00B8			magnitude           = $b8       ; word
   138
   139 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   140 = 00BA			cpu1_angle_end      = cpu_angle_end
   141 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   142
   143 				; $c0 - $df free for music
   144
   145 = 00E0			_divisor    = $e0   ; word
   146 = 00E2			_dividend   = $e2   ; word
   147 = 00E4			_remainder  = $e4   ; word
   148 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   149
   150 = 00E6			tmp_x1      = $e6   ; byte
   151 = 00E7			tmp_y1      = $e7   ; byte
   152 = 00E8			tmp_x2      = $e8   ; byte
   153 = 00E9			tmp_y2      = $e9   ; byte
   154
   155 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   156 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   157
   158 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   159 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   160
   161 = 00F2			tmp_dx      = $f2  ; byte
   162 = 00F3			tmp_dy      = $f3  ; byte
   163
   164 = 00F6			_multiplicand   = $f6   ; word
   165 = 00F8			_multiplier     = $f8   ; byte
   166
   167 				; direction:
   168 				; 0 : x1<x2 or y1<y2 = add
   169 				; 1 ; x1>=y2 or y1>=y2 = subtract
   170
   171 = 00FA			dir_x       = $fa  ; byte
   172 = 00FB			dir_y       = $fb  ; byte
   173
   174 = 00FC			line_end_x  = $fc  ; byte
   175 = 00FD			line_end_y  = $fd  ; byte
   176
   177 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   178
   179 				; real data is loaded at $2000 ($1700+$900)
   180 BE10			            org $1700
   181 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   182
   183 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous driving controller value (player 1,2)
    19 3401			prev_driving_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-3FA2> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_driving_value
    27 340B 8D 02 34		            sta prev_driving_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 				; stick detect by using left/right
    61 				; paddle by connecting/rotate
    62 				; driving controller by rotate
    63
    64 				; return A = driver mode
    65 				; 0 = stick detected
    66 				; 1 = paddle detected
    67 				; 2 = driving detected
    68
    69 3443			driver_detect
    70 3443 AD 70 02		            lda PADDL0
    71 3446 C9 E4		            cmp #228
    72 3448 D0 07		            bne paddle_detect
    73 344A AD 71 02		            lda PADDL1
    74 344D C9 E4		            cmp #228
    75 344F F0 06		            beq no_paddle_detect
    76 3451			paddle_detect
    77 3451 A9 01		            lda #1
    78 3453 8D BE 32		            sta driver_mode
    79 3456 60			            rts
    80
    81 3457			no_paddle_detect
    82 3457 AD 78 02		            lda STICK0
    83 345A C9 0C		            cmp #12
    84 345C D0 06		            bne no_driving_detect
    85 345E A9 02		            lda #2
    86 3460 8D BE 32		            sta driver_mode
    87 3463 60			            rts
    88
    89 3464			no_driving_detect
    90 3464 C9 07		            cmp #7      ; paddle button also gives this
    91 3466 F0 04		            beq stick_detect    
    92 3468 C9 0B		            cmp #11     ; paddle button also gives this
    93 346A D0 06		            bne no_stick_detect
    94 346C			stick_detect
    95 346C A9 00		            lda #0
    96 346E 8D BE 32		            sta driver_mode
    97 3471 60			            rts
    98
    99 3472			no_stick_detect
   100 				; default is the last value
   101 3472 AD BE 32		            lda driver_mode
   102 3475 60			            rts
   103
   104 				; move player 1/2
   105 				; right - clockwise, left = anti-clockwise
   106
   107 				; X = 0, player 1
   108 				; X = 1, player 2
   109
   110 				; A = driver mode:
   111 				; 0 : stick
   112 				; 1 : paddle
   113 				; 2 : driving
   114 				; 3 : computer
   115
   116 3476			main_driver
   117 3476 AC BE 32		            ldy driver_mode
   118 3479 B9 88 34		            lda driver_lo,y
   119 347C 8D 86 34		            sta driver_ptr
   120 347F B9 8C 34		            lda driver_hi,y
   121 3482 8D 87 34		            sta driver_ptr+1
   122
   123 = 3486			driver_ptr = *+1
   124 3485 4C FF FF		            jmp $ffff  
   125
   126 3488			driver_lo
   127 3488 90			            dta <driver_stick
   128 3489 FE			            dta <driver_paddle
   129 348A 0B			            dta <driver_driving
   130 348B 90			            dta <driver_stick
   131
   132 348C			driver_hi
   133 348C 34			            dta >driver_stick
   134 348D 34			            dta >driver_paddle
   135 348E 35			            dta >driver_driving
   136 348F 34			            dta >driver_stick
   137
   138 				; joystick driver
   139
   140 3490			driver_stick
   141 3490 BD 78 02		            lda STICK0,x
   142 3493 C9 0F		            cmp #15
   143 3495 F0 31		            beq move_done
   144 3497 C9 0B		            cmp #11
   145 3499 D0 16		            bne no_left
   146
   147 349B B5 9C		            lda p1_angle,x
   148 349D 38			            sec
   149 349E E5 88		            sbc stick_slow_speed
   150 34A0 95 9C		            sta p1_angle,x
   151
   152 34A2 BD 84 02		            lda STRIG0,x
   153 34A5 D0 07		            bne no_fast
   154
   155 34A7 B5 9C		            lda p1_angle,x
   156 34A9 38			            sec
   157 34AA E5 89		            sbc stick_fast_speed
   158 34AC 95 9C		            sta p1_angle,x
   159 34AE			no_fast
   160 				            
   161 34AE 4C C8 34		            jmp move_done
   162 34B1 C9 07		no_left     cmp #7
   163 34B3 D0 13		            bne move_done
   164
   165 34B5 B5 9C		            lda p1_angle,x
   166 34B7 18			            clc
   167 34B8 65 88		            adc stick_slow_speed
   168 34BA 95 9C		            sta p1_angle,x
   169
   170 34BC BD 84 02		            lda STRIG0,x
   171 34BF D0 07		            bne no_fast_right
   172
   173 34C1 B5 9C		            lda p1_angle,x
   174 34C3 18			            clc
   175 34C4 65 89		            adc stick_fast_speed
   176 34C6 95 9C		            sta p1_angle,x
   177 34C8			no_fast_right
   178 34C8			move_done
   179 34C8 60			            rts
   180
   181 				; check if player1 button is pressed
   182 				; A=0 not pressed, 1=pressed
   183
   184 34C9			is_player1_button_pressed
   185 34C9 AD BE 32		            lda driver_mode
   186 34CC C9 01		            cmp #1
   187 34CE F0 07		            beq check_player1_paddle_fire
   188
   189 34D0 AD 84 02		            lda STRIG0
   190 34D3 F0 1C		            beq fire_pressed
   191 34D5 D0 24		            bne fire_not_pressed
   192
   193 34D7			check_player1_paddle_fire
   194 34D7 AD 78 02		            lda STICK0
   195 34DA C9 0B		            cmp #11
   196 34DC F0 13		            beq fire_pressed
   197 34DE D0 1B		            bne fire_not_pressed
   198
   199 				; X=port number to check (paddle uses only port 1)
   200 				; check fire button (paddle uses left/right stick as fire button)
   201 				; A=0 not pressed, 1=pressed
   202
   203 34E0			is_both_buttons
   204 34E0 AD BE 32		            lda driver_mode
   205 34E3 C9 01		            cmp #1
   206 34E5 F0 0D		            beq check_paddle_fire
   207
   208 34E7 AD 84 02		            lda STRIG0
   209 34EA D0 0F		            bne fire_not_pressed
   210 34EC AD 85 02		            lda STRIG1
   211 34EF D0 0A		            bne fire_not_pressed
   212
   213 34F1			fire_pressed
   214 34F1 A9 01		            lda #1
   215 34F3 60			            rts
   216
   217 34F4			check_paddle_fire
   218 34F4 AD 78 02		            lda STICK0
   219 34F7 C9 03		            cmp #3
   220 34F9 F0 F6		            beq fire_pressed
   221
   222 34FB			fire_not_pressed
   223 34FB A9 00		            lda #0
   224 34FD 60			            rts
   225
   226 				; paddle driver
   227 				            
   228 34FE			driver_paddle            
   229 34FE BD 70 02		            lda PADDL0,x
   230 3501 A8			            tay
   231 3502 B9 00 33		            lda paddle_to_256,y
   232 3505 5D 42 35		            eor paddle_offsets,x
   233 3508 95 9C		            sta p1_angle,x
   234 350A 60			            rts
   235
   236 				; driving controller driver
   237
   238 350B			driver_driving
   239 350B 60			            rts
   240 				;            lda STICK0,x
   241 				;            eor #15
   242 				;            jmp driver_driving_main
   243
   244 350C			driver_driving_fast_p1
   245 350C AD 00 D3		            lda PORTA
   246 350F A2 00		            ldx #0
   247 3511 4C 1D 35		            jmp driver_driving_main
   248
   249 3514			driver_driving_fast_p2
   250 3514 AD 00 D3		            lda PORTA
   251 3517 4A			            lsr
   252 3518 4A			            lsr
   253 3519 4A			            lsr
   254 351A 4A			            lsr
   255 351B A2 01		            ldx #1
   256 				; have to call this many times per frame for each player
   257 351D			driver_driving_main
   258 351D 29 03		            and #%00000011
   259 351F 48			            pha
   260 3520 1D 01 34		            ora prev_driving_value,x
   261 3523 A8			            tay
   262 3524 68			            pla
   263 3525 0A			            asl
   264 3526 0A			            asl
   265 3527 9D 01 34		            sta prev_driving_value,x  ; store previous bits at 0000AA00 position for next time
   266
   267 352A B9 32 35		            lda driving_transitions,y
   268 352D 75 9C		            adc p1_angle,x
   269 352F 95 9C		            sta p1_angle,x
   270 3531 60			            rts
   271
   272 				; nibble coded transitions for driving controller
   273 				; 15,13,12,14 = anti-clockwise
   274 				; 15,14,12,13 = clockwise
   275 				; only lowest 2 bits change, so we need 16 values for all transitions
   276
   277 				; index is the combined value of nibble AABB
   278 				; where AA is previous bits and BB current bits
   279 3532			driving_transitions
   280 3532 00			            dta 0   ; 00 -> 00 (12 -> 12)
   281 3533 01			            dta 1   ; 00 -> 01 (12 -> 13)
   282 3534 FF			            dta 255 ; 00 -> 10 (12 -> 14)
   283 3535 00			            dta 0   ; 00 -> 11 (12 -> 15)
   284 3536 FF			            dta 255 ; 01 -> 00 (13 -> 12)
   285 3537 00			            dta 0   ; 01 -> 01 (13 -> 13)
   286 3538 00			            dta 0   ; 01 -> 10 (13 -> 14)
   287 3539 01			            dta 1   ; 01 -> 11 (13 -> 15)
   288 353A 01			            dta 1   ; 10 -> 00 (14 -> 12)
   289 353B 00			            dta 0   ; 10 -> 01 (14 -> 13)
   290 353C 00			            dta 0   ; 10 -> 10 (14 -> 14)
   291 353D FF			            dta 255 ; 10 -> 11 (14 -> 15)
   292 353E 00			            dta 0   ; 11 -> 00 (15 -> 12)
   293 353F FF			            dta 255 ; 11 -> 01 (15 -> 13)
   294 3540 01			            dta 1   ; 11 -> 10 (15 -> 14)
   295 3541 00			            dta 0   ; 11 -> 11 (15 -> 15)
   296
   297 				;            dta 0   ; 00 -> 00 (12 -> 12)
   298 				;            dta 3   ; 00 -> 01 (12 -> 13)
   299 				;            dta 253 ; 00 -> 10 (12 -> 14)
   300 				;            dta 0   ; 00 -> 11 (12 -> 15)
   301 				;            dta 251 ; 01 -> 00 (13 -> 12)
   302 				;            dta 0   ; 01 -> 01 (13 -> 13)
   303 				;            dta 0   ; 01 -> 10 (13 -> 14)
   304 				;            dta 5   ; 01 -> 11 (13 -> 15)
   305 				;            dta 5   ; 10 -> 00 (14 -> 12)
   306 				;            dta 0   ; 10 -> 01 (14 -> 13)
   307 				;            dta 0   ; 10 -> 10 (14 -> 14)
   308 				;            dta 251 ; 10 -> 11 (14 -> 15)
   309 				;            dta 0   ; 11 -> 00 (15 -> 12)
   310 				;            dta 253 ; 11 -> 01 (15 -> 13)
   311 				;            dta 3   ; 11 -> 10 (15 -> 14)
   312 				;            dta 0   ; 11 -> 11 (15 -> 15)
   313
   314 3542			paddle_offsets
   315 3542 00 00		            dta 0,0
   184
   185 3544			reset_pressed
   186 3544 20 00 9C		            jsr intro_main
   187
   188 3547			main
   189 3547 A9 FF		            lda #255
   190 3549 8D FC 02		            sta 764
   191
   192 				; for fast loaders, wait 10 seconds or continue with spacebar
   193 354C			wait_a_sec
   194 354C AD FC 02		            lda 764
   195 354F C9 FF		            cmp #255
   196 3551 D0 06		            bne any_key_pressed
   197
   198 3553 A5 13		            lda 19
   199 3555 C9 02		            cmp #2
   200 3557 90 F3		            bcc wait_a_sec
   201
   202 3559			any_key_pressed
   203 3559 A9 FF		            lda #255
   204 355B 8D FC 02		            sta 764
   205
   206 				; start the game!
   207 				 
   208 355E A9 00		            lda #0
   209 3560 8D 2F 02		            sta SDMCTL
   210 3563 85 B6		            sta game_restart
   211 3565 85 8F		            sta end_screen_delay
   212 3567 85 83		            sta winner_color
   213
   214 3569 A9 80		            lda #128
   215 356B 85 8D		            sta volume_hit_bat
   216 356D 85 8E		            sta volume_hit_edge
   217 356F 85 80		            sta music_toggle        ; 128 = on, 0 = off
   218
   219 3571 A9 01		            lda #1
   220 3573 8D 44 02		            sta 580 ; coldstart
   221
   222 				;            lda #1
   223 				;            sta 9   ; boot
   224
   225 				;            lda #<reset_pressed
   226 				;            sta $0a
   227 				;            lda #>reset_pressed
   228 				;            sta $0b
   229
   230 3576 20 03 34		            jsr driver_init
   231
   232 3579 20 71 3C		            jsr make_shape_index
   233
   234 357C 20 A1 3C		            jsr make_outer_256
   235
   236 357F 20 BD 36		            jsr make_screen_y_tab
   237
   238 3582 20 08 37		            jsr invert_backdrop
   239 3585 A9 60		            lda #$60
   240 3587 8D 08 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   241
   242 358A 20 11 3D		            jsr reset_score
   243 358D 20 DF 3C		            jsr show_score_p1
   244 3590 20 F8 3C		            jsr show_score_p2
   245
   246 3593 20 FC 3E		            jsr init_sprites
   247 3596 20 28 3F		            jsr init_colors
   248
   249 				; init. game vars
   250 3599 A2 00		            ldx #INIT_LEVEL_INDEX
   251 359B 8E 48 3F		            stx current_level_index
   252 359E 20 5E 3F		            jsr set_level_ball_speed
   253
   254 35A1 A9 00		            lda #INIT_PLAYER_MODE
   255 35A3 85 8A		            sta player_mode
   256 35A5 20 94 3F		            jsr show_player_mode
   257
   258 35A8 A9 01		            lda #STATE_IN_MENU
   259 35AA 85 8C		            sta game_state           ; start with menu
   260
   261 35AC 20 6E 31		            jsr music_init
   262
   263 35AF 20 4D 37		            jsr show_menu_options
   264
   265 35B2 20 56 38		            jsr reset_autostart_demo
   266
   267 35B5 A9 00		            lda #<display_list
   268 35B7 8D 30 02		            sta SDLSTL
   269 35BA A9 50		            lda #>display_list
   270 35BC 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 35BF A9 C0		            lda #$c0
   275 35C1 8D 0E D4		            sta NMIEN
   276
   277 35C4 A9 07		            lda #7          ; sets VVBLKI
   278 35C6 A0 9F		            ldy #<vbi
   279 35C8 A2 37		            ldx #>vbi
   280 35CA 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 35CD			wait_driving_controller
   283
   284 35CD AD BE 32		            lda driver_mode
   285 35D0 C9 02		            cmp #2
   286 35D2 D0 F9		            bne wait_driving_controller
   287
   288 35D4 20 0C 35		            jsr driver_driving_fast_p1
   289 35D7 20 14 35		            jsr driver_driving_fast_p2
   290
   291 35DA 4C CD 35		            jmp wait_driving_controller
   292
   293 				;------------------------
   294 				; 8bit * 8bit = 16bit multiply
   295 				; By White Flame
   296 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   297 				; uses extra zp var _multiplicand+1
   298
   299 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   300 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   301
   302 				; In this version, both inputs must be unsigned
   303 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   304
   305 35DD			_multi8
   306 35DD A9 00		            lda #$00
   307 35DF A8			            tay
   308 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   309 35E0 F0 0D		            beq _enter_loop
   310 35E2			_do_add
   311 35E2 18			            clc
   312 35E3 65 F6		            adc _multiplicand
   313 35E5 AA			            tax
   314
   315 35E6 98			            tya
   316 35E7 65 F7		            adc _multiplicand+1
   317 35E9 A8			            tay
   318 35EA 8A			            txa
   319 35EB			_mul_loop
   320 35EB 06 F6		            asl _multiplicand
   321 35ED 26 F7		            rol _multiplicand+1
   322 35EF			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   323 35EF 46 F8		            lsr _multiplier
   324 35F1 B0 EF		            bcs _do_add
   325 35F3 D0 F6		            bne _mul_loop
   326 35F5 60			            rts
   327
   328 				; reset PM0/1 to playfield settings
   329 35F6			dli_header
   330 35F6 48			            pha
   331
   332 35F7 A9 08		            lda #8
   333 35F9 8D 17 D0		            sta COLPF1
   334
   335 35FC A5 81		            lda shadow_HPOSP0
   336 35FE 8D 00 D0		            sta HPOSP0
   337 3601 A5 82		            lda shadow_HPOSP1
   338 3603 8D 01 D0		            sta HPOSP1
   339
   340 3606 A9 00		            lda #0
   341 3608 8D 08 D0		            sta SIZEP0
   342 360B 8D 09 D0		            sta SIZEP1
   343
   344 360E A9 5A		            lda #BASE_COLOR_P1+10
   345 3610 8D 12 D0		            sta COLPM0
   346 3613 A9 BA		            lda #BASE_COLOR_P2+10
   347 3615 8D 13 D0		            sta COLPM1
   348
   349 3618 A9 24		            lda #<dli_menu
   350 361A 8D 00 02		            sta VDSLST
   351 361D A9 36		            lda #>dli_menu
   352 361F 8D 01 02		            sta VDSLST+1
   353
   354 3622 68			            pla
   355 3623 40			            rti
   356
   357 3624			dli_menu
   358 3624 48			            pha
   359 3625 8A			            txa
   360 3626 48			            pha
   361
   362 3627 A9 0E		            lda #$0e
   363 3629 8D 0A D4		            sta WSYNC
   364 362C 8D 1A D0		            sta COLBK
   365 362F A9 0A		            lda #$0a
   366 3631 8D 0A D4		            sta WSYNC
   367 3634 8D 1A D0		            sta COLBK
   368 3637 A9 00		            lda #0
   369 3639 8D 0A D4		            sta WSYNC
   370 363C 8D 1A D0		            sta COLBK
   371
   372 363F A2 00		            ldx #0
   373 3641			color_it1
   374 3641 BD 85 36		            lda menu_colpf2,x
   375 3644 8D 0A D4		            sta WSYNC
   376 3647 8D 18 D0		            sta COLPF2
   377 364A E8			            inx
   378 364B E0 12		            cpx #18
   379 364D D0 F2		            bne color_it1
   380
   381 364F A2 00		            ldx #0
   382 3651			color_it2
   383 3651 BD 97 36		            lda menu_colpf0,x
   384 3654 05 83		            ora winner_color
   385 3656 8D 0A D4		            sta WSYNC
   386 3659 8D 16 D0		            sta COLPF0
   387 365C E8			            inx
   388 365D E0 26		            cpx #38
   389 365F D0 F0		            bne color_it2
   390
   391 3661 A9 00		            lda #0
   392 3663 8D 0A D4		            sta WSYNC
   393 3666 8D 1A D0		            sta COLBK
   394 3669 A9 0A		            lda #$0a
   395 366B 8D 0A D4		            sta WSYNC
   396 366E 8D 1A D0		            sta COLBK
   397 3671 A9 0E		            lda #$0e
   398 3673 8D 0A D4		            sta WSYNC
   399 3676 8D 1A D0		            sta COLBK
   400 3679 A9 00		            lda #0
   401 367B 8D 0A D4		            sta WSYNC
   402 367E 8D 1A D0		            sta COLBK
   403 				            
   404 3681 68			            pla
   405 3682 AA			            tax
   406 3683 68			            pla
   407 3684 40			            rti
   408
   409 3685			menu_colpf2
   410 3685 50			            dta BASE_COLOR_P1
   411 3686 50			            dta BASE_COLOR_P1
   412 3687 50			            dta BASE_COLOR_P1
   413 3688 50			            dta BASE_COLOR_P1
   414 3689 50			            dta BASE_COLOR_P1
   415 368A 50			            dta BASE_COLOR_P1
   416 368B 50			            dta BASE_COLOR_P1
   417 368C 50			            dta BASE_COLOR_P1
   418
   419 368D B0			            dta BASE_COLOR_P2
   420 368E B0			            dta BASE_COLOR_P2
   421 368F B0			            dta BASE_COLOR_P2
   422 3690 B0			            dta BASE_COLOR_P2
   423 3691 B0			            dta BASE_COLOR_P2
   424 3692 B0			            dta BASE_COLOR_P2
   425 3693 B0			            dta BASE_COLOR_P2
   426 3694 B0			            dta BASE_COLOR_P2
   427
   428 3695 00 00		            dta 0,0
   429
   430 3697			menu_colpf0
   431 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   432 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   433 3697 00 00		            dta 0,0
   434 3699 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   435 36A1 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   436 36A9 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   437 36B1 00 00 00 00		            dta 0,0,0,0
   438 36B5 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   439
   440 				; make pointers from y-position to screen memory
   441 				; screen memory is 3 blocks
   442 				; screen_mem1 : 102 lines, 4080 bytes
   443 				; screen_mem2 : 102 lines, 4080 bytes
   444 				; screen_mem3 :  20 lines,  800 bytes
   445
   446 36BD			make_screen_y_tab
   447 36BD A9 00		            lda #<screen_mem1
   448 36BF 85 86		            sta tmp_screen
   449 36C1 A9 70		            lda #>screen_mem1
   450 36C3 85 87		            sta tmp_screen+1
   451
   452 36C5 A2 00		            ldx #0
   453 36C7			fill_y_tab1
   454 36C7 20 F0 36		            jsr store_y_line
   455 36CA E8			            inx
   456 36CB E0 66		            cpx #102
   457 36CD D0 F8		            bne fill_y_tab1
   458
   459 				; x = 102
   460 36CF A9 00		            lda #<screen_mem2
   461 36D1 85 86		            sta tmp_screen
   462 36D3 A9 80		            lda #>screen_mem2
   463 36D5 85 87		            sta tmp_screen+1
   464
   465 36D7			fill_y_tab2
   466 36D7 20 F0 36		            jsr store_y_line
   467 36DA E8			            inx
   468 36DB E0 CC		            cpx #204
   469 36DD D0 F8		            bne fill_y_tab2
   470
   471 36DF A9 00		            lda #<screen_mem3
   472 36E1 85 86		            sta tmp_screen
   473 36E3 A9 90		            lda #>screen_mem3
   474 36E5 85 87		            sta tmp_screen+1
   475
   476 				; x = 204
   477 36E7			fill_y_tab3
   478 36E7 20 F0 36		            jsr store_y_line
   479 36EA E8			            inx
   480 36EB E0 E0		            cpx #224
   481 36ED D0 F8		            bne fill_y_tab3
   482 36EF 60			            rts
   483
   484 36F0			store_y_line
   485 36F0 A5 86		            lda tmp_screen
   486 36F2 9D 00 12		            sta screen_y_lo,x
   487 36F5 A5 87		            lda tmp_screen+1
   488 36F7 9D 00 13		            sta screen_y_hi,x
   489 				            
   490 36FA A5 86		            lda tmp_screen
   491 36FC 18			            clc
   492 36FD 69 28		            adc #SCREEN_WIDTH
   493 36FF 85 86		            sta tmp_screen
   494 3701 A5 87		            lda tmp_screen+1
   495 3703 69 00		            adc #0
   496 3705 85 87		            sta tmp_screen+1
   497 3707 60			            rts
   498
   499 				; @todo invert backdrop image
   500 				; now we have to do it here :P
   501 3708			invert_backdrop
   502 3708 A9 00		            lda #<screen_mem1
   503 370A 85 86		            sta tmp_screen
   504 370C A9 70		            lda #>screen_mem1
   505 370E 85 87		            sta tmp_screen+1
   506 				            
   507 3710 A2 10		            ldx #16     ; 16 pages = 4K
   508 3712 20 30 37		            jsr do_x_pages
   509 				           
   510 3715 A9 00		            lda #<screen_mem2
   511 3717 85 86		            sta tmp_screen
   512 3719 A9 80		            lda #>screen_mem2
   513 371B 85 87		            sta tmp_screen+1
   514 				            
   515 371D A2 10		            ldx #16     ; 16 pages = 4K
   516 371F 20 30 37		            jsr do_x_pages
   517
   518 3722 A9 00		            lda #<screen_mem3
   519 3724 85 86		            sta tmp_screen
   520 3726 A9 90		            lda #>screen_mem3
   521 3728 85 87		            sta tmp_screen+1
   522 				            
   523 372A A2 04		            ldx #4     ; 4 pages = 1K
   524 372C 20 30 37		            jsr do_x_pages
   525 372F 60			            rts
   526
   527 				; invert x pages, starting from tmp_screen
   528
   529 3730			do_x_pages
   530 3730 A0 00		            ldy #0
   531 3732			do_page
   532 3732 B1 86		            lda (tmp_screen),y
   533 3734 49 FF		            eor #$ff
   534 3736 91 86		            sta (tmp_screen),y
   535 3738 C8			            iny
   536 3739 D0 F7		            bne do_page 
   537
   538 373B E6 87		            inc tmp_screen+1
   539 373D CA			            dex
   540 373E D0 F2		            bne do_page
   541 3740 60			            rts
   542
   543 3741			turn_color_ball
   544 3741 A6 B5		            ldx player_turn
   545 3743 BD 4A 37		            lda color_turn,x
   546 3746 8D C7 02		            sta COLOR3
   547 3749 60			            rts
   548 				            
   549 374A 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   550
   551 374D			show_menu_options
   552 374D A9 50		            lda #<controller_text
   553 374F 8D F6 50		            sta menu_line1_ptr
   554 3752 A9 52		            lda #>controller_text
   555 3754 8D F7 50		            sta menu_line1_ptr+1
   556
   557 3757 20 94 3F		            jsr show_player_mode
   558
   559 375A A9 9F		            lda #<level_text
   560 375C 8D FC 50		            sta menu_line3_ptr
   561 375F A9 52		            lda #>level_text
   562 3761 8D FD 50		            sta menu_line3_ptr+1
   563
   564 3764 A9 00		            lda #0
   565 3766 85 83		            sta winner_color
   566 3768 60			            rts
   567
   568 3769			show_end_screen
   569 3769 A9 FB		            lda #<empty_text
   570 376B 8D F6 50		            sta menu_line1_ptr
   571 376E 8D FC 50		            sta menu_line3_ptr
   572 3771 A9 52		            lda #>empty_text
   573 3773 8D F7 50		            sta menu_line1_ptr+1
   574 3776 8D FD 50		            sta menu_line3_ptr+1
   575
   576 3779 AD 2E 51		            lda score_p1
   577 377C CD 2F 51		            cmp score_p2
   578 377F 90 0F		            bcc player_2_wins
   579
   580 3781 A9 0F		            lda #<winner_one_text
   581 3783 8D F9 50		            sta menu_line2_ptr
   582 3786 A9 53		            lda #>winner_one_text
   583 3788 8D FA 50		            sta menu_line2_ptr+1
   584
   585 378B A9 50		            lda #BASE_COLOR_P1
   586 378D 85 83		            sta winner_color
   587 378F 60			            rts
   588
   589 3790			player_2_wins
   590 3790 A9 23		            lda #<winner_two_text
   591 3792 8D F9 50		            sta menu_line2_ptr
   592 3795 A9 53		            lda #>winner_two_text
   593 3797 8D FA 50		            sta menu_line2_ptr+1
   594
   595 379A A9 B0		            lda #BASE_COLOR_P2
   596 379C 85 83		            sta winner_color
   597
   598 379E 60			            rts
   599
   600 				; A, X, Y are already saved by the OS
   601 379F			vbi
   602 379F 20 DC 31		            jsr copy_shadow
   603
   604 37A2 A5 80		            lda music_toggle
   605 37A4 F0 03		            beq skip_music
   606 37A6 20 97 31		            jsr play_song
   607 37A9			skip_music
   608
   609 				; toggle music on/off with spacebar
   610 37A9 AD FC 02		            lda 764
   611 37AC C9 21		            cmp #$21
   612 37AE D0 10		            bne no_spacebar
   613 37B0 A5 80		            lda music_toggle
   614 37B2 49 80		            eor #128
   615 37B4 85 80		            sta music_toggle
   616 37B6 D0 03		            bne music_turned_on
   617 37B8 20 60 32		            jsr music_off
   618
   619 37BB			music_turned_on
   620 37BB A9 FF		            lda #255
   621 37BD 8D FC 02		            sta 764
   622
   623 37C0			no_spacebar
   624 37C0 20 FE 39		            jsr play_sound_bat
   625 37C3 20 1C 3A		            jsr play_sound_edge
   626
   627 37C6 A9 F6		            lda #<dli_header
   628 37C8 8D 00 02		            sta VDSLST
   629 37CB A9 35		            lda #>dli_header
   630 37CD 8D 01 02		            sta VDSLST+1
   631
   632 37D0 A9 2E		            lda #%00101110  ; enable P/M DMA
   633 37D2 8D 2F 02		            sta SDMCTL
   634 37D5 A9 00		            lda #0
   635 37D7 85 4D		            sta 77      ; attract off
   636 37D9 A9 98		            lda #>rotor_font
   637 37DB 8D F4 02		            sta 756
   638
   639 37DE A9 30		            lda #$30
   640 37E0 8D 00 D0		            sta HPOSP0
   641 37E3 A9 B0		            lda #$b0
   642 37E5 8D 01 D0		            sta HPOSP1
   643
   644 				; menu switching thingy
   645
   646 37E8 AD 1F D0		            lda CONSOL
   647 37EB C9 03		            cmp #3  ; option button
   648 37ED D0 1B		            bne no_option_pressed
   649 37EF A5 8C		            lda game_state
   650 37F1 C9 01		            cmp #STATE_IN_MENU
   651 37F3 F0 37		            beq check_game_state
   652
   653 				; prevent menu option directly after leaving in-game state
   654 37F5 A9 03		            lda #3
   655 37F7 8D 47 3F		            sta previous_consol
   656
   657 37FA			go_menu_mode
   658 37FA 20 C2 3B		            jsr wipe_ball
   659
   660 37FD 20 FA 31		            jsr music_normal_volume
   661
   662 3800 20 4D 37		            jsr show_menu_options
   663
   664 3803 A9 01		            lda #STATE_IN_MENU
   665 3805 85 8C		            sta game_state
   666 3807 4C 2C 38		            jmp check_game_state
   667
   668 380A			no_option_pressed
   669 380A C9 06		            cmp #6  ; start pressed
   670 380C F0 05		            beq reset_game
   671
   672 				; check autostart state
   673
   674 380E AD 53 38		            lda autostart_demo
   675 3811 F0 19		            beq check_game_state
   676
   677 				; reset game
   678
   679 3813			reset_game
   680 3813 20 05 32		            jsr music_low_volume
   681
   682 3816 20 C2 3B		            jsr wipe_ball
   683
   684 3819 A9 00		            lda #0
   685 381B 85 BA		            sta cpu1_angle_end
   686 381D A9 80		            lda #128
   687 381F 85 BB		            sta cpu2_angle_end
   688
   689 3821 A9 01		            lda #1
   690 3823 85 B6		            sta game_restart
   691
   692 3825 20 56 38		            jsr reset_autostart_demo
   693
   694 3828 A9 00		            lda #STATE_IN_GAME
   695 382A 85 8C		            sta game_state
   696
   697 382C			check_game_state
   698 382C A5 8C		            lda game_state
   699 382E D0 03		            bne no_main_game_state
   700 3830 4C FC 38		            jmp main_game_vbi
   701
   702 3833			no_main_game_state
   703 3833 C9 02		            cmp #STATE_IN_END
   704 3835 D0 49		            bne menu_vbi
   705
   706 				; end screen vbi
   707 3837 A5 8F		            lda end_screen_delay
   708 3839 D0 10		            bne stay_in_end_screen
   709
   710 383B 20 A6 31		            jsr restart_music
   711 383E 20 FA 31		            jsr music_normal_volume
   712
   713 				; here we show the menu again
   714 3841 20 4D 37		            jsr show_menu_options
   715
   716 3844 A9 01		            lda #STATE_IN_MENU
   717 3846 85 8C		            sta game_state
   718 3848 4C 80 38		            jmp menu_vbi
   719
   720 384B			stay_in_end_screen
   721 384B 20 E0 39		            jsr play_sound_end_game
   722 384E C6 8F		            dec end_screen_delay
   723 3850 4C C8 38		            jmp wait_depressed
   724
   725 				; demo autostart
   726
   727 3853 00			autostart_demo  dta 0
   728 3854 00 00		autostart_timer dta 0,0
   729
   730 3856			reset_autostart_demo
   731 3856 A9 00		            lda #0
   732 3858 8D 53 38		            sta autostart_demo      ; do not start again
   733 385B 8D 54 38		            sta autostart_timer
   734 385E A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   735 3860 8D 55 38		            sta autostart_timer+1
   736 3863 60			            rts
   737
   738 3864			handle_autostart_timer
   739 3864 AD 54 38		            lda autostart_timer
   740 3867 0D 55 38		            ora autostart_timer+1
   741 386A F0 13		            beq idle_timer
   742 386C CE 54 38		            dec autostart_timer
   743 386F D0 0E		            bne running_timer
   744 3871 CE 55 38		            dec autostart_timer+1
   745 3874 D0 09		            bne running_timer
   746
   747 				; timer reached zero
   748 3876 A9 01		            lda #1
   749 3878 8D 53 38		            sta autostart_demo
   750 387B A9 02		            lda #2
   751 387D 85 8A		            sta player_mode
   752
   753 387F			running_timer
   754 387F			idle_timer
   755 387F 60			            rts
   756
   757 				; within menu vbi
   758
   759 3880			menu_vbi
   760 3880 20 64 38		            jsr handle_autostart_timer
   761
   762 3883 A5 8A		            lda player_mode
   763 3885 F0 07		            beq check_human_buttons
   764
   765 3887 20 C9 34		            jsr is_player1_button_pressed
   766 388A D0 87		            bne reset_game
   767 388C F0 05		            beq check_consol_buttons
   768
   769 388E			check_human_buttons
   770 388E 20 E0 34		            jsr is_both_buttons
   771 3891 D0 80		            bne reset_game
   772
   773 3893			check_consol_buttons
   774 3893 AD 1F D0		            lda CONSOL
   775 3896 C9 05		            cmp #5          ; select
   776 3898 D0 18		            bne no_level_select
   777 				            
   778 389A AD 47 3F		            lda previous_consol
   779 389D C9 05		            cmp #5
   780 389F F0 27		            beq wait_depressed
   781
   782 38A1 20 77 3F		            jsr increase_level
   783 38A4 AE 48 3F		            ldx current_level_index
   784 38A7 20 5E 3F		            jsr set_level_ball_speed
   785
   786 38AA A9 05		            lda #5
   787 38AC 8D 47 3F		            sta previous_consol
   788 38AF 4C C8 38		            jmp wait_depressed
   789
   790 38B2			no_level_select
   791 38B2 C9 03		            cmp #3          ; option
   792 38B4 D0 0F		            bne no_player_mode_select
   793
   794 38B6 AD 47 3F		            lda previous_consol
   795 38B9 C9 03		            cmp #3
   796 38BB F0 0B		            beq wait_depressed
   797
   798 38BD 20 87 3F		            jsr increase_player_mode
   799 38C0 20 94 3F		            jsr show_player_mode
   800
   801 38C3 A9 03		            lda #3
   802 38C5			no_player_mode_select
   803 38C5 8D 47 3F		            sta previous_consol
   804
   805 38C8			wait_depressed
   806 38C8 A9 01		            lda #1      ; dl jump
   807 38CA 8D 55 50		            sta menu_dl_hook
   808 38CD A9 EE		            lda #<menu_dl_part
   809 38CF 8D 56 50		            sta menu_dl_hook+1
   810 38D2 A9 50		            lda #>menu_dl_part
   811 38D4 8D 57 50		            sta menu_dl_hook+2
   812
   813 				; detect/show controller type (used for both players)
   814 38D7 20 E3 38		            jsr detect_show_driver
   815
   816 38DA 20 6B 3A		            jsr handle_player1
   817 38DD 20 96 3A		            jsr handle_player2
   818
   819 38E0 4C B5 39		            jmp exit_vbi
   820
   821 				; X = port/driver to detect
   822 38E3			detect_show_driver
   823 38E3 20 43 34		            jsr driver_detect
   824 38E6 A8			            tay
   825 38E7 B9 37 53		            lda driver_text_lo,y
   826 38EA 85 86		            sta tmp_screen
   827 38EC B9 3B 53		            lda driver_text_hi,y
   828 38EF 85 87		            sta tmp_screen+1
   829
   830 38F1 A0 07		            ldy #7
   831 38F3			show_driv
   832 38F3 B1 86		            lda (tmp_screen),y
   833 38F5 99 5A 52		            sta driver_screen,y
   834 38F8 88			            dey
   835 38F9 10 F8		            bpl show_driv
   836 38FB 60			            rts
   837
   838 				; main game vbi
   839 38FC			main_game_vbi
   840 38FC A5 B6		            lda game_restart
   841 38FE F0 33		            beq no_restart
   842
   843 				; restart game
   844
   845 3900 20 F8 39		            jsr silence_end
   846
   847 3903 A9 00		            lda #0
   848 3905 85 B6		            sta game_restart
   849 				            
   850 3907 20 11 3D		            jsr reset_score
   851 390A 20 DF 3C		            jsr show_score_p1
   852 390D 20 F8 3C		            jsr show_score_p2
   853
   854 3910 A6 9C		            ldx p1_angle
   855 3912 86 AA		            stx ball_angle_start
   856 3914 20 1D 3B		            jsr ball_to_start_position
   857 3917 20 2C 3B		            jsr prepare_ball_end_position
   858
   859 391A A9 00		            lda #0
   860 391C 85 A0		            sta mp_collision
   861 391E 85 A1		            sta in_collision
   862 3920 85 A3		            sta edge_delay
   863 3922 85 AD		            sta edge_collision
   864 3924 85 AE		            sta edge_hit_count
   865 3926 8D 1E D0		            sta HITCLR
   866
   867 3929 A9 02		            lda #2
   868 392B 85 B5		            sta player_turn
   869
   870 392D 20 41 37		            jsr turn_color_ball
   871 3930 4C B5 39		            jmp exit_vbi
   872
   873 3933			no_restart
   874 				; remove menu hook
   875 3933 A9 0F		            lda #$0f        ; dl gfx 8
   876 3935 8D 55 50		            sta menu_dl_hook
   877 3938 8D 56 50		            sta menu_dl_hook+1
   878 393B 8D 57 50		            sta menu_dl_hook+2
   879
   880 393E AD 08 D0		            lda M0PL
   881 3941 85 A0		            sta mp_collision
   882 3943 AD 09 D0		            lda M1PL
   883 3946 05 A0		            ora mp_collision
   884 3948 85 A0		            sta mp_collision
   885
   886 394A AD 00 D0		            lda M0PF
   887 394D 85 AD		            sta edge_collision
   888 394F AD 01 D0		            lda M1PF
   889 3952 05 AD		            ora edge_collision
   890 3954 85 AD		            sta edge_collision
   891 				;           beq no_edge_collision
   892
   893 				;            inc edge_hit_count
   894 				;            lda edge_hit_count
   895 				;            cmp #2
   896 				;            bcc edge_hit_counting
   897
   898 				;            sei
   899 				;lalala      jmp lalala
   900
   901 				;no_edge_collision
   902 				;            lda #0
   903 				;            sta edge_hit_count
   904
   905 3956			edge_hit_counting
   906 3956 20 6B 3A		            jsr handle_player1
   907 3959 20 96 3A		            jsr handle_player2
   908
   909 				; handle ball
   910
   911 395C 20 C2 3B		            jsr wipe_ball         
   912
   913 				; Check ball collision with bat
   914
   915 395F A5 A4		            lda bat_collision_delay
   916 3961 F0 05		            beq check_allowed
   917 3963 C6 A4		            dec bat_collision_delay
   918 3965 4C 7F 39		            jmp move_one
   919
   920 3968			check_allowed
   921 3968 A5 A0		            lda mp_collision
   922 396A F0 0F		            beq reset_in_collision
   923
   924 396C A5 A1		            lda in_collision
   925 396E D0 0F		            bne no_first_hit
   926
   927 3970 E6 A1		            inc in_collision            
   928 3972 20 59 3B		            jsr bounce_bat_ball 
   929 				            
   930 3975 20 DB 39		            jsr start_sound_bat          
   931 				            
   932 3978 4C 7F 39		            jmp move_one
   933 				            
   934 397B			reset_in_collision
   935 397B A9 00		            lda #0
   936 397D 85 A1		            sta in_collision        
   937
   938 397F			move_one
   939 397F			no_first_hit
   940 397F 20 63 3E		            jsr move_current_xy
   941 3982 F0 1E		            beq still_moving
   942
   943 				; edge detected
   944
   945 3984 20 17 3A		            jsr start_sound_edge
   946
   947 3987 A5 AB		            lda ball_angle_end
   948 3989 85 AA		            sta ball_angle_start
   949
   950 398B 20 50 3B		            jsr ball_current_to_start_position
   951 398E 20 2C 3B		            jsr prepare_ball_end_position
   952
   953 3991 20 37 3A		            jsr update_score
   954 3994 D0 37		            bne game_ends
   955
   956 				; switch turns
   957 3996 A5 B5		            lda player_turn
   958 3998 49 03		            eor #3              ; 1 => 2, 2 => 1
   959 399A 85 B5		            sta player_turn
   960 399C 20 41 37		            jsr turn_color_ball
   961 399F 20 BF 3A		            jsr set_cpu_angle_end
   962
   963 39A2			still_moving
   964 39A2 A5 EB		            lda current_x+1
   965 39A4 85 A6		            sta ball_current_x
   966 39A6 A5 ED		            lda current_y+1
   967 39A8 85 A7		            sta ball_current_y
   968
   969 39AA 20 D7 3B		            jsr show_ball
   970
   971 39AD A9 00		            lda #0
   972 39AF 8D 18 D0		            sta $d018           
   973
   974 				; anything in A to clear collisions
   975 39B2 8D 1E D0		            sta HITCLR
   976
   977 39B5			exit_vbi
   978
   979 				; always set header stuff
   980 39B5 A9 03		            lda #3
   981 39B7 8D 08 D0		            sta SIZEP0
   982 39BA 8D 09 D0		            sta SIZEP1
   983
   984 				; background in PM0/1 for header
   985 39BD A9 FF		            lda #255
   986 39BF A2 07		            ldx #7
   987 39C1			fill_pm_header
   988 39C1 9D 00 0E		            sta p0_area,x
   989 39C4 9D 80 0E		            sta p1_area,x
   990 39C7 CA			            dex
   991 39C8 10 F7		            bpl fill_pm_header
   992
   993 39CA 4C 62 E4		            jmp $e462
   994
   995 39CD			game_ends
   996 39CD A9 FF		            lda #255
   997 39CF 85 8F		            sta end_screen_delay
   998
   999 39D1 20 69 37		            jsr show_end_screen
  1000
  1001 39D4 A9 02		            lda #STATE_IN_END
  1002 39D6 85 8C		            sta game_state
  1003
  1004 39D8 4C B5 39		            jmp exit_vbi
  1005
  1006 39DB			start_sound_bat
  1007 39DB A9 0A		            lda #10
  1008 39DD 85 8D		            sta volume_hit_bat
  1009 39DF 60			            rts
  1010
  1011 39E0			play_sound_end_game
  1012 39E0 20 60 32		            jsr music_off
  1013
  1014 39E3 A5 8F		            lda end_screen_delay
  1015 39E5 C9 C0		            cmp #192
  1016 39E7 90 0F		            bcc silence_end
  1017 39E9 4A			            lsr
  1018 39EA 25 8F		            and end_screen_delay
  1019 39EC 4A			            lsr
  1020 39ED 09 20		            ora #$20
  1021 39EF 8D 73 32		            sta SHADOW+4
  1022 				            ;lda end_screen_delay
  1023 39F2 A9 AA		            lda #$aa
  1024 39F4 8D 74 32		            sta SHADOW+5
  1025 39F7 60			            rts
  1026 39F8			silence_end
  1027 39F8 A9 00		            lda #0
  1028 39FA 8D 74 32		            sta SHADOW+5
  1029 39FD 60			            rts
  1030
  1031 39FE			play_sound_bat
  1032 39FE A5 8D		            lda volume_hit_bat
  1033 3A00 30 14		            bmi silenced_bat
  1034
  1035 3A02 A5 B5		            lda player_turn
  1036 3A04 0A			            asl
  1037 3A05 0A			            asl
  1038 3A06 69 30		            adc #$30
  1039 3A08 E5 B3		            sbc angle_diff_bat
  1040 3A0A 8D 73 32		            sta SHADOW+4    ; $d204
  1041 3A0D A5 8D		            lda volume_hit_bat
  1042 3A0F 09 A0		            ora #$a0
  1043 3A11 8D 74 32		            sta SHADOW+5    ; $d205
  1044 3A14 C6 8D		            dec volume_hit_bat
  1045 3A16			silenced_bat
  1046 3A16 60			            rts
  1047
  1048 3A17			start_sound_edge
  1049 3A17 A9 04		            lda #4
  1050 3A19 85 8E		            sta volume_hit_edge
  1051 3A1B 60			            rts
  1052
  1053 3A1C			play_sound_edge
  1054 3A1C A5 8E		            lda volume_hit_edge
  1055 3A1E 30 16		            bmi silenced_edge
  1056 3A20 D0 06		            bne no_silenced_edge
  1057 3A22 8D 74 32		            sta SHADOW+5    ; $d205
  1058 3A25 C6 8E		            dec volume_hit_edge
  1059 3A27 60			            rts            
  1060
  1061 3A28			no_silenced_edge
  1062 3A28 A9 08		            lda #$08
  1063 3A2A 8D 73 32		            sta SHADOW+4    ; $d204
  1064 3A2D A5 8E		            lda volume_hit_edge
  1065 3A2F 09 26		            ora #$26
  1066 3A31 8D 74 32		            sta SHADOW+5    ; $d205
  1067 3A34 C6 8E		            dec volume_hit_edge
  1068 3A36			silenced_edge
  1069 3A36 60			            rts
  1070
  1071 				; Update score
  1072 				; Score > max score, then exit A = 1, otherwise A = 0
  1073
  1074 3A37			update_score
  1075 3A37 A5 B5		            lda player_turn
  1076 3A39 C9 01		            cmp #1
  1077 3A3B D0 12		            bne was_player2_turn
  1078 				; was player 1 turn, so player 2 gets a point
  1079 3A3D 20 26 3D		            jsr inc_score_p2
  1080 3A40 20 F8 3C		            jsr show_score_p2
  1081
  1082 3A43 AD 2F 51		            lda score_p2
  1083 3A46 C9 11		            cmp #MAX_SCORE
  1084 3A48 D0 17		            bne reset_edge_delay
  1085
  1086 3A4A A9 01		            lda #STATE_IN_MENU
  1087 3A4C 85 8C		            sta game_state
  1088 3A4E 60			            rts
  1089
  1090 3A4F			was_player2_turn
  1091 3A4F 20 1A 3D		            jsr inc_score_p1
  1092 3A52 20 DF 3C		            jsr show_score_p1
  1093
  1094 3A55 AD 2E 51		            lda score_p1
  1095 3A58 C9 11		            cmp #MAX_SCORE
  1096 3A5A D0 05		            bne reset_edge_delay
  1097
  1098 3A5C A9 01		            lda #STATE_IN_MENU
  1099 3A5E 85 8C		            sta game_state
  1100 3A60 60			            rts
  1101
  1102 3A61			reset_edge_delay
  1103 3A61 A9 0A		            lda #10
  1104 3A63 85 A3		            sta edge_delay
  1105
  1106 3A65			no_edge
  1107
  1108 3A65 A9 00		            lda #0      ; no end game
  1109 				; anything in A to clear collisions
  1110 3A67 8D 1E D0		            sta HITCLR
  1111 3A6A 60			            rts
  1112
  1113 				; player 1
  1114 				; - wipe shape at previous y-position
  1115 				; - move player using controller
  1116 				; - set sprite positions
  1117
  1118 3A6B			handle_player1
  1119 3A6B 20 47 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1120
  1121 3A6E A5 8A		            lda player_mode
  1122 3A70 C9 02		            cmp #2
  1123 3A72 F0 0C		            beq do_p1_is_computer
  1124
  1125 3A74 A2 00		            ldx #0              ; player 1
  1126 3A76 20 76 34		            jsr main_driver
  1127 3A79 20 FF 3A		            jsr move_player
  1128 				            
  1129 3A7C 20 FB 3B		            jsr show_p1
  1130 3A7F 60			            rts
  1131
  1132 				; p1 now controlled by computer
  1133 3A80			do_p1_is_computer
  1134 3A80 A5 8C		            lda game_state
  1135 3A82 D0 3A		            bne not_in_game
  1136
  1137 3A84 A2 00		            ldx #0              ; player 1
  1138
  1139 3A86 A5 B5		            lda player_turn
  1140 3A88 C9 01		            cmp #1
  1141 3A8A D0 03		            bne not_p1_turn
  1142
  1143 3A8C 20 D0 3A		            jsr cpu_controller
  1144 3A8F			not_p1_turn
  1145
  1146 3A8F 20 FF 3A		            jsr move_player
  1147 3A92 20 FB 3B		            jsr show_p1
  1148 3A95 60			            rts
  1149
  1150 				; player 2
  1151 				; - wipe shape at previous y-position
  1152 				; - move player using controller
  1153 				; - set sprite positions
  1154
  1155 3A96			handle_player2
  1156 3A96 20 5C 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1157
  1158 3A99 A5 8A		            lda player_mode
  1159 3A9B D0 0C		            bne do_p2_is_computer
  1160
  1161 3A9D A2 01		            ldx #1              ; player 2
  1162 3A9F 20 76 34		            jsr main_driver
  1163 3AA2 20 FF 3A		            jsr move_player
  1164 				                        
  1165 3AA5 20 21 3C		            jsr show_p2
  1166 3AA8 60			            rts
  1167
  1168 				; p2 now controlled by computer
  1169 3AA9			do_p2_is_computer
  1170 3AA9 A5 8C		            lda game_state
  1171 3AAB D0 11		            bne not_in_game
  1172
  1173 3AAD A2 01		            ldx #1              ; player 2
  1174
  1175 3AAF A5 B5		            lda player_turn
  1176 3AB1 C9 02		            cmp #2
  1177 3AB3 D0 03		            bne not_p2_turn
  1178
  1179 3AB5 20 D0 3A		            jsr cpu_controller
  1180
  1181 3AB8			not_p2_turn
  1182 3AB8 20 FF 3A		            jsr move_player
  1183 3ABB 20 21 3C		            jsr show_p2
  1184
  1185 3ABE			not_in_game
  1186 3ABE 60			            rts
  1187
  1188 3ABF			set_cpu_angle_end
  1189 3ABF A6 B5		            ldx player_turn
  1190 3AC1 CA			            dex
  1191 3AC2 AD 0A D2		            lda RANDOM
  1192 3AC5 29 07		            and #7
  1193 3AC7 18			            clc
  1194 3AC8 65 AB		            adc ball_angle_end
  1195 3ACA 38			            sec
  1196 3ACB E9 03		            sbc #3
  1197 3ACD 95 BA		            sta cpu_angle_end,x
  1198 3ACF 60			            rts
  1199
  1200 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1201
  1202 3AD0			cpu_controller
  1203 				;            lda ball_angle_end  ; current ball end
  1204 3AD0 B5 BA		            lda cpu_angle_end,x
  1205 3AD2 85 B0		            sta tmp_angle1
  1206 3AD4 B5 9C		            lda p1_angle,x
  1207 3AD6 85 B1		            sta tmp_angle2
  1208
  1209 3AD8 20 32 3D		            jsr calc_angle_diff
  1210
  1211 3ADB A5 B7		            lda tmp_angle_diff
  1212 3ADD F0 1F		            beq comp_in_catch_position
  1213 3ADF A5 B4		            lda tmp_angle_direction
  1214 3AE1 D0 0E		            bne move_comp_clockwise
  1215
  1216 3AE3 AD 0A D2		            lda RANDOM
  1217 3AE6 29 03		            and #3
  1218 3AE8 D0 14		            bne comp_in_catch_position
  1219 3AEA B5 9C		            lda p1_angle,x
  1220 3AEC 65 88		            adc stick_slow_speed
  1221 3AEE 95 9C		            sta p1_angle,x
  1222 3AF0 60			            rts
  1223 3AF1			move_comp_clockwise
  1224
  1225 3AF1 AD 0A D2		            lda RANDOM
  1226 3AF4 29 03		            and #3
  1227 3AF6 D0 06		            bne comp_in_catch_position
  1228
  1229 3AF8 B5 9C		            lda p1_angle,x
  1230 3AFA E5 88		            sbc stick_slow_speed
  1231 3AFC 95 9C		            sta p1_angle,x
  1232 3AFE			comp_in_catch_position
  1233 3AFE 60			            rts
  1234
  1235 				; move player 1/2
  1236 				; right - clockwise, left = anti-clockwise
  1237
  1238 				; X = 0, player 1
  1239 				; X = 1, player 2
  1240
  1241 				; Y = driver mode:
  1242 				; 0 : stick
  1243 				; 1 : paddle
  1244 				; 2 : driving
  1245 				; 3 : computer
  1246 				            
  1247 3AFF			move_player
  1248 3AFF B5 9C		            lda p1_angle,x
  1249 3B01 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1250 3B03 49 40		            eor #64                     ; perpendicular to the circle angle
  1251 3B05 95 90		            sta p1_shape,x
  1252
  1253 3B07 B4 9C		            ldy p1_angle,x
  1254 3B09 B9 00 40		            lda inner_x_tab,y
  1255 3B0C 4A			            lsr
  1256 3B0D 69 20		            adc #inner_x_margin/2
  1257 3B0F 95 94		            sta player1_x,x
  1258 3B11 B9 00 41		            lda inner_y_tab,y
  1259 3B14 4A			            lsr
  1260 3B15 95 98		            sta player1_y,x
  1261
  1262 3B17 B4 90		            ldy p1_shape,x
  1263 3B19 20 96 3C		            jsr shape_to_ptr
  1264
  1265 3B1C 60			            rts
  1266
  1267 				; Set ball at start position
  1268 				; - start angle current player
  1269 				; - start position by inner table
  1270 				; - collision delay set?
  1271
  1272 				; Set ball current position to start position
  1273 				; input:
  1274 				; X = angle of start position
  1275 				; output:
  1276 				; ball position: (ball_current_x, ball_current_y)
  1277 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1278 3B1D			ball_to_start_position
  1279 3B1D BD 00 40		            lda inner_x_tab,x
  1280 3B20 85 A6		            sta ball_current_x
  1281 3B22 85 E6		            sta tmp_x1
  1282 3B24 BD 00 41		            lda inner_y_tab,x
  1283 3B27 85 A7		            sta ball_current_y
  1284 3B29 85 E7		            sta tmp_y1
  1285 3B2B 60			            rts
  1286
  1287 				; Prepare ball end position
  1288 				; - end angle current player
  1289 				; - end position by outer table
  1290 				; - calculate step size x,y
  1291
  1292 				; Input:
  1293 				; - ball_angle_start
  1294 				; - ball speed
  1295 				; Output:
  1296 				; - ball_andle_end
  1297 				; - ball start position (tmp_x1, tmp_y1)
  1298 				; - ball end position (tmp_x2, tmp_y2)
  1299 				; - step size (step_x, step_y) for ball movement
  1300 3B2C			prepare_ball_end_position
  1301 3B2C A5 AA		            lda ball_angle_start
  1302 3B2E 49 80		            eor #128        ; other side
  1303 3B30 85 AB		            sta ball_angle_end
  1304 3B32 AA			            tax
  1305 3B33 20 B7 3B		            jsr angle_to_end_position
  1306 				                        
  1307 3B36 20 F6 3D		            jsr init_current_xy
  1308 				            
  1309 				; move current a little bit            
  1310 3B39 20 63 3E		            jsr move_current_xy
  1311 				; ignore end indicator, since we only just started
  1312
  1313
  1314 3B3C A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1315 3B3E 85 A4		            sta bat_collision_delay
  1316 3B40 60			            rts
  1317
  1318 				; x = angle 0..255
  1319 3B41			outer_angle_to_start_position
  1320 3B41 BD 00 10		            lda outer_x_256,x
  1321 3B44 85 A6		            sta ball_current_x
  1322 3B46 85 E6		            sta tmp_x1
  1323 3B48 BD 00 11		            lda outer_y_256,x
  1324 3B4B 85 A7		            sta ball_current_y
  1325 3B4D 85 E7		            sta tmp_y1
  1326 3B4F 60			            rts
  1327
  1328 3B50			ball_current_to_start_position
  1329 3B50 A5 A6		            lda ball_current_x
  1330 3B52 85 E6		            sta tmp_x1
  1331 3B54 A5 A7		            lda ball_current_y
  1332 3B56 85 E7		            sta tmp_y1
  1333 3B58 60			            rts
  1334
  1335 				; Ball collides with bat
  1336 				; - start ball angle = end ball angle
  1337 				; - calculate diff between bat and ball end angle
  1338 				; - calculate new end angle
  1339 				; - Set ball at start position
  1340 				; - Prepare ball end position
  1341
  1342 3B59			bounce_bat_ball
  1343 				; set new start of ball
  1344 				; @todo check ball angles
  1345 				; set new ball start angle (= previous end angle)
  1346 3B59 A5 AB		            lda ball_angle_end
  1347 3B5B 85 AA		            sta ball_angle_start
  1348 				            
  1349 				; alternative?
  1350 				            ;ldx ball_angle_start
  1351 				            ;jsr ball_to_start_position          
  1352 3B5D 20 50 3B		            jsr ball_current_to_start_position
  1353
  1354 				; which player hit the ball?
  1355 				; collision bits:
  1356 				; xxxxx1x1 : 1 is player1 collision
  1357 				; xxxx1010 : 2 is player2 collision
  1358
  1359 3B60 A5 A0		            lda mp_collision
  1360 3B62 4A			            lsr
  1361 3B63 4A			            lsr
  1362 3B64 05 A0		            ora mp_collision
  1363 3B66 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1364
  1365 				; who's turn is it and who bounced the ball?
  1366
  1367 3B68 25 B5		            and player_turn
  1368 3B6A F0 06		            beq no_switch_turn
  1369
  1370 3B6C A5 B5		            lda player_turn
  1371 3B6E 49 03		            eor #3              ; 1 => 2, 2 => 1
  1372 3B70 85 B5		            sta player_turn
  1373
  1374 3B72			no_switch_turn
  1375 3B72 20 41 37		            jsr turn_color_ball
  1376
  1377 3B75 A5 B5		            lda player_turn
  1378 3B77 49 03		            eor #3
  1379 3B79 AA			            tax
  1380 3B7A CA			            dex                 ; index 0,1 (player = 1,2)
  1381 3B7B B5 9C		            lda p1_angle,x
  1382
  1383 				; Calculate diff between bat angle position and new ball start position
  1384 3B7D 85 B0		            sta tmp_angle1
  1385
  1386 3B7F A5 AA		            lda ball_angle_start
  1387 3B81 85 B1		            sta tmp_angle2
  1388
  1389 3B83 20 32 3D		            jsr calc_angle_diff
  1390
  1391 3B86 0A			            asl
  1392 3B87 0A			            asl
  1393 3B88 0A			            asl
  1394 3B89 85 B3		            sta angle_diff_bat
  1395
  1396 3B8B A5 B0		            lda tmp_angle1
  1397 3B8D 18			            clc
  1398 3B8E 65 B2		            adc add_to_angle
  1399 3B90 49 80		            eor #128            ; other side
  1400 3B92 85 B0		            sta tmp_angle1
  1401 				            
  1402 3B94 A5 B4		            lda tmp_angle_direction
  1403 3B96 D0 0A		            bne diff_clockwise
  1404 				; diff counter clockwise
  1405 3B98 A5 B0		            lda tmp_angle1
  1406 3B9A 18			            clc
  1407 3B9B 65 B3		            adc angle_diff_bat
  1408 3B9D 85 B0		            sta tmp_angle1
  1409 3B9F 4C A9 3B		            jmp calc_done            
  1410
  1411 3BA2			diff_clockwise
  1412 3BA2 A5 B0		            lda tmp_angle1
  1413 3BA4 38			            sec
  1414 3BA5 E5 B3		            sbc angle_diff_bat
  1415 3BA7 85 B0		            sta tmp_angle1
  1416 				            
  1417 				; calculation done            
  1418 3BA9			calc_done
  1419 3BA9 A5 B0		            lda tmp_angle1
  1420 3BAB 85 AB		            sta ball_angle_end
  1421 3BAD AA			            tax
  1422 3BAE 20 B7 3B		            jsr angle_to_end_position
  1423
  1424 3BB1 20 BF 3A		            jsr set_cpu_angle_end
  1425
  1426 3BB4 4C F6 3D		            jmp init_current_xy
  1427
  1428 				; x = angle 0..255
  1429 3BB7			angle_to_end_position
  1430 3BB7 BD 00 10		            lda outer_x_256,x
  1431 3BBA 85 E8		            sta tmp_x2
  1432 3BBC BD 00 11		            lda outer_y_256,x
  1433 3BBF 85 E9		            sta tmp_y2
  1434 3BC1 60			            rts
  1435
  1436 3BC2			wipe_ball
  1437 3BC2 A5 A7		            lda ball_current_y
  1438 3BC4 4A			            lsr
  1439 3BC5 69 06		            adc #ball_top_margin
  1440 3BC7 AA			            tax                 ; x = real y position on screen
  1441 3BC8 A9 00		            lda #0
  1442 3BCA 9D 80 0D		            sta msl_area,x
  1443 3BCD 9D 81 0D		            sta msl_area+1,x
  1444 3BD0 9D 82 0D		            sta msl_area+2,x
  1445 3BD3 9D 83 0D		            sta msl_area+3,x
  1446 3BD6 60			            rts
  1447
  1448 3BD7			show_ball
  1449 3BD7 A5 A7		            lda ball_current_y
  1450 3BD9 4A			            lsr
  1451 3BDA 69 06		            adc #ball_top_margin
  1452 3BDC AA			            tax                 ; x = real y position on screen
  1453
  1454 3BDD A9 02		            lda #%00000010
  1455 3BDF 9D 80 0D		            sta msl_area,x
  1456 3BE2 9D 83 0D		            sta msl_area+3,x
  1457 3BE5 A9 07		            lda #%00000111
  1458 3BE7 9D 81 0D		            sta msl_area+1,x
  1459 3BEA 9D 82 0D		            sta msl_area+2,x
  1460 				            
  1461 3BED A5 A6		            lda ball_current_x
  1462 3BEF 4A			            lsr
  1463 3BF0 69 45		            adc #ball_left_margin
  1464 3BF2 8D 05 D0		            sta HPOSM1
  1465 3BF5 69 02		            adc #2
  1466 3BF7 8D 04 D0		            sta HPOSM0
  1467 				                        
  1468 3BFA 60			            rts
  1469 				            
  1470 3BFB			show_p1
  1471 				; y position
  1472 3BFB A5 98		            lda player1_y
  1473 3BFD 18			            clc
  1474 3BFE 69 01		            adc #upper_margin
  1475 3C00 AA			            tax
  1476
  1477 3C01 A0 00		            ldy #0
  1478 3C03			show_shape1
  1479 3C03 B1 84		            lda (shape_ptr),y
  1480 3C05 9D 00 0E		            sta p0_area,x 
  1481 3C08 C8			            iny
  1482 3C09 B1 84		            lda (shape_ptr),y
  1483 3C0B 9D 00 0F		            sta p2_area,x
  1484 3C0E E8			            inx
  1485 3C0F C8			            iny
  1486 3C10 C0 20		            cpy #32
  1487 3C12 D0 EF		            bne show_shape1
  1488
  1489 				; x position
  1490 3C14 A5 94		            lda player1_x
  1491 3C16 18			            clc
  1492 3C17 69 20		            adc #left_margin
  1493 3C19 85 81		            sta shadow_HPOSP0
  1494 3C1B 69 08		            adc #8
  1495 3C1D 8D 02 D0		            sta HPOSP2
  1496 3C20 60			            rts
  1497
  1498 3C21			show_p2
  1499 				; y position
  1500 3C21 A5 99		            lda player2_y
  1501 3C23 18			            clc
  1502 3C24 69 01		            adc #upper_margin
  1503 3C26 AA			            tax
  1504
  1505 3C27 A0 00		            ldy #0
  1506 3C29			show_shape2
  1507 3C29 B1 84		            lda (shape_ptr),y
  1508 3C2B 9D 80 0E		            sta p1_area,x
  1509 3C2E C8			            iny
  1510 3C2F B1 84		            lda (shape_ptr),y
  1511 3C31 9D 80 0F		            sta p3_area,x
  1512 3C34 E8			            inx
  1513 3C35 C8			            iny
  1514 3C36 C0 20		            cpy #32
  1515 3C38 D0 EF		            bne show_shape2
  1516
  1517 				; x position
  1518 3C3A A5 95		            lda player2_x
  1519 3C3C 18			            clc
  1520 3C3D 69 20		            adc #left_margin
  1521 3C3F 85 82		            sta shadow_HPOSP1
  1522 3C41 69 08		            adc #8
  1523 3C43 8D 03 D0		            sta HPOSP3
  1524 3C46 60			            rts
  1525
  1526 3C47			wipe_p1
  1527 3C47 A5 98		            lda player1_y
  1528 3C49 18			            clc
  1529 3C4A 69 01		            adc #upper_margin
  1530 3C4C AA			            tax
  1531 				            
  1532 3C4D A0 10		            ldy #16
  1533 3C4F A9 00		            lda #0
  1534 3C51			wipe_it1            
  1535 3C51 9D 00 0E		            sta p0_area,x 
  1536 3C54 9D 00 0F		            sta p2_area,x
  1537 3C57 E8			            inx
  1538 3C58 88			            dey
  1539 3C59 D0 F6		            bne wipe_it1 
  1540 3C5B 60			            rts
  1541
  1542 3C5C			wipe_p2
  1543 3C5C A5 99		            lda player2_y
  1544 3C5E 18			            clc
  1545 3C5F 69 01		            adc #upper_margin
  1546 3C61 AA			            tax
  1547 				            
  1548 3C62 A0 10		            ldy #16
  1549 3C64 A9 00		            lda #0
  1550 3C66			wipe_it2            
  1551 3C66 9D 80 0E		            sta p1_area,x
  1552 3C69 9D 80 0F		            sta p3_area,x
  1553 3C6C E8			            inx
  1554 3C6D 88			            dey
  1555 3C6E D0 F6		            bne wipe_it2 
  1556 3C70 60			            rts
  1557
  1558 3C71			make_shape_index
  1559 3C71 A9 00		            lda #<pm_shapes
  1560 3C73 85 84		            sta shape_ptr
  1561 3C75 A9 60		            lda #>pm_shapes
  1562 3C77 85 85		            sta shape_ptr+1
  1563 				            
  1564 3C79 A2 00		            ldx #0
  1565 3C7B			fill_pm_tab
  1566 3C7B A5 84		            lda shape_ptr
  1567 3C7D 9D 00 14		            sta pm_shape_lo,x
  1568 3C80 A5 85		            lda shape_ptr+1
  1569 3C82 9D 80 14		            sta pm_shape_hi,x
  1570 				            
  1571 3C85 A5 84		            lda shape_ptr
  1572 3C87 18			            clc
  1573 3C88 69 20		            adc #32
  1574 3C8A 85 84		            sta shape_ptr
  1575 3C8C A5 85		            lda shape_ptr+1
  1576 3C8E 69 00		            adc #0
  1577 3C90 85 85		            sta shape_ptr+1
  1578 				            
  1579 3C92 E8			            inx
  1580 3C93 10 E6		            bpl fill_pm_tab
  1581 				            
  1582 3C95 60			            rts
  1583 				            
  1584 				; there are 128 shapes, each 32 bytes
  1585
  1586 				; y = shape index
  1587 3C96			shape_to_ptr
  1588 3C96 B9 00 14		            lda pm_shape_lo,y
  1589 3C99 85 84		            sta shape_ptr
  1590 3C9B B9 80 14		            lda pm_shape_hi,y
  1591 3C9E 85 85		            sta shape_ptr+1
  1592
  1593 3CA0 60			            rts
  1594
  1595 				; turn 1024 tables into 256 bytes for ball edge lookup
  1596 3CA1			make_outer_256
  1597 3CA1 A0 00		            ldy #0
  1598 3CA3 A2 00		            ldx #0
  1599 3CA5			conv_256
  1600 3CA5 BD 00 44		            lda outer_x_tab,x
  1601 3CA8 99 00 10		            sta outer_x_256,y
  1602 3CAB BD 00 45		            lda outer_x_tab+$100,x
  1603 3CAE 99 40 10		            sta outer_x_256+64,y
  1604 3CB1 BD 00 46		            lda outer_x_tab+$200,x
  1605 3CB4 99 80 10		            sta outer_x_256+128,y
  1606 3CB7 BD 00 47		            lda outer_x_tab+$300,x
  1607 3CBA 99 C0 10		            sta outer_x_256+192,y
  1608 				            
  1609 3CBD BD 00 48		            lda outer_y_tab,x
  1610 3CC0 99 00 11		            sta outer_y_256,y
  1611 3CC3 BD 00 49		            lda outer_y_tab+$100,x
  1612 3CC6 99 40 11		            sta outer_y_256+64,y
  1613 3CC9 BD 00 4A		            lda outer_y_tab+$200,x
  1614 3CCC 99 80 11		            sta outer_y_256+128,y
  1615 3CCF BD 00 4B		            lda outer_y_tab+$300,x
  1616 3CD2 99 C0 11		            sta outer_y_256+192,y
  1617
  1618 3CD5 E8			            inx
  1619 3CD6 E8			            inx
  1620 3CD7 E8			            inx
  1621 3CD8 E8			            inx
  1622 3CD9 C8			            iny
  1623 3CDA C0 40		            cpy #64
  1624 3CDC D0 C7		            bne conv_256            
  1625 3CDE 60			            rts
  1626
  1627 3CDF			show_score_p1
  1628 3CDF AD 2E 51		            lda score_p1
  1629 3CE2 4A			            lsr
  1630 3CE3 4A			            lsr
  1631 3CE4 4A			            lsr
  1632 3CE5 4A			            lsr
  1633 3CE6 F0 02		            beq do_space1
  1634 3CE8 09 10		            ora #16
  1635 3CEA			do_space1
  1636 3CEA 8D 0B 51		            sta score_chars_p1
  1637 3CED AD 2E 51		            lda score_p1
  1638 3CF0 29 0F		            and #15
  1639 3CF2 09 10		            ora #16
  1640 3CF4 8D 0C 51		            sta score_chars_p1+1
  1641 3CF7 60			            rts
  1642
  1643 3CF8			show_score_p2
  1644 3CF8 AD 2F 51		            lda score_p2
  1645 3CFB 4A			            lsr
  1646 3CFC 4A			            lsr
  1647 3CFD 4A			            lsr
  1648 3CFE 4A			            lsr
  1649 3CFF F0 02		            beq do_space2
  1650 3D01 09 10		            ora #16
  1651 3D03			do_space2
  1652 3D03 8D 2B 51		            sta score_chars_p2
  1653 3D06 AD 2F 51		            lda score_p2
  1654 3D09 29 0F		            and #15
  1655 3D0B 09 10		            ora #16
  1656 3D0D 8D 2C 51		            sta score_chars_p2+1
  1657 3D10 60			            rts
  1658 				                        
  1659 3D11			reset_score
  1660 3D11 A9 00		            lda #0
  1661 3D13 8D 2E 51		            sta score_p1
  1662 3D16 8D 2F 51		            sta score_p2
  1663 3D19 60			            rts            
  1664 				         
  1665 3D1A			inc_score_p1
  1666 3D1A F8			            sed
  1667 3D1B AD 2E 51		            lda score_p1
  1668 3D1E 18			            clc
  1669 3D1F 69 01		            adc #1
  1670 3D21 8D 2E 51		            sta score_p1    
  1671 3D24 D8			            cld
  1672 3D25 60			            rts
  1673
  1674 3D26			inc_score_p2
  1675 3D26 F8			            sed
  1676 3D27 AD 2F 51		            lda score_p2
  1677 3D2A 18			            clc
  1678 3D2B 69 01		            adc #1
  1679 3D2D 8D 2F 51		            sta score_p2
  1680 3D30 D8			            cld
  1681 3D31 60			            rts
  1682
  1683 				; calculate the difference between angle1 and angle2
  1684
  1685 				; input:
  1686 				; tmp_angle1 (0..255)
  1687 				; tmp_angle2 (0..255)
  1688
  1689 				; output:
  1690 				; tmp_angle_diff, A: difference between angle1 and angle2
  1691 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1692
  1693 3D32			calc_angle_diff
  1694 3D32 A9 00		            lda #0
  1695 3D34 85 B2		            sta add_to_angle
  1696 3D36 85 B4		            sta tmp_angle_direction
  1697
  1698 				; make sure we can compare angles, otherwise add $40 to angles
  1699 3D38 A5 B0		            lda tmp_angle1
  1700 3D3A C9 C0		            cmp #$c0
  1701 3D3C B0 06		            bcs too_large
  1702 3D3E A5 B1		            lda tmp_angle2
  1703 3D40 C9 C0		            cmp #$c0
  1704 3D42 90 12		            bcc not_too_large
  1705 3D44			too_large
  1706 3D44 A5 B0		            lda tmp_angle1
  1707 3D46 38			            sec
  1708 3D47 E9 40		            sbc #$40
  1709 3D49 85 B0		            sta tmp_angle1
  1710 				            
  1711 3D4B A5 B1		            lda tmp_angle2
  1712 3D4D 38			            sec
  1713 3D4E E9 40		            sbc #$40
  1714 3D50 85 B1		            sta tmp_angle2
  1715 				            
  1716 3D52 A9 40		            lda #$40
  1717 3D54 85 B2		            sta add_to_angle
  1718
  1719 3D56			not_too_large
  1720 3D56 A5 B1		            lda tmp_angle2
  1721 3D58 C5 B0		            cmp tmp_angle1
  1722 3D5A 90 0A		            bcc angle2_smaller_angle1
  1723 				; ball >= play
  1724 3D5C 38			            sec
  1725 3D5D E5 B0		            sbc tmp_angle1
  1726 3D5F 85 B7		            sta tmp_angle_diff
  1727 				            
  1728 3D61 E6 B4		            inc tmp_angle_direction
  1729 3D63 4C 6D 3D		            jmp diff_calculated
  1730 				                        
  1731 3D66			angle2_smaller_angle1
  1732 3D66 A5 B0		            lda tmp_angle1
  1733 3D68 38			            sec
  1734 3D69 E5 B1		            sbc tmp_angle2
  1735 3D6B 85 B7		            sta tmp_angle_diff
  1736
  1737 3D6D			diff_calculated
  1738 3D6D A5 B7		            lda tmp_angle_diff           
  1739 3D6F 60			            rts
  1740
  1741 				; X = angle
  1742 				; lookup magnitude of angle 0 to angle X
  1743 3D70			angle_to_magnitude
  1744 3D70 BD 00 4C		            lda magnitudes_lo,x
  1745 3D73 85 B8		            sta magnitude
  1746 3D75 BD 00 4D		            lda magnitudes_hi,x
  1747 3D78 85 B9		            sta magnitude+1
  1748 3D7A 60			            rts
  1749
  1750 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1751 3D7B			calc_abs_tmp_dx
  1752 3D7B A5 E8		            lda tmp_x2
  1753 3D7D 38			            sec
  1754 3D7E E5 E6		            sbc tmp_x1
  1755 3D80 B0 05		            bcs x2_le
  1756 3D82 49 FF		            eor #255
  1757 3D84 18			            clc
  1758 3D85 69 01		            adc #1
  1759 3D87 85 F2		x2_le       sta tmp_dx
  1760
  1761 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1762 3D89			calc_abs_tmp_dy
  1763 3D89 A5 E9		            lda tmp_y2
  1764 3D8B 38			            sec
  1765 3D8C E5 E7		            sbc tmp_y1
  1766 3D8E B0 05		            bcs y2_le
  1767 3D90 49 FF		            eor #255
  1768 3D92 18			            clc
  1769 3D93 69 01		            adc #1
  1770 3D95 85 F3		y2_le       sta tmp_dy
  1771 3D97 60			            rts
  1772 				            
  1773 3D98			calc_dx_div_magnitude
  1774 3D98 A9 00		            lda #0
  1775 3D9A 85 E2		            sta _dividend
  1776 3D9C A5 F2		            lda tmp_dx
  1777 3D9E 85 E3		            sta _dividend+1
  1778
  1779 3DA0 A5 B9		            lda magnitude+1
  1780 3DA2 85 E0		            sta _divisor
  1781 3DA4 A9 00		            lda #0
  1782 3DA6 85 E1		            sta _divisor+1
  1783 				            
  1784 3DA8 20 D0 3D		            jsr _div16
  1785
  1786 				; todo multiply result with velocity            
  1787 3DAB A5 E2		            lda _result
  1788 3DAD 85 EE		            sta step_x
  1789 3DAF A5 E3		            lda _result+1
  1790 3DB1 85 EF		            sta step_x+1
  1791 				            
  1792 3DB3 60			            rts
  1793 				            
  1794 3DB4			calc_dy_div_magnitude
  1795 3DB4 A9 00		            lda #0
  1796 3DB6 85 E2		            sta _dividend
  1797 3DB8 A5 F3		            lda tmp_dy
  1798 3DBA 85 E3		            sta _dividend+1
  1799 				            
  1800 3DBC A5 B9		            lda magnitude+1
  1801 3DBE 85 E0		            sta _divisor
  1802 3DC0 A9 00		            lda #0
  1803 3DC2 85 E1		            sta _divisor+1
  1804
  1805 3DC4 20 D0 3D		            jsr _div16
  1806 				            
  1807 				; todo multiply result with velocity
  1808 3DC7 A5 E2		            lda _result
  1809 3DC9 85 F0		            sta step_y
  1810 3DCB A5 E3		            lda _result+1
  1811 3DCD 85 F1		            sta step_y+1
  1812 				            
  1813 3DCF 60			            rts
  1814
  1815 				; divide 16bit
  1816 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1817
  1818 				; _result = _dividend / divisor
  1819
  1820 3DD0 A9 00		_div16      lda #0          ;preset remainder to 0
  1821 3DD2 85 E4		            sta _remainder
  1822 3DD4 85 E5		            sta _remainder+1
  1823 3DD6 A2 10		            ldx #16         ;repeat for each bit: ...
  1824
  1825 3DD8 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1826 3DDA 26 E3		            rol _dividend+1  
  1827 3DDC 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1828 3DDE 26 E5		            rol _remainder+1
  1829 3DE0 A5 E4		            lda _remainder
  1830 3DE2 38			            sec
  1831 3DE3 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1832 3DE5 A8			            tay         ;lb result -> Y, for we may need it later
  1833 3DE6 A5 E5		            lda _remainder+1
  1834 3DE8 E5 E1		            sbc _divisor+1
  1835 3DEA 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1836
  1837 3DEC 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1838 3DEE 84 E4		            sty _remainder   
  1839 3DF0 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1840
  1841 3DF2 CA			_div_skip   dex
  1842 3DF3 D0 E3		            bne _div_loop 
  1843 3DF5 60			            rts
  1844
  1845 				; Calculations for step size
  1846
  1847 				; not optimised for speed or size
  1848 				; step should be set according to the angle
  1849
  1850 				; move in straight line (x1,y1) to (x2,y2)
  1851
  1852 				; 1. set start/end of line
  1853 				; set (tmp_x1, tmp_y1)
  1854 				; set (tmp_x2, tmp_y2)
  1855
  1856 				; 2. init. current_x, current_y
  1857 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1858 				; - calculates step sizes for x,y
  1859 				; - calculated directions for x,y
  1860 				;            jsr init_current_xy
  1861
  1862 				; 3. use current_x, current_y to plot or set a position
  1863 				;            lda current_x+1
  1864 				;            sta x_position
  1865 				;            lda current_y+1
  1866 				;            sta y_position
  1867 				;            jsr plot_pixel
  1868
  1869 				; 4. move current_x, current_y to next position on line
  1870 				; A=0 still moving
  1871 				;           move_current_xy
  1872
  1873 3DF6			init_current_xy
  1874 3DF6 A9 7F		            lda #$7f      ; was 128 for half pixel
  1875 3DF8 85 EA		            sta current_x
  1876 3DFA 85 EC		            sta current_y
  1877
  1878 3DFC A5 E6		            lda tmp_x1
  1879 3DFE 85 EB		            sta current_x+1
  1880 				            
  1881 3E00 A5 E7		            lda tmp_y1
  1882 3E02 85 ED		            sta current_y+1
  1883
  1884 				; dx = abs(tmp_x1 - tmp_x2)
  1885 3E04 20 7B 3D		            jsr calc_abs_tmp_dx
  1886
  1887 				; dy = abs(tmp_y1 - tmp_y2)
  1888 3E07 20 89 3D		            jsr calc_abs_tmp_dy
  1889
  1890 				; set directions
  1891 3E0A A5 E6		            lda tmp_x1
  1892 3E0C C5 E8		            cmp tmp_x2
  1893 3E0E 90 04		            bcc x1_smaller_x2
  1894 				; x1 >= x2
  1895 3E10 A9 01		            lda #1
  1896 3E12 D0 02		            bne set_dir_x
  1897 3E14			x1_smaller_x2
  1898 3E14 A9 00		            lda #0
  1899 3E16			set_dir_x
  1900 3E16 85 FA		            sta dir_x
  1901 				            
  1902 3E18 A5 E7		            lda tmp_y1
  1903 3E1A C5 E9		            cmp tmp_y2
  1904 3E1C 90 04		            bcc y1_smaller_y2
  1905 				; y1 >= y2
  1906 3E1E A9 01		            lda #1
  1907 3E20 D0 02		            bne set_dir_y
  1908 3E22			y1_smaller_y2
  1909 3E22 A9 00		            lda #0
  1910 3E24			set_dir_y
  1911 3E24 85 FB		            sta dir_y
  1912
  1913 				; Calculate diff between start angle and end angle
  1914
  1915 3E26 A5 AA		            lda ball_angle_start
  1916 3E28 85 B0		            sta tmp_angle1
  1917 3E2A A5 AB		            lda ball_angle_end
  1918 3E2C 85 B1		            sta tmp_angle2
  1919 				            
  1920 3E2E 20 32 3D		            jsr calc_angle_diff
  1921
  1922 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1923 3E31 A6 B7		            ldx tmp_angle_diff
  1924 3E33 20 70 3D		            jsr angle_to_magnitude
  1925 				            
  1926 3E36 20 98 3D		            jsr calc_dx_div_magnitude
  1927 3E39 20 B4 3D		            jsr calc_dy_div_magnitude
  1928 				            
  1929 				; Calculate step size by ball speed
  1930 				            
  1931 				; step_x = step_x * speed
  1932 				            
  1933 3E3C A5 EE		            lda step_x
  1934 3E3E 85 F6		            sta _multiplicand
  1935 3E40 A5 EF		            lda step_x+1
  1936 3E42 85 F7		            sta _multiplicand+1
  1937 3E44 A5 AC		            lda ball_speed
  1938 3E46 85 F8		            sta _multiplier
  1939
  1940 3E48 20 DD 35		            jsr _multi8
  1941 				;result in .A (low byte, also in .X) and .Y (high byte)
  1942 3E4B 85 EE		            sta step_x
  1943 3E4D 84 EF		            sty step_x+1
  1944 3E4F			skip_step_x_hi
  1945 				            
  1946 				; step_y = step_y * speed
  1947
  1948 3E4F A5 F0		            lda step_y
  1949 3E51 85 F6		            sta _multiplicand
  1950 3E53 A5 F1		            lda step_y+1
  1951 3E55 85 F7		            sta _multiplicand+1
  1952 3E57 A5 AC		            lda ball_speed
  1953 3E59 85 F8		            sta _multiplier
  1954
  1955 3E5B 20 DD 35		            jsr _multi8
  1956 				;result in .A (low byte, also in .X) and .Y (high byte)
  1957 3E5E 85 F0		            sta step_y
  1958 3E60 84 F1		            sty step_y+1
  1959 3E62			skip_step_y_hi
  1960
  1961 3E62 60			            rts
  1962
  1963 				; Move ball position 
  1964 				; Add one step, until end reached
  1965 				; Input:
  1966 				; - step size (step_x, step_y)
  1967 				; - current ball position (current_x, current_y)
  1968 				; - end position (tmp_x2, tmp_y2)
  1969 				; Output:
  1970 				; A (0 = still moving, 1 = end reached)
  1971 3E63			move_current_xy
  1972 3E63 A9 00		            lda #0
  1973 3E65 85 FC		            sta line_end_x
  1974 3E67 85 FD		            sta line_end_y
  1975
  1976 				; sets line end indicators here
  1977 3E69 20 86 3E		            jsr move_current_x
  1978 3E6C 20 C6 3E		            jsr move_current_y
  1979
  1980 3E6F A5 FC		            lda line_end_x
  1981 3E71 25 FD		            and line_end_y
  1982 3E73 F0 10		            beq no_end_reached
  1983 				            
  1984 				; set current to (x2,y2)
  1985 3E75 A5 E8		            lda tmp_x2
  1986 3E77 85 EB		            sta current_x+1
  1987 3E79 A5 E9		            lda tmp_y2
  1988 3E7B 85 ED		            sta current_y+1
  1989 				            
  1990 3E7D A9 00		            lda #0
  1991 3E7F 85 EA		            sta current_x
  1992 3E81 85 EC		            sta current_y
  1993 				            
  1994 3E83 A9 01		            lda #1 ; end reached
  1995 				            
  1996 3E85			no_end_reached  ; A = 0
  1997 3E85 60			            rts
  1998
  1999 3E86			move_current_x
  2000 3E86 A5 FA		            lda dir_x
  2001 3E88 D0 18		            bne move_current_left
  2002
  2003 				; move right, add
  2004 3E8A A5 EA		            lda current_x
  2005 3E8C 18			            clc
  2006 3E8D 65 EE		            adc step_x
  2007 3E8F 85 EA		            sta current_x
  2008 3E91 A5 EB		            lda current_x+1
  2009 3E93 65 EF		            adc step_x+1
  2010 3E95 85 EB		            sta current_x+1
  2011
  2012 3E97 A5 EB		            lda current_x+1
  2013 3E99 C5 E8		            cmp tmp_x2
  2014 3E9B 90 04		            bcc no_line_end
  2015 3E9D			exact_end_x
  2016 3E9D A9 01		            lda #1
  2017 3E9F 85 FC		            sta line_end_x 
  2018 3EA1			no_line_end
  2019 3EA1 60			            rts
  2020 				            
  2021 3EA2			move_current_left
  2022 3EA2 A5 EA		            lda current_x
  2023 3EA4 38			            sec
  2024 3EA5 E5 EE		            sbc step_x
  2025 3EA7 90 01		            bcc clear_skip
  2026 3EA9 EA			            nop
  2027 3EAA			clear_skip
  2028 3EAA 85 EA		            sta current_x
  2029 3EAC A5 EB		            lda current_x+1
  2030 3EAE E5 EF		            sbc step_x+1
  2031 3EB0 85 EB		            sta current_x+1
  2032 3EB2 90 0B		            bcc below_zero
  2033 				                        
  2034 3EB4 A5 E8		            lda tmp_x2
  2035 3EB6 C5 EB		            cmp current_x+1
  2036 3EB8 90 E7		            bcc no_line_end
  2037 3EBA A9 01		            lda #1
  2038 3EBC 85 FC		            sta line_end_x            
  2039 3EBE 60			            rts
  2040 3EBF			below_zero            
  2041 3EBF A9 01		            lda #1
  2042 3EC1 85 FC		            sta line_end_x
  2043 3EC3 85 FD		            sta line_end_y
  2044 3EC5 60			            rts
  2045 3EC6			move_current_y
  2046 3EC6 A5 FB		            lda dir_y
  2047 3EC8 D0 18		            bne move_current_up
  2048
  2049 				; move down, add
  2050 3ECA A5 EC		            lda current_y
  2051 3ECC 18			            clc
  2052 3ECD 65 F0		            adc step_y
  2053 3ECF 85 EC		            sta current_y
  2054 3ED1 A5 ED		            lda current_y+1
  2055 3ED3 65 F1		            adc step_y+1
  2056 3ED5 85 ED		            sta current_y+1
  2057 				            
  2058 3ED7 A5 ED		            lda current_y+1
  2059 3ED9 C5 E9		            cmp tmp_y2
  2060 3EDB 90 C4		            bcc no_line_end
  2061 3EDD			exact_end_y
  2062 3EDD A9 01		            lda #1
  2063 3EDF 85 FD		            sta line_end_y
  2064 3EE1 60			            rts
  2065
  2066 3EE2			move_current_up
  2067 3EE2 A5 EC		            lda current_y
  2068 3EE4 38			            sec
  2069 3EE5 E5 F0		            sbc step_y
  2070 3EE7 85 EC		            sta current_y
  2071 3EE9 A5 ED		            lda current_y+1
  2072 3EEB E5 F1		            sbc step_y+1
  2073 3EED 90 D0		            bcc below_zero
  2074 3EEF 85 ED		            sta current_y+1
  2075 				            
  2076 3EF1 A5 E9		            lda tmp_y2
  2077 3EF3 C5 ED		            cmp current_y+1
  2078 3EF5 90 AA		            bcc no_line_end
  2079 3EF7 A9 01		            lda #1
  2080 3EF9 85 FD		            sta line_end_y
  2081 3EFB 60			            rts                            
  2082 				            
  2083 3EFC			init_sprites
  2084 3EFC A2 00		            ldx #0
  2085 3EFE 8A			            txa
  2086 3EFF			set_p
  2087 3EFF 9D 00 0E		            sta p0_area,x
  2088 3F02 9D 80 0E		            sta p1_area,x
  2089 3F05 9D 00 0F		            sta p2_area,x
  2090 3F08 9D 80 0F		            sta p3_area,x
  2091 3F0B E8			            inx
  2092 3F0C 10 F1		            bpl set_p
  2093
  2094 3F0E A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2095 3F10 8D 6F 02		            sta GPRIOR
  2096
  2097 3F13 A9 0C		            lda #>pm_area
  2098 3F15 8D 07 D4		            sta PMBASE
  2099
  2100 3F18 A9 03		            lda #3          ; P/M both on
  2101 3F1A 8D 1D D0		            sta GRACTL
  2102
  2103 3F1D A9 90		            lda #$90
  2104 3F1F 8D 02 D0		            sta HPOSP2
  2105 3F22 A9 A0		            lda #$A0
  2106 3F24 8D 03 D0		            sta HPOSP3  
  2107 3F27 60			            rts
  2108
  2109 3F28			init_colors
  2110 3F28 A9 5A		            lda #BASE_COLOR_P1+10
  2111 3F2A 8D C2 02		            sta PCOLR2
  2112 3F2D A9 BA		            lda #BASE_COLOR_P2+10
  2113 3F2F 8D C3 02		            sta PCOLR3
  2114 				            
  2115 3F32 A9 00		            lda #0
  2116 3F34 8D C6 02		            sta COLOR2
  2117
  2118 3F37 A9 0E		            lda #HEADER_FG_COLOR
  2119 3F39 8D C5 02		            sta COLOR1
  2120
  2121 3F3C A9 50		            lda #HEADER_P1_COLOR
  2122 3F3E 8D C0 02		            sta PCOLR0
  2123 3F41 A9 B0		            lda #HEADER_P2_COLOR
  2124 3F43 8D C1 02		            sta PCOLR1
  2125
  2126 3F46 60			            rts
  2127
  2128 3F47			previous_consol
  2129 3F47 00			            dta 0
  2130
  2131 3F48			current_level_index
  2132 3F48 00			            dta 0
  2133 = 0007			NR_OF_LEVELS = 7
  2134 = 0000			INIT_LEVEL_INDEX = 0
  2135 3F49			level_speeds
  2136 3F49 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2137 				;level_speeds_lo
  2138 				;            dta 128
  2139 3F50			stick_slow_speed_tab
  2140 3F50 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2141 3F57			stick_fast_speed_tab
  2142 3F57 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2143
  2144 				; X = level (0..NR_OF_LEVELS)
  2145 3F5E			set_level_ball_speed
  2146 3F5E BD 50 3F		            lda stick_slow_speed_tab,x
  2147 3F61 85 88		            sta stick_slow_speed
  2148 3F63 BD 57 3F		            lda stick_fast_speed_tab,x
  2149 3F66 85 89		            sta stick_fast_speed
  2150
  2151 3F68 BD 49 3F		            lda level_speeds,x
  2152 3F6B 85 AC		            sta ball_speed
  2153 3F6D 8A			            txa
  2154 3F6E 18			            clc
  2155 3F6F 69 01		            adc #1
  2156 3F71 09 10		            ora #16
  2157 3F73 8D AB 52		            sta level_char
  2158 3F76 60			            rts
  2159 				            
  2160 3F77			increase_level
  2161 3F77 EE 48 3F		            inc current_level_index
  2162 3F7A AD 48 3F		            lda current_level_index
  2163 3F7D C9 07		            cmp #NR_OF_LEVELS
  2164 3F7F D0 05		            bne ok_level
  2165 3F81 A9 00		            lda #INIT_LEVEL_INDEX
  2166 3F83 8D 48 3F		            sta current_level_index
  2167 3F86			ok_level           
  2168 3F86 60			            rts
  2169
  2170 3F87			increase_player_mode
  2171 3F87 E6 8A		            inc player_mode
  2172 3F89 A5 8A		            lda player_mode
  2173 3F8B C9 03		            cmp #NR_OF_PLAYER_MODES
  2174 3F8D D0 04		            bne ok_player_mode
  2175 3F8F A9 00		            lda #INIT_PLAYER_MODE
  2176 3F91 85 8A		            sta player_mode
  2177 3F93			ok_player_mode
  2178 3F93 60			            rts
  2179
  2180 3F94			show_player_mode
  2181 3F94 A6 8A		            ldx player_mode
  2182 3F96 BD 3F 53		            lda player_mode_lo,x
  2183 3F99 8D F9 50		            sta menu_line2_ptr
  2184 3F9C BD 42 53		            lda player_mode_hi,x
  2185 3F9F 8D FA 50		            sta menu_line2_ptr+1
  2186 3FA2 60			            rts
  2187
  2188 3FA3			            .align $100
  2189 4000			inner_x_tab
  2190 = 4100			inner_y_tab = *+$100
  2191 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2192 				      
  2193 4200			            .align $400            
  2194 				; outer circle 1024 plot points on 360 degrees
  2195 4400			outer_x_tab
  2196 = 4800			outer_y_tab = *+1024
  2197 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2198 				           
  2199 4C00			            .align $400
  2200 				; table of magnitudes (length) between angle 0 and 0..255
  2201 				; fixed point 8.8 : hi.lo
  2202 4C00			magnitudes_lo
  2203 = 4D00			magnitudes_hi = *+256
  2204 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2205
  2206 4E00			            .align $400
  2207 5000			display_list
  2208 5000-512F> C2		            dta $42+128         ; dli_header
  2209 5001 06 51		            dta a(score_line)
  2210
  2211 				; 102 x 40 = 4080 bytes            
  2212 5003 4F			            dta $4f
  2213 5004 00 70		            dta a(screen_mem1)
  2214 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2215 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2216 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2217 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2218
  2219 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2220 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2221 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2222 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2223
  2224 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2225 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2226 5055			menu_dl_hook
  2227 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2228 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2229
  2230 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2231
  2232 				; 42 + 60 = 102, 4080 bytes
  2233 506B 4F			            dta $4f
  2234 506C 00 80		            dta a(screen_mem2)
  2235 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2236
  2237 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2238 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2239 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2240 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2241
  2242 5095 0F 0F		            dta $0f,$0f
  2243
  2244 				; 60 lines
  2245 5097			menu_dl_end
  2246 5097 4F			            dta $4f
  2247 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2248 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2249 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2250 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2251 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2252
  2253 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2254 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2255 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2256 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2257
  2258 				; 20 x 40 = 800
  2259 50D5 4F			            dta $4f
  2260 50D6 00 90		            dta a(screen_mem3)       
  2261 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2262 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2263 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2264 				            
  2265 50EB 41			            dta $41
  2266 50EC 00 50		            dta a(display_list)
  2267
  2268 50EE			menu_dl_part
  2269 50EE 80			            dta 128 ; dli_menu
  2270 50EF 20			            dta $20
  2271 50F0 42			            dta $42
  2272 50F1 00 52		            dta a(rotor_logo_text)
  2273 50F3 02			            dta 2
  2274 50F4 30			            dta $30
  2275 50F5 46			            dta $46
  2276 50F6			menu_line1_ptr
  2277 50F6 50 52		            dta a(controller_text)
  2278 50F8 46			            dta $46
  2279 50F9			menu_line2_ptr
  2280 50F9 64 52		            dta a(two_player_text)
  2281 50FB 46			            dta $46
  2282 50FC			menu_line3_ptr
  2283 50FC 9F 52		            dta a(level_text)
  2284 50FE 30			            dta $30
  2285 50FF 42			            dta $42
  2286 5100 B3 52		            dta a(start_text)
  2287 5102 10			            dta $10
  2288 5103 01			            dta $01 ; jump
  2289 5104 97 50		            dta a(menu_dl_end)
  2290
  2291 5106			score_line  
  2292 5106 00 2F 2E 25 00	            dta d' ONE '
  2293 510B			score_chars_p1
  2294 510B 0D 0D 00		            dta d'-- '
  2295
  2296 510E 00 00 00 00 00 00 +             dta d'          '
  2297 5118 00 00 00 00 00 00 +             dta d'          '
  2298
  2299 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2300 512B			score_chars_p2
  2301 512B 0D 0D 00		            dta d'-- '
  2302
  2303 512E 00			score_p1    dta 0
  2304 512F 00			score_p2    dta 0
  2305
  2306 5130			            .align $100
  2307 5200			rotor_logo_text
  2308 5200-5344> 00 00 00 00 +             dta d'              '
  2309 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2310 521A 40			            dta $40
  2311 521B 00 00 00 00 00 00 +             dta d'             '
  2312 5228 00 00 00 00 00 00 +             dta d'              '
  2313 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2314 5242 00 00 00 00 00 00 +             dta d'              '
  2315
  2316 5250			controller_text
  2317 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2318 525A			driver_screen
  2319 525A 00 00 00 00 00 00 +             dta d'          '
  2320
  2321 5264			two_player_text
  2322 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2323
  2324 5278			one_player_text
  2325 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2326
  2327 528B			demo_player_text
  2328 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2329
  2330 529F			level_text
  2331 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2332 52AB			level_char            
  2333 52AB 11 00 00 00 00 00 +             dta d'1       '
  2334
  2335 52B3			start_text
  2336 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2337 52DB			stick_text
  2338 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2339 52E3			paddle_text
  2340 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2341 52EB			driving_text
  2342 52EB 24 32 29 36 29 2E +             dta d'DRIVING '
  2343 52F3			computer_text
  2344 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2345
  2346 52FB			empty_text
  2347 52FB 00 00 00 00 00 00 +             dta d'                    '
  2348 530F			winner_one_text
  2349 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2350 5323			winner_two_text
  2351 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2352
  2353 5337			driver_text_lo
  2354 5337 DB			            dta <stick_text
  2355 5338 E3			            dta <paddle_text
  2356 5339 EB			            dta <driving_text
  2357 533A F3			            dta <computer_text
  2358 				            
  2359 533B			driver_text_hi
  2360 533B 52			            dta >stick_text
  2361 533C 52			            dta >paddle_text
  2362 533D 52			            dta >driving_text
  2363 533E 52			            dta >computer_text
  2364
  2365 533F			player_mode_lo
  2366 533F 64			            dta <two_player_text
  2367 5340 78			            dta <one_player_text
  2368 5341 8B			            dta <demo_player_text
  2369
  2370 5342			player_mode_hi
  2371 5342 52			            dta >two_player_text
  2372 5343 52			            dta >one_player_text
  2373 5344 52			            dta >demo_player_text
  2374
  2375 				; 4 KB
  2376 				; 128 x 32 bytes shapes
  2377 5345			            .align $1000
  2378 6000			pm_shapes
  2379 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2380
  2381 				; 9 KB for backdrop image
  2382 7000			            .align $1000
  2383 = 7000			screen_mem1 = * ; 4K
  2384 				;            org screen_mem1
  2385 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2386
  2387 7FF0			            .align $1000
  2388 = 8000			screen_mem2 = * ; 4K
  2389 				;            org screen_mem2
  2390 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2391
  2392 8FF0			            .align $1000
  2393 = 9000			screen_mem3 = * ; 1K
  2394 				;            org screen_mem3
  2395 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2396
  2397 02E0-02E1> 47 35		            run main
