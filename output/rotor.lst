mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-08
     4 				; Version 2.5.0
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for Atari mouse
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D209			KBCODE      = $d209
   102
   103 = D20A			RANDOM      = $d20a
   104
   105 = D20F			SKSTAT      = $d20f
   106
   107 = D300			PORTA       = $d300
   108
   109 = D407			PMBASE      = $d407
   110 = D40A			WSYNC       = $d40a
   111 = D40E			NMIEN       = $d40e
    19
    20 				; color scheme
    21 = 0050			BASE_COLOR_P1   = $50   ; purple
    22 = 00B0			BASE_COLOR_P2   = $b0   ; green
    23
    24 = 000E			HEADER_FG_COLOR = 14
    25 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    26 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    27
    28 				; must be in decimal format, so $11 is 11
    29 = 0011			MAX_SCORE   = $11
    30
    31 = 0C00			pm_area     = $0c00
    32 = 0D80			msl_area    = pm_area+$180
    33 = 0E00			p0_area     = pm_area+$200
    34 = 0E80			p1_area     = pm_area+$280
    35 = 0F00			p2_area     = pm_area+$300
    36 = 0F80			p3_area     = pm_area+$380
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1000			outer_x_256     = $1000
    40 = 1100			outer_y_256     = $1100
    41
    42 = 1200			screen_y_lo     = $1200
    43 = 1300			screen_y_hi     = $1300
    44
    45 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    46 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    47
    48 = 0140			WIDTH           = 320
    49 = 00C0			HEIGHT          = 192
    50
    51 = 0028			SCREEN_WIDTH    = 40
    52
    53 = 0030			outer_x_margin  = 48 ;47-32
    54 = 0040			inner_x_margin  = 64
    55
    56 = 00A0			circle_center_x = WIDTH/2
    57 = 0060			circle_center_y = HEIGHT/2
    58
    59 = 0006			ball_top_margin     = 6
    60 = 0045			ball_left_margin    = 64+5
    61
    62 				; pm upper margin
    63 = 0001			upper_margin    = 1
    64 = 0020			left_margin     = 32
    65
    66 = 0080			music_toggle    = $80
    67
    68 = 0081			shadow_HPOSP0   = $81
    69 = 0082			shadow_HPOSP1   = $82
    70
    71 = 0083			winner_color    = $83
    72
    73 = 0084			shape_ptr       = $84
    74 = 0086			tmp_screen      = $86
    75
    76 = 0088			stick_slow_speed = $88
    77 = 0089			stick_fast_speed = $89
    78
    79 = 008A			player_mode     = $8a
    80 = 0000			MODE_2_PLAYER   = 0
    81 = 0001			MODE_1_PLAYER   = 1
    82 = 0002			MODE_DEMO       = 2
    83 = 0003			NR_OF_PLAYER_MODES = 3
    84 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    85
    86 = 008B			player_mode_saved = $8b
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00AD			edge_collision      = $ad
   126 = 00AE			edge_hit_count      = $ae
   127
   128 = 00B0			tmp_angle1          = $b0
   129 = 00B1			tmp_angle2          = $b1
   130 = 00B2			add_to_angle        = $b2
   131 = 00B3			angle_diff_bat      = $b3
   132 = 00B4			tmp_angle_direction = $b4
   133 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   134 = 00B6			game_restart        = $b6
   135 = 00B7			tmp_angle_diff      = $b7
   136 = 00B8			magnitude           = $b8       ; word
   137
   138 = 00BA			robot_angle_end     = $ba       ; 2 bytes
   139 = 00BA			robot1_angle_end    = robot_angle_end
   140 = 00BB			robot2_angle_end    = robot_angle_end+1
   141
   142 				; $c0 - $df free for music
   143
   144 = 00E0			_divisor    = $e0   ; word
   145 = 00E2			_dividend   = $e2   ; word
   146 = 00E4			_remainder  = $e4   ; word
   147 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   148
   149 = 00E6			tmp_x1      = $e6   ; byte
   150 = 00E7			tmp_y1      = $e7   ; byte
   151 = 00E8			tmp_x2      = $e8   ; byte
   152 = 00E9			tmp_y2      = $e9   ; byte
   153
   154 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   155 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   156
   157 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   158 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   159
   160 = 00F2			tmp_dx      = $f2  ; byte
   161 = 00F3			tmp_dy      = $f3  ; byte
   162
   163 = 00F6			_multiplicand   = $f6   ; word
   164 = 00F8			_multiplier     = $f8   ; byte
   165
   166 				; direction:
   167 				; 0 : x1<x2 or y1<y2 = add
   168 				; 1 ; x1>=y2 or y1>=y2 = subtract
   169
   170 = 00FA			dir_x       = $fa  ; byte
   171 = 00FB			dir_y       = $fb  ; byte
   172
   173 = 00FC			line_end_x  = $fc  ; byte
   174 = 00FD			line_end_y  = $fd  ; byte
   175
   176 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   177
   178 				; real data is loaded at $2000 ($1700+$900)
   179 BE10			            org $1700
   180 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   181
   182 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous mouse value (player 1,2)
    19 3401			prev_mouse_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-4006> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_mouse_value
    27 340B 8D 02 34		            sta prev_mouse_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 3443			reset_driver_mode
    61 3443 A9 00		            lda #0
    62 3445 8D BE 32		            sta driver_mode     ; reset driver mode
    63 3448 60			            rts
    64
    65 				; stick detect by using left/right
    66 				; paddle by connecting/rotate
    67 				; mouse controller by movement
    68
    69 				; return A = driver mode
    70 				; 0 = stick detected
    71 				; 1 = paddle detected
    72 				; 2 = mouse detected
    73
    74 3449			driver_detect
    75 3449 AD 70 02		            lda PADDL0
    76 344C C9 E4		            cmp #228
    77 344E D0 07		            bne paddle_detect
    78 3450 AD 71 02		            lda PADDL1
    79 3453 C9 E4		            cmp #228
    80 3455 F0 06		            beq no_paddle_detect
    81 3457			paddle_detect
    82 3457 A9 01		            lda #1
    83 3459 8D BE 32		            sta driver_mode
    84 345C 60			            rts
    85
    86 345D			no_paddle_detect
    87 345D AD BE 32		            lda driver_mode
    88 3460 C9 02		            cmp #2
    89 3462 F0 0C		            beq keep_mouse
    90 3464 AD 78 02		            lda STICK0
    91 3467 C9 0C		            cmp #12
    92 3469 D0 06		            bne no_mouse_detect
    93 346B A9 02		            lda #2
    94 346D 8D BE 32		            sta driver_mode
    95 3470			keep_mouse
    96 3470 60			            rts
    97
    98 3471			no_mouse_detect
    99 3471 C9 07		            cmp #7      ; paddle button also gives this
   100 3473 F0 04		            beq stick_detect    
   101 3475 C9 0B		            cmp #11     ; paddle button also gives this
   102 3477 D0 06		            bne no_stick_detect
   103 3479			stick_detect
   104 3479 A9 00		            lda #0
   105 347B 8D BE 32		            sta driver_mode
   106 347E 60			            rts
   107
   108 347F			no_stick_detect
   109 				; default is the last value
   110 347F AD BE 32		            lda driver_mode
   111 3482 60			            rts
   112
   113 				; move player 1/2
   114 				; right - clockwise, left = anti-clockwise
   115
   116 				; X = 0, player 1
   117 				; X = 1, player 2
   118
   119 				; A = driver mode:
   120 				; 0 : stick
   121 				; 1 : paddle
   122 				; 2 : mouse
   123 				; 3 : computer
   124
   125 3483			main_driver
   126 3483 AC BE 32		            ldy driver_mode
   127 3486 B9 95 34		            lda driver_lo,y
   128 3489 8D 93 34		            sta driver_ptr
   129 348C B9 99 34		            lda driver_hi,y
   130 348F 8D 94 34		            sta driver_ptr+1
   131
   132 = 3493			driver_ptr = *+1
   133 3492 4C FF FF		            jmp $ffff  
   134
   135 3495			driver_lo
   136 3495 9D			            dta <driver_stick
   137 3496 0B			            dta <driver_paddle
   138 3497 3E			            dta <driver_mouse
   139 3498 9D			            dta <driver_stick
   140
   141 3499			driver_hi
   142 3499 34			            dta >driver_stick
   143 349A 35			            dta >driver_paddle
   144 349B 35			            dta >driver_mouse
   145 349C 34			            dta >driver_stick
   146
   147 				; joystick driver
   148
   149 349D			driver_stick
   150 349D BD 78 02		            lda STICK0,x
   151 34A0 C9 0F		            cmp #15
   152 34A2 F0 31		            beq move_done
   153 34A4 C9 0B		            cmp #11
   154 34A6 D0 16		            bne no_left
   155
   156 34A8 B5 9C		            lda p1_angle,x
   157 34AA 38			            sec
   158 34AB E5 88		            sbc stick_slow_speed
   159 34AD 95 9C		            sta p1_angle,x
   160
   161 34AF BD 84 02		            lda STRIG0,x
   162 34B2 D0 07		            bne no_fast
   163
   164 34B4 B5 9C		            lda p1_angle,x
   165 34B6 38			            sec
   166 34B7 E5 89		            sbc stick_fast_speed
   167 34B9 95 9C		            sta p1_angle,x
   168 34BB			no_fast
   169 				            
   170 34BB 4C D5 34		            jmp move_done
   171 34BE C9 07		no_left     cmp #7
   172 34C0 D0 13		            bne move_done
   173
   174 34C2 B5 9C		            lda p1_angle,x
   175 34C4 18			            clc
   176 34C5 65 88		            adc stick_slow_speed
   177 34C7 95 9C		            sta p1_angle,x
   178
   179 34C9 BD 84 02		            lda STRIG0,x
   180 34CC D0 07		            bne no_fast_right
   181
   182 34CE B5 9C		            lda p1_angle,x
   183 34D0 18			            clc
   184 34D1 65 89		            adc stick_fast_speed
   185 34D3 95 9C		            sta p1_angle,x
   186 34D5			no_fast_right
   187 34D5			move_done
   188 34D5 60			            rts
   189
   190 				; check if player1 button is pressed
   191 				; A=0 not pressed, 1=pressed
   192
   193 34D6			is_player1_button_pressed
   194 34D6 AD BE 32		            lda driver_mode
   195 34D9 C9 01		            cmp #1
   196 34DB F0 07		            beq check_player1_paddle_fire
   197
   198 34DD AD 84 02		            lda STRIG0
   199 34E0 F0 1C		            beq fire_pressed
   200 34E2 D0 24		            bne fire_not_pressed
   201
   202 34E4			check_player1_paddle_fire
   203 34E4 AD 78 02		            lda STICK0
   204 34E7 C9 0B		            cmp #11
   205 34E9 F0 13		            beq fire_pressed
   206 34EB D0 1B		            bne fire_not_pressed
   207
   208 				; X=port number to check (paddle uses only port 1)
   209 				; check fire button (paddle uses left/right stick as fire button)
   210 				; A=0 not pressed, 1=pressed
   211
   212 34ED			is_both_buttons
   213 34ED AD BE 32		            lda driver_mode
   214 34F0 C9 01		            cmp #1
   215 34F2 F0 0D		            beq check_paddle_fire
   216
   217 34F4 AD 84 02		            lda STRIG0
   218 34F7 D0 0F		            bne fire_not_pressed
   219 34F9 AD 85 02		            lda STRIG1
   220 34FC D0 0A		            bne fire_not_pressed
   221
   222 34FE			fire_pressed
   223 34FE A9 01		            lda #1
   224 3500 60			            rts
   225
   226 3501			check_paddle_fire
   227 3501 AD 78 02		            lda STICK0
   228 3504 C9 03		            cmp #3
   229 3506 F0 F6		            beq fire_pressed
   230
   231 3508			fire_not_pressed
   232 3508 A9 00		            lda #0
   233 350A 60			            rts
   234
   235 				; paddle driver
   236 				            
   237 350B			driver_paddle            
   238 350B BD 70 02		            lda PADDL0,x
   239 350E A8			            tay
   240 350F B9 00 33		            lda paddle_to_256,y
   241 3512 5D 75 35		            eor paddle_offsets,x
   242 3515 95 9C		            sta p1_angle,x
   243 3517 60			            rts
   244
   245 				; keyboard driver (always player1)
   246 				; not used here, but might come in handy sometime
   247
   248 3518			driver_keyboard
   249 3518 A2 00		            ldx #0          ; player 1
   250
   251 351A AD 0F D2		            lda SKSTAT
   252 351D 29 04		            and #4
   253 351F D0 1C		            bne key_done
   254
   255 3521			still_pressed
   256 3521 AD 09 D2		            lda KBCODE
   257 3524 C9 16		            cmp #$16        ; $56 including SHIFT
   258 3526 D0 0A		            bne no_z_key
   259
   260 3528 B5 9C		            lda p1_angle,x
   261 352A 18			            clc
   262 352B 65 88		            adc stick_slow_speed
   263 352D 95 9C		            sta p1_angle,x
   264
   265 352F 4C 3D 35		            jmp key_done
   266
   267 3532 C9 17		no_z_key    cmp #$17        ; $57 including SHIFT
   268 3534 D0 07		            bne key_done
   269
   270 3536 B5 9C		            lda p1_angle,x
   271 3538 38			            sec
   272 3539 E5 88		            sbc stick_slow_speed
   273 353B 95 9C		            sta p1_angle,x
   274 353D			key_done
   275 353D 60			            rts
   276
   277 				; mouse driver (Atari ST compatible)
   278
   279 353E			driver_mouse
   280 353E 60			            rts
   281 				;            lda STICK0,x
   282 				;            eor #15
   283 				;            jmp driver_mouse_main
   284
   285 353F			driver_mouse_fast_p1
   286 353F AD 00 D3		            lda PORTA
   287 3542 A2 00		            ldx #0
   288 3544 4C 50 35		            jmp driver_mouse_main
   289
   290 3547			driver_mouse_fast_p2
   291 3547 AD 00 D3		            lda PORTA
   292 354A 4A			            lsr
   293 354B 4A			            lsr
   294 354C 4A			            lsr
   295 354D 4A			            lsr
   296 354E A2 01		            ldx #1
   297 				; have to call this many times per frame for each player
   298 3550			driver_mouse_main
   299 3550 29 03		            and #%00000011
   300 3552 48			            pha
   301 3553 1D 01 34		            ora prev_mouse_value,x
   302 3556 A8			            tay
   303 3557 68			            pla
   304 3558 0A			            asl
   305 3559 0A			            asl
   306 355A 9D 01 34		            sta prev_mouse_value,x  ; store previous bits at 0000AA00 position for next time
   307
   308 355D B9 65 35		            lda mouse_transitions,y
   309 3560 75 9C		            adc p1_angle,x
   310 3562 95 9C		            sta p1_angle,x
   311 3564 60			            rts
   312
   313 				; nibble coded transitions for mouse
   314 				; 15,13,12,14 = anti-clockwise
   315 				; 15,14,12,13 = clockwise
   316 				; only lowest 2 bits change, so we need 16 values for all transitions
   317
   318 				; index is the combined value of nibble AABB
   319 				; where AA is previous bits and BB current bits
   320 3565			mouse_transitions
   321 3565 00			            dta 0   ; 00 -> 00 (12 -> 12)
   322 3566 02			            dta 2   ; 00 -> 01 (12 -> 13)
   323 3567 FE			            dta 254 ; 00 -> 10 (12 -> 14)
   324 3568 00			            dta 0   ; 00 -> 11 (12 -> 15)
   325 3569 FE			            dta 254 ; 01 -> 00 (13 -> 12)
   326 356A 00			            dta 0   ; 01 -> 01 (13 -> 13)
   327 356B 00			            dta 0   ; 01 -> 10 (13 -> 14)
   328 356C 02			            dta 2   ; 01 -> 11 (13 -> 15)
   329 356D 02			            dta 2   ; 10 -> 00 (14 -> 12)
   330 356E 00			            dta 0   ; 10 -> 01 (14 -> 13)
   331 356F 00			            dta 0   ; 10 -> 10 (14 -> 14)
   332 3570 FE			            dta 254 ; 10 -> 11 (14 -> 15)
   333 3571 00			            dta 0   ; 11 -> 00 (15 -> 12)
   334 3572 FE			            dta 254 ; 11 -> 01 (15 -> 13)
   335 3573 02			            dta 2   ; 11 -> 10 (15 -> 14)
   336 3574 00			            dta 0   ; 11 -> 11 (15 -> 15)
   337
   338 3575			paddle_offsets
   339 3575 00 00		            dta 0,0
   183
   184 3577			reset_pressed
   185 3577 20 00 9C		            jsr intro_main
   186
   187 357A			main
   188 357A A9 FF		            lda #255
   189 357C 8D FC 02		            sta 764
   190
   191 				; for fast loaders, wait 10 seconds or continue with spacebar
   192 357F			wait_a_sec
   193 357F AD FC 02		            lda 764
   194 3582 C9 FF		            cmp #255
   195 3584 D0 06		            bne any_key_pressed
   196
   197 3586 A5 13		            lda 19
   198 3588 C9 02		            cmp #2
   199 358A 90 F3		            bcc wait_a_sec
   200
   201 358C			any_key_pressed
   202 358C A9 FF		            lda #255
   203 358E 8D FC 02		            sta 764
   204
   205 				; start the game!
   206 				 
   207 3591 A9 00		            lda #0
   208 3593 8D 2F 02		            sta SDMCTL
   209 3596 85 B6		            sta game_restart
   210 3598 85 8F		            sta end_screen_delay
   211 359A 85 83		            sta winner_color
   212
   213 359C A9 80		            lda #128
   214 359E 85 8D		            sta volume_hit_bat
   215 35A0 85 8E		            sta volume_hit_edge
   216 35A2 85 80		            sta music_toggle        ; 128 = on, 0 = off
   217
   218 35A4 A9 01		            lda #1
   219 35A6 8D 44 02		            sta 580 ; coldstart
   220
   221 				;            lda #1
   222 				;            sta 9   ; boot
   223
   224 				;            lda #<reset_pressed
   225 				;            sta $0a
   226 				;            lda #>reset_pressed
   227 				;            sta $0b
   228
   229 35A9 20 03 34		            jsr driver_init
   230
   231 35AC 20 E9 3C		            jsr make_shape_index
   232
   233 35AF 20 19 3D		            jsr make_outer_256
   234
   235 35B2 20 0A 37		            jsr make_screen_y_tab
   236
   237 35B5 20 55 37		            jsr invert_backdrop
   238 35B8 A9 60		            lda #$60
   239 35BA 8D 55 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   240
   241 35BD 20 89 3D		            jsr reset_score
   242 35C0 20 57 3D		            jsr show_score_p1
   243 35C3 20 70 3D		            jsr show_score_p2
   244
   245 35C6 20 5E 3F		            jsr init_sprites
   246 35C9 20 8A 3F		            jsr init_colors
   247
   248 				; init. game vars
   249 35CC A2 00		            ldx #INIT_LEVEL_INDEX
   250 35CE 8E AA 3F		            stx current_level_index
   251 35D1 20 C0 3F		            jsr set_level_ball_speed
   252
   253 35D4 A9 00		            lda #INIT_PLAYER_MODE
   254 35D6 85 8A		            sta player_mode
   255 35D8 85 8B		            sta player_mode_saved
   256 35DA 20 F8 3F		            jsr show_player_mode
   257
   258 35DD A9 01		            lda #STATE_IN_MENU
   259 35DF 85 8C		            sta game_state           ; start with menu
   260
   261 35E1 20 6E 31		            jsr music_init
   262
   263 35E4 20 9A 37		            jsr show_menu_options
   264
   265 35E7 20 9B 38		            jsr reset_autostart_demo
   266
   267 35EA A9 00		            lda #<display_list
   268 35EC 8D 30 02		            sta SDLSTL
   269 35EF A9 50		            lda #>display_list
   270 35F1 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 35F4 A9 C0		            lda #$c0
   275 35F6 8D 0E D4		            sta NMIEN
   276
   277 35F9 A9 07		            lda #7          ; sets VVBLKI
   278 35FB A0 EC		            ldy #<vbi
   279 35FD A2 37		            ldx #>vbi
   280 35FF 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 3602			wait_mouse
   283 3602 AD BE 32		            lda driver_mode
   284 3605 C9 02		            cmp #2
   285 3607 D0 F9		            bne wait_mouse
   286
   287 3609 A5 8A		            lda player_mode
   288 360B C9 01		            cmp #MODE_1_PLAYER
   289 360D F0 03		            beq single_driver
   290 360F 20 47 35		            jsr driver_mouse_fast_p2
   291 3612			single_driver
   292 3612 20 3F 35		            jsr driver_mouse_fast_p1
   293
   294 3615 4C 02 36		            jmp wait_mouse
   295
   296 				;------------------------
   297 				; 8bit * 8bit = 16bit multiply
   298 				; By White Flame
   299 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   300 				; uses extra zp var _multiplicand+1
   301
   302 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   303 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   304
   305 				; In this version, both inputs must be unsigned
   306 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   307
   308 3618			_multi8
   309 3618 A9 00		            lda #$00
   310 361A A8			            tay
   311 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   312 361B F0 0D		            beq _enter_loop
   313 361D			_do_add
   314 361D 18			            clc
   315 361E 65 F6		            adc _multiplicand
   316 3620 AA			            tax
   317
   318 3621 98			            tya
   319 3622 65 F7		            adc _multiplicand+1
   320 3624 A8			            tay
   321 3625 8A			            txa
   322 3626			_mul_loop
   323 3626 06 F6		            asl _multiplicand
   324 3628 26 F7		            rol _multiplicand+1
   325 362A			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   326 362A 46 F8		            lsr _multiplier
   327 362C B0 EF		            bcs _do_add
   328 362E D0 F6		            bne _mul_loop
   329 3630 60			            rts
   330
   331 				; reset PM0/1 to playfield settings
   332 3631			dli_header
   333 3631 48			            pha
   334
   335 3632 A9 08		            lda #8
   336 3634 8D 17 D0		            sta COLPF1
   337
   338 3637 A5 81		            lda shadow_HPOSP0
   339 3639 8D 00 D0		            sta HPOSP0
   340 363C A5 82		            lda shadow_HPOSP1
   341 363E 8D 01 D0		            sta HPOSP1
   342
   343 3641 A9 00		            lda #0
   344 3643 8D 08 D0		            sta SIZEP0
   345 3646 8D 09 D0		            sta SIZEP1
   346
   347 3649 A9 5A		            lda #BASE_COLOR_P1+10
   348 364B 8D 12 D0		            sta COLPM0
   349 364E A9 BA		            lda #BASE_COLOR_P2+10
   350 3650 8D 13 D0		            sta COLPM1
   351
   352 3653 A9 71		            lda #<dli_menu
   353 3655 8D 00 02		            sta VDSLST
   354 3658 A9 36		            lda #>dli_menu
   355 365A 8D 01 02		            sta VDSLST+1
   356
   357 365D 8A			            txa
   358 365E 48			            pha
   359 365F 98			            tya
   360 3660 48			            pha
   361
   362 3661 20 DC 31		            jsr copy_shadow
   363 3664 A5 80		            lda music_toggle
   364 3666 F0 03		            beq skip_music
   365 3668 20 97 31		            jsr play_song
   366 366B			skip_music
   367
   368 366B 68			            pla
   369 366C A8			            tay
   370 366D 68			            pla
   371 366E AA			            tax
   372
   373 366F 68			            pla
   374 3670 40			            rti
   375
   376 3671			dli_menu
   377 3671 48			            pha
   378 3672 8A			            txa
   379 3673 48			            pha
   380
   381 3674 A9 0E		            lda #$0e
   382 3676 8D 0A D4		            sta WSYNC
   383 3679 8D 1A D0		            sta COLBK
   384 367C A9 0A		            lda #$0a
   385 367E 8D 0A D4		            sta WSYNC
   386 3681 8D 1A D0		            sta COLBK
   387 3684 A9 00		            lda #0
   388 3686 8D 0A D4		            sta WSYNC
   389 3689 8D 1A D0		            sta COLBK
   390
   391 368C A2 00		            ldx #0
   392 368E			color_it1
   393 368E BD D2 36		            lda menu_colpf2,x
   394 3691 8D 0A D4		            sta WSYNC
   395 3694 8D 18 D0		            sta COLPF2
   396 3697 E8			            inx
   397 3698 E0 12		            cpx #18
   398 369A D0 F2		            bne color_it1
   399
   400 369C A2 00		            ldx #0
   401 369E			color_it2
   402 369E BD E4 36		            lda menu_colpf0,x
   403 36A1 05 83		            ora winner_color
   404 36A3 8D 0A D4		            sta WSYNC
   405 36A6 8D 16 D0		            sta COLPF0
   406 36A9 E8			            inx
   407 36AA E0 26		            cpx #38
   408 36AC D0 F0		            bne color_it2
   409
   410 36AE A9 00		            lda #0
   411 36B0 8D 0A D4		            sta WSYNC
   412 36B3 8D 1A D0		            sta COLBK
   413 36B6 A9 0A		            lda #$0a
   414 36B8 8D 0A D4		            sta WSYNC
   415 36BB 8D 1A D0		            sta COLBK
   416 36BE A9 0E		            lda #$0e
   417 36C0 8D 0A D4		            sta WSYNC
   418 36C3 8D 1A D0		            sta COLBK
   419 36C6 A9 00		            lda #0
   420 36C8 8D 0A D4		            sta WSYNC
   421 36CB 8D 1A D0		            sta COLBK
   422 				            
   423 36CE 68			            pla
   424 36CF AA			            tax
   425 36D0 68			            pla
   426 36D1 40			            rti
   427
   428 36D2			menu_colpf2
   429 36D2 50			            dta BASE_COLOR_P1
   430 36D3 50			            dta BASE_COLOR_P1
   431 36D4 50			            dta BASE_COLOR_P1
   432 36D5 50			            dta BASE_COLOR_P1
   433 36D6 50			            dta BASE_COLOR_P1
   434 36D7 50			            dta BASE_COLOR_P1
   435 36D8 50			            dta BASE_COLOR_P1
   436 36D9 50			            dta BASE_COLOR_P1
   437
   438 36DA B0			            dta BASE_COLOR_P2
   439 36DB B0			            dta BASE_COLOR_P2
   440 36DC B0			            dta BASE_COLOR_P2
   441 36DD B0			            dta BASE_COLOR_P2
   442 36DE B0			            dta BASE_COLOR_P2
   443 36DF B0			            dta BASE_COLOR_P2
   444 36E0 B0			            dta BASE_COLOR_P2
   445 36E1 B0			            dta BASE_COLOR_P2
   446
   447 36E2 00 00		            dta 0,0
   448
   449 36E4			menu_colpf0
   450 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   451 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   452 36E4 00 00		            dta 0,0
   453 36E6 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   454 36EE 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   455 36F6 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   456 36FE 00 00 00 00		            dta 0,0,0,0
   457 3702 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   458
   459 				; make pointers from y-position to screen memory
   460 				; screen memory is 3 blocks
   461 				; screen_mem1 : 102 lines, 4080 bytes
   462 				; screen_mem2 : 102 lines, 4080 bytes
   463 				; screen_mem3 :  20 lines,  800 bytes
   464
   465 370A			make_screen_y_tab
   466 370A A9 00		            lda #<screen_mem1
   467 370C 85 86		            sta tmp_screen
   468 370E A9 70		            lda #>screen_mem1
   469 3710 85 87		            sta tmp_screen+1
   470
   471 3712 A2 00		            ldx #0
   472 3714			fill_y_tab1
   473 3714 20 3D 37		            jsr store_y_line
   474 3717 E8			            inx
   475 3718 E0 66		            cpx #102
   476 371A D0 F8		            bne fill_y_tab1
   477
   478 				; x = 102
   479 371C A9 00		            lda #<screen_mem2
   480 371E 85 86		            sta tmp_screen
   481 3720 A9 80		            lda #>screen_mem2
   482 3722 85 87		            sta tmp_screen+1
   483
   484 3724			fill_y_tab2
   485 3724 20 3D 37		            jsr store_y_line
   486 3727 E8			            inx
   487 3728 E0 CC		            cpx #204
   488 372A D0 F8		            bne fill_y_tab2
   489
   490 372C A9 00		            lda #<screen_mem3
   491 372E 85 86		            sta tmp_screen
   492 3730 A9 90		            lda #>screen_mem3
   493 3732 85 87		            sta tmp_screen+1
   494
   495 				; x = 204
   496 3734			fill_y_tab3
   497 3734 20 3D 37		            jsr store_y_line
   498 3737 E8			            inx
   499 3738 E0 E0		            cpx #224
   500 373A D0 F8		            bne fill_y_tab3
   501 373C 60			            rts
   502
   503 373D			store_y_line
   504 373D A5 86		            lda tmp_screen
   505 373F 9D 00 12		            sta screen_y_lo,x
   506 3742 A5 87		            lda tmp_screen+1
   507 3744 9D 00 13		            sta screen_y_hi,x
   508 				            
   509 3747 A5 86		            lda tmp_screen
   510 3749 18			            clc
   511 374A 69 28		            adc #SCREEN_WIDTH
   512 374C 85 86		            sta tmp_screen
   513 374E A5 87		            lda tmp_screen+1
   514 3750 69 00		            adc #0
   515 3752 85 87		            sta tmp_screen+1
   516 3754 60			            rts
   517
   518 				; @todo invert backdrop image
   519 				; now we have to do it here :P
   520 3755			invert_backdrop
   521 3755 A9 00		            lda #<screen_mem1
   522 3757 85 86		            sta tmp_screen
   523 3759 A9 70		            lda #>screen_mem1
   524 375B 85 87		            sta tmp_screen+1
   525 				            
   526 375D A2 10		            ldx #16     ; 16 pages = 4K
   527 375F 20 7D 37		            jsr do_x_pages
   528 				           
   529 3762 A9 00		            lda #<screen_mem2
   530 3764 85 86		            sta tmp_screen
   531 3766 A9 80		            lda #>screen_mem2
   532 3768 85 87		            sta tmp_screen+1
   533 				            
   534 376A A2 10		            ldx #16     ; 16 pages = 4K
   535 376C 20 7D 37		            jsr do_x_pages
   536
   537 376F A9 00		            lda #<screen_mem3
   538 3771 85 86		            sta tmp_screen
   539 3773 A9 90		            lda #>screen_mem3
   540 3775 85 87		            sta tmp_screen+1
   541 				            
   542 3777 A2 04		            ldx #4     ; 4 pages = 1K
   543 3779 20 7D 37		            jsr do_x_pages
   544 377C 60			            rts
   545
   546 				; invert x pages, starting from tmp_screen
   547
   548 377D			do_x_pages
   549 377D A0 00		            ldy #0
   550 377F			do_page
   551 377F B1 86		            lda (tmp_screen),y
   552 3781 49 FF		            eor #$ff
   553 3783 91 86		            sta (tmp_screen),y
   554 3785 C8			            iny
   555 3786 D0 F7		            bne do_page 
   556
   557 3788 E6 87		            inc tmp_screen+1
   558 378A CA			            dex
   559 378B D0 F2		            bne do_page
   560 378D 60			            rts
   561
   562 378E			turn_color_ball
   563 378E A6 B5		            ldx player_turn
   564 3790 BD 97 37		            lda color_turn,x
   565 3793 8D C7 02		            sta COLOR3
   566 3796 60			            rts
   567 				            
   568 3797 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   569
   570 379A			show_menu_options
   571 379A A9 50		            lda #<controller_text
   572 379C 8D F6 50		            sta menu_line1_ptr
   573 379F A9 52		            lda #>controller_text
   574 37A1 8D F7 50		            sta menu_line1_ptr+1
   575
   576 37A4 20 F8 3F		            jsr show_player_mode
   577
   578 37A7 A9 9F		            lda #<level_text
   579 37A9 8D FC 50		            sta menu_line3_ptr
   580 37AC A9 52		            lda #>level_text
   581 37AE 8D FD 50		            sta menu_line3_ptr+1
   582
   583 37B1 A9 00		            lda #0
   584 37B3 85 83		            sta winner_color
   585 37B5 60			            rts
   586
   587 37B6			show_end_screen
   588 37B6 A9 FB		            lda #<empty_text
   589 37B8 8D F6 50		            sta menu_line1_ptr
   590 37BB 8D FC 50		            sta menu_line3_ptr
   591 37BE A9 52		            lda #>empty_text
   592 37C0 8D F7 50		            sta menu_line1_ptr+1
   593 37C3 8D FD 50		            sta menu_line3_ptr+1
   594
   595 37C6 AD 2E 51		            lda score_p1
   596 37C9 CD 2F 51		            cmp score_p2
   597 37CC 90 0F		            bcc player_2_wins
   598
   599 37CE A9 0F		            lda #<winner_one_text
   600 37D0 8D F9 50		            sta menu_line2_ptr
   601 37D3 A9 53		            lda #>winner_one_text
   602 37D5 8D FA 50		            sta menu_line2_ptr+1
   603
   604 37D8 A9 50		            lda #BASE_COLOR_P1
   605 37DA 85 83		            sta winner_color
   606 37DC 60			            rts
   607
   608 37DD			player_2_wins
   609 37DD A9 23		            lda #<winner_two_text
   610 37DF 8D F9 50		            sta menu_line2_ptr
   611 37E2 A9 53		            lda #>winner_two_text
   612 37E4 8D FA 50		            sta menu_line2_ptr+1
   613
   614 37E7 A9 B0		            lda #BASE_COLOR_P2
   615 37E9 85 83		            sta winner_color
   616
   617 37EB 60			            rts
   618
   619 				; A, X, Y are already saved by the OS
   620 37EC			vbi
   621 				;            lda #$28
   622 				;            sta $d01a
   623
   624 				; toggle music on/off with spacebar
   625 37EC AD FC 02		            lda 764
   626 37EF C9 21		            cmp #$21
   627 37F1 D0 10		            bne no_spacebar
   628 37F3 A5 80		            lda music_toggle
   629 37F5 49 80		            eor #128
   630 37F7 85 80		            sta music_toggle
   631 37F9 D0 03		            bne music_turned_on
   632 37FB 20 60 32		            jsr music_off
   633
   634 37FE			music_turned_on
   635 37FE A9 FF		            lda #255
   636 3800 8D FC 02		            sta 764
   637
   638 3803			no_spacebar
   639 3803 20 68 3A		            jsr play_sound_bat
   640 3806 20 86 3A		            jsr play_sound_edge
   641
   642 3809 A9 31		            lda #<dli_header
   643 380B 8D 00 02		            sta VDSLST
   644 380E A9 36		            lda #>dli_header
   645 3810 8D 01 02		            sta VDSLST+1
   646
   647 3813 A9 2E		            lda #%00101110  ; enable P/M DMA
   648 3815 8D 2F 02		            sta SDMCTL
   649 3818 A9 00		            lda #0
   650 381A 85 4D		            sta 77      ; attract off
   651 381C A9 98		            lda #>rotor_font
   652 381E 8D F4 02		            sta 756
   653
   654 3821 A9 30		            lda #$30
   655 3823 8D 00 D0		            sta HPOSP0
   656 3826 A9 B0		            lda #$b0
   657 3828 8D 01 D0		            sta HPOSP1
   658
   659 				; menu switching thingy
   660
   661 382B AD 1F D0		            lda CONSOL
   662 382E C9 03		            cmp #3  ; option button
   663 3830 D0 17		            bne no_option_pressed
   664 3832 A5 8C		            lda game_state
   665 3834 C9 01		            cmp #STATE_IN_MENU
   666 3836 F0 2E		            beq check_game_state
   667
   668 				; prevent menu option directly after leaving in-game state
   669 3838 A9 03		            lda #3
   670 383A 8D A9 3F		            sta previous_consol
   671
   672 383D			go_menu_mode
   673 383D 20 3A 3C		            jsr wipe_ball
   674
   675 3840 20 FA 31		            jsr music_normal_volume
   676
   677 3843 20 89 38		            jsr switch_to_menu
   678
   679 3846 4C 66 38		            jmp check_game_state
   680
   681 3849			no_option_pressed
   682 3849 C9 06		            cmp #6  ; start pressed
   683 384B F0 05		            beq reset_game
   684
   685 				; check autostart state
   686
   687 384D AD 98 38		            lda autostart_demo
   688 3850 F0 14		            beq check_game_state
   689
   690 				; reset game
   691
   692 3852			reset_game
   693 3852 20 05 32		            jsr music_low_volume
   694
   695 3855 20 3A 3C		            jsr wipe_ball
   696
   697 3858 20 19 3B		            jsr reset_robot_angle_end
   698
   699 385B A9 01		            lda #1
   700 385D 85 B6		            sta game_restart
   701
   702 385F 20 9B 38		            jsr reset_autostart_demo
   703
   704 3862 A9 00		            lda #STATE_IN_GAME
   705 3864 85 8C		            sta game_state
   706
   707 3866			check_game_state
   708 3866 A5 8C		            lda game_state
   709 3868 D0 03		            bne no_main_game_state
   710 386A 4C 64 39		            jmp main_game_vbi
   711
   712 386D			no_main_game_state
   713 386D C9 02		            cmp #STATE_IN_END
   714 386F D0 58		            bne menu_vbi
   715
   716 				; end screen vbi
   717 3871 A5 8F		            lda end_screen_delay
   718 3873 D0 0C		            bne stay_in_end_screen
   719
   720 3875 20 A6 31		            jsr restart_music
   721 3878 20 FA 31		            jsr music_normal_volume
   722
   723 387B 20 89 38		            jsr switch_to_menu
   724
   725 387E 4C C9 38		            jmp menu_vbi
   726
   727 3881			stay_in_end_screen
   728 3881 20 4A 3A		            jsr play_sound_end_game
   729 3884 C6 8F		            dec end_screen_delay
   730 3886 4C 15 39		            jmp wait_depressed
   731
   732 3889			switch_to_menu
   733 3889 A5 8B		            lda player_mode_saved
   734 388B 85 8A		            sta player_mode
   735
   736 388D 20 9A 37		            jsr show_menu_options
   737
   738 3890 20 43 34		            jsr reset_driver_mode
   739
   740 3893 A9 01		            lda #STATE_IN_MENU
   741 3895 85 8C		            sta game_state
   742 3897 60			            rts
   743
   744 				; demo autostart
   745
   746 3898 00			autostart_demo  dta 0
   747 3899 00 00		autostart_timer dta 0,0
   748
   749 389B			reset_autostart_demo
   750 389B A9 00		            lda #0
   751 389D 8D 98 38		            sta autostart_demo      ; do not start again
   752 38A0 8D 99 38		            sta autostart_timer
   753 38A3 A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   754 38A5 8D 9A 38		            sta autostart_timer+1
   755 38A8 60			            rts
   756
   757 38A9			handle_autostart_timer
   758 38A9 AD 99 38		            lda autostart_timer
   759 38AC 0D 9A 38		            ora autostart_timer+1
   760 38AF F0 17		            beq idle_timer
   761 38B1 CE 99 38		            dec autostart_timer
   762 38B4 D0 12		            bne running_timer
   763 38B6 CE 9A 38		            dec autostart_timer+1
   764 38B9 D0 0D		            bne running_timer
   765
   766 				; timer reached zero
   767 38BB A9 01		            lda #1
   768 38BD 8D 98 38		            sta autostart_demo
   769 38C0 A5 8A		            lda player_mode
   770 38C2 85 8B		            sta player_mode_saved
   771 38C4 A9 02		            lda #2
   772 38C6 85 8A		            sta player_mode
   773
   774 38C8			running_timer
   775 38C8			idle_timer
   776 38C8 60			            rts
   777
   778 				; within menu vbi
   779
   780 38C9			menu_vbi
   781 38C9 20 A9 38		            jsr handle_autostart_timer
   782
   783 38CC A5 8A		            lda player_mode
   784 38CE F0 08		            beq check_human_buttons
   785
   786 38D0 20 D6 34		            jsr is_player1_button_pressed
   787 38D3 F0 0B		            beq check_consol_buttons
   788 38D5 4C 52 38		            jmp reset_game
   789
   790 38D8			check_human_buttons
   791 38D8 20 ED 34		            jsr is_both_buttons
   792 38DB F0 03		            beq check_consol_buttons
   793 38DD 4C 52 38		            jmp reset_game
   794
   795 38E0			check_consol_buttons
   796 38E0 AD 1F D0		            lda CONSOL
   797 38E3 C9 05		            cmp #5          ; select
   798 38E5 D0 18		            bne no_level_select
   799 				            
   800 38E7 AD A9 3F		            lda previous_consol
   801 38EA C9 05		            cmp #5
   802 38EC F0 27		            beq wait_depressed
   803
   804 38EE 20 D9 3F		            jsr increase_level
   805 38F1 AE AA 3F		            ldx current_level_index
   806 38F4 20 C0 3F		            jsr set_level_ball_speed
   807
   808 38F7 A9 05		            lda #5
   809 38F9 8D A9 3F		            sta previous_consol
   810 38FC 4C 15 39		            jmp wait_depressed
   811
   812 38FF			no_level_select
   813 38FF C9 03		            cmp #3          ; option
   814 3901 D0 0F		            bne no_player_mode_select
   815
   816 3903 AD A9 3F		            lda previous_consol
   817 3906 C9 03		            cmp #3
   818 3908 F0 0B		            beq wait_depressed
   819
   820 390A 20 E9 3F		            jsr increase_player_mode
   821 390D 20 F8 3F		            jsr show_player_mode
   822
   823 3910 A9 03		            lda #3
   824 3912			no_player_mode_select
   825 3912 8D A9 3F		            sta previous_consol
   826
   827 3915			wait_depressed
   828 3915 A9 01		            lda #1      ; dl jump
   829 3917 8D 55 50		            sta menu_dl_hook
   830 391A A9 EE		            lda #<menu_dl_part
   831 391C 8D 56 50		            sta menu_dl_hook+1
   832 391F A9 50		            lda #>menu_dl_part
   833 3921 8D 57 50		            sta menu_dl_hook+2
   834
   835 				; detect/show controller type (used for both players)
   836 3924 20 4B 39		            jsr detect_show_driver
   837
   838 3927 A5 8A		            lda player_mode
   839 3929 C9 00		            cmp #MODE_2_PLAYER
   840 392B F0 15		            beq no_robot_in_menu
   841
   842 392D C9 01		            cmp #MODE_1_PLAYER
   843 392F F0 0B		            beq one_robot_in_menu
   844 				; demo mode, both robots in menu
   845 3931 A5 9C		            lda p1_angle
   846 3933 C5 BA		            cmp robot1_angle_end
   847 3935 D0 05		            bne robot1_moves_to_goal
   848
   849 3937 AD 0A D2		            lda RANDOM
   850 393A 85 BA		            sta robot1_angle_end
   851
   852 393C			robot1_moves_to_goal
   853 393C			one_robot_in_menu
   854 393C A5 9C		            lda p1_angle
   855 393E 49 80		            eor #128
   856 3940 85 BB		            sta robot2_angle_end
   857
   858 3942			no_robot_in_menu
   859 3942 20 D5 3A		            jsr handle_player1
   860 3945 20 F8 3A		            jsr handle_player2
   861
   862 3948 4C 1F 3A		            jmp exit_vbi
   863
   864 				; X = port/driver to detect
   865 394B			detect_show_driver
   866 394B 20 49 34		            jsr driver_detect
   867 394E A8			            tay
   868 394F B9 37 53		            lda driver_text_lo,y
   869 3952 85 86		            sta tmp_screen
   870 3954 B9 3B 53		            lda driver_text_hi,y
   871 3957 85 87		            sta tmp_screen+1
   872
   873 3959 A0 07		            ldy #7
   874 395B			show_driv
   875 395B B1 86		            lda (tmp_screen),y
   876 395D 99 5A 52		            sta driver_screen,y
   877 3960 88			            dey
   878 3961 10 F8		            bpl show_driv
   879 3963 60			            rts
   880
   881 				; main game vbi
   882 3964			main_game_vbi
   883 3964 A5 B6		            lda game_restart
   884 3966 F0 33		            beq no_restart
   885
   886 				; restart game
   887
   888 3968 20 62 3A		            jsr silence_end
   889
   890 396B A9 00		            lda #0
   891 396D 85 B6		            sta game_restart
   892 				            
   893 396F 20 89 3D		            jsr reset_score
   894 3972 20 57 3D		            jsr show_score_p1
   895 3975 20 70 3D		            jsr show_score_p2
   896
   897 3978 A6 9C		            ldx p1_angle
   898 397A 86 AA		            stx ball_angle_start
   899 397C 20 95 3B		            jsr ball_to_start_position
   900 397F 20 A4 3B		            jsr prepare_ball_end_position
   901
   902 3982 A9 00		            lda #0
   903 3984 85 A0		            sta mp_collision
   904 3986 85 A1		            sta in_collision
   905 3988 85 A3		            sta edge_delay
   906 398A 85 AD		            sta edge_collision
   907 398C 85 AE		            sta edge_hit_count
   908 398E 8D 1E D0		            sta HITCLR
   909
   910 3991 A9 02		            lda #2
   911 3993 85 B5		            sta player_turn
   912
   913 3995 20 8E 37		            jsr turn_color_ball
   914 3998 4C 1F 3A		            jmp exit_vbi
   915
   916 399B			no_restart
   917 				; remove menu hook
   918 399B A9 0F		            lda #$0f        ; dl gfx 8
   919 399D 8D 55 50		            sta menu_dl_hook
   920 39A0 8D 56 50		            sta menu_dl_hook+1
   921 39A3 8D 57 50		            sta menu_dl_hook+2
   922
   923 39A6 AD 08 D0		            lda M0PL
   924 39A9 85 A0		            sta mp_collision
   925 39AB AD 09 D0		            lda M1PL
   926 39AE 05 A0		            ora mp_collision
   927 39B0 85 A0		            sta mp_collision
   928
   929 39B2 AD 00 D0		            lda M0PF
   930 39B5 85 AD		            sta edge_collision
   931 39B7 AD 01 D0		            lda M1PF
   932 39BA 05 AD		            ora edge_collision
   933 39BC 85 AD		            sta edge_collision
   934 				;           beq no_edge_collision
   935
   936 				;            inc edge_hit_count
   937 				;            lda edge_hit_count
   938 				;            cmp #2
   939 				;            bcc edge_hit_counting
   940
   941 				;            sei
   942 				;lalala      jmp lalala
   943
   944 				;no_edge_collision
   945 				;            lda #0
   946 				;            sta edge_hit_count
   947
   948 39BE			edge_hit_counting
   949 39BE 20 D5 3A		            jsr handle_player1
   950 39C1 20 F8 3A		            jsr handle_player2
   951
   952 				; handle ball
   953
   954 39C4 20 3A 3C		            jsr wipe_ball         
   955
   956 				; Check ball collision with bat
   957
   958 39C7 A5 A4		            lda bat_collision_delay
   959 39C9 F0 05		            beq check_allowed
   960 39CB C6 A4		            dec bat_collision_delay
   961 39CD 4C E7 39		            jmp move_one
   962
   963 39D0			check_allowed
   964 39D0 A5 A0		            lda mp_collision
   965 39D2 F0 0F		            beq reset_in_collision
   966
   967 39D4 A5 A1		            lda in_collision
   968 39D6 D0 0F		            bne no_first_hit
   969
   970 39D8 E6 A1		            inc in_collision            
   971 39DA 20 D1 3B		            jsr bounce_bat_ball 
   972 				            
   973 39DD 20 45 3A		            jsr start_sound_bat          
   974 				            
   975 39E0 4C E7 39		            jmp move_one
   976 				            
   977 39E3			reset_in_collision
   978 39E3 A9 00		            lda #0
   979 39E5 85 A1		            sta in_collision        
   980
   981 39E7			move_one
   982 39E7			no_first_hit
   983 39E7 20 DB 3E		            jsr move_current_xy
   984
   985 39EA A5 AD		            lda edge_collision
   986 39EC F0 1E		            beq still_moving
   987
   988 				; edge detected
   989
   990 39EE			edge_detected
   991 39EE 20 81 3A		            jsr start_sound_edge
   992
   993 39F1 A5 AB		            lda ball_angle_end
   994 39F3 85 AA		            sta ball_angle_start
   995
   996 39F5 20 C8 3B		            jsr ball_current_to_start_position
   997 39F8 20 A4 3B		            jsr prepare_ball_end_position
   998
   999 39FB 20 A1 3A		            jsr update_score
  1000 39FE D0 37		            bne game_ends
  1001
  1002 				; switch turns
  1003 3A00 A5 B5		            lda player_turn
  1004 3A02 49 03		            eor #3              ; 1 => 2, 2 => 1
  1005 3A04 85 B5		            sta player_turn
  1006 3A06 20 8E 37		            jsr turn_color_ball
  1007 3A09 20 22 3B		            jsr set_robot_angle_end
  1008
  1009 3A0C			still_moving
  1010 3A0C A5 EB		            lda current_x+1
  1011 3A0E 85 A6		            sta ball_current_x
  1012 3A10 A5 ED		            lda current_y+1
  1013 3A12 85 A7		            sta ball_current_y
  1014
  1015 3A14 20 4F 3C		            jsr show_ball
  1016
  1017 3A17 A9 00		            lda #0
  1018 3A19 8D 18 D0		            sta $d018           
  1019
  1020 				; anything in A to clear collisions
  1021 3A1C 8D 1E D0		            sta HITCLR
  1022
  1023 3A1F			exit_vbi
  1024
  1025 				; always set header stuff
  1026 3A1F A9 03		            lda #3
  1027 3A21 8D 08 D0		            sta SIZEP0
  1028 3A24 8D 09 D0		            sta SIZEP1
  1029
  1030 				; background in PM0/1 for header
  1031 3A27 A9 FF		            lda #255
  1032 3A29 A2 07		            ldx #7
  1033 3A2B			fill_pm_header
  1034 3A2B 9D 00 0E		            sta p0_area,x
  1035 3A2E 9D 80 0E		            sta p1_area,x
  1036 3A31 CA			            dex
  1037 3A32 10 F7		            bpl fill_pm_header
  1038
  1039 				;            lda #$04
  1040 				;            sta $d01a
  1041 3A34 4C 62 E4		            jmp $e462
  1042
  1043 3A37			game_ends
  1044 3A37 A9 FF		            lda #255
  1045 3A39 85 8F		            sta end_screen_delay
  1046
  1047 3A3B 20 B6 37		            jsr show_end_screen
  1048
  1049 3A3E A9 02		            lda #STATE_IN_END
  1050 3A40 85 8C		            sta game_state
  1051
  1052 3A42 4C 1F 3A		            jmp exit_vbi
  1053
  1054 3A45			start_sound_bat
  1055 3A45 A9 0A		            lda #10
  1056 3A47 85 8D		            sta volume_hit_bat
  1057 3A49 60			            rts
  1058
  1059 3A4A			play_sound_end_game
  1060 3A4A 20 60 32		            jsr music_off
  1061
  1062 3A4D A5 8F		            lda end_screen_delay
  1063 3A4F C9 C0		            cmp #192
  1064 3A51 90 0F		            bcc silence_end
  1065 3A53 4A			            lsr
  1066 3A54 25 8F		            and end_screen_delay
  1067 3A56 4A			            lsr
  1068 3A57 09 20		            ora #$20
  1069 3A59 8D 73 32		            sta SHADOW+4
  1070 				            ;lda end_screen_delay
  1071 3A5C A9 AA		            lda #$aa
  1072 3A5E 8D 74 32		            sta SHADOW+5
  1073 3A61 60			            rts
  1074 3A62			silence_end
  1075 3A62 A9 00		            lda #0
  1076 3A64 8D 74 32		            sta SHADOW+5
  1077 3A67 60			            rts
  1078
  1079 3A68			play_sound_bat
  1080 3A68 A5 8D		            lda volume_hit_bat
  1081 3A6A 30 14		            bmi silenced_bat
  1082
  1083 3A6C A5 B5		            lda player_turn
  1084 3A6E 0A			            asl
  1085 3A6F 0A			            asl
  1086 3A70 69 30		            adc #$30
  1087 3A72 E5 B3		            sbc angle_diff_bat
  1088 3A74 8D 73 32		            sta SHADOW+4    ; $d204
  1089 3A77 A5 8D		            lda volume_hit_bat
  1090 3A79 09 A0		            ora #$a0
  1091 3A7B 8D 74 32		            sta SHADOW+5    ; $d205
  1092 3A7E C6 8D		            dec volume_hit_bat
  1093 3A80			silenced_bat
  1094 3A80 60			            rts
  1095
  1096 3A81			start_sound_edge
  1097 3A81 A9 04		            lda #4
  1098 3A83 85 8E		            sta volume_hit_edge
  1099 3A85 60			            rts
  1100
  1101 3A86			play_sound_edge
  1102 3A86 A5 8E		            lda volume_hit_edge
  1103 3A88 30 16		            bmi silenced_edge
  1104 3A8A D0 06		            bne no_silenced_edge
  1105 3A8C 8D 74 32		            sta SHADOW+5    ; $d205
  1106 3A8F C6 8E		            dec volume_hit_edge
  1107 3A91 60			            rts            
  1108
  1109 3A92			no_silenced_edge
  1110 3A92 A9 08		            lda #$08
  1111 3A94 8D 73 32		            sta SHADOW+4    ; $d204
  1112 3A97 A5 8E		            lda volume_hit_edge
  1113 3A99 09 26		            ora #$26
  1114 3A9B 8D 74 32		            sta SHADOW+5    ; $d205
  1115 3A9E C6 8E		            dec volume_hit_edge
  1116 3AA0			silenced_edge
  1117 3AA0 60			            rts
  1118
  1119 				; Update score
  1120 				; Score > max score, then exit A = 1, otherwise A = 0
  1121
  1122 3AA1			update_score
  1123 3AA1 A5 B5		            lda player_turn
  1124 3AA3 C9 01		            cmp #1
  1125 3AA5 D0 12		            bne was_player2_turn
  1126 				; was player 1 turn, so player 2 gets a point
  1127 3AA7 20 9E 3D		            jsr inc_score_p2
  1128 3AAA 20 70 3D		            jsr show_score_p2
  1129
  1130 3AAD AD 2F 51		            lda score_p2
  1131 3AB0 C9 11		            cmp #MAX_SCORE
  1132 3AB2 D0 17		            bne reset_edge_delay
  1133
  1134 3AB4 A9 01		            lda #STATE_IN_MENU
  1135 3AB6 85 8C		            sta game_state
  1136 3AB8 60			            rts
  1137
  1138 3AB9			was_player2_turn
  1139 3AB9 20 92 3D		            jsr inc_score_p1
  1140 3ABC 20 57 3D		            jsr show_score_p1
  1141
  1142 3ABF AD 2E 51		            lda score_p1
  1143 3AC2 C9 11		            cmp #MAX_SCORE
  1144 3AC4 D0 05		            bne reset_edge_delay
  1145
  1146 3AC6 A9 01		            lda #STATE_IN_MENU
  1147 3AC8 85 8C		            sta game_state
  1148 3ACA 60			            rts
  1149
  1150 3ACB			reset_edge_delay
  1151 3ACB A9 0A		            lda #10
  1152 3ACD 85 A3		            sta edge_delay
  1153
  1154 3ACF			no_edge
  1155
  1156 3ACF A9 00		            lda #0      ; no end game
  1157 				; anything in A to clear collisions
  1158 3AD1 8D 1E D0		            sta HITCLR
  1159 3AD4 60			            rts
  1160
  1161 				; player 1
  1162 				; - wipe shape at previous y-position
  1163 				; - move player using controller
  1164 				; - set sprite positions
  1165
  1166 3AD5			handle_player1
  1167 3AD5 20 BF 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1168
  1169 3AD8 A5 8A		            lda player_mode
  1170 3ADA C9 02		            cmp #2
  1171 3ADC F0 0C		            beq do_p1_is_computer
  1172
  1173 3ADE A2 00		            ldx #0              ; player 1
  1174 3AE0 20 83 34		            jsr main_driver
  1175 3AE3 20 77 3B		            jsr move_player
  1176 				            
  1177 3AE6 20 73 3C		            jsr show_p1
  1178 3AE9 60			            rts
  1179
  1180 				; p1 now controlled by computer
  1181 3AEA			do_p1_is_computer
  1182 3AEA A5 8C		            lda game_state
  1183
  1184 3AEC A2 00		            ldx #0              ; player 1
  1185 3AEE 20 48 3B		            jsr robot_controller
  1186
  1187 3AF1 20 77 3B		            jsr move_player
  1188
  1189 3AF4 20 73 3C		            jsr show_p1
  1190 3AF7 60			            rts
  1191
  1192 				; player 2
  1193 				; - wipe shape at previous y-position
  1194 				; - move player using controller
  1195 				; - set sprite positions
  1196
  1197 3AF8			handle_player2
  1198 3AF8 20 D4 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1199
  1200 3AFB A5 8A		            lda player_mode
  1201 3AFD D0 0C		            bne do_p2_is_computer
  1202
  1203 3AFF A2 01		            ldx #1              ; player 2
  1204 3B01 20 83 34		            jsr main_driver
  1205
  1206 3B04 20 77 3B		            jsr move_player
  1207 3B07 20 99 3C		            jsr show_p2
  1208 3B0A 60			            rts
  1209
  1210 				; p2 now controlled by computer
  1211 3B0B			do_p2_is_computer
  1212 3B0B A5 8C		            lda game_state
  1213
  1214 3B0D A2 01		            ldx #1              ; player 2
  1215 3B0F 20 48 3B		            jsr robot_controller
  1216
  1217 3B12 20 77 3B		            jsr move_player
  1218 3B15 20 99 3C		            jsr show_p2
  1219
  1220 3B18			not_in_game
  1221 3B18 60			            rts
  1222
  1223 3B19			reset_robot_angle_end
  1224 3B19 A9 00		            lda #0
  1225 3B1B 85 BA		            sta robot1_angle_end
  1226 3B1D A9 80		            lda #128
  1227 3B1F 85 BB		            sta robot2_angle_end
  1228 3B21 60			            rts
  1229
  1230 3B22			set_robot_angle_end
  1231 3B22 A6 B5		            ldx player_turn
  1232 3B24 CA			            dex
  1233 3B25 AD 0A D2		            lda RANDOM
  1234 3B28 29 07		            and #7
  1235 3B2A 18			            clc
  1236 3B2B 65 AB		            adc ball_angle_end
  1237 3B2D 38			            sec
  1238 3B2E E9 03		            sbc #3
  1239 3B30 95 BA		            sta robot_angle_end,x
  1240
  1241 				; other robot (not your turn)
  1242 3B32 A5 B5		            lda player_turn
  1243 3B34 49 03		            eor #3
  1244 3B36 AA			            tax
  1245 3B37 CA			            dex
  1246
  1247 3B38 AD 0A D2		            lda RANDOM
  1248 3B3B 29 0F		            and #15
  1249 3B3D 18			            clc
  1250 3B3E 65 AB		            adc ball_angle_end
  1251 3B40 38			            sec
  1252 3B41 E9 07		            sbc #7
  1253 3B43 49 80		            eor #128            ; other side
  1254 3B45 95 BA		            sta robot_angle_end,x
  1255
  1256 3B47 60			            rts
  1257
  1258 				; x = 0 (robot 1), x = 1 (robot 2)
  1259
  1260 3B48			robot_controller
  1261 				;            lda ball_angle_end  ; current ball end
  1262 3B48 B5 BA		            lda robot_angle_end,x
  1263 3B4A 85 B0		            sta tmp_angle1
  1264 3B4C B5 9C		            lda p1_angle,x
  1265 3B4E 85 B1		            sta tmp_angle2
  1266
  1267 3B50 20 AA 3D		            jsr calc_angle_diff
  1268
  1269 3B53 A5 B7		            lda tmp_angle_diff
  1270 3B55 F0 1F		            beq comp_in_catch_position
  1271 3B57 A5 B4		            lda tmp_angle_direction
  1272 3B59 D0 0E		            bne move_comp_clockwise
  1273
  1274 3B5B AD 0A D2		            lda RANDOM
  1275 3B5E 29 03		            and #3
  1276 3B60 D0 14		            bne comp_in_catch_position
  1277 3B62 B5 9C		            lda p1_angle,x
  1278 3B64 65 88		            adc stick_slow_speed
  1279 3B66 95 9C		            sta p1_angle,x
  1280 3B68 60			            rts
  1281 3B69			move_comp_clockwise
  1282
  1283 3B69 AD 0A D2		            lda RANDOM
  1284 3B6C 29 03		            and #3
  1285 3B6E D0 06		            bne comp_in_catch_position
  1286
  1287 3B70 B5 9C		            lda p1_angle,x
  1288 3B72 E5 88		            sbc stick_slow_speed
  1289 3B74 95 9C		            sta p1_angle,x
  1290 3B76			comp_in_catch_position
  1291 3B76 60			            rts
  1292
  1293 				; move player 1/2
  1294 				; right - clockwise, left = anti-clockwise
  1295
  1296 				; X = 0, player 1
  1297 				; X = 1, player 2
  1298
  1299 				; Y = driver mode:
  1300 				; 0 : stick
  1301 				; 1 : paddle
  1302 				; 2 : mouse
  1303 				; 3 : computer
  1304 				            
  1305 3B77			move_player
  1306 3B77 B5 9C		            lda p1_angle,x
  1307 3B79 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1308 3B7B 49 40		            eor #64                     ; perpendicular to the circle angle
  1309 3B7D 95 90		            sta p1_shape,x
  1310
  1311 3B7F B4 9C		            ldy p1_angle,x
  1312 3B81 B9 00 41		            lda inner_x_tab,y
  1313 3B84 4A			            lsr
  1314 3B85 69 20		            adc #inner_x_margin/2
  1315 3B87 95 94		            sta player1_x,x
  1316 3B89 B9 00 42		            lda inner_y_tab,y
  1317 3B8C 4A			            lsr
  1318 3B8D 95 98		            sta player1_y,x
  1319
  1320 3B8F B4 90		            ldy p1_shape,x
  1321 3B91 20 0E 3D		            jsr shape_to_ptr
  1322
  1323 3B94 60			            rts
  1324
  1325 				; Set ball at start position
  1326 				; - start angle current player
  1327 				; - start position by inner table
  1328 				; - collision delay set?
  1329
  1330 				; Set ball current position to start position
  1331 				; input:
  1332 				; X = angle of start position
  1333 				; output:
  1334 				; ball position: (ball_current_x, ball_current_y)
  1335 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1336 3B95			ball_to_start_position
  1337 3B95 BD 00 41		            lda inner_x_tab,x
  1338 3B98 85 A6		            sta ball_current_x
  1339 3B9A 85 E6		            sta tmp_x1
  1340 3B9C BD 00 42		            lda inner_y_tab,x
  1341 3B9F 85 A7		            sta ball_current_y
  1342 3BA1 85 E7		            sta tmp_y1
  1343 3BA3 60			            rts
  1344
  1345 				; Prepare ball end position
  1346 				; - end angle current player
  1347 				; - end position by outer table
  1348 				; - calculate step size x,y
  1349
  1350 				; Input:
  1351 				; - ball_angle_start
  1352 				; - ball speed
  1353 				; Output:
  1354 				; - ball_andle_end
  1355 				; - ball start position (tmp_x1, tmp_y1)
  1356 				; - ball end position (tmp_x2, tmp_y2)
  1357 				; - step size (step_x, step_y) for ball movement
  1358 3BA4			prepare_ball_end_position
  1359 3BA4 A5 AA		            lda ball_angle_start
  1360 3BA6 49 80		            eor #128        ; other side
  1361 3BA8 85 AB		            sta ball_angle_end
  1362 3BAA AA			            tax
  1363 3BAB 20 2F 3C		            jsr angle_to_end_position
  1364 				                        
  1365 3BAE 20 6E 3E		            jsr init_current_xy
  1366 				            
  1367 				; move current a little bit            
  1368 3BB1 20 DB 3E		            jsr move_current_xy
  1369 				; ignore end indicator, since we only just started
  1370
  1371 3BB4 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1372 3BB6 85 A4		            sta bat_collision_delay
  1373 3BB8 60			            rts
  1374
  1375 				; x = angle 0..255
  1376 3BB9			outer_angle_to_start_position
  1377 3BB9 BD 00 10		            lda outer_x_256,x
  1378 3BBC 85 A6		            sta ball_current_x
  1379 3BBE 85 E6		            sta tmp_x1
  1380 3BC0 BD 00 11		            lda outer_y_256,x
  1381 3BC3 85 A7		            sta ball_current_y
  1382 3BC5 85 E7		            sta tmp_y1
  1383 3BC7 60			            rts
  1384
  1385 3BC8			ball_current_to_start_position
  1386 3BC8 A5 A6		            lda ball_current_x
  1387 3BCA 85 E6		            sta tmp_x1
  1388 3BCC A5 A7		            lda ball_current_y
  1389 3BCE 85 E7		            sta tmp_y1
  1390 3BD0 60			            rts
  1391
  1392 				; Ball collides with bat
  1393 				; - start ball angle = end ball angle
  1394 				; - calculate diff between bat and ball end angle
  1395 				; - calculate new end angle
  1396 				; - Set ball at start position
  1397 				; - Prepare ball end position
  1398
  1399 3BD1			bounce_bat_ball
  1400 				; set new start of ball
  1401 				; @todo check ball angles
  1402 				; set new ball start angle (= previous end angle)
  1403 3BD1 A5 AB		            lda ball_angle_end
  1404 3BD3 85 AA		            sta ball_angle_start
  1405 				            
  1406 				; alternative?
  1407 				            ;ldx ball_angle_start
  1408 				            ;jsr ball_to_start_position          
  1409 3BD5 20 C8 3B		            jsr ball_current_to_start_position
  1410
  1411 				; which player hit the ball?
  1412 				; collision bits:
  1413 				; xxxxx1x1 : 1 is player1 collision
  1414 				; xxxx1010 : 2 is player2 collision
  1415
  1416 3BD8 A5 A0		            lda mp_collision
  1417 3BDA 4A			            lsr
  1418 3BDB 4A			            lsr
  1419 3BDC 05 A0		            ora mp_collision
  1420 3BDE 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1421
  1422 				; who's turn is it and who bounced the ball?
  1423
  1424 3BE0 25 B5		            and player_turn
  1425 3BE2 F0 06		            beq no_switch_turn
  1426
  1427 3BE4 A5 B5		            lda player_turn
  1428 3BE6 49 03		            eor #3              ; 1 => 2, 2 => 1
  1429 3BE8 85 B5		            sta player_turn
  1430
  1431 3BEA			no_switch_turn
  1432 3BEA 20 8E 37		            jsr turn_color_ball
  1433
  1434 3BED A5 B5		            lda player_turn
  1435 3BEF 49 03		            eor #3
  1436 3BF1 AA			            tax
  1437 3BF2 CA			            dex                 ; index 0,1 (player = 1,2)
  1438 3BF3 B5 9C		            lda p1_angle,x
  1439
  1440 				; Calculate diff between bat angle position and new ball start position
  1441 3BF5 85 B0		            sta tmp_angle1
  1442
  1443 3BF7 A5 AA		            lda ball_angle_start
  1444 3BF9 85 B1		            sta tmp_angle2
  1445
  1446 3BFB 20 AA 3D		            jsr calc_angle_diff
  1447
  1448 3BFE 0A			            asl
  1449 3BFF 0A			            asl
  1450 3C00 0A			            asl
  1451 3C01 85 B3		            sta angle_diff_bat
  1452
  1453 3C03 A5 B0		            lda tmp_angle1
  1454 3C05 18			            clc
  1455 3C06 65 B2		            adc add_to_angle
  1456 3C08 49 80		            eor #128            ; other side
  1457 3C0A 85 B0		            sta tmp_angle1
  1458 				            
  1459 3C0C A5 B4		            lda tmp_angle_direction
  1460 3C0E D0 0A		            bne diff_clockwise
  1461 				; diff counter clockwise
  1462 3C10 A5 B0		            lda tmp_angle1
  1463 3C12 18			            clc
  1464 3C13 65 B3		            adc angle_diff_bat
  1465 3C15 85 B0		            sta tmp_angle1
  1466 3C17 4C 21 3C		            jmp calc_done            
  1467
  1468 3C1A			diff_clockwise
  1469 3C1A A5 B0		            lda tmp_angle1
  1470 3C1C 38			            sec
  1471 3C1D E5 B3		            sbc angle_diff_bat
  1472 3C1F 85 B0		            sta tmp_angle1
  1473 				            
  1474 				; calculation done            
  1475 3C21			calc_done
  1476 3C21 A5 B0		            lda tmp_angle1
  1477 3C23 85 AB		            sta ball_angle_end
  1478 3C25 AA			            tax
  1479 3C26 20 2F 3C		            jsr angle_to_end_position
  1480
  1481 3C29 20 22 3B		            jsr set_robot_angle_end
  1482
  1483 3C2C 4C 6E 3E		            jmp init_current_xy
  1484
  1485 				; x = angle 0..255
  1486 3C2F			angle_to_end_position
  1487 3C2F BD 00 10		            lda outer_x_256,x
  1488 3C32 85 E8		            sta tmp_x2
  1489 3C34 BD 00 11		            lda outer_y_256,x
  1490 3C37 85 E9		            sta tmp_y2
  1491 3C39 60			            rts
  1492
  1493 3C3A			wipe_ball
  1494 3C3A A5 A7		            lda ball_current_y
  1495 3C3C 4A			            lsr
  1496 3C3D 69 06		            adc #ball_top_margin
  1497 3C3F AA			            tax                 ; x = real y position on screen
  1498 3C40 A9 00		            lda #0
  1499 3C42 9D 80 0D		            sta msl_area,x
  1500 3C45 9D 81 0D		            sta msl_area+1,x
  1501 3C48 9D 82 0D		            sta msl_area+2,x
  1502 3C4B 9D 83 0D		            sta msl_area+3,x
  1503 3C4E 60			            rts
  1504
  1505 3C4F			show_ball
  1506 3C4F A5 A7		            lda ball_current_y
  1507 3C51 4A			            lsr
  1508 3C52 69 06		            adc #ball_top_margin
  1509 3C54 AA			            tax                 ; x = real y position on screen
  1510
  1511 3C55 A9 02		            lda #%00000010
  1512 3C57 9D 80 0D		            sta msl_area,x
  1513 3C5A 9D 83 0D		            sta msl_area+3,x
  1514 3C5D A9 07		            lda #%00000111
  1515 3C5F 9D 81 0D		            sta msl_area+1,x
  1516 3C62 9D 82 0D		            sta msl_area+2,x
  1517
  1518 3C65 A5 A6		            lda ball_current_x
  1519 3C67 4A			            lsr
  1520 3C68 69 45		            adc #ball_left_margin
  1521 3C6A 8D 05 D0		            sta HPOSM1
  1522 3C6D 69 02		            adc #2
  1523 3C6F 8D 04 D0		            sta HPOSM0
  1524
  1525 3C72 60			            rts
  1526
  1527 3C73			show_p1
  1528 				; y position
  1529 3C73 A5 98		            lda player1_y
  1530 3C75 18			            clc
  1531 3C76 69 01		            adc #upper_margin
  1532 3C78 AA			            tax
  1533
  1534 3C79 A0 00		            ldy #0
  1535 3C7B			show_shape1
  1536 3C7B B1 84		            lda (shape_ptr),y
  1537 3C7D 9D 00 0E		            sta p0_area,x 
  1538 3C80 C8			            iny
  1539 3C81 B1 84		            lda (shape_ptr),y
  1540 3C83 9D 00 0F		            sta p2_area,x
  1541 3C86 E8			            inx
  1542 3C87 C8			            iny
  1543 3C88 C0 20		            cpy #32
  1544 3C8A D0 EF		            bne show_shape1
  1545
  1546 				; x position
  1547 3C8C A5 94		            lda player1_x
  1548 3C8E 18			            clc
  1549 3C8F 69 20		            adc #left_margin
  1550 3C91 85 81		            sta shadow_HPOSP0
  1551 3C93 69 08		            adc #8
  1552 3C95 8D 02 D0		            sta HPOSP2
  1553 3C98 60			            rts
  1554
  1555 3C99			show_p2
  1556 				; y position
  1557 3C99 A5 99		            lda player2_y
  1558 3C9B 18			            clc
  1559 3C9C 69 01		            adc #upper_margin
  1560 3C9E AA			            tax
  1561
  1562 3C9F A0 00		            ldy #0
  1563 3CA1			show_shape2
  1564 3CA1 B1 84		            lda (shape_ptr),y
  1565 3CA3 9D 80 0E		            sta p1_area,x
  1566 3CA6 C8			            iny
  1567 3CA7 B1 84		            lda (shape_ptr),y
  1568 3CA9 9D 80 0F		            sta p3_area,x
  1569 3CAC E8			            inx
  1570 3CAD C8			            iny
  1571 3CAE C0 20		            cpy #32
  1572 3CB0 D0 EF		            bne show_shape2
  1573
  1574 				; x position
  1575 3CB2 A5 95		            lda player2_x
  1576 3CB4 18			            clc
  1577 3CB5 69 20		            adc #left_margin
  1578 3CB7 85 82		            sta shadow_HPOSP1
  1579 3CB9 69 08		            adc #8
  1580 3CBB 8D 03 D0		            sta HPOSP3
  1581 3CBE 60			            rts
  1582
  1583 3CBF			wipe_p1
  1584 3CBF A5 98		            lda player1_y
  1585 3CC1 18			            clc
  1586 3CC2 69 01		            adc #upper_margin
  1587 3CC4 AA			            tax
  1588
  1589 3CC5 A0 10		            ldy #16
  1590 3CC7 A9 00		            lda #0
  1591 3CC9			wipe_it1            
  1592 3CC9 9D 00 0E		            sta p0_area,x 
  1593 3CCC 9D 00 0F		            sta p2_area,x
  1594 3CCF E8			            inx
  1595 3CD0 88			            dey
  1596 3CD1 D0 F6		            bne wipe_it1 
  1597 3CD3 60			            rts
  1598
  1599 3CD4			wipe_p2
  1600 3CD4 A5 99		            lda player2_y
  1601 3CD6 18			            clc
  1602 3CD7 69 01		            adc #upper_margin
  1603 3CD9 AA			            tax
  1604 				            
  1605 3CDA A0 10		            ldy #16
  1606 3CDC A9 00		            lda #0
  1607 3CDE			wipe_it2            
  1608 3CDE 9D 80 0E		            sta p1_area,x
  1609 3CE1 9D 80 0F		            sta p3_area,x
  1610 3CE4 E8			            inx
  1611 3CE5 88			            dey
  1612 3CE6 D0 F6		            bne wipe_it2 
  1613 3CE8 60			            rts
  1614
  1615 3CE9			make_shape_index
  1616 3CE9 A9 00		            lda #<pm_shapes
  1617 3CEB 85 84		            sta shape_ptr
  1618 3CED A9 60		            lda #>pm_shapes
  1619 3CEF 85 85		            sta shape_ptr+1
  1620 				            
  1621 3CF1 A2 00		            ldx #0
  1622 3CF3			fill_pm_tab
  1623 3CF3 A5 84		            lda shape_ptr
  1624 3CF5 9D 00 14		            sta pm_shape_lo,x
  1625 3CF8 A5 85		            lda shape_ptr+1
  1626 3CFA 9D 80 14		            sta pm_shape_hi,x
  1627 				            
  1628 3CFD A5 84		            lda shape_ptr
  1629 3CFF 18			            clc
  1630 3D00 69 20		            adc #32
  1631 3D02 85 84		            sta shape_ptr
  1632 3D04 A5 85		            lda shape_ptr+1
  1633 3D06 69 00		            adc #0
  1634 3D08 85 85		            sta shape_ptr+1
  1635 				            
  1636 3D0A E8			            inx
  1637 3D0B 10 E6		            bpl fill_pm_tab
  1638 				            
  1639 3D0D 60			            rts
  1640 				            
  1641 				; there are 128 shapes, each 32 bytes
  1642
  1643 				; y = shape index
  1644 3D0E			shape_to_ptr
  1645 3D0E B9 00 14		            lda pm_shape_lo,y
  1646 3D11 85 84		            sta shape_ptr
  1647 3D13 B9 80 14		            lda pm_shape_hi,y
  1648 3D16 85 85		            sta shape_ptr+1
  1649
  1650 3D18 60			            rts
  1651
  1652 				; turn 1024 tables into 256 bytes for ball edge lookup
  1653 3D19			make_outer_256
  1654 3D19 A0 00		            ldy #0
  1655 3D1B A2 00		            ldx #0
  1656 3D1D			conv_256
  1657 3D1D BD 00 44		            lda outer_x_tab,x
  1658 3D20 99 00 10		            sta outer_x_256,y
  1659 3D23 BD 00 45		            lda outer_x_tab+$100,x
  1660 3D26 99 40 10		            sta outer_x_256+64,y
  1661 3D29 BD 00 46		            lda outer_x_tab+$200,x
  1662 3D2C 99 80 10		            sta outer_x_256+128,y
  1663 3D2F BD 00 47		            lda outer_x_tab+$300,x
  1664 3D32 99 C0 10		            sta outer_x_256+192,y
  1665 				            
  1666 3D35 BD 00 48		            lda outer_y_tab,x
  1667 3D38 99 00 11		            sta outer_y_256,y
  1668 3D3B BD 00 49		            lda outer_y_tab+$100,x
  1669 3D3E 99 40 11		            sta outer_y_256+64,y
  1670 3D41 BD 00 4A		            lda outer_y_tab+$200,x
  1671 3D44 99 80 11		            sta outer_y_256+128,y
  1672 3D47 BD 00 4B		            lda outer_y_tab+$300,x
  1673 3D4A 99 C0 11		            sta outer_y_256+192,y
  1674
  1675 3D4D E8			            inx
  1676 3D4E E8			            inx
  1677 3D4F E8			            inx
  1678 3D50 E8			            inx
  1679 3D51 C8			            iny
  1680 3D52 C0 40		            cpy #64
  1681 3D54 D0 C7		            bne conv_256            
  1682 3D56 60			            rts
  1683
  1684 3D57			show_score_p1
  1685 3D57 AD 2E 51		            lda score_p1
  1686 3D5A 4A			            lsr
  1687 3D5B 4A			            lsr
  1688 3D5C 4A			            lsr
  1689 3D5D 4A			            lsr
  1690 3D5E F0 02		            beq do_space1
  1691 3D60 09 10		            ora #16
  1692 3D62			do_space1
  1693 3D62 8D 0B 51		            sta score_chars_p1
  1694 3D65 AD 2E 51		            lda score_p1
  1695 3D68 29 0F		            and #15
  1696 3D6A 09 10		            ora #16
  1697 3D6C 8D 0C 51		            sta score_chars_p1+1
  1698 3D6F 60			            rts
  1699
  1700 3D70			show_score_p2
  1701 3D70 AD 2F 51		            lda score_p2
  1702 3D73 4A			            lsr
  1703 3D74 4A			            lsr
  1704 3D75 4A			            lsr
  1705 3D76 4A			            lsr
  1706 3D77 F0 02		            beq do_space2
  1707 3D79 09 10		            ora #16
  1708 3D7B			do_space2
  1709 3D7B 8D 2B 51		            sta score_chars_p2
  1710 3D7E AD 2F 51		            lda score_p2
  1711 3D81 29 0F		            and #15
  1712 3D83 09 10		            ora #16
  1713 3D85 8D 2C 51		            sta score_chars_p2+1
  1714 3D88 60			            rts
  1715 				                        
  1716 3D89			reset_score
  1717 3D89 A9 00		            lda #0
  1718 3D8B 8D 2E 51		            sta score_p1
  1719 3D8E 8D 2F 51		            sta score_p2
  1720 3D91 60			            rts            
  1721 				         
  1722 3D92			inc_score_p1
  1723 3D92 F8			            sed
  1724 3D93 AD 2E 51		            lda score_p1
  1725 3D96 18			            clc
  1726 3D97 69 01		            adc #1
  1727 3D99 8D 2E 51		            sta score_p1    
  1728 3D9C D8			            cld
  1729 3D9D 60			            rts
  1730
  1731 3D9E			inc_score_p2
  1732 3D9E F8			            sed
  1733 3D9F AD 2F 51		            lda score_p2
  1734 3DA2 18			            clc
  1735 3DA3 69 01		            adc #1
  1736 3DA5 8D 2F 51		            sta score_p2
  1737 3DA8 D8			            cld
  1738 3DA9 60			            rts
  1739
  1740 				; calculate the difference between angle1 and angle2
  1741
  1742 				; input:
  1743 				; tmp_angle1 (0..255)
  1744 				; tmp_angle2 (0..255)
  1745
  1746 				; output:
  1747 				; tmp_angle_diff, A: difference between angle1 and angle2
  1748 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1749
  1750 3DAA			calc_angle_diff
  1751 3DAA A9 00		            lda #0
  1752 3DAC 85 B2		            sta add_to_angle
  1753 3DAE 85 B4		            sta tmp_angle_direction
  1754
  1755 				; make sure we can compare angles, otherwise add $40 to angles
  1756 3DB0 A5 B0		            lda tmp_angle1
  1757 3DB2 C9 C0		            cmp #$c0
  1758 3DB4 B0 06		            bcs too_large
  1759 3DB6 A5 B1		            lda tmp_angle2
  1760 3DB8 C9 C0		            cmp #$c0
  1761 3DBA 90 12		            bcc not_too_large
  1762 3DBC			too_large
  1763 3DBC A5 B0		            lda tmp_angle1
  1764 3DBE 38			            sec
  1765 3DBF E9 40		            sbc #$40
  1766 3DC1 85 B0		            sta tmp_angle1
  1767 				            
  1768 3DC3 A5 B1		            lda tmp_angle2
  1769 3DC5 38			            sec
  1770 3DC6 E9 40		            sbc #$40
  1771 3DC8 85 B1		            sta tmp_angle2
  1772 				            
  1773 3DCA A9 40		            lda #$40
  1774 3DCC 85 B2		            sta add_to_angle
  1775
  1776 3DCE			not_too_large
  1777 3DCE A5 B1		            lda tmp_angle2
  1778 3DD0 C5 B0		            cmp tmp_angle1
  1779 3DD2 90 0A		            bcc angle2_smaller_angle1
  1780 				; ball >= play
  1781 3DD4 38			            sec
  1782 3DD5 E5 B0		            sbc tmp_angle1
  1783 3DD7 85 B7		            sta tmp_angle_diff
  1784 				            
  1785 3DD9 E6 B4		            inc tmp_angle_direction
  1786 3DDB 4C E5 3D		            jmp diff_calculated
  1787 				                        
  1788 3DDE			angle2_smaller_angle1
  1789 3DDE A5 B0		            lda tmp_angle1
  1790 3DE0 38			            sec
  1791 3DE1 E5 B1		            sbc tmp_angle2
  1792 3DE3 85 B7		            sta tmp_angle_diff
  1793
  1794 3DE5			diff_calculated
  1795 3DE5 A5 B7		            lda tmp_angle_diff           
  1796 3DE7 60			            rts
  1797
  1798 				; X = angle
  1799 				; lookup magnitude of angle 0 to angle X
  1800 3DE8			angle_to_magnitude
  1801 3DE8 BD 00 4C		            lda magnitudes_lo,x
  1802 3DEB 85 B8		            sta magnitude
  1803 3DED BD 00 4D		            lda magnitudes_hi,x
  1804 3DF0 85 B9		            sta magnitude+1
  1805 3DF2 60			            rts
  1806
  1807 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1808 3DF3			calc_abs_tmp_dx
  1809 3DF3 A5 E8		            lda tmp_x2
  1810 3DF5 38			            sec
  1811 3DF6 E5 E6		            sbc tmp_x1
  1812 3DF8 B0 05		            bcs x2_le
  1813 3DFA 49 FF		            eor #255
  1814 3DFC 18			            clc
  1815 3DFD 69 01		            adc #1
  1816 3DFF 85 F2		x2_le       sta tmp_dx
  1817
  1818 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1819 3E01			calc_abs_tmp_dy
  1820 3E01 A5 E9		            lda tmp_y2
  1821 3E03 38			            sec
  1822 3E04 E5 E7		            sbc tmp_y1
  1823 3E06 B0 05		            bcs y2_le
  1824 3E08 49 FF		            eor #255
  1825 3E0A 18			            clc
  1826 3E0B 69 01		            adc #1
  1827 3E0D 85 F3		y2_le       sta tmp_dy
  1828 3E0F 60			            rts
  1829 				            
  1830 3E10			calc_dx_div_magnitude
  1831 3E10 A9 00		            lda #0
  1832 3E12 85 E2		            sta _dividend
  1833 3E14 A5 F2		            lda tmp_dx
  1834 3E16 85 E3		            sta _dividend+1
  1835
  1836 3E18 A5 B9		            lda magnitude+1
  1837 3E1A 85 E0		            sta _divisor
  1838 3E1C A9 00		            lda #0
  1839 3E1E 85 E1		            sta _divisor+1
  1840 				            
  1841 3E20 20 48 3E		            jsr _div16
  1842
  1843 				; todo multiply result with velocity            
  1844 3E23 A5 E2		            lda _result
  1845 3E25 85 EE		            sta step_x
  1846 3E27 A5 E3		            lda _result+1
  1847 3E29 85 EF		            sta step_x+1
  1848 				            
  1849 3E2B 60			            rts
  1850 				            
  1851 3E2C			calc_dy_div_magnitude
  1852 3E2C A9 00		            lda #0
  1853 3E2E 85 E2		            sta _dividend
  1854 3E30 A5 F3		            lda tmp_dy
  1855 3E32 85 E3		            sta _dividend+1
  1856 				            
  1857 3E34 A5 B9		            lda magnitude+1
  1858 3E36 85 E0		            sta _divisor
  1859 3E38 A9 00		            lda #0
  1860 3E3A 85 E1		            sta _divisor+1
  1861
  1862 3E3C 20 48 3E		            jsr _div16
  1863 				            
  1864 				; todo multiply result with velocity
  1865 3E3F A5 E2		            lda _result
  1866 3E41 85 F0		            sta step_y
  1867 3E43 A5 E3		            lda _result+1
  1868 3E45 85 F1		            sta step_y+1
  1869 				            
  1870 3E47 60			            rts
  1871
  1872 				; divide 16bit
  1873 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1874
  1875 				; _result = _dividend / divisor
  1876
  1877 3E48 A9 00		_div16      lda #0          ;preset remainder to 0
  1878 3E4A 85 E4		            sta _remainder
  1879 3E4C 85 E5		            sta _remainder+1
  1880 3E4E A2 10		            ldx #16         ;repeat for each bit: ...
  1881
  1882 3E50 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1883 3E52 26 E3		            rol _dividend+1  
  1884 3E54 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1885 3E56 26 E5		            rol _remainder+1
  1886 3E58 A5 E4		            lda _remainder
  1887 3E5A 38			            sec
  1888 3E5B E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1889 3E5D A8			            tay         ;lb result -> Y, for we may need it later
  1890 3E5E A5 E5		            lda _remainder+1
  1891 3E60 E5 E1		            sbc _divisor+1
  1892 3E62 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1893
  1894 3E64 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1895 3E66 84 E4		            sty _remainder   
  1896 3E68 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1897
  1898 3E6A CA			_div_skip   dex
  1899 3E6B D0 E3		            bne _div_loop 
  1900 3E6D 60			            rts
  1901
  1902 				; Calculations for step size
  1903
  1904 				; not optimised for speed or size
  1905 				; step should be set according to the angle
  1906
  1907 				; move in straight line (x1,y1) to (x2,y2)
  1908
  1909 				; 1. set start/end of line
  1910 				; set (tmp_x1, tmp_y1)
  1911 				; set (tmp_x2, tmp_y2)
  1912
  1913 				; 2. init. current_x, current_y
  1914 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1915 				; - calculates step sizes for x,y
  1916 				; - calculated directions for x,y
  1917 				;            jsr init_current_xy
  1918
  1919 				; 3. use current_x, current_y to plot or set a position
  1920 				;            lda current_x+1
  1921 				;            sta x_position
  1922 				;            lda current_y+1
  1923 				;            sta y_position
  1924 				;            jsr plot_pixel
  1925
  1926 				; 4. move current_x, current_y to next position on line
  1927 				; A=0 still moving
  1928 				;           move_current_xy
  1929
  1930 3E6E			init_current_xy
  1931 3E6E A9 7F		            lda #$7f      ; was 128 for half pixel
  1932 3E70 85 EA		            sta current_x
  1933 3E72 85 EC		            sta current_y
  1934
  1935 3E74 A5 E6		            lda tmp_x1
  1936 3E76 85 EB		            sta current_x+1
  1937 				            
  1938 3E78 A5 E7		            lda tmp_y1
  1939 3E7A 85 ED		            sta current_y+1
  1940
  1941 				; dx = abs(tmp_x1 - tmp_x2)
  1942 3E7C 20 F3 3D		            jsr calc_abs_tmp_dx
  1943
  1944 				; dy = abs(tmp_y1 - tmp_y2)
  1945 3E7F 20 01 3E		            jsr calc_abs_tmp_dy
  1946
  1947 				; set directions
  1948 3E82 A5 E6		            lda tmp_x1
  1949 3E84 C5 E8		            cmp tmp_x2
  1950 3E86 90 04		            bcc x1_smaller_x2
  1951 				; x1 >= x2
  1952 3E88 A9 01		            lda #1
  1953 3E8A D0 02		            bne set_dir_x
  1954 3E8C			x1_smaller_x2
  1955 3E8C A9 00		            lda #0
  1956 3E8E			set_dir_x
  1957 3E8E 85 FA		            sta dir_x
  1958 				            
  1959 3E90 A5 E7		            lda tmp_y1
  1960 3E92 C5 E9		            cmp tmp_y2
  1961 3E94 90 04		            bcc y1_smaller_y2
  1962 				; y1 >= y2
  1963 3E96 A9 01		            lda #1
  1964 3E98 D0 02		            bne set_dir_y
  1965 3E9A			y1_smaller_y2
  1966 3E9A A9 00		            lda #0
  1967 3E9C			set_dir_y
  1968 3E9C 85 FB		            sta dir_y
  1969
  1970 				; Calculate diff between start angle and end angle
  1971
  1972 3E9E A5 AA		            lda ball_angle_start
  1973 3EA0 85 B0		            sta tmp_angle1
  1974 3EA2 A5 AB		            lda ball_angle_end
  1975 3EA4 85 B1		            sta tmp_angle2
  1976 				            
  1977 3EA6 20 AA 3D		            jsr calc_angle_diff
  1978
  1979 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1980 3EA9 A6 B7		            ldx tmp_angle_diff
  1981 3EAB 20 E8 3D		            jsr angle_to_magnitude
  1982 				            
  1983 3EAE 20 10 3E		            jsr calc_dx_div_magnitude
  1984 3EB1 20 2C 3E		            jsr calc_dy_div_magnitude
  1985 				            
  1986 				; Calculate step size by ball speed
  1987 				            
  1988 				; step_x = step_x * speed
  1989 				            
  1990 3EB4 A5 EE		            lda step_x
  1991 3EB6 85 F6		            sta _multiplicand
  1992 3EB8 A5 EF		            lda step_x+1
  1993 3EBA 85 F7		            sta _multiplicand+1
  1994 3EBC A5 AC		            lda ball_speed
  1995 3EBE 85 F8		            sta _multiplier
  1996
  1997 3EC0 20 18 36		            jsr _multi8
  1998 				;result in .A (low byte, also in .X) and .Y (high byte)
  1999 3EC3 85 EE		            sta step_x
  2000 3EC5 84 EF		            sty step_x+1
  2001 3EC7			skip_step_x_hi
  2002 				            
  2003 				; step_y = step_y * speed
  2004
  2005 3EC7 A5 F0		            lda step_y
  2006 3EC9 85 F6		            sta _multiplicand
  2007 3ECB A5 F1		            lda step_y+1
  2008 3ECD 85 F7		            sta _multiplicand+1
  2009 3ECF A5 AC		            lda ball_speed
  2010 3ED1 85 F8		            sta _multiplier
  2011
  2012 3ED3 20 18 36		            jsr _multi8
  2013 				;result in .A (low byte, also in .X) and .Y (high byte)
  2014 3ED6 85 F0		            sta step_y
  2015 3ED8 84 F1		            sty step_y+1
  2016 3EDA			skip_step_y_hi
  2017
  2018 3EDA 60			            rts
  2019
  2020 				; Move ball position 
  2021 				; Add one step, until end reached
  2022 				; Input:
  2023 				; - step size (step_x, step_y)
  2024 				; - current ball position (current_x, current_y)
  2025 				; - end position (tmp_x2, tmp_y2)
  2026 				; Output:
  2027 				; A (0 = still moving, 1 = end reached)
  2028 3EDB			move_current_xy
  2029 3EDB A9 00		            lda #0
  2030 3EDD 85 FC		            sta line_end_x
  2031 3EDF 85 FD		            sta line_end_y
  2032
  2033 				; sets line end indicators here
  2034 3EE1 20 FE 3E		            jsr move_current_x
  2035 3EE4 20 30 3F		            jsr move_current_y
  2036
  2037 3EE7 A5 FC		            lda line_end_x
  2038 3EE9 25 FD		            and line_end_y
  2039 3EEB F0 10		            beq no_end_reached
  2040
  2041 3EED			end_reached
  2042 				; set current to (x2,y2)
  2043 3EED A5 E8		            lda tmp_x2
  2044 3EEF 85 EB		            sta current_x+1
  2045 3EF1 A5 E9		            lda tmp_y2
  2046 3EF3 85 ED		            sta current_y+1
  2047 				            
  2048 3EF5 A9 00		            lda #0
  2049 3EF7 85 EA		            sta current_x
  2050 3EF9 85 EC		            sta current_y
  2051 				            
  2052 3EFB A9 01		            lda #1 ; end reached
  2053 				            
  2054 3EFD			no_end_reached  ; A = 0
  2055 3EFD 60			            rts
  2056
  2057 3EFE			move_current_x
  2058 3EFE A5 FA		            lda dir_x
  2059 3F00 D0 14		            bne move_current_left
  2060
  2061 				; move right, add
  2062 3F02 A5 EA		            lda current_x
  2063 3F04 18			            clc
  2064 3F05 65 EE		            adc step_x
  2065 3F07 85 EA		            sta current_x
  2066 3F09 A5 EB		            lda current_x+1
  2067 3F0B 65 EF		            adc step_x+1
  2068 3F0D 85 EB		            sta current_x+1
  2069
  2070 3F0F A5 EB		            lda current_x+1
  2071 3F11 C5 E8		            cmp tmp_x2
  2072 3F13 90 00		            bcc no_line_end
  2073 3F15			exact_end_x
  2074 				;            lda #1
  2075 				;            sta line_end_x
  2076 3F15			no_line_end
  2077 3F15 60			            rts
  2078 				            
  2079 3F16			move_current_left
  2080 3F16 A5 EA		            lda current_x
  2081 3F18 38			            sec
  2082 3F19 E5 EE		            sbc step_x
  2083 3F1B 90 01		            bcc clear_skip
  2084 3F1D EA			            nop
  2085 3F1E			clear_skip
  2086 3F1E 85 EA		            sta current_x
  2087 3F20 A5 EB		            lda current_x+1
  2088 3F22 E5 EF		            sbc step_x+1
  2089 3F24 85 EB		            sta current_x+1
  2090 3F26 90 07		            bcc below_zero
  2091 				                        
  2092 3F28 A5 E8		            lda tmp_x2
  2093 3F2A C5 EB		            cmp current_x+1
  2094 3F2C 90 E7		            bcc no_line_end
  2095 				;            lda #1
  2096 				;            sta line_end_x
  2097 3F2E 60			            rts
  2098 3F2F			below_zero            
  2099 				;            lda #1
  2100 				;            sta line_end_x
  2101 				;            sta line_end_y
  2102 3F2F 60			            rts
  2103 3F30			move_current_y
  2104 3F30 A5 FB		            lda dir_y
  2105 3F32 D0 14		            bne move_current_up
  2106
  2107 				; move down, add
  2108 3F34 A5 EC		            lda current_y
  2109 3F36 18			            clc
  2110 3F37 65 F0		            adc step_y
  2111 3F39 85 EC		            sta current_y
  2112 3F3B A5 ED		            lda current_y+1
  2113 3F3D 65 F1		            adc step_y+1
  2114 3F3F 85 ED		            sta current_y+1
  2115 				            
  2116 3F41 A5 ED		            lda current_y+1
  2117 3F43 C5 E9		            cmp tmp_y2
  2118 3F45 90 CE		            bcc no_line_end
  2119 3F47			exact_end_y
  2120 				;            lda #1
  2121 				;            sta line_end_y
  2122 3F47 60			            rts
  2123
  2124 3F48			move_current_up
  2125 3F48 A5 EC		            lda current_y
  2126 3F4A 38			            sec
  2127 3F4B E5 F0		            sbc step_y
  2128 3F4D 85 EC		            sta current_y
  2129 3F4F A5 ED		            lda current_y+1
  2130 3F51 E5 F1		            sbc step_y+1
  2131 3F53 90 DA		            bcc below_zero
  2132 3F55 85 ED		            sta current_y+1
  2133 				            
  2134 3F57 A5 E9		            lda tmp_y2
  2135 3F59 C5 ED		            cmp current_y+1
  2136 3F5B 90 B8		            bcc no_line_end
  2137 				;            lda #1
  2138 				;            sta line_end_y
  2139 3F5D 60			            rts                            
  2140 				            
  2141 3F5E			init_sprites
  2142 3F5E A2 00		            ldx #0
  2143 3F60 8A			            txa
  2144 3F61			set_p
  2145 3F61 9D 00 0E		            sta p0_area,x
  2146 3F64 9D 80 0E		            sta p1_area,x
  2147 3F67 9D 00 0F		            sta p2_area,x
  2148 3F6A 9D 80 0F		            sta p3_area,x
  2149 3F6D E8			            inx
  2150 3F6E 10 F1		            bpl set_p
  2151
  2152 3F70 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2153 3F72 8D 6F 02		            sta GPRIOR
  2154
  2155 3F75 A9 0C		            lda #>pm_area
  2156 3F77 8D 07 D4		            sta PMBASE
  2157
  2158 3F7A A9 03		            lda #3          ; P/M both on
  2159 3F7C 8D 1D D0		            sta GRACTL
  2160
  2161 3F7F A9 90		            lda #$90
  2162 3F81 8D 02 D0		            sta HPOSP2
  2163 3F84 A9 A0		            lda #$A0
  2164 3F86 8D 03 D0		            sta HPOSP3  
  2165 3F89 60			            rts
  2166
  2167 3F8A			init_colors
  2168 3F8A A9 5A		            lda #BASE_COLOR_P1+10
  2169 3F8C 8D C2 02		            sta PCOLR2
  2170 3F8F A9 BA		            lda #BASE_COLOR_P2+10
  2171 3F91 8D C3 02		            sta PCOLR3
  2172 				            
  2173 3F94 A9 00		            lda #0
  2174 3F96 8D C6 02		            sta COLOR2
  2175
  2176 3F99 A9 0E		            lda #HEADER_FG_COLOR
  2177 3F9B 8D C5 02		            sta COLOR1
  2178
  2179 3F9E A9 50		            lda #HEADER_P1_COLOR
  2180 3FA0 8D C0 02		            sta PCOLR0
  2181 3FA3 A9 B0		            lda #HEADER_P2_COLOR
  2182 3FA5 8D C1 02		            sta PCOLR1
  2183
  2184 3FA8 60			            rts
  2185
  2186 3FA9			previous_consol
  2187 3FA9 00			            dta 0
  2188
  2189 3FAA			current_level_index
  2190 3FAA 00			            dta 0
  2191 = 0007			NR_OF_LEVELS = 7
  2192 = 0000			INIT_LEVEL_INDEX = 0
  2193 3FAB			level_speeds
  2194 3FAB 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2195 				;level_speeds_lo
  2196 				;            dta 128
  2197 3FB2			stick_slow_speed_tab
  2198 3FB2 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2199 3FB9			stick_fast_speed_tab
  2200 3FB9 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2201
  2202 				; X = level (0..NR_OF_LEVELS)
  2203 3FC0			set_level_ball_speed
  2204 3FC0 BD B2 3F		            lda stick_slow_speed_tab,x
  2205 3FC3 85 88		            sta stick_slow_speed
  2206 3FC5 BD B9 3F		            lda stick_fast_speed_tab,x
  2207 3FC8 85 89		            sta stick_fast_speed
  2208
  2209 3FCA BD AB 3F		            lda level_speeds,x
  2210 3FCD 85 AC		            sta ball_speed
  2211 3FCF 8A			            txa
  2212 3FD0 18			            clc
  2213 3FD1 69 01		            adc #1
  2214 3FD3 09 10		            ora #16
  2215 3FD5 8D AB 52		            sta level_char
  2216 3FD8 60			            rts
  2217 				            
  2218 3FD9			increase_level
  2219 3FD9 EE AA 3F		            inc current_level_index
  2220 3FDC AD AA 3F		            lda current_level_index
  2221 3FDF C9 07		            cmp #NR_OF_LEVELS
  2222 3FE1 D0 05		            bne ok_level
  2223 3FE3 A9 00		            lda #INIT_LEVEL_INDEX
  2224 3FE5 8D AA 3F		            sta current_level_index
  2225 3FE8			ok_level           
  2226 3FE8 60			            rts
  2227
  2228 3FE9			increase_player_mode
  2229 3FE9 E6 8A		            inc player_mode
  2230 3FEB A5 8A		            lda player_mode
  2231 3FED C9 03		            cmp #NR_OF_PLAYER_MODES
  2232 3FEF D0 04		            bne ok_player_mode
  2233 3FF1 A9 00		            lda #INIT_PLAYER_MODE
  2234 3FF3 85 8A		            sta player_mode
  2235 3FF5			ok_player_mode
  2236 3FF5 85 8B		            sta player_mode_saved
  2237 3FF7 60			            rts
  2238
  2239 3FF8			show_player_mode
  2240 3FF8 A6 8A		            ldx player_mode
  2241 3FFA BD 3F 53		            lda player_mode_lo,x
  2242 3FFD 8D F9 50		            sta menu_line2_ptr
  2243 4000 BD 42 53		            lda player_mode_hi,x
  2244 4003 8D FA 50		            sta menu_line2_ptr+1
  2245 4006 60			            rts
  2246
  2247 4007			            .align $100
  2248 4100			inner_x_tab
  2249 = 4200			inner_y_tab = *+$100
  2250 4100-42FF> 70 72 75 77 +             ins 'data\in210.dat'
  2251 				      
  2252 4300			            .align $400            
  2253 				; outer circle 1024 plot points on 360 degrees
  2254 4400			outer_x_tab
  2255 = 4800			outer_y_tab = *+1024
  2256 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2257 				           
  2258 4C00			            .align $400
  2259 				; table of magnitudes (length) between angle 0 and 0..255
  2260 				; fixed point 8.8 : hi.lo
  2261 4C00			magnitudes_lo
  2262 = 4D00			magnitudes_hi = *+256
  2263 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2264
  2265 4E00			            .align $400
  2266 5000			display_list
  2267 5000-512F> C2		            dta $42+128         ; dli_header
  2268 5001 06 51		            dta a(score_line)
  2269
  2270 				; 102 x 40 = 4080 bytes            
  2271 5003 4F			            dta $4f
  2272 5004 00 70		            dta a(screen_mem1)
  2273 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2274 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2275 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2276 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2277
  2278 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2279 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2280 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2281 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2282
  2283 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2284 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2285 5055			menu_dl_hook
  2286 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2287 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2288
  2289 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2290
  2291 				; 42 + 60 = 102, 4080 bytes
  2292 506B 4F			            dta $4f
  2293 506C 00 80		            dta a(screen_mem2)
  2294 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2295
  2296 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2297 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2298 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2299 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2300
  2301 5095 0F 0F		            dta $0f,$0f
  2302
  2303 				; 60 lines
  2304 5097			menu_dl_end
  2305 5097 4F			            dta $4f
  2306 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2307 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2308 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2309 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2310 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2311
  2312 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2313 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2314 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2315 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2316
  2317 				; 20 x 40 = 800
  2318 50D5 4F			            dta $4f
  2319 50D6 00 90		            dta a(screen_mem3)       
  2320 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2321 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2322 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2323 				            
  2324 50EB 41			            dta $41
  2325 50EC 00 50		            dta a(display_list)
  2326
  2327 50EE			menu_dl_part
  2328 50EE 80			            dta 128 ; dli_menu
  2329 50EF 20			            dta $20
  2330 50F0 42			            dta $42
  2331 50F1 00 52		            dta a(rotor_logo_text)
  2332 50F3 02			            dta 2
  2333 50F4 30			            dta $30
  2334 50F5 46			            dta $46
  2335 50F6			menu_line1_ptr
  2336 50F6 50 52		            dta a(controller_text)
  2337 50F8 46			            dta $46
  2338 50F9			menu_line2_ptr
  2339 50F9 64 52		            dta a(two_player_text)
  2340 50FB 46			            dta $46
  2341 50FC			menu_line3_ptr
  2342 50FC 9F 52		            dta a(level_text)
  2343 50FE 30			            dta $30
  2344 50FF 42			            dta $42
  2345 5100 B3 52		            dta a(start_text)
  2346 5102 10			            dta $10
  2347 5103 01			            dta $01 ; jump
  2348 5104 97 50		            dta a(menu_dl_end)
  2349
  2350 5106			score_line  
  2351 5106 00 2F 2E 25 00	            dta d' ONE '
  2352 510B			score_chars_p1
  2353 510B 0D 0D 00		            dta d'-- '
  2354
  2355 510E 00 00 00 00 00 00 +             dta d'          '
  2356 5118 00 00 00 00 00 00 +             dta d'          '
  2357
  2358 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2359 512B			score_chars_p2
  2360 512B 0D 0D 00		            dta d'-- '
  2361
  2362 512E 00			score_p1    dta 0
  2363 512F 00			score_p2    dta 0
  2364
  2365 5130			            .align $100
  2366 5200			rotor_logo_text
  2367 5200-5344> 00 00 00 00 +             dta d'              '
  2368 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2369 521A 40			            dta $40
  2370 521B 00 00 00 00 00 00 +             dta d'             '
  2371 5228 00 00 00 00 00 00 +             dta d'              '
  2372 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2373 5242 00 00 00 00 00 00 +             dta d'              '
  2374
  2375 5250			controller_text
  2376 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2377 525A			driver_screen
  2378 525A 00 00 00 00 00 00 +             dta d'          '
  2379
  2380 5264			two_player_text
  2381 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2382
  2383 5278			one_player_text
  2384 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2385
  2386 528B			demo_player_text
  2387 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2388
  2389 529F			level_text
  2390 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2391 52AB			level_char            
  2392 52AB 11 00 00 00 00 00 +             dta d'1       '
  2393
  2394 52B3			start_text
  2395 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2396 52DB			stick_text
  2397 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2398 52E3			paddle_text
  2399 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2400 52EB			mouse_text
  2401 52EB 2D 2F 35 33 25 00 +             dta d'MOUSE   '
  2402 52F3			computer_text
  2403 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2404
  2405 52FB			empty_text
  2406 52FB 00 00 00 00 00 00 +             dta d'                    '
  2407 530F			winner_one_text
  2408 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2409 5323			winner_two_text
  2410 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2411
  2412 5337			driver_text_lo
  2413 5337 DB			            dta <stick_text
  2414 5338 E3			            dta <paddle_text
  2415 5339 EB			            dta <mouse_text
  2416 533A F3			            dta <computer_text
  2417 				            
  2418 533B			driver_text_hi
  2419 533B 52			            dta >stick_text
  2420 533C 52			            dta >paddle_text
  2421 533D 52			            dta >mouse_text
  2422 533E 52			            dta >computer_text
  2423
  2424 533F			player_mode_lo
  2425 533F 64			            dta <two_player_text
  2426 5340 78			            dta <one_player_text
  2427 5341 8B			            dta <demo_player_text
  2428
  2429 5342			player_mode_hi
  2430 5342 52			            dta >two_player_text
  2431 5343 52			            dta >one_player_text
  2432 5344 52			            dta >demo_player_text
  2433
  2434 				; 4 KB
  2435 				; 128 x 32 bytes shapes
  2436 5345			            .align $1000
  2437 6000			pm_shapes
  2438 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2439
  2440 				; 9 KB for backdrop image
  2441 7000			            .align $1000
  2442 = 7000			screen_mem1 = * ; 4K
  2443 				;            org screen_mem1
  2444 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2445
  2446 7FF0			            .align $1000
  2447 = 8000			screen_mem2 = * ; 4K
  2448 				;            org screen_mem2
  2449 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2450
  2451 8FF0			            .align $1000
  2452 = 9000			screen_mem3 = * ; 1K
  2453 				;            org screen_mem3
  2454 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2455
  2456 02E0-02E1> 7A 35		            run main
