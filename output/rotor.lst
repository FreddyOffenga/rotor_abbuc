mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-08
     4 				; Version 2.4.9
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for Atari mouse
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D209			KBCODE      = $d209
   102
   103 = D20A			RANDOM      = $d20a
   104
   105 = D20F			SKSTAT      = $d20f
   106
   107 = D300			PORTA       = $d300
   108
   109 = D407			PMBASE      = $d407
   110 = D40A			WSYNC       = $d40a
   111 = D40E			NMIEN       = $d40e
    19
    20 				; color scheme
    21 = 0050			BASE_COLOR_P1   = $50   ; purple
    22 = 00B0			BASE_COLOR_P2   = $b0   ; green
    23
    24 = 000E			HEADER_FG_COLOR = 14
    25 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    26 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    27
    28 				; must be in decimal format, so $11 is 11
    29 = 0011			MAX_SCORE   = $11
    30
    31 = 0C00			pm_area     = $0c00
    32 = 0D80			msl_area    = pm_area+$180
    33 = 0E00			p0_area     = pm_area+$200
    34 = 0E80			p1_area     = pm_area+$280
    35 = 0F00			p2_area     = pm_area+$300
    36 = 0F80			p3_area     = pm_area+$380
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1000			outer_x_256     = $1000
    40 = 1100			outer_y_256     = $1100
    41
    42 = 1200			screen_y_lo     = $1200
    43 = 1300			screen_y_hi     = $1300
    44
    45 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    46 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    47
    48 = 0140			WIDTH           = 320
    49 = 00C0			HEIGHT          = 192
    50
    51 = 0028			SCREEN_WIDTH    = 40
    52
    53 = 0030			outer_x_margin  = 48 ;47-32
    54 = 0040			inner_x_margin  = 64
    55
    56 = 00A0			circle_center_x = WIDTH/2
    57 = 0060			circle_center_y = HEIGHT/2
    58
    59 = 0006			ball_top_margin     = 6
    60 = 0045			ball_left_margin    = 64+5
    61
    62 				; pm upper margin
    63 = 0001			upper_margin    = 1
    64 = 0020			left_margin     = 32
    65
    66 = 0080			music_toggle    = $80
    67
    68 = 0081			shadow_HPOSP0   = $81
    69 = 0082			shadow_HPOSP1   = $82
    70
    71 = 0083			winner_color    = $83
    72
    73 = 0084			shape_ptr       = $84
    74 = 0086			tmp_screen      = $86
    75
    76 = 0088			stick_slow_speed = $88
    77 = 0089			stick_fast_speed = $89
    78
    79 = 008A			player_mode     = $8a
    80 = 0000			MODE_2_PLAYER   = 0
    81 = 0001			MODE_1_PLAYER   = 1
    82 = 0002			MODE_DEMO       = 2
    83 = 0003			NR_OF_PLAYER_MODES = 3
    84 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    85
    86 = 008B			player_mode_saved = $8b
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00AD			edge_collision      = $ad
   126 = 00AE			edge_hit_count      = $ae
   127
   128 = 00B0			tmp_angle1          = $b0
   129 = 00B1			tmp_angle2          = $b1
   130 = 00B2			add_to_angle        = $b2
   131 = 00B3			angle_diff_bat      = $b3
   132 = 00B4			tmp_angle_direction = $b4
   133 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   134 = 00B6			game_restart        = $b6
   135 = 00B7			tmp_angle_diff      = $b7
   136 = 00B8			magnitude           = $b8       ; word
   137
   138 = 00BA			robot_angle_end     = $ba       ; 2 bytes
   139 = 00BA			robot1_angle_end    = robot_angle_end
   140 = 00BB			robot2_angle_end    = robot_angle_end+1
   141
   142 				; $c0 - $df free for music
   143
   144 = 00E0			_divisor    = $e0   ; word
   145 = 00E2			_dividend   = $e2   ; word
   146 = 00E4			_remainder  = $e4   ; word
   147 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   148
   149 = 00E6			tmp_x1      = $e6   ; byte
   150 = 00E7			tmp_y1      = $e7   ; byte
   151 = 00E8			tmp_x2      = $e8   ; byte
   152 = 00E9			tmp_y2      = $e9   ; byte
   153
   154 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   155 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   156
   157 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   158 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   159
   160 = 00F2			tmp_dx      = $f2  ; byte
   161 = 00F3			tmp_dy      = $f3  ; byte
   162
   163 = 00F6			_multiplicand   = $f6   ; word
   164 = 00F8			_multiplier     = $f8   ; byte
   165
   166 				; direction:
   167 				; 0 : x1<x2 or y1<y2 = add
   168 				; 1 ; x1>=y2 or y1>=y2 = subtract
   169
   170 = 00FA			dir_x       = $fa  ; byte
   171 = 00FB			dir_y       = $fb  ; byte
   172
   173 = 00FC			line_end_x  = $fc  ; byte
   174 = 00FD			line_end_y  = $fd  ; byte
   175
   176 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   177
   178 				; real data is loaded at $2000 ($1700+$900)
   179 BE10			            org $1700
   180 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   181
   182 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous mouse value (player 1,2)
    19 3401			prev_mouse_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-4010> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_mouse_value
    27 340B 8D 02 34		            sta prev_mouse_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 3443			reset_driver_mode
    61 3443 A9 00		            lda #0
    62 3445 8D BE 32		            sta driver_mode     ; reset driver mode
    63 3448 60			            rts
    64
    65 				; stick detect by using left/right
    66 				; paddle by connecting/rotate
    67 				; mouse controller by movement
    68
    69 				; return A = driver mode
    70 				; 0 = stick detected
    71 				; 1 = paddle detected
    72 				; 2 = mouse detected
    73
    74 3449			driver_detect
    75 3449 AD 70 02		            lda PADDL0
    76 344C C9 E4		            cmp #228
    77 344E D0 07		            bne paddle_detect
    78 3450 AD 71 02		            lda PADDL1
    79 3453 C9 E4		            cmp #228
    80 3455 F0 06		            beq no_paddle_detect
    81 3457			paddle_detect
    82 3457 A9 01		            lda #1
    83 3459 8D BE 32		            sta driver_mode
    84 345C 60			            rts
    85
    86 345D			no_paddle_detect
    87 345D AD BE 32		            lda driver_mode
    88 3460 C9 02		            cmp #2
    89 3462 F0 0C		            beq keep_mouse
    90 3464 AD 78 02		            lda STICK0
    91 3467 C9 0C		            cmp #12
    92 3469 D0 06		            bne no_mouse_detect
    93 346B A9 02		            lda #2
    94 346D 8D BE 32		            sta driver_mode
    95 3470			keep_mouse
    96 3470 60			            rts
    97
    98 3471			no_mouse_detect
    99 3471 C9 07		            cmp #7      ; paddle button also gives this
   100 3473 F0 04		            beq stick_detect    
   101 3475 C9 0B		            cmp #11     ; paddle button also gives this
   102 3477 D0 06		            bne no_stick_detect
   103 3479			stick_detect
   104 3479 A9 00		            lda #0
   105 347B 8D BE 32		            sta driver_mode
   106 347E 60			            rts
   107
   108 347F			no_stick_detect
   109 				; default is the last value
   110 347F AD BE 32		            lda driver_mode
   111 3482 60			            rts
   112
   113 				; move player 1/2
   114 				; right - clockwise, left = anti-clockwise
   115
   116 				; X = 0, player 1
   117 				; X = 1, player 2
   118
   119 				; A = driver mode:
   120 				; 0 : stick
   121 				; 1 : paddle
   122 				; 2 : mouse
   123 				; 3 : computer
   124
   125 3483			main_driver
   126 3483 AC BE 32		            ldy driver_mode
   127 3486 B9 95 34		            lda driver_lo,y
   128 3489 8D 93 34		            sta driver_ptr
   129 348C B9 99 34		            lda driver_hi,y
   130 348F 8D 94 34		            sta driver_ptr+1
   131
   132 = 3493			driver_ptr = *+1
   133 3492 4C FF FF		            jmp $ffff  
   134
   135 3495			driver_lo
   136 3495 9D			            dta <driver_stick
   137 3496 0B			            dta <driver_paddle
   138 3497 3E			            dta <driver_mouse
   139 3498 9D			            dta <driver_stick
   140
   141 3499			driver_hi
   142 3499 34			            dta >driver_stick
   143 349A 35			            dta >driver_paddle
   144 349B 35			            dta >driver_mouse
   145 349C 34			            dta >driver_stick
   146
   147 				; joystick driver
   148
   149 349D			driver_stick
   150 349D BD 78 02		            lda STICK0,x
   151 34A0 C9 0F		            cmp #15
   152 34A2 F0 31		            beq move_done
   153 34A4 C9 0B		            cmp #11
   154 34A6 D0 16		            bne no_left
   155
   156 34A8 B5 9C		            lda p1_angle,x
   157 34AA 38			            sec
   158 34AB E5 88		            sbc stick_slow_speed
   159 34AD 95 9C		            sta p1_angle,x
   160
   161 34AF BD 84 02		            lda STRIG0,x
   162 34B2 D0 07		            bne no_fast
   163
   164 34B4 B5 9C		            lda p1_angle,x
   165 34B6 38			            sec
   166 34B7 E5 89		            sbc stick_fast_speed
   167 34B9 95 9C		            sta p1_angle,x
   168 34BB			no_fast
   169 				            
   170 34BB 4C D5 34		            jmp move_done
   171 34BE C9 07		no_left     cmp #7
   172 34C0 D0 13		            bne move_done
   173
   174 34C2 B5 9C		            lda p1_angle,x
   175 34C4 18			            clc
   176 34C5 65 88		            adc stick_slow_speed
   177 34C7 95 9C		            sta p1_angle,x
   178
   179 34C9 BD 84 02		            lda STRIG0,x
   180 34CC D0 07		            bne no_fast_right
   181
   182 34CE B5 9C		            lda p1_angle,x
   183 34D0 18			            clc
   184 34D1 65 89		            adc stick_fast_speed
   185 34D3 95 9C		            sta p1_angle,x
   186 34D5			no_fast_right
   187 34D5			move_done
   188 34D5 60			            rts
   189
   190 				; check if player1 button is pressed
   191 				; A=0 not pressed, 1=pressed
   192
   193 34D6			is_player1_button_pressed
   194 34D6 AD BE 32		            lda driver_mode
   195 34D9 C9 01		            cmp #1
   196 34DB F0 07		            beq check_player1_paddle_fire
   197
   198 34DD AD 84 02		            lda STRIG0
   199 34E0 F0 1C		            beq fire_pressed
   200 34E2 D0 24		            bne fire_not_pressed
   201
   202 34E4			check_player1_paddle_fire
   203 34E4 AD 78 02		            lda STICK0
   204 34E7 C9 0B		            cmp #11
   205 34E9 F0 13		            beq fire_pressed
   206 34EB D0 1B		            bne fire_not_pressed
   207
   208 				; X=port number to check (paddle uses only port 1)
   209 				; check fire button (paddle uses left/right stick as fire button)
   210 				; A=0 not pressed, 1=pressed
   211
   212 34ED			is_both_buttons
   213 34ED AD BE 32		            lda driver_mode
   214 34F0 C9 01		            cmp #1
   215 34F2 F0 0D		            beq check_paddle_fire
   216
   217 34F4 AD 84 02		            lda STRIG0
   218 34F7 D0 0F		            bne fire_not_pressed
   219 34F9 AD 85 02		            lda STRIG1
   220 34FC D0 0A		            bne fire_not_pressed
   221
   222 34FE			fire_pressed
   223 34FE A9 01		            lda #1
   224 3500 60			            rts
   225
   226 3501			check_paddle_fire
   227 3501 AD 78 02		            lda STICK0
   228 3504 C9 03		            cmp #3
   229 3506 F0 F6		            beq fire_pressed
   230
   231 3508			fire_not_pressed
   232 3508 A9 00		            lda #0
   233 350A 60			            rts
   234
   235 				; paddle driver
   236 				            
   237 350B			driver_paddle            
   238 350B BD 70 02		            lda PADDL0,x
   239 350E A8			            tay
   240 350F B9 00 33		            lda paddle_to_256,y
   241 3512 5D 75 35		            eor paddle_offsets,x
   242 3515 95 9C		            sta p1_angle,x
   243 3517 60			            rts
   244
   245 				; keyboard driver (always player1)
   246 				; not used here, but might come in handy sometime
   247
   248 3518			driver_keyboard
   249 3518 A2 00		            ldx #0          ; player 1
   250
   251 351A AD 0F D2		            lda SKSTAT
   252 351D 29 04		            and #4
   253 351F D0 1C		            bne key_done
   254
   255 3521			still_pressed
   256 3521 AD 09 D2		            lda KBCODE
   257 3524 C9 16		            cmp #$16        ; $56 including SHIFT
   258 3526 D0 0A		            bne no_z_key
   259
   260 3528 B5 9C		            lda p1_angle,x
   261 352A 18			            clc
   262 352B 65 88		            adc stick_slow_speed
   263 352D 95 9C		            sta p1_angle,x
   264
   265 352F 4C 3D 35		            jmp key_done
   266
   267 3532 C9 17		no_z_key    cmp #$17        ; $57 including SHIFT
   268 3534 D0 07		            bne key_done
   269
   270 3536 B5 9C		            lda p1_angle,x
   271 3538 38			            sec
   272 3539 E5 88		            sbc stick_slow_speed
   273 353B 95 9C		            sta p1_angle,x
   274 353D			key_done
   275 353D 60			            rts
   276
   277 				; mouse driver (Atari ST compatible)
   278
   279 353E			driver_mouse
   280 353E 60			            rts
   281 				;            lda STICK0,x
   282 				;            eor #15
   283 				;            jmp driver_mouse_main
   284
   285 353F			driver_mouse_fast_p1
   286 353F AD 00 D3		            lda PORTA
   287 3542 A2 00		            ldx #0
   288 3544 4C 50 35		            jmp driver_mouse_main
   289
   290 3547			driver_mouse_fast_p2
   291 3547 AD 00 D3		            lda PORTA
   292 354A 4A			            lsr
   293 354B 4A			            lsr
   294 354C 4A			            lsr
   295 354D 4A			            lsr
   296 354E A2 01		            ldx #1
   297 				; have to call this many times per frame for each player
   298 3550			driver_mouse_main
   299 3550 29 03		            and #%00000011
   300 3552 48			            pha
   301 3553 1D 01 34		            ora prev_mouse_value,x
   302 3556 A8			            tay
   303 3557 68			            pla
   304 3558 0A			            asl
   305 3559 0A			            asl
   306 355A 9D 01 34		            sta prev_mouse_value,x  ; store previous bits at 0000AA00 position for next time
   307
   308 355D B9 65 35		            lda mouse_transitions,y
   309 3560 75 9C		            adc p1_angle,x
   310 3562 95 9C		            sta p1_angle,x
   311 3564 60			            rts
   312
   313 				; nibble coded transitions for mouse
   314 				; 15,13,12,14 = anti-clockwise
   315 				; 15,14,12,13 = clockwise
   316 				; only lowest 2 bits change, so we need 16 values for all transitions
   317
   318 				; index is the combined value of nibble AABB
   319 				; where AA is previous bits and BB current bits
   320 3565			mouse_transitions
   321 3565 00			            dta 0   ; 00 -> 00 (12 -> 12)
   322 3566 02			            dta 2   ; 00 -> 01 (12 -> 13)
   323 3567 FE			            dta 254 ; 00 -> 10 (12 -> 14)
   324 3568 00			            dta 0   ; 00 -> 11 (12 -> 15)
   325 3569 FE			            dta 254 ; 01 -> 00 (13 -> 12)
   326 356A 00			            dta 0   ; 01 -> 01 (13 -> 13)
   327 356B 00			            dta 0   ; 01 -> 10 (13 -> 14)
   328 356C 02			            dta 2   ; 01 -> 11 (13 -> 15)
   329 356D 02			            dta 2   ; 10 -> 00 (14 -> 12)
   330 356E 00			            dta 0   ; 10 -> 01 (14 -> 13)
   331 356F 00			            dta 0   ; 10 -> 10 (14 -> 14)
   332 3570 FE			            dta 254 ; 10 -> 11 (14 -> 15)
   333 3571 00			            dta 0   ; 11 -> 00 (15 -> 12)
   334 3572 FE			            dta 254 ; 11 -> 01 (15 -> 13)
   335 3573 02			            dta 2   ; 11 -> 10 (15 -> 14)
   336 3574 00			            dta 0   ; 11 -> 11 (15 -> 15)
   337
   338 3575			paddle_offsets
   339 3575 00 00		            dta 0,0
   183
   184 3577			reset_pressed
   185 3577 20 00 9C		            jsr intro_main
   186
   187 357A			main
   188 357A A9 FF		            lda #255
   189 357C 8D FC 02		            sta 764
   190
   191 				; for fast loaders, wait 10 seconds or continue with spacebar
   192 357F			wait_a_sec
   193 357F AD FC 02		            lda 764
   194 3582 C9 FF		            cmp #255
   195 3584 D0 06		            bne any_key_pressed
   196
   197 3586 A5 13		            lda 19
   198 3588 C9 02		            cmp #2
   199 358A 90 F3		            bcc wait_a_sec
   200
   201 358C			any_key_pressed
   202 358C A9 FF		            lda #255
   203 358E 8D FC 02		            sta 764
   204
   205 				; start the game!
   206 				 
   207 3591 A9 00		            lda #0
   208 3593 8D 2F 02		            sta SDMCTL
   209 3596 85 B6		            sta game_restart
   210 3598 85 8F		            sta end_screen_delay
   211 359A 85 83		            sta winner_color
   212
   213 359C A9 80		            lda #128
   214 359E 85 8D		            sta volume_hit_bat
   215 35A0 85 8E		            sta volume_hit_edge
   216 35A2 85 80		            sta music_toggle        ; 128 = on, 0 = off
   217
   218 35A4 A9 01		            lda #1
   219 35A6 8D 44 02		            sta 580 ; coldstart
   220
   221 				;            lda #1
   222 				;            sta 9   ; boot
   223
   224 				;            lda #<reset_pressed
   225 				;            sta $0a
   226 				;            lda #>reset_pressed
   227 				;            sta $0b
   228
   229 35A9 20 03 34		            jsr driver_init
   230
   231 35AC 20 F3 3C		            jsr make_shape_index
   232
   233 35AF 20 23 3D		            jsr make_outer_256
   234
   235 35B2 20 0A 37		            jsr make_screen_y_tab
   236
   237 35B5 20 55 37		            jsr invert_backdrop
   238 35B8 A9 60		            lda #$60
   239 35BA 8D 55 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   240
   241 35BD 20 93 3D		            jsr reset_score
   242 35C0 20 61 3D		            jsr show_score_p1
   243 35C3 20 7A 3D		            jsr show_score_p2
   244
   245 35C6 20 68 3F		            jsr init_sprites
   246 35C9 20 94 3F		            jsr init_colors
   247
   248 				; init. game vars
   249 35CC A2 00		            ldx #INIT_LEVEL_INDEX
   250 35CE 8E B4 3F		            stx current_level_index
   251 35D1 20 CA 3F		            jsr set_level_ball_speed
   252
   253 35D4 A9 00		            lda #INIT_PLAYER_MODE
   254 35D6 85 8A		            sta player_mode
   255 35D8 85 8B		            sta player_mode_saved
   256 35DA 20 02 40		            jsr show_player_mode
   257
   258 35DD A9 01		            lda #STATE_IN_MENU
   259 35DF 85 8C		            sta game_state           ; start with menu
   260
   261 35E1 20 6E 31		            jsr music_init
   262
   263 35E4 20 9A 37		            jsr show_menu_options
   264
   265 35E7 20 A0 38		            jsr reset_autostart_demo
   266
   267 35EA A9 00		            lda #<display_list
   268 35EC 8D 30 02		            sta SDLSTL
   269 35EF A9 50		            lda #>display_list
   270 35F1 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 35F4 A9 C0		            lda #$c0
   275 35F6 8D 0E D4		            sta NMIEN
   276
   277 35F9 A9 07		            lda #7          ; sets VVBLKI
   278 35FB A0 EC		            ldy #<vbi
   279 35FD A2 37		            ldx #>vbi
   280 35FF 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 3602			wait_mouse
   283 3602 AD BE 32		            lda driver_mode
   284 3605 C9 02		            cmp #2
   285 3607 D0 F9		            bne wait_mouse
   286
   287 3609 A5 8A		            lda player_mode
   288 360B C9 01		            cmp #MODE_1_PLAYER
   289 360D F0 03		            beq single_driver
   290 360F 20 47 35		            jsr driver_mouse_fast_p2
   291 3612			single_driver
   292 3612 20 3F 35		            jsr driver_mouse_fast_p1
   293
   294 3615 4C 02 36		            jmp wait_mouse
   295
   296 				;------------------------
   297 				; 8bit * 8bit = 16bit multiply
   298 				; By White Flame
   299 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   300 				; uses extra zp var _multiplicand+1
   301
   302 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   303 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   304
   305 				; In this version, both inputs must be unsigned
   306 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   307
   308 3618			_multi8
   309 3618 A9 00		            lda #$00
   310 361A A8			            tay
   311 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   312 361B F0 0D		            beq _enter_loop
   313 361D			_do_add
   314 361D 18			            clc
   315 361E 65 F6		            adc _multiplicand
   316 3620 AA			            tax
   317
   318 3621 98			            tya
   319 3622 65 F7		            adc _multiplicand+1
   320 3624 A8			            tay
   321 3625 8A			            txa
   322 3626			_mul_loop
   323 3626 06 F6		            asl _multiplicand
   324 3628 26 F7		            rol _multiplicand+1
   325 362A			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   326 362A 46 F8		            lsr _multiplier
   327 362C B0 EF		            bcs _do_add
   328 362E D0 F6		            bne _mul_loop
   329 3630 60			            rts
   330
   331 				; reset PM0/1 to playfield settings
   332 3631			dli_header
   333 3631 48			            pha
   334
   335 3632 A9 08		            lda #8
   336 3634 8D 17 D0		            sta COLPF1
   337
   338 3637 A5 81		            lda shadow_HPOSP0
   339 3639 8D 00 D0		            sta HPOSP0
   340 363C A5 82		            lda shadow_HPOSP1
   341 363E 8D 01 D0		            sta HPOSP1
   342
   343 3641 A9 00		            lda #0
   344 3643 8D 08 D0		            sta SIZEP0
   345 3646 8D 09 D0		            sta SIZEP1
   346
   347 3649 A9 5A		            lda #BASE_COLOR_P1+10
   348 364B 8D 12 D0		            sta COLPM0
   349 364E A9 BA		            lda #BASE_COLOR_P2+10
   350 3650 8D 13 D0		            sta COLPM1
   351
   352 3653 A9 71		            lda #<dli_menu
   353 3655 8D 00 02		            sta VDSLST
   354 3658 A9 36		            lda #>dli_menu
   355 365A 8D 01 02		            sta VDSLST+1
   356
   357 365D 8A			            txa
   358 365E 48			            pha
   359 365F 98			            tya
   360 3660 48			            pha
   361
   362 3661 20 DC 31		            jsr copy_shadow
   363
   364 3664 A5 80		            lda music_toggle
   365 3666 F0 03		            beq skip_music
   366 3668 20 97 31		            jsr play_song
   367 366B			skip_music
   368
   369 366B 68			            pla
   370 366C A8			            tay
   371 366D 68			            pla
   372 366E AA			            tax
   373 				            
   374 366F 68			            pla
   375 3670 40			            rti
   376
   377 3671			dli_menu
   378 3671 48			            pha
   379 3672 8A			            txa
   380 3673 48			            pha
   381
   382 3674 A9 0E		            lda #$0e
   383 3676 8D 0A D4		            sta WSYNC
   384 3679 8D 1A D0		            sta COLBK
   385 367C A9 0A		            lda #$0a
   386 367E 8D 0A D4		            sta WSYNC
   387 3681 8D 1A D0		            sta COLBK
   388 3684 A9 00		            lda #0
   389 3686 8D 0A D4		            sta WSYNC
   390 3689 8D 1A D0		            sta COLBK
   391
   392 368C A2 00		            ldx #0
   393 368E			color_it1
   394 368E BD D2 36		            lda menu_colpf2,x
   395 3691 8D 0A D4		            sta WSYNC
   396 3694 8D 18 D0		            sta COLPF2
   397 3697 E8			            inx
   398 3698 E0 12		            cpx #18
   399 369A D0 F2		            bne color_it1
   400
   401 369C A2 00		            ldx #0
   402 369E			color_it2
   403 369E BD E4 36		            lda menu_colpf0,x
   404 36A1 05 83		            ora winner_color
   405 36A3 8D 0A D4		            sta WSYNC
   406 36A6 8D 16 D0		            sta COLPF0
   407 36A9 E8			            inx
   408 36AA E0 26		            cpx #38
   409 36AC D0 F0		            bne color_it2
   410
   411 36AE A9 00		            lda #0
   412 36B0 8D 0A D4		            sta WSYNC
   413 36B3 8D 1A D0		            sta COLBK
   414 36B6 A9 0A		            lda #$0a
   415 36B8 8D 0A D4		            sta WSYNC
   416 36BB 8D 1A D0		            sta COLBK
   417 36BE A9 0E		            lda #$0e
   418 36C0 8D 0A D4		            sta WSYNC
   419 36C3 8D 1A D0		            sta COLBK
   420 36C6 A9 00		            lda #0
   421 36C8 8D 0A D4		            sta WSYNC
   422 36CB 8D 1A D0		            sta COLBK
   423 				            
   424 36CE 68			            pla
   425 36CF AA			            tax
   426 36D0 68			            pla
   427 36D1 40			            rti
   428
   429 36D2			menu_colpf2
   430 36D2 50			            dta BASE_COLOR_P1
   431 36D3 50			            dta BASE_COLOR_P1
   432 36D4 50			            dta BASE_COLOR_P1
   433 36D5 50			            dta BASE_COLOR_P1
   434 36D6 50			            dta BASE_COLOR_P1
   435 36D7 50			            dta BASE_COLOR_P1
   436 36D8 50			            dta BASE_COLOR_P1
   437 36D9 50			            dta BASE_COLOR_P1
   438
   439 36DA B0			            dta BASE_COLOR_P2
   440 36DB B0			            dta BASE_COLOR_P2
   441 36DC B0			            dta BASE_COLOR_P2
   442 36DD B0			            dta BASE_COLOR_P2
   443 36DE B0			            dta BASE_COLOR_P2
   444 36DF B0			            dta BASE_COLOR_P2
   445 36E0 B0			            dta BASE_COLOR_P2
   446 36E1 B0			            dta BASE_COLOR_P2
   447
   448 36E2 00 00		            dta 0,0
   449
   450 36E4			menu_colpf0
   451 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   452 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   453 36E4 00 00		            dta 0,0
   454 36E6 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   455 36EE 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   456 36F6 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   457 36FE 00 00 00 00		            dta 0,0,0,0
   458 3702 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   459
   460 				; make pointers from y-position to screen memory
   461 				; screen memory is 3 blocks
   462 				; screen_mem1 : 102 lines, 4080 bytes
   463 				; screen_mem2 : 102 lines, 4080 bytes
   464 				; screen_mem3 :  20 lines,  800 bytes
   465
   466 370A			make_screen_y_tab
   467 370A A9 00		            lda #<screen_mem1
   468 370C 85 86		            sta tmp_screen
   469 370E A9 70		            lda #>screen_mem1
   470 3710 85 87		            sta tmp_screen+1
   471
   472 3712 A2 00		            ldx #0
   473 3714			fill_y_tab1
   474 3714 20 3D 37		            jsr store_y_line
   475 3717 E8			            inx
   476 3718 E0 66		            cpx #102
   477 371A D0 F8		            bne fill_y_tab1
   478
   479 				; x = 102
   480 371C A9 00		            lda #<screen_mem2
   481 371E 85 86		            sta tmp_screen
   482 3720 A9 80		            lda #>screen_mem2
   483 3722 85 87		            sta tmp_screen+1
   484
   485 3724			fill_y_tab2
   486 3724 20 3D 37		            jsr store_y_line
   487 3727 E8			            inx
   488 3728 E0 CC		            cpx #204
   489 372A D0 F8		            bne fill_y_tab2
   490
   491 372C A9 00		            lda #<screen_mem3
   492 372E 85 86		            sta tmp_screen
   493 3730 A9 90		            lda #>screen_mem3
   494 3732 85 87		            sta tmp_screen+1
   495
   496 				; x = 204
   497 3734			fill_y_tab3
   498 3734 20 3D 37		            jsr store_y_line
   499 3737 E8			            inx
   500 3738 E0 E0		            cpx #224
   501 373A D0 F8		            bne fill_y_tab3
   502 373C 60			            rts
   503
   504 373D			store_y_line
   505 373D A5 86		            lda tmp_screen
   506 373F 9D 00 12		            sta screen_y_lo,x
   507 3742 A5 87		            lda tmp_screen+1
   508 3744 9D 00 13		            sta screen_y_hi,x
   509 				            
   510 3747 A5 86		            lda tmp_screen
   511 3749 18			            clc
   512 374A 69 28		            adc #SCREEN_WIDTH
   513 374C 85 86		            sta tmp_screen
   514 374E A5 87		            lda tmp_screen+1
   515 3750 69 00		            adc #0
   516 3752 85 87		            sta tmp_screen+1
   517 3754 60			            rts
   518
   519 				; @todo invert backdrop image
   520 				; now we have to do it here :P
   521 3755			invert_backdrop
   522 3755 A9 00		            lda #<screen_mem1
   523 3757 85 86		            sta tmp_screen
   524 3759 A9 70		            lda #>screen_mem1
   525 375B 85 87		            sta tmp_screen+1
   526 				            
   527 375D A2 10		            ldx #16     ; 16 pages = 4K
   528 375F 20 7D 37		            jsr do_x_pages
   529 				           
   530 3762 A9 00		            lda #<screen_mem2
   531 3764 85 86		            sta tmp_screen
   532 3766 A9 80		            lda #>screen_mem2
   533 3768 85 87		            sta tmp_screen+1
   534 				            
   535 376A A2 10		            ldx #16     ; 16 pages = 4K
   536 376C 20 7D 37		            jsr do_x_pages
   537
   538 376F A9 00		            lda #<screen_mem3
   539 3771 85 86		            sta tmp_screen
   540 3773 A9 90		            lda #>screen_mem3
   541 3775 85 87		            sta tmp_screen+1
   542 				            
   543 3777 A2 04		            ldx #4     ; 4 pages = 1K
   544 3779 20 7D 37		            jsr do_x_pages
   545 377C 60			            rts
   546
   547 				; invert x pages, starting from tmp_screen
   548
   549 377D			do_x_pages
   550 377D A0 00		            ldy #0
   551 377F			do_page
   552 377F B1 86		            lda (tmp_screen),y
   553 3781 49 FF		            eor #$ff
   554 3783 91 86		            sta (tmp_screen),y
   555 3785 C8			            iny
   556 3786 D0 F7		            bne do_page 
   557
   558 3788 E6 87		            inc tmp_screen+1
   559 378A CA			            dex
   560 378B D0 F2		            bne do_page
   561 378D 60			            rts
   562
   563 378E			turn_color_ball
   564 378E A6 B5		            ldx player_turn
   565 3790 BD 97 37		            lda color_turn,x
   566 3793 8D C7 02		            sta COLOR3
   567 3796 60			            rts
   568 				            
   569 3797 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   570
   571 379A			show_menu_options
   572 379A A9 50		            lda #<controller_text
   573 379C 8D F6 50		            sta menu_line1_ptr
   574 379F A9 52		            lda #>controller_text
   575 37A1 8D F7 50		            sta menu_line1_ptr+1
   576
   577 37A4 20 02 40		            jsr show_player_mode
   578
   579 37A7 A9 9F		            lda #<level_text
   580 37A9 8D FC 50		            sta menu_line3_ptr
   581 37AC A9 52		            lda #>level_text
   582 37AE 8D FD 50		            sta menu_line3_ptr+1
   583
   584 37B1 A9 00		            lda #0
   585 37B3 85 83		            sta winner_color
   586 37B5 60			            rts
   587
   588 37B6			show_end_screen
   589 37B6 A9 FB		            lda #<empty_text
   590 37B8 8D F6 50		            sta menu_line1_ptr
   591 37BB 8D FC 50		            sta menu_line3_ptr
   592 37BE A9 52		            lda #>empty_text
   593 37C0 8D F7 50		            sta menu_line1_ptr+1
   594 37C3 8D FD 50		            sta menu_line3_ptr+1
   595
   596 37C6 AD 2E 51		            lda score_p1
   597 37C9 CD 2F 51		            cmp score_p2
   598 37CC 90 0F		            bcc player_2_wins
   599
   600 37CE A9 0F		            lda #<winner_one_text
   601 37D0 8D F9 50		            sta menu_line2_ptr
   602 37D3 A9 53		            lda #>winner_one_text
   603 37D5 8D FA 50		            sta menu_line2_ptr+1
   604
   605 37D8 A9 50		            lda #BASE_COLOR_P1
   606 37DA 85 83		            sta winner_color
   607 37DC 60			            rts
   608
   609 37DD			player_2_wins
   610 37DD A9 23		            lda #<winner_two_text
   611 37DF 8D F9 50		            sta menu_line2_ptr
   612 37E2 A9 53		            lda #>winner_two_text
   613 37E4 8D FA 50		            sta menu_line2_ptr+1
   614
   615 37E7 A9 B0		            lda #BASE_COLOR_P2
   616 37E9 85 83		            sta winner_color
   617
   618 37EB 60			            rts
   619
   620 				; A, X, Y are already saved by the OS
   621 37EC			vbi
   622 37EC A9 28		            lda #$28
   623 37EE 8D 1A D0		            sta $d01a
   624
   625 				; toggle music on/off with spacebar
   626 37F1 AD FC 02		            lda 764
   627 37F4 C9 21		            cmp #$21
   628 37F6 D0 10		            bne no_spacebar
   629 37F8 A5 80		            lda music_toggle
   630 37FA 49 80		            eor #128
   631 37FC 85 80		            sta music_toggle
   632 37FE D0 03		            bne music_turned_on
   633 3800 20 60 32		            jsr music_off
   634
   635 3803			music_turned_on
   636 3803 A9 FF		            lda #255
   637 3805 8D FC 02		            sta 764
   638
   639 3808			no_spacebar
   640 3808 20 72 3A		            jsr play_sound_bat
   641 380B 20 90 3A		            jsr play_sound_edge
   642
   643 380E A9 31		            lda #<dli_header
   644 3810 8D 00 02		            sta VDSLST
   645 3813 A9 36		            lda #>dli_header
   646 3815 8D 01 02		            sta VDSLST+1
   647
   648 3818 A9 2E		            lda #%00101110  ; enable P/M DMA
   649 381A 8D 2F 02		            sta SDMCTL
   650 381D A9 00		            lda #0
   651 381F 85 4D		            sta 77      ; attract off
   652 3821 A9 98		            lda #>rotor_font
   653 3823 8D F4 02		            sta 756
   654
   655 3826 A9 30		            lda #$30
   656 3828 8D 00 D0		            sta HPOSP0
   657 382B A9 B0		            lda #$b0
   658 382D 8D 01 D0		            sta HPOSP1
   659
   660 				; menu switching thingy
   661
   662 3830 AD 1F D0		            lda CONSOL
   663 3833 C9 03		            cmp #3  ; option button
   664 3835 D0 17		            bne no_option_pressed
   665 3837 A5 8C		            lda game_state
   666 3839 C9 01		            cmp #STATE_IN_MENU
   667 383B F0 2E		            beq check_game_state
   668
   669 				; prevent menu option directly after leaving in-game state
   670 383D A9 03		            lda #3
   671 383F 8D B3 3F		            sta previous_consol
   672
   673 3842			go_menu_mode
   674 3842 20 44 3C		            jsr wipe_ball
   675
   676 3845 20 FA 31		            jsr music_normal_volume
   677
   678 3848 20 8E 38		            jsr switch_to_menu
   679
   680 384B 4C 6B 38		            jmp check_game_state
   681
   682 384E			no_option_pressed
   683 384E C9 06		            cmp #6  ; start pressed
   684 3850 F0 05		            beq reset_game
   685
   686 				; check autostart state
   687
   688 3852 AD 9D 38		            lda autostart_demo
   689 3855 F0 14		            beq check_game_state
   690
   691 				; reset game
   692
   693 3857			reset_game
   694 3857 20 05 32		            jsr music_low_volume
   695
   696 385A 20 44 3C		            jsr wipe_ball
   697
   698 385D 20 23 3B		            jsr reset_robot_angle_end
   699
   700 3860 A9 01		            lda #1
   701 3862 85 B6		            sta game_restart
   702
   703 3864 20 A0 38		            jsr reset_autostart_demo
   704
   705 3867 A9 00		            lda #STATE_IN_GAME
   706 3869 85 8C		            sta game_state
   707
   708 386B			check_game_state
   709 386B A5 8C		            lda game_state
   710 386D D0 03		            bne no_main_game_state
   711 386F 4C 69 39		            jmp main_game_vbi
   712
   713 3872			no_main_game_state
   714 3872 C9 02		            cmp #STATE_IN_END
   715 3874 D0 58		            bne menu_vbi
   716
   717 				; end screen vbi
   718 3876 A5 8F		            lda end_screen_delay
   719 3878 D0 0C		            bne stay_in_end_screen
   720
   721 387A 20 A6 31		            jsr restart_music
   722 387D 20 FA 31		            jsr music_normal_volume
   723
   724 3880 20 8E 38		            jsr switch_to_menu
   725
   726 3883 4C CE 38		            jmp menu_vbi
   727
   728 3886			stay_in_end_screen
   729 3886 20 54 3A		            jsr play_sound_end_game
   730 3889 C6 8F		            dec end_screen_delay
   731 388B 4C 1A 39		            jmp wait_depressed
   732
   733 388E			switch_to_menu
   734 388E A5 8B		            lda player_mode_saved
   735 3890 85 8A		            sta player_mode
   736
   737 3892 20 9A 37		            jsr show_menu_options
   738
   739 3895 20 43 34		            jsr reset_driver_mode
   740
   741 3898 A9 01		            lda #STATE_IN_MENU
   742 389A 85 8C		            sta game_state
   743 389C 60			            rts
   744
   745 				; demo autostart
   746
   747 389D 00			autostart_demo  dta 0
   748 389E 00 00		autostart_timer dta 0,0
   749
   750 38A0			reset_autostart_demo
   751 38A0 A9 00		            lda #0
   752 38A2 8D 9D 38		            sta autostart_demo      ; do not start again
   753 38A5 8D 9E 38		            sta autostart_timer
   754 38A8 A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   755 38AA 8D 9F 38		            sta autostart_timer+1
   756 38AD 60			            rts
   757
   758 38AE			handle_autostart_timer
   759 38AE AD 9E 38		            lda autostart_timer
   760 38B1 0D 9F 38		            ora autostart_timer+1
   761 38B4 F0 17		            beq idle_timer
   762 38B6 CE 9E 38		            dec autostart_timer
   763 38B9 D0 12		            bne running_timer
   764 38BB CE 9F 38		            dec autostart_timer+1
   765 38BE D0 0D		            bne running_timer
   766
   767 				; timer reached zero
   768 38C0 A9 01		            lda #1
   769 38C2 8D 9D 38		            sta autostart_demo
   770 38C5 A5 8A		            lda player_mode
   771 38C7 85 8B		            sta player_mode_saved
   772 38C9 A9 02		            lda #2
   773 38CB 85 8A		            sta player_mode
   774
   775 38CD			running_timer
   776 38CD			idle_timer
   777 38CD 60			            rts
   778
   779 				; within menu vbi
   780
   781 38CE			menu_vbi
   782 38CE 20 AE 38		            jsr handle_autostart_timer
   783
   784 38D1 A5 8A		            lda player_mode
   785 38D3 F0 08		            beq check_human_buttons
   786
   787 38D5 20 D6 34		            jsr is_player1_button_pressed
   788 38D8 F0 0B		            beq check_consol_buttons
   789 38DA 4C 57 38		            jmp reset_game
   790
   791 38DD			check_human_buttons
   792 38DD 20 ED 34		            jsr is_both_buttons
   793 38E0 F0 03		            beq check_consol_buttons
   794 38E2 4C 57 38		            jmp reset_game
   795
   796 38E5			check_consol_buttons
   797 38E5 AD 1F D0		            lda CONSOL
   798 38E8 C9 05		            cmp #5          ; select
   799 38EA D0 18		            bne no_level_select
   800 				            
   801 38EC AD B3 3F		            lda previous_consol
   802 38EF C9 05		            cmp #5
   803 38F1 F0 27		            beq wait_depressed
   804
   805 38F3 20 E3 3F		            jsr increase_level
   806 38F6 AE B4 3F		            ldx current_level_index
   807 38F9 20 CA 3F		            jsr set_level_ball_speed
   808
   809 38FC A9 05		            lda #5
   810 38FE 8D B3 3F		            sta previous_consol
   811 3901 4C 1A 39		            jmp wait_depressed
   812
   813 3904			no_level_select
   814 3904 C9 03		            cmp #3          ; option
   815 3906 D0 0F		            bne no_player_mode_select
   816
   817 3908 AD B3 3F		            lda previous_consol
   818 390B C9 03		            cmp #3
   819 390D F0 0B		            beq wait_depressed
   820
   821 390F 20 F3 3F		            jsr increase_player_mode
   822 3912 20 02 40		            jsr show_player_mode
   823
   824 3915 A9 03		            lda #3
   825 3917			no_player_mode_select
   826 3917 8D B3 3F		            sta previous_consol
   827
   828 391A			wait_depressed
   829 391A A9 01		            lda #1      ; dl jump
   830 391C 8D 55 50		            sta menu_dl_hook
   831 391F A9 EE		            lda #<menu_dl_part
   832 3921 8D 56 50		            sta menu_dl_hook+1
   833 3924 A9 50		            lda #>menu_dl_part
   834 3926 8D 57 50		            sta menu_dl_hook+2
   835
   836 				; detect/show controller type (used for both players)
   837 3929 20 50 39		            jsr detect_show_driver
   838
   839 392C A5 8A		            lda player_mode
   840 392E C9 00		            cmp #MODE_2_PLAYER
   841 3930 F0 15		            beq no_robot_in_menu
   842
   843 3932 C9 01		            cmp #MODE_1_PLAYER
   844 3934 F0 0B		            beq one_robot_in_menu
   845 				; demo mode, both robots in menu
   846 3936 A5 9C		            lda p1_angle
   847 3938 C5 BA		            cmp robot1_angle_end
   848 393A D0 05		            bne robot1_moves_to_goal
   849
   850 393C AD 0A D2		            lda RANDOM
   851 393F 85 BA		            sta robot1_angle_end
   852
   853 3941			robot1_moves_to_goal
   854 3941			one_robot_in_menu
   855 3941 A5 9C		            lda p1_angle
   856 3943 49 80		            eor #128
   857 3945 85 BB		            sta robot2_angle_end
   858
   859 3947			no_robot_in_menu
   860 3947 20 DF 3A		            jsr handle_player1
   861 394A 20 02 3B		            jsr handle_player2
   862
   863 394D 4C 24 3A		            jmp exit_vbi
   864
   865 				; X = port/driver to detect
   866 3950			detect_show_driver
   867 3950 20 49 34		            jsr driver_detect
   868 3953 A8			            tay
   869 3954 B9 37 53		            lda driver_text_lo,y
   870 3957 85 86		            sta tmp_screen
   871 3959 B9 3B 53		            lda driver_text_hi,y
   872 395C 85 87		            sta tmp_screen+1
   873
   874 395E A0 07		            ldy #7
   875 3960			show_driv
   876 3960 B1 86		            lda (tmp_screen),y
   877 3962 99 5A 52		            sta driver_screen,y
   878 3965 88			            dey
   879 3966 10 F8		            bpl show_driv
   880 3968 60			            rts
   881
   882 				; main game vbi
   883 3969			main_game_vbi
   884 3969 A5 B6		            lda game_restart
   885 396B F0 33		            beq no_restart
   886
   887 				; restart game
   888
   889 396D 20 6C 3A		            jsr silence_end
   890
   891 3970 A9 00		            lda #0
   892 3972 85 B6		            sta game_restart
   893 				            
   894 3974 20 93 3D		            jsr reset_score
   895 3977 20 61 3D		            jsr show_score_p1
   896 397A 20 7A 3D		            jsr show_score_p2
   897
   898 397D A6 9C		            ldx p1_angle
   899 397F 86 AA		            stx ball_angle_start
   900 3981 20 9F 3B		            jsr ball_to_start_position
   901 3984 20 AE 3B		            jsr prepare_ball_end_position
   902
   903 3987 A9 00		            lda #0
   904 3989 85 A0		            sta mp_collision
   905 398B 85 A1		            sta in_collision
   906 398D 85 A3		            sta edge_delay
   907 398F 85 AD		            sta edge_collision
   908 3991 85 AE		            sta edge_hit_count
   909 3993 8D 1E D0		            sta HITCLR
   910
   911 3996 A9 02		            lda #2
   912 3998 85 B5		            sta player_turn
   913
   914 399A 20 8E 37		            jsr turn_color_ball
   915 399D 4C 24 3A		            jmp exit_vbi
   916
   917 39A0			no_restart
   918 				; remove menu hook
   919 39A0 A9 0F		            lda #$0f        ; dl gfx 8
   920 39A2 8D 55 50		            sta menu_dl_hook
   921 39A5 8D 56 50		            sta menu_dl_hook+1
   922 39A8 8D 57 50		            sta menu_dl_hook+2
   923
   924 39AB AD 08 D0		            lda M0PL
   925 39AE 85 A0		            sta mp_collision
   926 39B0 AD 09 D0		            lda M1PL
   927 39B3 05 A0		            ora mp_collision
   928 39B5 85 A0		            sta mp_collision
   929
   930 39B7 AD 00 D0		            lda M0PF
   931 39BA 85 AD		            sta edge_collision
   932 39BC AD 01 D0		            lda M1PF
   933 39BF 05 AD		            ora edge_collision
   934 39C1 85 AD		            sta edge_collision
   935 				;           beq no_edge_collision
   936
   937 				;            inc edge_hit_count
   938 				;            lda edge_hit_count
   939 				;            cmp #2
   940 				;            bcc edge_hit_counting
   941
   942 				;            sei
   943 				;lalala      jmp lalala
   944
   945 				;no_edge_collision
   946 				;            lda #0
   947 				;            sta edge_hit_count
   948
   949 39C3			edge_hit_counting
   950 39C3 20 DF 3A		            jsr handle_player1
   951 39C6 20 02 3B		            jsr handle_player2
   952
   953 				; handle ball
   954
   955 39C9 20 44 3C		            jsr wipe_ball         
   956
   957 				; Check ball collision with bat
   958
   959 39CC A5 A4		            lda bat_collision_delay
   960 39CE F0 05		            beq check_allowed
   961 39D0 C6 A4		            dec bat_collision_delay
   962 39D2 4C EC 39		            jmp move_one
   963
   964 39D5			check_allowed
   965 39D5 A5 A0		            lda mp_collision
   966 39D7 F0 0F		            beq reset_in_collision
   967
   968 39D9 A5 A1		            lda in_collision
   969 39DB D0 0F		            bne no_first_hit
   970
   971 39DD E6 A1		            inc in_collision            
   972 39DF 20 DB 3B		            jsr bounce_bat_ball 
   973 				            
   974 39E2 20 4F 3A		            jsr start_sound_bat          
   975 				            
   976 39E5 4C EC 39		            jmp move_one
   977 				            
   978 39E8			reset_in_collision
   979 39E8 A9 00		            lda #0
   980 39EA 85 A1		            sta in_collision        
   981
   982 39EC			move_one
   983 39EC			no_first_hit
   984 39EC 20 E5 3E		            jsr move_current_xy
   985
   986 39EF A5 AD		            lda edge_collision
   987 39F1 F0 1E		            beq still_moving
   988
   989 				; edge detected
   990
   991 39F3			edge_detected
   992 39F3 20 8B 3A		            jsr start_sound_edge
   993
   994 39F6 A5 AB		            lda ball_angle_end
   995 39F8 85 AA		            sta ball_angle_start
   996
   997 39FA 20 D2 3B		            jsr ball_current_to_start_position
   998 39FD 20 AE 3B		            jsr prepare_ball_end_position
   999
  1000 3A00 20 AB 3A		            jsr update_score
  1001 3A03 D0 3C		            bne game_ends
  1002
  1003 				; switch turns
  1004 3A05 A5 B5		            lda player_turn
  1005 3A07 49 03		            eor #3              ; 1 => 2, 2 => 1
  1006 3A09 85 B5		            sta player_turn
  1007 3A0B 20 8E 37		            jsr turn_color_ball
  1008 3A0E 20 2C 3B		            jsr set_robot_angle_end
  1009
  1010 3A11			still_moving
  1011 3A11 A5 EB		            lda current_x+1
  1012 3A13 85 A6		            sta ball_current_x
  1013 3A15 A5 ED		            lda current_y+1
  1014 3A17 85 A7		            sta ball_current_y
  1015
  1016 3A19 20 59 3C		            jsr show_ball
  1017
  1018 3A1C A9 00		            lda #0
  1019 3A1E 8D 18 D0		            sta $d018           
  1020
  1021 				; anything in A to clear collisions
  1022 3A21 8D 1E D0		            sta HITCLR
  1023
  1024 3A24			exit_vbi
  1025
  1026 				; always set header stuff
  1027 3A24 A9 03		            lda #3
  1028 3A26 8D 08 D0		            sta SIZEP0
  1029 3A29 8D 09 D0		            sta SIZEP1
  1030
  1031 				; background in PM0/1 for header
  1032 3A2C A9 FF		            lda #255
  1033 3A2E A2 07		            ldx #7
  1034 3A30			fill_pm_header
  1035 3A30 9D 00 0E		            sta p0_area,x
  1036 3A33 9D 80 0E		            sta p1_area,x
  1037 3A36 CA			            dex
  1038 3A37 10 F7		            bpl fill_pm_header
  1039
  1040 3A39 A9 04		            lda #$04
  1041 3A3B 8D 1A D0		            sta $d01a
  1042 3A3E 4C 62 E4		            jmp $e462
  1043
  1044 3A41			game_ends
  1045 3A41 A9 FF		            lda #255
  1046 3A43 85 8F		            sta end_screen_delay
  1047
  1048 3A45 20 B6 37		            jsr show_end_screen
  1049
  1050 3A48 A9 02		            lda #STATE_IN_END
  1051 3A4A 85 8C		            sta game_state
  1052
  1053 3A4C 4C 24 3A		            jmp exit_vbi
  1054
  1055 3A4F			start_sound_bat
  1056 3A4F A9 0A		            lda #10
  1057 3A51 85 8D		            sta volume_hit_bat
  1058 3A53 60			            rts
  1059
  1060 3A54			play_sound_end_game
  1061 3A54 20 60 32		            jsr music_off
  1062
  1063 3A57 A5 8F		            lda end_screen_delay
  1064 3A59 C9 C0		            cmp #192
  1065 3A5B 90 0F		            bcc silence_end
  1066 3A5D 4A			            lsr
  1067 3A5E 25 8F		            and end_screen_delay
  1068 3A60 4A			            lsr
  1069 3A61 09 20		            ora #$20
  1070 3A63 8D 73 32		            sta SHADOW+4
  1071 				            ;lda end_screen_delay
  1072 3A66 A9 AA		            lda #$aa
  1073 3A68 8D 74 32		            sta SHADOW+5
  1074 3A6B 60			            rts
  1075 3A6C			silence_end
  1076 3A6C A9 00		            lda #0
  1077 3A6E 8D 74 32		            sta SHADOW+5
  1078 3A71 60			            rts
  1079
  1080 3A72			play_sound_bat
  1081 3A72 A5 8D		            lda volume_hit_bat
  1082 3A74 30 14		            bmi silenced_bat
  1083
  1084 3A76 A5 B5		            lda player_turn
  1085 3A78 0A			            asl
  1086 3A79 0A			            asl
  1087 3A7A 69 30		            adc #$30
  1088 3A7C E5 B3		            sbc angle_diff_bat
  1089 3A7E 8D 73 32		            sta SHADOW+4    ; $d204
  1090 3A81 A5 8D		            lda volume_hit_bat
  1091 3A83 09 A0		            ora #$a0
  1092 3A85 8D 74 32		            sta SHADOW+5    ; $d205
  1093 3A88 C6 8D		            dec volume_hit_bat
  1094 3A8A			silenced_bat
  1095 3A8A 60			            rts
  1096
  1097 3A8B			start_sound_edge
  1098 3A8B A9 04		            lda #4
  1099 3A8D 85 8E		            sta volume_hit_edge
  1100 3A8F 60			            rts
  1101
  1102 3A90			play_sound_edge
  1103 3A90 A5 8E		            lda volume_hit_edge
  1104 3A92 30 16		            bmi silenced_edge
  1105 3A94 D0 06		            bne no_silenced_edge
  1106 3A96 8D 74 32		            sta SHADOW+5    ; $d205
  1107 3A99 C6 8E		            dec volume_hit_edge
  1108 3A9B 60			            rts            
  1109
  1110 3A9C			no_silenced_edge
  1111 3A9C A9 08		            lda #$08
  1112 3A9E 8D 73 32		            sta SHADOW+4    ; $d204
  1113 3AA1 A5 8E		            lda volume_hit_edge
  1114 3AA3 09 26		            ora #$26
  1115 3AA5 8D 74 32		            sta SHADOW+5    ; $d205
  1116 3AA8 C6 8E		            dec volume_hit_edge
  1117 3AAA			silenced_edge
  1118 3AAA 60			            rts
  1119
  1120 				; Update score
  1121 				; Score > max score, then exit A = 1, otherwise A = 0
  1122
  1123 3AAB			update_score
  1124 3AAB A5 B5		            lda player_turn
  1125 3AAD C9 01		            cmp #1
  1126 3AAF D0 12		            bne was_player2_turn
  1127 				; was player 1 turn, so player 2 gets a point
  1128 3AB1 20 A8 3D		            jsr inc_score_p2
  1129 3AB4 20 7A 3D		            jsr show_score_p2
  1130
  1131 3AB7 AD 2F 51		            lda score_p2
  1132 3ABA C9 11		            cmp #MAX_SCORE
  1133 3ABC D0 17		            bne reset_edge_delay
  1134
  1135 3ABE A9 01		            lda #STATE_IN_MENU
  1136 3AC0 85 8C		            sta game_state
  1137 3AC2 60			            rts
  1138
  1139 3AC3			was_player2_turn
  1140 3AC3 20 9C 3D		            jsr inc_score_p1
  1141 3AC6 20 61 3D		            jsr show_score_p1
  1142
  1143 3AC9 AD 2E 51		            lda score_p1
  1144 3ACC C9 11		            cmp #MAX_SCORE
  1145 3ACE D0 05		            bne reset_edge_delay
  1146
  1147 3AD0 A9 01		            lda #STATE_IN_MENU
  1148 3AD2 85 8C		            sta game_state
  1149 3AD4 60			            rts
  1150
  1151 3AD5			reset_edge_delay
  1152 3AD5 A9 0A		            lda #10
  1153 3AD7 85 A3		            sta edge_delay
  1154
  1155 3AD9			no_edge
  1156
  1157 3AD9 A9 00		            lda #0      ; no end game
  1158 				; anything in A to clear collisions
  1159 3ADB 8D 1E D0		            sta HITCLR
  1160 3ADE 60			            rts
  1161
  1162 				; player 1
  1163 				; - wipe shape at previous y-position
  1164 				; - move player using controller
  1165 				; - set sprite positions
  1166
  1167 3ADF			handle_player1
  1168 3ADF 20 C9 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1169
  1170 3AE2 A5 8A		            lda player_mode
  1171 3AE4 C9 02		            cmp #2
  1172 3AE6 F0 0C		            beq do_p1_is_computer
  1173
  1174 3AE8 A2 00		            ldx #0              ; player 1
  1175 3AEA 20 83 34		            jsr main_driver
  1176 3AED 20 81 3B		            jsr move_player
  1177 				            
  1178 3AF0 20 7D 3C		            jsr show_p1
  1179 3AF3 60			            rts
  1180
  1181 				; p1 now controlled by computer
  1182 3AF4			do_p1_is_computer
  1183 3AF4 A5 8C		            lda game_state
  1184
  1185 3AF6 A2 00		            ldx #0              ; player 1
  1186 3AF8 20 52 3B		            jsr robot_controller
  1187
  1188 3AFB 20 81 3B		            jsr move_player
  1189
  1190 3AFE 20 7D 3C		            jsr show_p1
  1191 3B01 60			            rts
  1192
  1193 				; player 2
  1194 				; - wipe shape at previous y-position
  1195 				; - move player using controller
  1196 				; - set sprite positions
  1197
  1198 3B02			handle_player2
  1199 3B02 20 DE 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1200
  1201 3B05 A5 8A		            lda player_mode
  1202 3B07 D0 0C		            bne do_p2_is_computer
  1203
  1204 3B09 A2 01		            ldx #1              ; player 2
  1205 3B0B 20 83 34		            jsr main_driver
  1206
  1207 3B0E 20 81 3B		            jsr move_player
  1208 3B11 20 A3 3C		            jsr show_p2
  1209 3B14 60			            rts
  1210
  1211 				; p2 now controlled by computer
  1212 3B15			do_p2_is_computer
  1213 3B15 A5 8C		            lda game_state
  1214
  1215 3B17 A2 01		            ldx #1              ; player 2
  1216 3B19 20 52 3B		            jsr robot_controller
  1217
  1218 3B1C 20 81 3B		            jsr move_player
  1219 3B1F 20 A3 3C		            jsr show_p2
  1220
  1221 3B22			not_in_game
  1222 3B22 60			            rts
  1223
  1224 3B23			reset_robot_angle_end
  1225 3B23 A9 00		            lda #0
  1226 3B25 85 BA		            sta robot1_angle_end
  1227 3B27 A9 80		            lda #128
  1228 3B29 85 BB		            sta robot2_angle_end
  1229 3B2B 60			            rts
  1230
  1231 3B2C			set_robot_angle_end
  1232 3B2C A6 B5		            ldx player_turn
  1233 3B2E CA			            dex
  1234 3B2F AD 0A D2		            lda RANDOM
  1235 3B32 29 07		            and #7
  1236 3B34 18			            clc
  1237 3B35 65 AB		            adc ball_angle_end
  1238 3B37 38			            sec
  1239 3B38 E9 03		            sbc #3
  1240 3B3A 95 BA		            sta robot_angle_end,x
  1241
  1242 				; other robot (not your turn)
  1243 3B3C A5 B5		            lda player_turn
  1244 3B3E 49 03		            eor #3
  1245 3B40 AA			            tax
  1246 3B41 CA			            dex
  1247
  1248 3B42 AD 0A D2		            lda RANDOM
  1249 3B45 29 0F		            and #15
  1250 3B47 18			            clc
  1251 3B48 65 AB		            adc ball_angle_end
  1252 3B4A 38			            sec
  1253 3B4B E9 07		            sbc #7
  1254 3B4D 49 80		            eor #128            ; other side
  1255 3B4F 95 BA		            sta robot_angle_end,x
  1256
  1257 3B51 60			            rts
  1258
  1259 				; x = 0 (robot 1), x = 1 (robot 2)
  1260
  1261 3B52			robot_controller
  1262 				;            lda ball_angle_end  ; current ball end
  1263 3B52 B5 BA		            lda robot_angle_end,x
  1264 3B54 85 B0		            sta tmp_angle1
  1265 3B56 B5 9C		            lda p1_angle,x
  1266 3B58 85 B1		            sta tmp_angle2
  1267
  1268 3B5A 20 B4 3D		            jsr calc_angle_diff
  1269
  1270 3B5D A5 B7		            lda tmp_angle_diff
  1271 3B5F F0 1F		            beq comp_in_catch_position
  1272 3B61 A5 B4		            lda tmp_angle_direction
  1273 3B63 D0 0E		            bne move_comp_clockwise
  1274
  1275 3B65 AD 0A D2		            lda RANDOM
  1276 3B68 29 03		            and #3
  1277 3B6A D0 14		            bne comp_in_catch_position
  1278 3B6C B5 9C		            lda p1_angle,x
  1279 3B6E 65 88		            adc stick_slow_speed
  1280 3B70 95 9C		            sta p1_angle,x
  1281 3B72 60			            rts
  1282 3B73			move_comp_clockwise
  1283
  1284 3B73 AD 0A D2		            lda RANDOM
  1285 3B76 29 03		            and #3
  1286 3B78 D0 06		            bne comp_in_catch_position
  1287
  1288 3B7A B5 9C		            lda p1_angle,x
  1289 3B7C E5 88		            sbc stick_slow_speed
  1290 3B7E 95 9C		            sta p1_angle,x
  1291 3B80			comp_in_catch_position
  1292 3B80 60			            rts
  1293
  1294 				; move player 1/2
  1295 				; right - clockwise, left = anti-clockwise
  1296
  1297 				; X = 0, player 1
  1298 				; X = 1, player 2
  1299
  1300 				; Y = driver mode:
  1301 				; 0 : stick
  1302 				; 1 : paddle
  1303 				; 2 : mouse
  1304 				; 3 : computer
  1305 				            
  1306 3B81			move_player
  1307 3B81 B5 9C		            lda p1_angle,x
  1308 3B83 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1309 3B85 49 40		            eor #64                     ; perpendicular to the circle angle
  1310 3B87 95 90		            sta p1_shape,x
  1311
  1312 3B89 B4 9C		            ldy p1_angle,x
  1313 3B8B B9 00 41		            lda inner_x_tab,y
  1314 3B8E 4A			            lsr
  1315 3B8F 69 20		            adc #inner_x_margin/2
  1316 3B91 95 94		            sta player1_x,x
  1317 3B93 B9 00 42		            lda inner_y_tab,y
  1318 3B96 4A			            lsr
  1319 3B97 95 98		            sta player1_y,x
  1320
  1321 3B99 B4 90		            ldy p1_shape,x
  1322 3B9B 20 18 3D		            jsr shape_to_ptr
  1323
  1324 3B9E 60			            rts
  1325
  1326 				; Set ball at start position
  1327 				; - start angle current player
  1328 				; - start position by inner table
  1329 				; - collision delay set?
  1330
  1331 				; Set ball current position to start position
  1332 				; input:
  1333 				; X = angle of start position
  1334 				; output:
  1335 				; ball position: (ball_current_x, ball_current_y)
  1336 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1337 3B9F			ball_to_start_position
  1338 3B9F BD 00 41		            lda inner_x_tab,x
  1339 3BA2 85 A6		            sta ball_current_x
  1340 3BA4 85 E6		            sta tmp_x1
  1341 3BA6 BD 00 42		            lda inner_y_tab,x
  1342 3BA9 85 A7		            sta ball_current_y
  1343 3BAB 85 E7		            sta tmp_y1
  1344 3BAD 60			            rts
  1345
  1346 				; Prepare ball end position
  1347 				; - end angle current player
  1348 				; - end position by outer table
  1349 				; - calculate step size x,y
  1350
  1351 				; Input:
  1352 				; - ball_angle_start
  1353 				; - ball speed
  1354 				; Output:
  1355 				; - ball_andle_end
  1356 				; - ball start position (tmp_x1, tmp_y1)
  1357 				; - ball end position (tmp_x2, tmp_y2)
  1358 				; - step size (step_x, step_y) for ball movement
  1359 3BAE			prepare_ball_end_position
  1360 3BAE A5 AA		            lda ball_angle_start
  1361 3BB0 49 80		            eor #128        ; other side
  1362 3BB2 85 AB		            sta ball_angle_end
  1363 3BB4 AA			            tax
  1364 3BB5 20 39 3C		            jsr angle_to_end_position
  1365 				                        
  1366 3BB8 20 78 3E		            jsr init_current_xy
  1367 				            
  1368 				; move current a little bit            
  1369 3BBB 20 E5 3E		            jsr move_current_xy
  1370 				; ignore end indicator, since we only just started
  1371
  1372 3BBE A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1373 3BC0 85 A4		            sta bat_collision_delay
  1374 3BC2 60			            rts
  1375
  1376 				; x = angle 0..255
  1377 3BC3			outer_angle_to_start_position
  1378 3BC3 BD 00 10		            lda outer_x_256,x
  1379 3BC6 85 A6		            sta ball_current_x
  1380 3BC8 85 E6		            sta tmp_x1
  1381 3BCA BD 00 11		            lda outer_y_256,x
  1382 3BCD 85 A7		            sta ball_current_y
  1383 3BCF 85 E7		            sta tmp_y1
  1384 3BD1 60			            rts
  1385
  1386 3BD2			ball_current_to_start_position
  1387 3BD2 A5 A6		            lda ball_current_x
  1388 3BD4 85 E6		            sta tmp_x1
  1389 3BD6 A5 A7		            lda ball_current_y
  1390 3BD8 85 E7		            sta tmp_y1
  1391 3BDA 60			            rts
  1392
  1393 				; Ball collides with bat
  1394 				; - start ball angle = end ball angle
  1395 				; - calculate diff between bat and ball end angle
  1396 				; - calculate new end angle
  1397 				; - Set ball at start position
  1398 				; - Prepare ball end position
  1399
  1400 3BDB			bounce_bat_ball
  1401 				; set new start of ball
  1402 				; @todo check ball angles
  1403 				; set new ball start angle (= previous end angle)
  1404 3BDB A5 AB		            lda ball_angle_end
  1405 3BDD 85 AA		            sta ball_angle_start
  1406 				            
  1407 				; alternative?
  1408 				            ;ldx ball_angle_start
  1409 				            ;jsr ball_to_start_position          
  1410 3BDF 20 D2 3B		            jsr ball_current_to_start_position
  1411
  1412 				; which player hit the ball?
  1413 				; collision bits:
  1414 				; xxxxx1x1 : 1 is player1 collision
  1415 				; xxxx1010 : 2 is player2 collision
  1416
  1417 3BE2 A5 A0		            lda mp_collision
  1418 3BE4 4A			            lsr
  1419 3BE5 4A			            lsr
  1420 3BE6 05 A0		            ora mp_collision
  1421 3BE8 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1422
  1423 				; who's turn is it and who bounced the ball?
  1424
  1425 3BEA 25 B5		            and player_turn
  1426 3BEC F0 06		            beq no_switch_turn
  1427
  1428 3BEE A5 B5		            lda player_turn
  1429 3BF0 49 03		            eor #3              ; 1 => 2, 2 => 1
  1430 3BF2 85 B5		            sta player_turn
  1431
  1432 3BF4			no_switch_turn
  1433 3BF4 20 8E 37		            jsr turn_color_ball
  1434
  1435 3BF7 A5 B5		            lda player_turn
  1436 3BF9 49 03		            eor #3
  1437 3BFB AA			            tax
  1438 3BFC CA			            dex                 ; index 0,1 (player = 1,2)
  1439 3BFD B5 9C		            lda p1_angle,x
  1440
  1441 				; Calculate diff between bat angle position and new ball start position
  1442 3BFF 85 B0		            sta tmp_angle1
  1443
  1444 3C01 A5 AA		            lda ball_angle_start
  1445 3C03 85 B1		            sta tmp_angle2
  1446
  1447 3C05 20 B4 3D		            jsr calc_angle_diff
  1448
  1449 3C08 0A			            asl
  1450 3C09 0A			            asl
  1451 3C0A 0A			            asl
  1452 3C0B 85 B3		            sta angle_diff_bat
  1453
  1454 3C0D A5 B0		            lda tmp_angle1
  1455 3C0F 18			            clc
  1456 3C10 65 B2		            adc add_to_angle
  1457 3C12 49 80		            eor #128            ; other side
  1458 3C14 85 B0		            sta tmp_angle1
  1459 				            
  1460 3C16 A5 B4		            lda tmp_angle_direction
  1461 3C18 D0 0A		            bne diff_clockwise
  1462 				; diff counter clockwise
  1463 3C1A A5 B0		            lda tmp_angle1
  1464 3C1C 18			            clc
  1465 3C1D 65 B3		            adc angle_diff_bat
  1466 3C1F 85 B0		            sta tmp_angle1
  1467 3C21 4C 2B 3C		            jmp calc_done            
  1468
  1469 3C24			diff_clockwise
  1470 3C24 A5 B0		            lda tmp_angle1
  1471 3C26 38			            sec
  1472 3C27 E5 B3		            sbc angle_diff_bat
  1473 3C29 85 B0		            sta tmp_angle1
  1474 				            
  1475 				; calculation done            
  1476 3C2B			calc_done
  1477 3C2B A5 B0		            lda tmp_angle1
  1478 3C2D 85 AB		            sta ball_angle_end
  1479 3C2F AA			            tax
  1480 3C30 20 39 3C		            jsr angle_to_end_position
  1481
  1482 3C33 20 2C 3B		            jsr set_robot_angle_end
  1483
  1484 3C36 4C 78 3E		            jmp init_current_xy
  1485
  1486 				; x = angle 0..255
  1487 3C39			angle_to_end_position
  1488 3C39 BD 00 10		            lda outer_x_256,x
  1489 3C3C 85 E8		            sta tmp_x2
  1490 3C3E BD 00 11		            lda outer_y_256,x
  1491 3C41 85 E9		            sta tmp_y2
  1492 3C43 60			            rts
  1493
  1494 3C44			wipe_ball
  1495 3C44 A5 A7		            lda ball_current_y
  1496 3C46 4A			            lsr
  1497 3C47 69 06		            adc #ball_top_margin
  1498 3C49 AA			            tax                 ; x = real y position on screen
  1499 3C4A A9 00		            lda #0
  1500 3C4C 9D 80 0D		            sta msl_area,x
  1501 3C4F 9D 81 0D		            sta msl_area+1,x
  1502 3C52 9D 82 0D		            sta msl_area+2,x
  1503 3C55 9D 83 0D		            sta msl_area+3,x
  1504 3C58 60			            rts
  1505
  1506 3C59			show_ball
  1507 3C59 A5 A7		            lda ball_current_y
  1508 3C5B 4A			            lsr
  1509 3C5C 69 06		            adc #ball_top_margin
  1510 3C5E AA			            tax                 ; x = real y position on screen
  1511
  1512 3C5F A9 02		            lda #%00000010
  1513 3C61 9D 80 0D		            sta msl_area,x
  1514 3C64 9D 83 0D		            sta msl_area+3,x
  1515 3C67 A9 07		            lda #%00000111
  1516 3C69 9D 81 0D		            sta msl_area+1,x
  1517 3C6C 9D 82 0D		            sta msl_area+2,x
  1518
  1519 3C6F A5 A6		            lda ball_current_x
  1520 3C71 4A			            lsr
  1521 3C72 69 45		            adc #ball_left_margin
  1522 3C74 8D 05 D0		            sta HPOSM1
  1523 3C77 69 02		            adc #2
  1524 3C79 8D 04 D0		            sta HPOSM0
  1525
  1526 3C7C 60			            rts
  1527
  1528 3C7D			show_p1
  1529 				; y position
  1530 3C7D A5 98		            lda player1_y
  1531 3C7F 18			            clc
  1532 3C80 69 01		            adc #upper_margin
  1533 3C82 AA			            tax
  1534
  1535 3C83 A0 00		            ldy #0
  1536 3C85			show_shape1
  1537 3C85 B1 84		            lda (shape_ptr),y
  1538 3C87 9D 00 0E		            sta p0_area,x 
  1539 3C8A C8			            iny
  1540 3C8B B1 84		            lda (shape_ptr),y
  1541 3C8D 9D 00 0F		            sta p2_area,x
  1542 3C90 E8			            inx
  1543 3C91 C8			            iny
  1544 3C92 C0 20		            cpy #32
  1545 3C94 D0 EF		            bne show_shape1
  1546
  1547 				; x position
  1548 3C96 A5 94		            lda player1_x
  1549 3C98 18			            clc
  1550 3C99 69 20		            adc #left_margin
  1551 3C9B 85 81		            sta shadow_HPOSP0
  1552 3C9D 69 08		            adc #8
  1553 3C9F 8D 02 D0		            sta HPOSP2
  1554 3CA2 60			            rts
  1555
  1556 3CA3			show_p2
  1557 				; y position
  1558 3CA3 A5 99		            lda player2_y
  1559 3CA5 18			            clc
  1560 3CA6 69 01		            adc #upper_margin
  1561 3CA8 AA			            tax
  1562
  1563 3CA9 A0 00		            ldy #0
  1564 3CAB			show_shape2
  1565 3CAB B1 84		            lda (shape_ptr),y
  1566 3CAD 9D 80 0E		            sta p1_area,x
  1567 3CB0 C8			            iny
  1568 3CB1 B1 84		            lda (shape_ptr),y
  1569 3CB3 9D 80 0F		            sta p3_area,x
  1570 3CB6 E8			            inx
  1571 3CB7 C8			            iny
  1572 3CB8 C0 20		            cpy #32
  1573 3CBA D0 EF		            bne show_shape2
  1574
  1575 				; x position
  1576 3CBC A5 95		            lda player2_x
  1577 3CBE 18			            clc
  1578 3CBF 69 20		            adc #left_margin
  1579 3CC1 85 82		            sta shadow_HPOSP1
  1580 3CC3 69 08		            adc #8
  1581 3CC5 8D 03 D0		            sta HPOSP3
  1582 3CC8 60			            rts
  1583
  1584 3CC9			wipe_p1
  1585 3CC9 A5 98		            lda player1_y
  1586 3CCB 18			            clc
  1587 3CCC 69 01		            adc #upper_margin
  1588 3CCE AA			            tax
  1589
  1590 3CCF A0 10		            ldy #16
  1591 3CD1 A9 00		            lda #0
  1592 3CD3			wipe_it1            
  1593 3CD3 9D 00 0E		            sta p0_area,x 
  1594 3CD6 9D 00 0F		            sta p2_area,x
  1595 3CD9 E8			            inx
  1596 3CDA 88			            dey
  1597 3CDB D0 F6		            bne wipe_it1 
  1598 3CDD 60			            rts
  1599
  1600 3CDE			wipe_p2
  1601 3CDE A5 99		            lda player2_y
  1602 3CE0 18			            clc
  1603 3CE1 69 01		            adc #upper_margin
  1604 3CE3 AA			            tax
  1605 				            
  1606 3CE4 A0 10		            ldy #16
  1607 3CE6 A9 00		            lda #0
  1608 3CE8			wipe_it2            
  1609 3CE8 9D 80 0E		            sta p1_area,x
  1610 3CEB 9D 80 0F		            sta p3_area,x
  1611 3CEE E8			            inx
  1612 3CEF 88			            dey
  1613 3CF0 D0 F6		            bne wipe_it2 
  1614 3CF2 60			            rts
  1615
  1616 3CF3			make_shape_index
  1617 3CF3 A9 00		            lda #<pm_shapes
  1618 3CF5 85 84		            sta shape_ptr
  1619 3CF7 A9 60		            lda #>pm_shapes
  1620 3CF9 85 85		            sta shape_ptr+1
  1621 				            
  1622 3CFB A2 00		            ldx #0
  1623 3CFD			fill_pm_tab
  1624 3CFD A5 84		            lda shape_ptr
  1625 3CFF 9D 00 14		            sta pm_shape_lo,x
  1626 3D02 A5 85		            lda shape_ptr+1
  1627 3D04 9D 80 14		            sta pm_shape_hi,x
  1628 				            
  1629 3D07 A5 84		            lda shape_ptr
  1630 3D09 18			            clc
  1631 3D0A 69 20		            adc #32
  1632 3D0C 85 84		            sta shape_ptr
  1633 3D0E A5 85		            lda shape_ptr+1
  1634 3D10 69 00		            adc #0
  1635 3D12 85 85		            sta shape_ptr+1
  1636 				            
  1637 3D14 E8			            inx
  1638 3D15 10 E6		            bpl fill_pm_tab
  1639 				            
  1640 3D17 60			            rts
  1641 				            
  1642 				; there are 128 shapes, each 32 bytes
  1643
  1644 				; y = shape index
  1645 3D18			shape_to_ptr
  1646 3D18 B9 00 14		            lda pm_shape_lo,y
  1647 3D1B 85 84		            sta shape_ptr
  1648 3D1D B9 80 14		            lda pm_shape_hi,y
  1649 3D20 85 85		            sta shape_ptr+1
  1650
  1651 3D22 60			            rts
  1652
  1653 				; turn 1024 tables into 256 bytes for ball edge lookup
  1654 3D23			make_outer_256
  1655 3D23 A0 00		            ldy #0
  1656 3D25 A2 00		            ldx #0
  1657 3D27			conv_256
  1658 3D27 BD 00 44		            lda outer_x_tab,x
  1659 3D2A 99 00 10		            sta outer_x_256,y
  1660 3D2D BD 00 45		            lda outer_x_tab+$100,x
  1661 3D30 99 40 10		            sta outer_x_256+64,y
  1662 3D33 BD 00 46		            lda outer_x_tab+$200,x
  1663 3D36 99 80 10		            sta outer_x_256+128,y
  1664 3D39 BD 00 47		            lda outer_x_tab+$300,x
  1665 3D3C 99 C0 10		            sta outer_x_256+192,y
  1666 				            
  1667 3D3F BD 00 48		            lda outer_y_tab,x
  1668 3D42 99 00 11		            sta outer_y_256,y
  1669 3D45 BD 00 49		            lda outer_y_tab+$100,x
  1670 3D48 99 40 11		            sta outer_y_256+64,y
  1671 3D4B BD 00 4A		            lda outer_y_tab+$200,x
  1672 3D4E 99 80 11		            sta outer_y_256+128,y
  1673 3D51 BD 00 4B		            lda outer_y_tab+$300,x
  1674 3D54 99 C0 11		            sta outer_y_256+192,y
  1675
  1676 3D57 E8			            inx
  1677 3D58 E8			            inx
  1678 3D59 E8			            inx
  1679 3D5A E8			            inx
  1680 3D5B C8			            iny
  1681 3D5C C0 40		            cpy #64
  1682 3D5E D0 C7		            bne conv_256            
  1683 3D60 60			            rts
  1684
  1685 3D61			show_score_p1
  1686 3D61 AD 2E 51		            lda score_p1
  1687 3D64 4A			            lsr
  1688 3D65 4A			            lsr
  1689 3D66 4A			            lsr
  1690 3D67 4A			            lsr
  1691 3D68 F0 02		            beq do_space1
  1692 3D6A 09 10		            ora #16
  1693 3D6C			do_space1
  1694 3D6C 8D 0B 51		            sta score_chars_p1
  1695 3D6F AD 2E 51		            lda score_p1
  1696 3D72 29 0F		            and #15
  1697 3D74 09 10		            ora #16
  1698 3D76 8D 0C 51		            sta score_chars_p1+1
  1699 3D79 60			            rts
  1700
  1701 3D7A			show_score_p2
  1702 3D7A AD 2F 51		            lda score_p2
  1703 3D7D 4A			            lsr
  1704 3D7E 4A			            lsr
  1705 3D7F 4A			            lsr
  1706 3D80 4A			            lsr
  1707 3D81 F0 02		            beq do_space2
  1708 3D83 09 10		            ora #16
  1709 3D85			do_space2
  1710 3D85 8D 2B 51		            sta score_chars_p2
  1711 3D88 AD 2F 51		            lda score_p2
  1712 3D8B 29 0F		            and #15
  1713 3D8D 09 10		            ora #16
  1714 3D8F 8D 2C 51		            sta score_chars_p2+1
  1715 3D92 60			            rts
  1716 				                        
  1717 3D93			reset_score
  1718 3D93 A9 00		            lda #0
  1719 3D95 8D 2E 51		            sta score_p1
  1720 3D98 8D 2F 51		            sta score_p2
  1721 3D9B 60			            rts            
  1722 				         
  1723 3D9C			inc_score_p1
  1724 3D9C F8			            sed
  1725 3D9D AD 2E 51		            lda score_p1
  1726 3DA0 18			            clc
  1727 3DA1 69 01		            adc #1
  1728 3DA3 8D 2E 51		            sta score_p1    
  1729 3DA6 D8			            cld
  1730 3DA7 60			            rts
  1731
  1732 3DA8			inc_score_p2
  1733 3DA8 F8			            sed
  1734 3DA9 AD 2F 51		            lda score_p2
  1735 3DAC 18			            clc
  1736 3DAD 69 01		            adc #1
  1737 3DAF 8D 2F 51		            sta score_p2
  1738 3DB2 D8			            cld
  1739 3DB3 60			            rts
  1740
  1741 				; calculate the difference between angle1 and angle2
  1742
  1743 				; input:
  1744 				; tmp_angle1 (0..255)
  1745 				; tmp_angle2 (0..255)
  1746
  1747 				; output:
  1748 				; tmp_angle_diff, A: difference between angle1 and angle2
  1749 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1750
  1751 3DB4			calc_angle_diff
  1752 3DB4 A9 00		            lda #0
  1753 3DB6 85 B2		            sta add_to_angle
  1754 3DB8 85 B4		            sta tmp_angle_direction
  1755
  1756 				; make sure we can compare angles, otherwise add $40 to angles
  1757 3DBA A5 B0		            lda tmp_angle1
  1758 3DBC C9 C0		            cmp #$c0
  1759 3DBE B0 06		            bcs too_large
  1760 3DC0 A5 B1		            lda tmp_angle2
  1761 3DC2 C9 C0		            cmp #$c0
  1762 3DC4 90 12		            bcc not_too_large
  1763 3DC6			too_large
  1764 3DC6 A5 B0		            lda tmp_angle1
  1765 3DC8 38			            sec
  1766 3DC9 E9 40		            sbc #$40
  1767 3DCB 85 B0		            sta tmp_angle1
  1768 				            
  1769 3DCD A5 B1		            lda tmp_angle2
  1770 3DCF 38			            sec
  1771 3DD0 E9 40		            sbc #$40
  1772 3DD2 85 B1		            sta tmp_angle2
  1773 				            
  1774 3DD4 A9 40		            lda #$40
  1775 3DD6 85 B2		            sta add_to_angle
  1776
  1777 3DD8			not_too_large
  1778 3DD8 A5 B1		            lda tmp_angle2
  1779 3DDA C5 B0		            cmp tmp_angle1
  1780 3DDC 90 0A		            bcc angle2_smaller_angle1
  1781 				; ball >= play
  1782 3DDE 38			            sec
  1783 3DDF E5 B0		            sbc tmp_angle1
  1784 3DE1 85 B7		            sta tmp_angle_diff
  1785 				            
  1786 3DE3 E6 B4		            inc tmp_angle_direction
  1787 3DE5 4C EF 3D		            jmp diff_calculated
  1788 				                        
  1789 3DE8			angle2_smaller_angle1
  1790 3DE8 A5 B0		            lda tmp_angle1
  1791 3DEA 38			            sec
  1792 3DEB E5 B1		            sbc tmp_angle2
  1793 3DED 85 B7		            sta tmp_angle_diff
  1794
  1795 3DEF			diff_calculated
  1796 3DEF A5 B7		            lda tmp_angle_diff           
  1797 3DF1 60			            rts
  1798
  1799 				; X = angle
  1800 				; lookup magnitude of angle 0 to angle X
  1801 3DF2			angle_to_magnitude
  1802 3DF2 BD 00 4C		            lda magnitudes_lo,x
  1803 3DF5 85 B8		            sta magnitude
  1804 3DF7 BD 00 4D		            lda magnitudes_hi,x
  1805 3DFA 85 B9		            sta magnitude+1
  1806 3DFC 60			            rts
  1807
  1808 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1809 3DFD			calc_abs_tmp_dx
  1810 3DFD A5 E8		            lda tmp_x2
  1811 3DFF 38			            sec
  1812 3E00 E5 E6		            sbc tmp_x1
  1813 3E02 B0 05		            bcs x2_le
  1814 3E04 49 FF		            eor #255
  1815 3E06 18			            clc
  1816 3E07 69 01		            adc #1
  1817 3E09 85 F2		x2_le       sta tmp_dx
  1818
  1819 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1820 3E0B			calc_abs_tmp_dy
  1821 3E0B A5 E9		            lda tmp_y2
  1822 3E0D 38			            sec
  1823 3E0E E5 E7		            sbc tmp_y1
  1824 3E10 B0 05		            bcs y2_le
  1825 3E12 49 FF		            eor #255
  1826 3E14 18			            clc
  1827 3E15 69 01		            adc #1
  1828 3E17 85 F3		y2_le       sta tmp_dy
  1829 3E19 60			            rts
  1830 				            
  1831 3E1A			calc_dx_div_magnitude
  1832 3E1A A9 00		            lda #0
  1833 3E1C 85 E2		            sta _dividend
  1834 3E1E A5 F2		            lda tmp_dx
  1835 3E20 85 E3		            sta _dividend+1
  1836
  1837 3E22 A5 B9		            lda magnitude+1
  1838 3E24 85 E0		            sta _divisor
  1839 3E26 A9 00		            lda #0
  1840 3E28 85 E1		            sta _divisor+1
  1841 				            
  1842 3E2A 20 52 3E		            jsr _div16
  1843
  1844 				; todo multiply result with velocity            
  1845 3E2D A5 E2		            lda _result
  1846 3E2F 85 EE		            sta step_x
  1847 3E31 A5 E3		            lda _result+1
  1848 3E33 85 EF		            sta step_x+1
  1849 				            
  1850 3E35 60			            rts
  1851 				            
  1852 3E36			calc_dy_div_magnitude
  1853 3E36 A9 00		            lda #0
  1854 3E38 85 E2		            sta _dividend
  1855 3E3A A5 F3		            lda tmp_dy
  1856 3E3C 85 E3		            sta _dividend+1
  1857 				            
  1858 3E3E A5 B9		            lda magnitude+1
  1859 3E40 85 E0		            sta _divisor
  1860 3E42 A9 00		            lda #0
  1861 3E44 85 E1		            sta _divisor+1
  1862
  1863 3E46 20 52 3E		            jsr _div16
  1864 				            
  1865 				; todo multiply result with velocity
  1866 3E49 A5 E2		            lda _result
  1867 3E4B 85 F0		            sta step_y
  1868 3E4D A5 E3		            lda _result+1
  1869 3E4F 85 F1		            sta step_y+1
  1870 				            
  1871 3E51 60			            rts
  1872
  1873 				; divide 16bit
  1874 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1875
  1876 				; _result = _dividend / divisor
  1877
  1878 3E52 A9 00		_div16      lda #0          ;preset remainder to 0
  1879 3E54 85 E4		            sta _remainder
  1880 3E56 85 E5		            sta _remainder+1
  1881 3E58 A2 10		            ldx #16         ;repeat for each bit: ...
  1882
  1883 3E5A 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1884 3E5C 26 E3		            rol _dividend+1  
  1885 3E5E 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1886 3E60 26 E5		            rol _remainder+1
  1887 3E62 A5 E4		            lda _remainder
  1888 3E64 38			            sec
  1889 3E65 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1890 3E67 A8			            tay         ;lb result -> Y, for we may need it later
  1891 3E68 A5 E5		            lda _remainder+1
  1892 3E6A E5 E1		            sbc _divisor+1
  1893 3E6C 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1894
  1895 3E6E 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1896 3E70 84 E4		            sty _remainder   
  1897 3E72 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1898
  1899 3E74 CA			_div_skip   dex
  1900 3E75 D0 E3		            bne _div_loop 
  1901 3E77 60			            rts
  1902
  1903 				; Calculations for step size
  1904
  1905 				; not optimised for speed or size
  1906 				; step should be set according to the angle
  1907
  1908 				; move in straight line (x1,y1) to (x2,y2)
  1909
  1910 				; 1. set start/end of line
  1911 				; set (tmp_x1, tmp_y1)
  1912 				; set (tmp_x2, tmp_y2)
  1913
  1914 				; 2. init. current_x, current_y
  1915 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1916 				; - calculates step sizes for x,y
  1917 				; - calculated directions for x,y
  1918 				;            jsr init_current_xy
  1919
  1920 				; 3. use current_x, current_y to plot or set a position
  1921 				;            lda current_x+1
  1922 				;            sta x_position
  1923 				;            lda current_y+1
  1924 				;            sta y_position
  1925 				;            jsr plot_pixel
  1926
  1927 				; 4. move current_x, current_y to next position on line
  1928 				; A=0 still moving
  1929 				;           move_current_xy
  1930
  1931 3E78			init_current_xy
  1932 3E78 A9 7F		            lda #$7f      ; was 128 for half pixel
  1933 3E7A 85 EA		            sta current_x
  1934 3E7C 85 EC		            sta current_y
  1935
  1936 3E7E A5 E6		            lda tmp_x1
  1937 3E80 85 EB		            sta current_x+1
  1938 				            
  1939 3E82 A5 E7		            lda tmp_y1
  1940 3E84 85 ED		            sta current_y+1
  1941
  1942 				; dx = abs(tmp_x1 - tmp_x2)
  1943 3E86 20 FD 3D		            jsr calc_abs_tmp_dx
  1944
  1945 				; dy = abs(tmp_y1 - tmp_y2)
  1946 3E89 20 0B 3E		            jsr calc_abs_tmp_dy
  1947
  1948 				; set directions
  1949 3E8C A5 E6		            lda tmp_x1
  1950 3E8E C5 E8		            cmp tmp_x2
  1951 3E90 90 04		            bcc x1_smaller_x2
  1952 				; x1 >= x2
  1953 3E92 A9 01		            lda #1
  1954 3E94 D0 02		            bne set_dir_x
  1955 3E96			x1_smaller_x2
  1956 3E96 A9 00		            lda #0
  1957 3E98			set_dir_x
  1958 3E98 85 FA		            sta dir_x
  1959 				            
  1960 3E9A A5 E7		            lda tmp_y1
  1961 3E9C C5 E9		            cmp tmp_y2
  1962 3E9E 90 04		            bcc y1_smaller_y2
  1963 				; y1 >= y2
  1964 3EA0 A9 01		            lda #1
  1965 3EA2 D0 02		            bne set_dir_y
  1966 3EA4			y1_smaller_y2
  1967 3EA4 A9 00		            lda #0
  1968 3EA6			set_dir_y
  1969 3EA6 85 FB		            sta dir_y
  1970
  1971 				; Calculate diff between start angle and end angle
  1972
  1973 3EA8 A5 AA		            lda ball_angle_start
  1974 3EAA 85 B0		            sta tmp_angle1
  1975 3EAC A5 AB		            lda ball_angle_end
  1976 3EAE 85 B1		            sta tmp_angle2
  1977 				            
  1978 3EB0 20 B4 3D		            jsr calc_angle_diff
  1979
  1980 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1981 3EB3 A6 B7		            ldx tmp_angle_diff
  1982 3EB5 20 F2 3D		            jsr angle_to_magnitude
  1983 				            
  1984 3EB8 20 1A 3E		            jsr calc_dx_div_magnitude
  1985 3EBB 20 36 3E		            jsr calc_dy_div_magnitude
  1986 				            
  1987 				; Calculate step size by ball speed
  1988 				            
  1989 				; step_x = step_x * speed
  1990 				            
  1991 3EBE A5 EE		            lda step_x
  1992 3EC0 85 F6		            sta _multiplicand
  1993 3EC2 A5 EF		            lda step_x+1
  1994 3EC4 85 F7		            sta _multiplicand+1
  1995 3EC6 A5 AC		            lda ball_speed
  1996 3EC8 85 F8		            sta _multiplier
  1997
  1998 3ECA 20 18 36		            jsr _multi8
  1999 				;result in .A (low byte, also in .X) and .Y (high byte)
  2000 3ECD 85 EE		            sta step_x
  2001 3ECF 84 EF		            sty step_x+1
  2002 3ED1			skip_step_x_hi
  2003 				            
  2004 				; step_y = step_y * speed
  2005
  2006 3ED1 A5 F0		            lda step_y
  2007 3ED3 85 F6		            sta _multiplicand
  2008 3ED5 A5 F1		            lda step_y+1
  2009 3ED7 85 F7		            sta _multiplicand+1
  2010 3ED9 A5 AC		            lda ball_speed
  2011 3EDB 85 F8		            sta _multiplier
  2012
  2013 3EDD 20 18 36		            jsr _multi8
  2014 				;result in .A (low byte, also in .X) and .Y (high byte)
  2015 3EE0 85 F0		            sta step_y
  2016 3EE2 84 F1		            sty step_y+1
  2017 3EE4			skip_step_y_hi
  2018
  2019 3EE4 60			            rts
  2020
  2021 				; Move ball position 
  2022 				; Add one step, until end reached
  2023 				; Input:
  2024 				; - step size (step_x, step_y)
  2025 				; - current ball position (current_x, current_y)
  2026 				; - end position (tmp_x2, tmp_y2)
  2027 				; Output:
  2028 				; A (0 = still moving, 1 = end reached)
  2029 3EE5			move_current_xy
  2030 3EE5 A9 00		            lda #0
  2031 3EE7 85 FC		            sta line_end_x
  2032 3EE9 85 FD		            sta line_end_y
  2033
  2034 				; sets line end indicators here
  2035 3EEB 20 08 3F		            jsr move_current_x
  2036 3EEE 20 3A 3F		            jsr move_current_y
  2037
  2038 3EF1 A5 FC		            lda line_end_x
  2039 3EF3 25 FD		            and line_end_y
  2040 3EF5 F0 10		            beq no_end_reached
  2041
  2042 3EF7			end_reached
  2043 				; set current to (x2,y2)
  2044 3EF7 A5 E8		            lda tmp_x2
  2045 3EF9 85 EB		            sta current_x+1
  2046 3EFB A5 E9		            lda tmp_y2
  2047 3EFD 85 ED		            sta current_y+1
  2048 				            
  2049 3EFF A9 00		            lda #0
  2050 3F01 85 EA		            sta current_x
  2051 3F03 85 EC		            sta current_y
  2052 				            
  2053 3F05 A9 01		            lda #1 ; end reached
  2054 				            
  2055 3F07			no_end_reached  ; A = 0
  2056 3F07 60			            rts
  2057
  2058 3F08			move_current_x
  2059 3F08 A5 FA		            lda dir_x
  2060 3F0A D0 14		            bne move_current_left
  2061
  2062 				; move right, add
  2063 3F0C A5 EA		            lda current_x
  2064 3F0E 18			            clc
  2065 3F0F 65 EE		            adc step_x
  2066 3F11 85 EA		            sta current_x
  2067 3F13 A5 EB		            lda current_x+1
  2068 3F15 65 EF		            adc step_x+1
  2069 3F17 85 EB		            sta current_x+1
  2070
  2071 3F19 A5 EB		            lda current_x+1
  2072 3F1B C5 E8		            cmp tmp_x2
  2073 3F1D 90 00		            bcc no_line_end
  2074 3F1F			exact_end_x
  2075 				;            lda #1
  2076 				;            sta line_end_x
  2077 3F1F			no_line_end
  2078 3F1F 60			            rts
  2079 				            
  2080 3F20			move_current_left
  2081 3F20 A5 EA		            lda current_x
  2082 3F22 38			            sec
  2083 3F23 E5 EE		            sbc step_x
  2084 3F25 90 01		            bcc clear_skip
  2085 3F27 EA			            nop
  2086 3F28			clear_skip
  2087 3F28 85 EA		            sta current_x
  2088 3F2A A5 EB		            lda current_x+1
  2089 3F2C E5 EF		            sbc step_x+1
  2090 3F2E 85 EB		            sta current_x+1
  2091 3F30 90 07		            bcc below_zero
  2092 				                        
  2093 3F32 A5 E8		            lda tmp_x2
  2094 3F34 C5 EB		            cmp current_x+1
  2095 3F36 90 E7		            bcc no_line_end
  2096 				;            lda #1
  2097 				;            sta line_end_x
  2098 3F38 60			            rts
  2099 3F39			below_zero            
  2100 				;            lda #1
  2101 				;            sta line_end_x
  2102 				;            sta line_end_y
  2103 3F39 60			            rts
  2104 3F3A			move_current_y
  2105 3F3A A5 FB		            lda dir_y
  2106 3F3C D0 14		            bne move_current_up
  2107
  2108 				; move down, add
  2109 3F3E A5 EC		            lda current_y
  2110 3F40 18			            clc
  2111 3F41 65 F0		            adc step_y
  2112 3F43 85 EC		            sta current_y
  2113 3F45 A5 ED		            lda current_y+1
  2114 3F47 65 F1		            adc step_y+1
  2115 3F49 85 ED		            sta current_y+1
  2116 				            
  2117 3F4B A5 ED		            lda current_y+1
  2118 3F4D C5 E9		            cmp tmp_y2
  2119 3F4F 90 CE		            bcc no_line_end
  2120 3F51			exact_end_y
  2121 				;            lda #1
  2122 				;            sta line_end_y
  2123 3F51 60			            rts
  2124
  2125 3F52			move_current_up
  2126 3F52 A5 EC		            lda current_y
  2127 3F54 38			            sec
  2128 3F55 E5 F0		            sbc step_y
  2129 3F57 85 EC		            sta current_y
  2130 3F59 A5 ED		            lda current_y+1
  2131 3F5B E5 F1		            sbc step_y+1
  2132 3F5D 90 DA		            bcc below_zero
  2133 3F5F 85 ED		            sta current_y+1
  2134 				            
  2135 3F61 A5 E9		            lda tmp_y2
  2136 3F63 C5 ED		            cmp current_y+1
  2137 3F65 90 B8		            bcc no_line_end
  2138 				;            lda #1
  2139 				;            sta line_end_y
  2140 3F67 60			            rts                            
  2141 				            
  2142 3F68			init_sprites
  2143 3F68 A2 00		            ldx #0
  2144 3F6A 8A			            txa
  2145 3F6B			set_p
  2146 3F6B 9D 00 0E		            sta p0_area,x
  2147 3F6E 9D 80 0E		            sta p1_area,x
  2148 3F71 9D 00 0F		            sta p2_area,x
  2149 3F74 9D 80 0F		            sta p3_area,x
  2150 3F77 E8			            inx
  2151 3F78 10 F1		            bpl set_p
  2152
  2153 3F7A A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2154 3F7C 8D 6F 02		            sta GPRIOR
  2155
  2156 3F7F A9 0C		            lda #>pm_area
  2157 3F81 8D 07 D4		            sta PMBASE
  2158
  2159 3F84 A9 03		            lda #3          ; P/M both on
  2160 3F86 8D 1D D0		            sta GRACTL
  2161
  2162 3F89 A9 90		            lda #$90
  2163 3F8B 8D 02 D0		            sta HPOSP2
  2164 3F8E A9 A0		            lda #$A0
  2165 3F90 8D 03 D0		            sta HPOSP3  
  2166 3F93 60			            rts
  2167
  2168 3F94			init_colors
  2169 3F94 A9 5A		            lda #BASE_COLOR_P1+10
  2170 3F96 8D C2 02		            sta PCOLR2
  2171 3F99 A9 BA		            lda #BASE_COLOR_P2+10
  2172 3F9B 8D C3 02		            sta PCOLR3
  2173 				            
  2174 3F9E A9 00		            lda #0
  2175 3FA0 8D C6 02		            sta COLOR2
  2176
  2177 3FA3 A9 0E		            lda #HEADER_FG_COLOR
  2178 3FA5 8D C5 02		            sta COLOR1
  2179
  2180 3FA8 A9 50		            lda #HEADER_P1_COLOR
  2181 3FAA 8D C0 02		            sta PCOLR0
  2182 3FAD A9 B0		            lda #HEADER_P2_COLOR
  2183 3FAF 8D C1 02		            sta PCOLR1
  2184
  2185 3FB2 60			            rts
  2186
  2187 3FB3			previous_consol
  2188 3FB3 00			            dta 0
  2189
  2190 3FB4			current_level_index
  2191 3FB4 00			            dta 0
  2192 = 0007			NR_OF_LEVELS = 7
  2193 = 0000			INIT_LEVEL_INDEX = 0
  2194 3FB5			level_speeds
  2195 3FB5 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2196 				;level_speeds_lo
  2197 				;            dta 128
  2198 3FBC			stick_slow_speed_tab
  2199 3FBC 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2200 3FC3			stick_fast_speed_tab
  2201 3FC3 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2202
  2203 				; X = level (0..NR_OF_LEVELS)
  2204 3FCA			set_level_ball_speed
  2205 3FCA BD BC 3F		            lda stick_slow_speed_tab,x
  2206 3FCD 85 88		            sta stick_slow_speed
  2207 3FCF BD C3 3F		            lda stick_fast_speed_tab,x
  2208 3FD2 85 89		            sta stick_fast_speed
  2209
  2210 3FD4 BD B5 3F		            lda level_speeds,x
  2211 3FD7 85 AC		            sta ball_speed
  2212 3FD9 8A			            txa
  2213 3FDA 18			            clc
  2214 3FDB 69 01		            adc #1
  2215 3FDD 09 10		            ora #16
  2216 3FDF 8D AB 52		            sta level_char
  2217 3FE2 60			            rts
  2218 				            
  2219 3FE3			increase_level
  2220 3FE3 EE B4 3F		            inc current_level_index
  2221 3FE6 AD B4 3F		            lda current_level_index
  2222 3FE9 C9 07		            cmp #NR_OF_LEVELS
  2223 3FEB D0 05		            bne ok_level
  2224 3FED A9 00		            lda #INIT_LEVEL_INDEX
  2225 3FEF 8D B4 3F		            sta current_level_index
  2226 3FF2			ok_level           
  2227 3FF2 60			            rts
  2228
  2229 3FF3			increase_player_mode
  2230 3FF3 E6 8A		            inc player_mode
  2231 3FF5 A5 8A		            lda player_mode
  2232 3FF7 C9 03		            cmp #NR_OF_PLAYER_MODES
  2233 3FF9 D0 04		            bne ok_player_mode
  2234 3FFB A9 00		            lda #INIT_PLAYER_MODE
  2235 3FFD 85 8A		            sta player_mode
  2236 3FFF			ok_player_mode
  2237 3FFF 85 8B		            sta player_mode_saved
  2238 4001 60			            rts
  2239
  2240 4002			show_player_mode
  2241 4002 A6 8A		            ldx player_mode
  2242 4004 BD 3F 53		            lda player_mode_lo,x
  2243 4007 8D F9 50		            sta menu_line2_ptr
  2244 400A BD 42 53		            lda player_mode_hi,x
  2245 400D 8D FA 50		            sta menu_line2_ptr+1
  2246 4010 60			            rts
  2247
  2248 4011			            .align $100
  2249 4100			inner_x_tab
  2250 = 4200			inner_y_tab = *+$100
  2251 4100-42FF> 70 72 75 77 +             ins 'data\in210.dat'
  2252 				      
  2253 4300			            .align $400            
  2254 				; outer circle 1024 plot points on 360 degrees
  2255 4400			outer_x_tab
  2256 = 4800			outer_y_tab = *+1024
  2257 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2258 				           
  2259 4C00			            .align $400
  2260 				; table of magnitudes (length) between angle 0 and 0..255
  2261 				; fixed point 8.8 : hi.lo
  2262 4C00			magnitudes_lo
  2263 = 4D00			magnitudes_hi = *+256
  2264 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2265
  2266 4E00			            .align $400
  2267 5000			display_list
  2268 5000-512F> C2		            dta $42+128         ; dli_header
  2269 5001 06 51		            dta a(score_line)
  2270
  2271 				; 102 x 40 = 4080 bytes            
  2272 5003 4F			            dta $4f
  2273 5004 00 70		            dta a(screen_mem1)
  2274 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2275 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2276 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2277 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2278
  2279 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2280 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2281 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2282 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2283
  2284 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2285 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2286 5055			menu_dl_hook
  2287 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2288 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2289
  2290 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2291
  2292 				; 42 + 60 = 102, 4080 bytes
  2293 506B 4F			            dta $4f
  2294 506C 00 80		            dta a(screen_mem2)
  2295 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2296
  2297 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2298 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2299 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2300 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2301
  2302 5095 0F 0F		            dta $0f,$0f
  2303
  2304 				; 60 lines
  2305 5097			menu_dl_end
  2306 5097 4F			            dta $4f
  2307 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2308 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2309 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2310 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2311 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2312
  2313 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2314 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2315 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2316 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2317
  2318 				; 20 x 40 = 800
  2319 50D5 4F			            dta $4f
  2320 50D6 00 90		            dta a(screen_mem3)       
  2321 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2322 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2323 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2324 				            
  2325 50EB 41			            dta $41
  2326 50EC 00 50		            dta a(display_list)
  2327
  2328 50EE			menu_dl_part
  2329 50EE 80			            dta 128 ; dli_menu
  2330 50EF 20			            dta $20
  2331 50F0 42			            dta $42
  2332 50F1 00 52		            dta a(rotor_logo_text)
  2333 50F3 02			            dta 2
  2334 50F4 30			            dta $30
  2335 50F5 46			            dta $46
  2336 50F6			menu_line1_ptr
  2337 50F6 50 52		            dta a(controller_text)
  2338 50F8 46			            dta $46
  2339 50F9			menu_line2_ptr
  2340 50F9 64 52		            dta a(two_player_text)
  2341 50FB 46			            dta $46
  2342 50FC			menu_line3_ptr
  2343 50FC 9F 52		            dta a(level_text)
  2344 50FE 30			            dta $30
  2345 50FF 42			            dta $42
  2346 5100 B3 52		            dta a(start_text)
  2347 5102 10			            dta $10
  2348 5103 01			            dta $01 ; jump
  2349 5104 97 50		            dta a(menu_dl_end)
  2350
  2351 5106			score_line  
  2352 5106 00 2F 2E 25 00	            dta d' ONE '
  2353 510B			score_chars_p1
  2354 510B 0D 0D 00		            dta d'-- '
  2355
  2356 510E 00 00 00 00 00 00 +             dta d'          '
  2357 5118 00 00 00 00 00 00 +             dta d'          '
  2358
  2359 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2360 512B			score_chars_p2
  2361 512B 0D 0D 00		            dta d'-- '
  2362
  2363 512E 00			score_p1    dta 0
  2364 512F 00			score_p2    dta 0
  2365
  2366 5130			            .align $100
  2367 5200			rotor_logo_text
  2368 5200-5344> 00 00 00 00 +             dta d'              '
  2369 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2370 521A 40			            dta $40
  2371 521B 00 00 00 00 00 00 +             dta d'             '
  2372 5228 00 00 00 00 00 00 +             dta d'              '
  2373 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2374 5242 00 00 00 00 00 00 +             dta d'              '
  2375
  2376 5250			controller_text
  2377 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2378 525A			driver_screen
  2379 525A 00 00 00 00 00 00 +             dta d'          '
  2380
  2381 5264			two_player_text
  2382 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2383
  2384 5278			one_player_text
  2385 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2386
  2387 528B			demo_player_text
  2388 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2389
  2390 529F			level_text
  2391 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2392 52AB			level_char            
  2393 52AB 11 00 00 00 00 00 +             dta d'1       '
  2394
  2395 52B3			start_text
  2396 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2397 52DB			stick_text
  2398 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2399 52E3			paddle_text
  2400 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2401 52EB			mouse_text
  2402 52EB 2D 2F 35 33 25 00 +             dta d'MOUSE   '
  2403 52F3			computer_text
  2404 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2405
  2406 52FB			empty_text
  2407 52FB 00 00 00 00 00 00 +             dta d'                    '
  2408 530F			winner_one_text
  2409 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2410 5323			winner_two_text
  2411 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2412
  2413 5337			driver_text_lo
  2414 5337 DB			            dta <stick_text
  2415 5338 E3			            dta <paddle_text
  2416 5339 EB			            dta <mouse_text
  2417 533A F3			            dta <computer_text
  2418 				            
  2419 533B			driver_text_hi
  2420 533B 52			            dta >stick_text
  2421 533C 52			            dta >paddle_text
  2422 533D 52			            dta >mouse_text
  2423 533E 52			            dta >computer_text
  2424
  2425 533F			player_mode_lo
  2426 533F 64			            dta <two_player_text
  2427 5340 78			            dta <one_player_text
  2428 5341 8B			            dta <demo_player_text
  2429
  2430 5342			player_mode_hi
  2431 5342 52			            dta >two_player_text
  2432 5343 52			            dta >one_player_text
  2433 5344 52			            dta >demo_player_text
  2434
  2435 				; 4 KB
  2436 				; 128 x 32 bytes shapes
  2437 5345			            .align $1000
  2438 6000			pm_shapes
  2439 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2440
  2441 				; 9 KB for backdrop image
  2442 7000			            .align $1000
  2443 = 7000			screen_mem1 = * ; 4K
  2444 				;            org screen_mem1
  2445 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2446
  2447 7FF0			            .align $1000
  2448 = 8000			screen_mem2 = * ; 4K
  2449 				;            org screen_mem2
  2450 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2451
  2452 8FF0			            .align $1000
  2453 = 9000			screen_mem3 = * ; 1K
  2454 				;            org screen_mem3
  2455 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2456
  2457 02E0-02E1> 7A 35		            run main
