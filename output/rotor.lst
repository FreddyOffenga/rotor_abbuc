mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-01
     4 				; Version 2.3.1
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against CPU)
     9 				; - added CPU vs CPU (demo mode)
    10 				; - added support for driving controllers
    11
    12 				; Main idea:
    13 				; - two players ONE and TWO move in a circle
    14 				; - the ball gets color of player to indicate who should catch it
    15 				; - when the ball hits the circle, the other player gets a point
    16
    17 				; TODO
    18 				; - new score system; ball hit = point?
    19
    20 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D300			PORTA       = $d300
   104
   105 = D407			PMBASE      = $d407
   106 = D40A			WSYNC       = $d40a
   107 = D40E			NMIEN       = $d40e
    21
    22 				; color scheme
    23 = 0050			BASE_COLOR_P1   = $50   ; purple
    24 = 00B0			BASE_COLOR_P2   = $b0   ; green
    25
    26 = 000E			HEADER_FG_COLOR = 14
    27 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    28 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    29
    30 				; must be in decimal format, so $11 is 11
    31 = 0011			MAX_SCORE   = $11
    32
    33 = 0C00			pm_area     = $0c00
    34 = 0D80			msl_area    = pm_area+$180
    35 = 0E00			p0_area     = pm_area+$200
    36 = 0E80			p1_area     = pm_area+$280
    37 = 0F00			p2_area     = pm_area+$300
    38 = 0F80			p3_area     = pm_area+$380
    39
    40 				; outer tables 256 for 360 degrees
    41 = 1000			outer_x_256     = $1000
    42 = 1100			outer_y_256     = $1100
    43
    44 = 1200			screen_y_lo     = $1200
    45 = 1300			screen_y_hi     = $1300
    46
    47 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    48 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    49
    50 = 0140			WIDTH           = 320
    51 = 00C0			HEIGHT          = 192
    52
    53 = 0028			SCREEN_WIDTH    = 40
    54
    55 = 0030			outer_x_margin  = 48 ;47-32
    56 = 0040			inner_x_margin  = 64
    57
    58 = 00A0			circle_center_x = WIDTH/2
    59 = 0060			circle_center_y = HEIGHT/2
    60
    61 = 0006			ball_top_margin     = 6
    62 = 0045			ball_left_margin    = 64+5
    63
    64 				; pm upper margin
    65 = 0001			upper_margin    = 1
    66 = 0020			left_margin     = 32
    67
    68 = 0080			music_toggle    = $80
    69
    70 = 0081			shadow_HPOSP0   = $81
    71 = 0082			shadow_HPOSP1   = $82
    72
    73 = 0083			winner_color    = $83
    74
    75 = 0084			shape_ptr       = $84
    76 = 0086			tmp_screen      = $86
    77
    78 = 0088			stick_slow_speed = $88
    79 = 0089			stick_fast_speed = $89
    80
    81 = 008A			player_mode     = $8a
    82 = 0000			MODE_2_PLAYER   = 0
    83 = 0001			MODE_1_PLAYER   = 1
    84 = 0002			MODE_DEMO       = 2
    85 = 0003			NR_OF_PLAYER_MODES = 3
    86 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00AD			edge_collision      = $ad
   126 = 00AE			edge_hit_count      = $ae
   127
   128 = 00B0			tmp_angle1          = $b0
   129 = 00B1			tmp_angle2          = $b1
   130 = 00B2			add_to_angle        = $b2
   131 = 00B3			angle_diff_bat      = $b3
   132 = 00B4			tmp_angle_direction = $b4
   133 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   134 = 00B6			game_restart        = $b6
   135 = 00B7			tmp_angle_diff      = $b7
   136 = 00B8			magnitude           = $b8       ; word
   137
   138 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   139 = 00BA			cpu1_angle_end      = cpu_angle_end
   140 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   141
   142 				; $c0 - $df free for music
   143
   144 = 00E0			_divisor    = $e0   ; word
   145 = 00E2			_dividend   = $e2   ; word
   146 = 00E4			_remainder  = $e4   ; word
   147 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   148
   149 = 00E6			tmp_x1      = $e6   ; byte
   150 = 00E7			tmp_y1      = $e7   ; byte
   151 = 00E8			tmp_x2      = $e8   ; byte
   152 = 00E9			tmp_y2      = $e9   ; byte
   153
   154 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   155 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   156
   157 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   158 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   159
   160 = 00F2			tmp_dx      = $f2  ; byte
   161 = 00F3			tmp_dy      = $f3  ; byte
   162
   163 = 00F6			_multiplicand   = $f6   ; word
   164 = 00F8			_multiplier     = $f8   ; byte
   165
   166 				; direction:
   167 				; 0 : x1<x2 or y1<y2 = add
   168 				; 1 ; x1>=y2 or y1>=y2 = subtract
   169
   170 = 00FA			dir_x       = $fa  ; byte
   171 = 00FB			dir_y       = $fb  ; byte
   172
   173 = 00FC			line_end_x  = $fc  ; byte
   174 = 00FD			line_end_y  = $fd  ; byte
   175
   176 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   177
   178 				; real data is loaded at $2000 ($1700+$900)
   179 BE10			            org $1700
   180 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   181
   182 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous driving controller value (player 1,2)
    19 3401			prev_driving_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-3F67> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_driving_value
    27 340B 8D 02 34		            sta prev_driving_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 				; stick detect by using left/right
    61 				; paddle by connecting/rotate
    62 				; driving controller by rotate
    63
    64 				; return A = driver mode
    65 				; 0 = stick detected
    66 				; 1 = paddle detected
    67 				; 2 = driving detected
    68
    69 3443			driver_detect
    70 3443 AD 70 02		            lda PADDL0
    71 3446 C9 E4		            cmp #228
    72 3448 D0 07		            bne paddle_detect
    73 344A AD 71 02		            lda PADDL1
    74 344D C9 E4		            cmp #228
    75 344F F0 06		            beq no_paddle_detect
    76 3451			paddle_detect
    77 3451 A9 01		            lda #1
    78 3453 8D BE 32		            sta driver_mode
    79 3456 60			            rts
    80
    81 3457			no_paddle_detect
    82 3457 AD 78 02		            lda STICK0
    83 345A C9 0C		            cmp #12
    84 345C D0 06		            bne no_driving_detect
    85 345E A9 02		            lda #2
    86 3460 8D BE 32		            sta driver_mode
    87 3463 60			            rts
    88
    89 3464			no_driving_detect
    90 3464 C9 07		            cmp #7      ; paddle button also gives this
    91 3466 F0 04		            beq stick_detect    
    92 3468 C9 0B		            cmp #11     ; paddle button also gives this
    93 346A D0 06		            bne no_stick_detect
    94 346C			stick_detect
    95 346C A9 00		            lda #0
    96 346E 8D BE 32		            sta driver_mode
    97 3471 60			            rts
    98
    99 3472			no_stick_detect
   100 				; default is the last value
   101 3472 AD BE 32		            lda driver_mode
   102 3475 60			            rts
   103
   104 				; move player 1/2
   105 				; right - clockwise, left = anti-clockwise
   106
   107 				; X = 0, player 1
   108 				; X = 1, player 2
   109
   110 				; A = driver mode:
   111 				; 0 : stick
   112 				; 1 : paddle
   113 				; 2 : driving
   114 				; 3 : computer
   115
   116 3476			main_driver
   117 3476 AC BE 32		            ldy driver_mode
   118 3479 B9 88 34		            lda driver_lo,y
   119 347C 8D 86 34		            sta driver_ptr
   120 347F B9 8C 34		            lda driver_hi,y
   121 3482 8D 87 34		            sta driver_ptr+1
   122
   123 = 3486			driver_ptr = *+1
   124 3485 4C FF FF		            jmp $ffff  
   125
   126 3488			driver_lo
   127 3488 90			            dta <driver_stick
   128 3489 FE			            dta <driver_paddle
   129 348A 0B			            dta <driver_driving
   130 348B 90			            dta <driver_stick
   131
   132 348C			driver_hi
   133 348C 34			            dta >driver_stick
   134 348D 34			            dta >driver_paddle
   135 348E 35			            dta >driver_driving
   136 348F 34			            dta >driver_stick
   137
   138 				; joystick driver
   139
   140 3490			driver_stick
   141 3490 BD 78 02		            lda STICK0,x
   142 3493 C9 0F		            cmp #15
   143 3495 F0 31		            beq move_done
   144 3497 C9 0B		            cmp #11
   145 3499 D0 16		            bne no_left
   146
   147 349B B5 9C		            lda p1_angle,x
   148 349D 38			            sec
   149 349E E5 88		            sbc stick_slow_speed
   150 34A0 95 9C		            sta p1_angle,x
   151
   152 34A2 BD 84 02		            lda STRIG0,x
   153 34A5 D0 07		            bne no_fast
   154
   155 34A7 B5 9C		            lda p1_angle,x
   156 34A9 38			            sec
   157 34AA E5 89		            sbc stick_fast_speed
   158 34AC 95 9C		            sta p1_angle,x
   159 34AE			no_fast
   160 				            
   161 34AE 4C C8 34		            jmp move_done
   162 34B1 C9 07		no_left     cmp #7
   163 34B3 D0 13		            bne move_done
   164
   165 34B5 B5 9C		            lda p1_angle,x
   166 34B7 18			            clc
   167 34B8 65 88		            adc stick_slow_speed
   168 34BA 95 9C		            sta p1_angle,x
   169
   170 34BC BD 84 02		            lda STRIG0,x
   171 34BF D0 07		            bne no_fast_right
   172
   173 34C1 B5 9C		            lda p1_angle,x
   174 34C3 18			            clc
   175 34C4 65 89		            adc stick_fast_speed
   176 34C6 95 9C		            sta p1_angle,x
   177 34C8			no_fast_right
   178 34C8			move_done
   179 34C8 60			            rts
   180
   181 				; check if player1 button is pressed
   182 				; A=0 not pressed, 1=pressed
   183
   184 34C9			is_player1_button_pressed
   185 34C9 AD BE 32		            lda driver_mode
   186 34CC C9 01		            cmp #1
   187 34CE F0 07		            beq check_player1_paddle_fire
   188
   189 34D0 AD 84 02		            lda STRIG0
   190 34D3 F0 1C		            beq fire_pressed
   191 34D5 D0 24		            bne fire_not_pressed
   192
   193 34D7			check_player1_paddle_fire
   194 34D7 AD 78 02		            lda STICK0
   195 34DA C9 0B		            cmp #11
   196 34DC F0 13		            beq fire_pressed
   197 34DE D0 1B		            bne fire_not_pressed
   198
   199 				; X=port number to check (paddle uses only port 1)
   200 				; check fire button (paddle uses left/right stick as fire button)
   201 				; A=0 not pressed, 1=pressed
   202
   203 34E0			is_both_buttons
   204 34E0 AD BE 32		            lda driver_mode
   205 34E3 C9 01		            cmp #1
   206 34E5 F0 0D		            beq check_paddle_fire
   207
   208 34E7 AD 84 02		            lda STRIG0
   209 34EA D0 0F		            bne fire_not_pressed
   210 34EC AD 85 02		            lda STRIG1
   211 34EF D0 0A		            bne fire_not_pressed
   212
   213 34F1			fire_pressed
   214 34F1 A9 01		            lda #1
   215 34F3 60			            rts
   216
   217 34F4			check_paddle_fire
   218 34F4 AD 78 02		            lda STICK0
   219 34F7 C9 03		            cmp #3
   220 34F9 F0 F6		            beq fire_pressed
   221
   222 34FB			fire_not_pressed
   223 34FB A9 00		            lda #0
   224 34FD 60			            rts
   225
   226 				; paddle driver
   227 				            
   228 34FE			driver_paddle            
   229 34FE BD 70 02		            lda PADDL0,x
   230 3501 A8			            tay
   231 3502 B9 00 33		            lda paddle_to_256,y
   232 3505 5D 42 35		            eor paddle_offsets,x
   233 3508 95 9C		            sta p1_angle,x
   234 350A 60			            rts
   235
   236 				; driving controller driver
   237
   238 350B			driver_driving
   239 350B 60			            rts
   240 				;            lda STICK0,x
   241 				;            eor #15
   242 				;            jmp driver_driving_main
   243
   244 350C			driver_driving_fast_p1
   245 350C AD 00 D3		            lda PORTA
   246 350F A2 00		            ldx #0
   247 3511 4C 1D 35		            jmp driver_driving_main
   248
   249 3514			driver_driving_fast_p2
   250 3514 AD 00 D3		            lda PORTA
   251 3517 4A			            lsr
   252 3518 4A			            lsr
   253 3519 4A			            lsr
   254 351A 4A			            lsr
   255 351B A2 01		            ldx #1
   256 				; have to call this many times per frame for each player
   257 351D			driver_driving_main
   258 351D 29 03		            and #%00000011
   259 351F 48			            pha
   260 3520 1D 01 34		            ora prev_driving_value,x
   261 3523 A8			            tay
   262 3524 68			            pla
   263 3525 0A			            asl
   264 3526 0A			            asl
   265 3527 9D 01 34		            sta prev_driving_value,x  ; store previous bits at 0000AA00 position for next time
   266
   267 352A B9 32 35		            lda driving_transitions,y
   268 352D 75 9C		            adc p1_angle,x
   269 352F 95 9C		            sta p1_angle,x
   270 3531 60			            rts
   271
   272 				; nibble coded transitions for driving controller
   273 				; 15,13,12,14 = anti-clockwise
   274 				; 15,14,12,13 = clockwise
   275 				; only lowest 2 bits change, so we need 16 values for all transitions
   276
   277 				; index is the combined value of nibble AABB
   278 				; where AA is previous bits and BB current bits
   279 3532			driving_transitions
   280 3532 00			            dta 0   ; 00 -> 00 (12 -> 12)
   281 3533 03			            dta 3   ; 00 -> 01 (12 -> 13)
   282 3534 FD			            dta 253 ; 00 -> 10 (12 -> 14)
   283 3535 00			            dta 0   ; 00 -> 11 (12 -> 15)
   284 3536 FB			            dta 251 ; 01 -> 00 (13 -> 12)
   285 3537 00			            dta 0   ; 01 -> 01 (13 -> 13)
   286 3538 00			            dta 0   ; 01 -> 10 (13 -> 14)
   287 3539 05			            dta 5   ; 01 -> 11 (13 -> 15)
   288 353A 05			            dta 5   ; 10 -> 00 (14 -> 12)
   289 353B 00			            dta 0   ; 10 -> 01 (14 -> 13)
   290 353C 00			            dta 0   ; 10 -> 10 (14 -> 14)
   291 353D FB			            dta 251 ; 10 -> 11 (14 -> 15)
   292 353E 00			            dta 0   ; 11 -> 00 (15 -> 12)
   293 353F FD			            dta 253 ; 11 -> 01 (15 -> 13)
   294 3540 03			            dta 3   ; 11 -> 10 (15 -> 14)
   295 3541 00			            dta 0   ; 11 -> 11 (15 -> 15)
   296
   297 3542			paddle_offsets
   298 3542 00 00		            dta 0,0
   183
   184 3544			reset_pressed
   185 3544 20 00 9C		            jsr intro_main
   186
   187 3547			main
   188 3547 A9 FF		            lda #255
   189 3549 8D FC 02		            sta 764
   190
   191 				; for fast loaders, wait 10 seconds or continue with spacebar
   192 354C			wait_a_sec
   193 354C AD FC 02		            lda 764
   194 354F C9 FF		            cmp #255
   195 3551 D0 06		            bne any_key_pressed
   196
   197 3553 A5 13		            lda 19
   198 3555 C9 02		            cmp #2
   199 3557 90 F3		            bcc wait_a_sec
   200
   201 3559			any_key_pressed
   202 3559 A9 FF		            lda #255
   203 355B 8D FC 02		            sta 764
   204
   205 				; start the game!
   206 				 
   207 355E A9 00		            lda #0
   208 3560 8D 2F 02		            sta SDMCTL
   209 3563 85 B6		            sta game_restart
   210 3565 85 8F		            sta end_screen_delay
   211 3567 85 83		            sta winner_color
   212
   213 3569 A9 80		            lda #128
   214 356B 85 8D		            sta volume_hit_bat
   215 356D 85 8E		            sta volume_hit_edge
   216 356F 85 80		            sta music_toggle        ; 128 = on, 0 = off
   217
   218 3571 A9 01		            lda #1
   219 3573 8D 44 02		            sta 580 ; coldstart
   220
   221 				;            lda #1
   222 				;            sta 9   ; boot
   223
   224 				;            lda #<reset_pressed
   225 				;            sta $0a
   226 				;            lda #>reset_pressed
   227 				;            sta $0b
   228
   229 3576 20 03 34		            jsr driver_init
   230
   231 3579 20 36 3C		            jsr make_shape_index
   232
   233 357C 20 66 3C		            jsr make_outer_256
   234
   235 357F 20 BA 36		            jsr make_screen_y_tab
   236
   237 3582 20 05 37		            jsr invert_backdrop
   238 3585 A9 60		            lda #$60
   239 3587 8D 05 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   240
   241 358A 20 D6 3C		            jsr reset_score
   242 358D 20 A4 3C		            jsr show_score_p1
   243 3590 20 BD 3C		            jsr show_score_p2
   244
   245 3593 20 C1 3E		            jsr init_sprites
   246 3596 20 ED 3E		            jsr init_colors
   247
   248 				; init. game vars
   249 3599 A2 00		            ldx #INIT_LEVEL_INDEX
   250 359B 8E 0D 3F		            stx current_level_index
   251 359E 20 23 3F		            jsr set_level_ball_speed
   252
   253 35A1 A9 00		            lda #INIT_PLAYER_MODE
   254 35A3 85 8A		            sta player_mode
   255 35A5 20 59 3F		            jsr show_player_mode
   256
   257 35A8 A9 01		            lda #STATE_IN_MENU
   258 35AA 85 8C		            sta game_state           ; start with menu
   259
   260 35AC 20 6E 31		            jsr music_init
   261
   262 35AF 20 4A 37		            jsr show_menu_options
   263
   264 35B2 A9 00		            lda #<display_list
   265 35B4 8D 30 02		            sta SDLSTL
   266 35B7 A9 50		            lda #>display_list
   267 35B9 8D 31 02		            sta SDLSTH
   268
   269 				; start vbi
   270
   271 35BC A9 C0		            lda #$c0
   272 35BE 8D 0E D4		            sta NMIEN
   273
   274 35C1 A9 07		            lda #7          ; sets VVBLKI
   275 35C3 A0 9C		            ldy #<vbi
   276 35C5 A2 37		            ldx #>vbi
   277 35C7 20 5C E4		            jsr $e45c       ; SETVBV
   278
   279 35CA			wait_driving_controller
   280
   281 35CA AD BE 32		            lda driver_mode
   282 35CD C9 02		            cmp #2
   283 35CF D0 F9		            bne wait_driving_controller
   284
   285 35D1 20 0C 35		            jsr driver_driving_fast_p1
   286 35D4 20 14 35		            jsr driver_driving_fast_p2
   287
   288 35D7 4C CA 35		            jmp wait_driving_controller
   289
   290 				;------------------------
   291 				; 8bit * 8bit = 16bit multiply
   292 				; By White Flame
   293 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   294 				; uses extra zp var _multiplicand+1
   295
   296 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   297 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   298
   299 				; In this version, both inputs must be unsigned
   300 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   301
   302 35DA			_multi8
   303 35DA A9 00		            lda #$00
   304 35DC A8			            tay
   305 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   306 35DD F0 0D		            beq _enter_loop
   307 35DF			_do_add
   308 35DF 18			            clc
   309 35E0 65 F6		            adc _multiplicand
   310 35E2 AA			            tax
   311
   312 35E3 98			            tya
   313 35E4 65 F7		            adc _multiplicand+1
   314 35E6 A8			            tay
   315 35E7 8A			            txa
   316 35E8			_mul_loop
   317 35E8 06 F6		            asl _multiplicand
   318 35EA 26 F7		            rol _multiplicand+1
   319 35EC			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   320 35EC 46 F8		            lsr _multiplier
   321 35EE B0 EF		            bcs _do_add
   322 35F0 D0 F6		            bne _mul_loop
   323 35F2 60			            rts
   324
   325 				; reset PM0/1 to playfield settings
   326 35F3			dli_header
   327 35F3 48			            pha
   328
   329 35F4 A9 08		            lda #8
   330 35F6 8D 17 D0		            sta COLPF1
   331
   332 35F9 A5 81		            lda shadow_HPOSP0
   333 35FB 8D 00 D0		            sta HPOSP0
   334 35FE A5 82		            lda shadow_HPOSP1
   335 3600 8D 01 D0		            sta HPOSP1
   336
   337 3603 A9 00		            lda #0
   338 3605 8D 08 D0		            sta SIZEP0
   339 3608 8D 09 D0		            sta SIZEP1
   340
   341 360B A9 5A		            lda #BASE_COLOR_P1+10
   342 360D 8D 12 D0		            sta COLPM0
   343 3610 A9 BA		            lda #BASE_COLOR_P2+10
   344 3612 8D 13 D0		            sta COLPM1
   345
   346 3615 A9 21		            lda #<dli_menu
   347 3617 8D 00 02		            sta VDSLST
   348 361A A9 36		            lda #>dli_menu
   349 361C 8D 01 02		            sta VDSLST+1
   350
   351 361F 68			            pla
   352 3620 40			            rti
   353
   354 3621			dli_menu
   355 3621 48			            pha
   356 3622 8A			            txa
   357 3623 48			            pha
   358
   359 3624 A9 0E		            lda #$0e
   360 3626 8D 0A D4		            sta WSYNC
   361 3629 8D 1A D0		            sta COLBK
   362 362C A9 0A		            lda #$0a
   363 362E 8D 0A D4		            sta WSYNC
   364 3631 8D 1A D0		            sta COLBK
   365 3634 A9 00		            lda #0
   366 3636 8D 0A D4		            sta WSYNC
   367 3639 8D 1A D0		            sta COLBK
   368
   369 363C A2 00		            ldx #0
   370 363E			color_it1
   371 363E BD 82 36		            lda menu_colpf2,x
   372 3641 8D 0A D4		            sta WSYNC
   373 3644 8D 18 D0		            sta COLPF2
   374 3647 E8			            inx
   375 3648 E0 12		            cpx #18
   376 364A D0 F2		            bne color_it1
   377
   378 364C A2 00		            ldx #0
   379 364E			color_it2
   380 364E BD 94 36		            lda menu_colpf0,x
   381 3651 05 83		            ora winner_color
   382 3653 8D 0A D4		            sta WSYNC
   383 3656 8D 16 D0		            sta COLPF0
   384 3659 E8			            inx
   385 365A E0 26		            cpx #38
   386 365C D0 F0		            bne color_it2
   387
   388 365E A9 00		            lda #0
   389 3660 8D 0A D4		            sta WSYNC
   390 3663 8D 1A D0		            sta COLBK
   391 3666 A9 0A		            lda #$0a
   392 3668 8D 0A D4		            sta WSYNC
   393 366B 8D 1A D0		            sta COLBK
   394 366E A9 0E		            lda #$0e
   395 3670 8D 0A D4		            sta WSYNC
   396 3673 8D 1A D0		            sta COLBK
   397 3676 A9 00		            lda #0
   398 3678 8D 0A D4		            sta WSYNC
   399 367B 8D 1A D0		            sta COLBK
   400 				            
   401 367E 68			            pla
   402 367F AA			            tax
   403 3680 68			            pla
   404 3681 40			            rti
   405
   406 3682			menu_colpf2
   407 3682 50			            dta BASE_COLOR_P1
   408 3683 50			            dta BASE_COLOR_P1
   409 3684 50			            dta BASE_COLOR_P1
   410 3685 50			            dta BASE_COLOR_P1
   411 3686 50			            dta BASE_COLOR_P1
   412 3687 50			            dta BASE_COLOR_P1
   413 3688 50			            dta BASE_COLOR_P1
   414 3689 50			            dta BASE_COLOR_P1
   415
   416 368A B0			            dta BASE_COLOR_P2
   417 368B B0			            dta BASE_COLOR_P2
   418 368C B0			            dta BASE_COLOR_P2
   419 368D B0			            dta BASE_COLOR_P2
   420 368E B0			            dta BASE_COLOR_P2
   421 368F B0			            dta BASE_COLOR_P2
   422 3690 B0			            dta BASE_COLOR_P2
   423 3691 B0			            dta BASE_COLOR_P2
   424
   425 3692 00 00		            dta 0,0
   426
   427 3694			menu_colpf0
   428 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   429 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   430 3694 00 00		            dta 0,0
   431 3696 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   432 369E 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   433 36A6 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   434 36AE 00 00 00 00		            dta 0,0,0,0
   435 36B2 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   436
   437 				; make pointers from y-position to screen memory
   438 				; screen memory is 3 blocks
   439 				; screen_mem1 : 102 lines, 4080 bytes
   440 				; screen_mem2 : 102 lines, 4080 bytes
   441 				; screen_mem3 :  20 lines,  800 bytes
   442
   443 36BA			make_screen_y_tab
   444 36BA A9 00		            lda #<screen_mem1
   445 36BC 85 86		            sta tmp_screen
   446 36BE A9 70		            lda #>screen_mem1
   447 36C0 85 87		            sta tmp_screen+1
   448
   449 36C2 A2 00		            ldx #0
   450 36C4			fill_y_tab1
   451 36C4 20 ED 36		            jsr store_y_line
   452 36C7 E8			            inx
   453 36C8 E0 66		            cpx #102
   454 36CA D0 F8		            bne fill_y_tab1
   455
   456 				; x = 102
   457 36CC A9 00		            lda #<screen_mem2
   458 36CE 85 86		            sta tmp_screen
   459 36D0 A9 80		            lda #>screen_mem2
   460 36D2 85 87		            sta tmp_screen+1
   461
   462 36D4			fill_y_tab2
   463 36D4 20 ED 36		            jsr store_y_line
   464 36D7 E8			            inx
   465 36D8 E0 CC		            cpx #204
   466 36DA D0 F8		            bne fill_y_tab2
   467
   468 36DC A9 00		            lda #<screen_mem3
   469 36DE 85 86		            sta tmp_screen
   470 36E0 A9 90		            lda #>screen_mem3
   471 36E2 85 87		            sta tmp_screen+1
   472
   473 				; x = 204
   474 36E4			fill_y_tab3
   475 36E4 20 ED 36		            jsr store_y_line
   476 36E7 E8			            inx
   477 36E8 E0 E0		            cpx #224
   478 36EA D0 F8		            bne fill_y_tab3
   479 36EC 60			            rts
   480
   481 36ED			store_y_line
   482 36ED A5 86		            lda tmp_screen
   483 36EF 9D 00 12		            sta screen_y_lo,x
   484 36F2 A5 87		            lda tmp_screen+1
   485 36F4 9D 00 13		            sta screen_y_hi,x
   486 				            
   487 36F7 A5 86		            lda tmp_screen
   488 36F9 18			            clc
   489 36FA 69 28		            adc #SCREEN_WIDTH
   490 36FC 85 86		            sta tmp_screen
   491 36FE A5 87		            lda tmp_screen+1
   492 3700 69 00		            adc #0
   493 3702 85 87		            sta tmp_screen+1
   494 3704 60			            rts
   495
   496 				; @todo invert backdrop image
   497 				; now we have to do it here :P
   498 3705			invert_backdrop
   499 3705 A9 00		            lda #<screen_mem1
   500 3707 85 86		            sta tmp_screen
   501 3709 A9 70		            lda #>screen_mem1
   502 370B 85 87		            sta tmp_screen+1
   503 				            
   504 370D A2 10		            ldx #16     ; 16 pages = 4K
   505 370F 20 2D 37		            jsr do_x_pages
   506 				           
   507 3712 A9 00		            lda #<screen_mem2
   508 3714 85 86		            sta tmp_screen
   509 3716 A9 80		            lda #>screen_mem2
   510 3718 85 87		            sta tmp_screen+1
   511 				            
   512 371A A2 10		            ldx #16     ; 16 pages = 4K
   513 371C 20 2D 37		            jsr do_x_pages
   514
   515 371F A9 00		            lda #<screen_mem3
   516 3721 85 86		            sta tmp_screen
   517 3723 A9 90		            lda #>screen_mem3
   518 3725 85 87		            sta tmp_screen+1
   519 				            
   520 3727 A2 04		            ldx #4     ; 4 pages = 1K
   521 3729 20 2D 37		            jsr do_x_pages
   522 372C 60			            rts
   523
   524 				; invert x pages, starting from tmp_screen
   525
   526 372D			do_x_pages
   527 372D A0 00		            ldy #0
   528 372F			do_page
   529 372F B1 86		            lda (tmp_screen),y
   530 3731 49 FF		            eor #$ff
   531 3733 91 86		            sta (tmp_screen),y
   532 3735 C8			            iny
   533 3736 D0 F7		            bne do_page 
   534
   535 3738 E6 87		            inc tmp_screen+1
   536 373A CA			            dex
   537 373B D0 F2		            bne do_page
   538 373D 60			            rts
   539
   540 373E			turn_color_ball
   541 373E A6 B5		            ldx player_turn
   542 3740 BD 47 37		            lda color_turn,x
   543 3743 8D C7 02		            sta COLOR3
   544 3746 60			            rts
   545 				            
   546 3747 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   547
   548 374A			show_menu_options
   549 374A A9 50		            lda #<controller_text
   550 374C 8D F6 50		            sta menu_line1_ptr
   551 374F A9 52		            lda #>controller_text
   552 3751 8D F7 50		            sta menu_line1_ptr+1
   553
   554 3754 20 59 3F		            jsr show_player_mode
   555
   556 3757 A9 9F		            lda #<level_text
   557 3759 8D FC 50		            sta menu_line3_ptr
   558 375C A9 52		            lda #>level_text
   559 375E 8D FD 50		            sta menu_line3_ptr+1
   560
   561 3761 A9 00		            lda #0
   562 3763 85 83		            sta winner_color
   563 3765 60			            rts
   564
   565 3766			show_end_screen
   566 3766 A9 FB		            lda #<empty_text
   567 3768 8D F6 50		            sta menu_line1_ptr
   568 376B 8D FC 50		            sta menu_line3_ptr
   569 376E A9 52		            lda #>empty_text
   570 3770 8D F7 50		            sta menu_line1_ptr+1
   571 3773 8D FD 50		            sta menu_line3_ptr+1
   572
   573 3776 AD 2E 51		            lda score_p1
   574 3779 CD 2F 51		            cmp score_p2
   575 377C 90 0F		            bcc player_2_wins
   576
   577 377E A9 0F		            lda #<winner_one_text
   578 3780 8D F9 50		            sta menu_line2_ptr
   579 3783 A9 53		            lda #>winner_one_text
   580 3785 8D FA 50		            sta menu_line2_ptr+1
   581
   582 3788 A9 50		            lda #BASE_COLOR_P1
   583 378A 85 83		            sta winner_color
   584 378C 60			            rts
   585
   586 378D			player_2_wins
   587 378D A9 23		            lda #<winner_two_text
   588 378F 8D F9 50		            sta menu_line2_ptr
   589 3792 A9 53		            lda #>winner_two_text
   590 3794 8D FA 50		            sta menu_line2_ptr+1
   591
   592 3797 A9 B0		            lda #BASE_COLOR_P2
   593 3799 85 83		            sta winner_color
   594
   595 379B 60			            rts
   596
   597 				; A, X, Y are already saved by the OS
   598 379C			vbi
   599 379C 20 DC 31		            jsr copy_shadow
   600
   601 379F A5 80		            lda music_toggle
   602 37A1 F0 03		            beq skip_music
   603 37A3 20 97 31		            jsr play_song
   604 37A6			skip_music
   605
   606 				; toggle music on/off with spacebar
   607 37A6 AD FC 02		            lda 764
   608 37A9 C9 21		            cmp #$21
   609 37AB D0 10		            bne no_spacebar
   610 37AD A5 80		            lda music_toggle
   611 37AF 49 80		            eor #128
   612 37B1 85 80		            sta music_toggle
   613 37B3 D0 03		            bne music_turned_on
   614 37B5 20 60 32		            jsr music_off
   615
   616 37B8			music_turned_on
   617 37B8 A9 FF		            lda #255
   618 37BA 8D FC 02		            sta 764
   619
   620 37BD			no_spacebar
   621 37BD 20 C3 39		            jsr play_sound_bat
   622 37C0 20 E1 39		            jsr play_sound_edge
   623
   624 37C3 A9 F3		            lda #<dli_header
   625 37C5 8D 00 02		            sta VDSLST
   626 37C8 A9 35		            lda #>dli_header
   627 37CA 8D 01 02		            sta VDSLST+1
   628
   629 37CD A9 2E		            lda #%00101110  ; enable P/M DMA
   630 37CF 8D 2F 02		            sta SDMCTL
   631 37D2 A9 00		            lda #0
   632 37D4 85 4D		            sta 77      ; attract off
   633 37D6 A9 98		            lda #>rotor_font
   634 37D8 8D F4 02		            sta 756
   635
   636 37DB A9 30		            lda #$30
   637 37DD 8D 00 D0		            sta HPOSP0
   638 37E0 A9 B0		            lda #$b0
   639 37E2 8D 01 D0		            sta HPOSP1
   640
   641 				; menu switching thingy
   642
   643 37E5 AD 1F D0		            lda CONSOL
   644 37E8 C9 03		            cmp #3  ; option button
   645 37EA D0 1B		            bne no_option_pressed
   646 37EC A5 8C		            lda game_state
   647 37EE C9 01		            cmp #STATE_IN_MENU
   648 37F0 F0 2F		            beq check_game_state
   649
   650 				; prevent menu option directly after leaving in-game state
   651 37F2 A9 03		            lda #3
   652 37F4 8D 0C 3F		            sta previous_consol
   653
   654 37F7			go_menu_mode
   655 37F7 20 87 3B		            jsr wipe_ball
   656
   657 37FA 20 FA 31		            jsr music_normal_volume
   658
   659 37FD 20 4A 37		            jsr show_menu_options
   660
   661 3800 A9 01		            lda #STATE_IN_MENU
   662 3802 85 8C		            sta game_state
   663 3804 4C 21 38		            jmp check_game_state
   664
   665 3807			no_option_pressed
   666 3807 C9 06		            cmp #6  ; start pressed
   667 3809 D0 16		            bne check_game_state
   668
   669 				; reset game
   670
   671 380B			reset_game
   672 380B 20 05 32		            jsr music_low_volume
   673
   674 380E 20 87 3B		            jsr wipe_ball
   675
   676 3811 A9 00		            lda #0
   677 3813 85 BA		            sta cpu1_angle_end
   678 3815 A9 80		            lda #128
   679 3817 85 BB		            sta cpu2_angle_end
   680
   681 3819 A9 01		            lda #1
   682 381B 85 B6		            sta game_restart
   683
   684 381D A9 00		            lda #STATE_IN_GAME
   685 381F 85 8C		            sta game_state
   686
   687 3821			check_game_state
   688 3821 A5 8C		            lda game_state
   689 3823 D0 03		            bne no_main_game_state
   690 3825 4C C1 38		            jmp main_game_vbi
   691
   692 3828			no_main_game_state
   693 3828 C9 02		            cmp #STATE_IN_END
   694 382A D0 1C		            bne menu_vbi
   695
   696 				; end screen vbi
   697 382C A5 8F		            lda end_screen_delay
   698 382E D0 10		            bne stay_in_end_screen
   699
   700 3830 20 A6 31		            jsr restart_music
   701 3833 20 FA 31		            jsr music_normal_volume
   702
   703 				; here we show the menu again
   704 3836 20 4A 37		            jsr show_menu_options
   705
   706 3839 A9 01		            lda #STATE_IN_MENU
   707 383B 85 8C		            sta game_state
   708 383D 4C 48 38		            jmp menu_vbi
   709
   710 3840			stay_in_end_screen
   711 3840 20 A5 39		            jsr play_sound_end_game
   712 3843 C6 8F		            dec end_screen_delay
   713 3845 4C 8D 38		            jmp wait_depressed
   714
   715 				; within menu vbi
   716
   717 3848			menu_vbi
   718 3848 A5 8A		            lda player_mode
   719 384A F0 07		            beq check_human_buttons
   720
   721 384C 20 C9 34		            jsr is_player1_button_pressed
   722 384F D0 BA		            bne reset_game
   723 3851 F0 05		            beq check_consol_buttons
   724
   725 3853			check_human_buttons
   726 3853 20 E0 34		            jsr is_both_buttons
   727 3856 D0 B3		            bne reset_game
   728
   729 3858			check_consol_buttons
   730 3858 AD 1F D0		            lda CONSOL
   731 385B C9 05		            cmp #5          ; select
   732 385D D0 18		            bne no_level_select
   733 				            
   734 385F AD 0C 3F		            lda previous_consol
   735 3862 C9 05		            cmp #5
   736 3864 F0 27		            beq wait_depressed
   737
   738 3866 20 3C 3F		            jsr increase_level
   739 3869 AE 0D 3F		            ldx current_level_index
   740 386C 20 23 3F		            jsr set_level_ball_speed
   741
   742 386F A9 05		            lda #5
   743 3871 8D 0C 3F		            sta previous_consol
   744 3874 4C 8D 38		            jmp wait_depressed
   745
   746 3877			no_level_select
   747 3877 C9 03		            cmp #3          ; option
   748 3879 D0 0F		            bne no_player_mode_select
   749
   750 387B AD 0C 3F		            lda previous_consol
   751 387E C9 03		            cmp #3
   752 3880 F0 0B		            beq wait_depressed
   753
   754 3882 20 4C 3F		            jsr increase_player_mode
   755 3885 20 59 3F		            jsr show_player_mode
   756
   757 3888 A9 03		            lda #3
   758 388A			no_player_mode_select
   759 388A 8D 0C 3F		            sta previous_consol
   760
   761 388D			wait_depressed
   762 388D A9 01		            lda #1      ; dl jump
   763 388F 8D 55 50		            sta menu_dl_hook
   764 3892 A9 EE		            lda #<menu_dl_part
   765 3894 8D 56 50		            sta menu_dl_hook+1
   766 3897 A9 50		            lda #>menu_dl_part
   767 3899 8D 57 50		            sta menu_dl_hook+2
   768
   769 				; detect/show controller type (used for both players)
   770 389C 20 A8 38		            jsr detect_show_driver
   771
   772 389F 20 30 3A		            jsr handle_player1
   773 38A2 20 5B 3A		            jsr handle_player2
   774
   775 38A5 4C 7A 39		            jmp exit_vbi
   776
   777 				; X = port/driver to detect
   778 38A8			detect_show_driver
   779 38A8 20 43 34		            jsr driver_detect
   780 38AB A8			            tay
   781 38AC B9 37 53		            lda driver_text_lo,y
   782 38AF 85 86		            sta tmp_screen
   783 38B1 B9 3B 53		            lda driver_text_hi,y
   784 38B4 85 87		            sta tmp_screen+1
   785
   786 38B6 A0 07		            ldy #7
   787 38B8			show_driv
   788 38B8 B1 86		            lda (tmp_screen),y
   789 38BA 99 5A 52		            sta driver_screen,y
   790 38BD 88			            dey
   791 38BE 10 F8		            bpl show_driv
   792 38C0 60			            rts
   793
   794 				; main game vbi
   795 38C1			main_game_vbi
   796 38C1 A5 B6		            lda game_restart
   797 38C3 F0 33		            beq no_restart
   798
   799 				; restart game
   800
   801 38C5 20 BD 39		            jsr silence_end
   802
   803 38C8 A9 00		            lda #0
   804 38CA 85 B6		            sta game_restart
   805 				            
   806 38CC 20 D6 3C		            jsr reset_score
   807 38CF 20 A4 3C		            jsr show_score_p1
   808 38D2 20 BD 3C		            jsr show_score_p2
   809
   810 38D5 A6 9C		            ldx p1_angle
   811 38D7 86 AA		            stx ball_angle_start
   812 38D9 20 E2 3A		            jsr ball_to_start_position
   813 38DC 20 F1 3A		            jsr prepare_ball_end_position
   814
   815 38DF A9 00		            lda #0
   816 38E1 85 A0		            sta mp_collision
   817 38E3 85 A1		            sta in_collision
   818 38E5 85 A3		            sta edge_delay
   819 38E7 85 AD		            sta edge_collision
   820 38E9 85 AE		            sta edge_hit_count
   821 38EB 8D 1E D0		            sta HITCLR
   822
   823 38EE A9 02		            lda #2
   824 38F0 85 B5		            sta player_turn
   825
   826 38F2 20 3E 37		            jsr turn_color_ball
   827 38F5 4C 7A 39		            jmp exit_vbi
   828
   829 38F8			no_restart
   830 				; remove menu hook
   831 38F8 A9 0F		            lda #$0f        ; dl gfx 8
   832 38FA 8D 55 50		            sta menu_dl_hook
   833 38FD 8D 56 50		            sta menu_dl_hook+1
   834 3900 8D 57 50		            sta menu_dl_hook+2
   835
   836 3903 AD 08 D0		            lda M0PL
   837 3906 85 A0		            sta mp_collision
   838 3908 AD 09 D0		            lda M1PL
   839 390B 05 A0		            ora mp_collision
   840 390D 85 A0		            sta mp_collision
   841
   842 390F AD 00 D0		            lda M0PF
   843 3912 85 AD		            sta edge_collision
   844 3914 AD 01 D0		            lda M1PF
   845 3917 05 AD		            ora edge_collision
   846 3919 85 AD		            sta edge_collision
   847 				;           beq no_edge_collision
   848
   849 				;            inc edge_hit_count
   850 				;            lda edge_hit_count
   851 				;            cmp #2
   852 				;            bcc edge_hit_counting
   853
   854 				;            sei
   855 				;lalala      jmp lalala
   856
   857 				;no_edge_collision
   858 				;            lda #0
   859 				;            sta edge_hit_count
   860
   861 391B			edge_hit_counting
   862 391B 20 30 3A		            jsr handle_player1
   863 391E 20 5B 3A		            jsr handle_player2
   864
   865 				; handle ball
   866
   867 3921 20 87 3B		            jsr wipe_ball         
   868
   869 				; Check ball collision with bat
   870
   871 3924 A5 A4		            lda bat_collision_delay
   872 3926 F0 05		            beq check_allowed
   873 3928 C6 A4		            dec bat_collision_delay
   874 392A 4C 44 39		            jmp move_one
   875
   876 392D			check_allowed
   877 392D A5 A0		            lda mp_collision
   878 392F F0 0F		            beq reset_in_collision
   879
   880 3931 A5 A1		            lda in_collision
   881 3933 D0 0F		            bne no_first_hit
   882
   883 3935 E6 A1		            inc in_collision            
   884 3937 20 1E 3B		            jsr bounce_bat_ball 
   885 				            
   886 393A 20 A0 39		            jsr start_sound_bat          
   887 				            
   888 393D 4C 44 39		            jmp move_one
   889 				            
   890 3940			reset_in_collision
   891 3940 A9 00		            lda #0
   892 3942 85 A1		            sta in_collision        
   893
   894 3944			move_one
   895 3944			no_first_hit
   896 3944 20 28 3E		            jsr move_current_xy
   897 3947 F0 1E		            beq still_moving
   898
   899 				; edge detected
   900
   901 3949 20 DC 39		            jsr start_sound_edge
   902
   903 394C A5 AB		            lda ball_angle_end
   904 394E 85 AA		            sta ball_angle_start
   905
   906 3950 20 15 3B		            jsr ball_current_to_start_position
   907 3953 20 F1 3A		            jsr prepare_ball_end_position
   908
   909 3956 20 FC 39		            jsr update_score
   910 3959 D0 37		            bne game_ends
   911
   912 				; switch turns
   913 395B A5 B5		            lda player_turn
   914 395D 49 03		            eor #3              ; 1 => 2, 2 => 1
   915 395F 85 B5		            sta player_turn
   916 3961 20 3E 37		            jsr turn_color_ball
   917 3964 20 84 3A		            jsr set_cpu_angle_end
   918
   919 3967			still_moving
   920 3967 A5 EB		            lda current_x+1
   921 3969 85 A6		            sta ball_current_x
   922 396B A5 ED		            lda current_y+1
   923 396D 85 A7		            sta ball_current_y
   924
   925 396F 20 9C 3B		            jsr show_ball
   926
   927 3972 A9 00		            lda #0
   928 3974 8D 18 D0		            sta $d018           
   929
   930 				; anything in A to clear collisions
   931 3977 8D 1E D0		            sta HITCLR
   932
   933 397A			exit_vbi
   934
   935 				; always set header stuff
   936 397A A9 03		            lda #3
   937 397C 8D 08 D0		            sta SIZEP0
   938 397F 8D 09 D0		            sta SIZEP1
   939
   940 				; background in PM0/1 for header
   941 3982 A9 FF		            lda #255
   942 3984 A2 07		            ldx #7
   943 3986			fill_pm_header
   944 3986 9D 00 0E		            sta p0_area,x
   945 3989 9D 80 0E		            sta p1_area,x
   946 398C CA			            dex
   947 398D 10 F7		            bpl fill_pm_header
   948
   949 398F 4C 62 E4		            jmp $e462
   950
   951 3992			game_ends
   952 3992 A9 FF		            lda #255
   953 3994 85 8F		            sta end_screen_delay
   954
   955 3996 20 66 37		            jsr show_end_screen
   956
   957 3999 A9 02		            lda #STATE_IN_END
   958 399B 85 8C		            sta game_state
   959
   960 399D 4C 7A 39		            jmp exit_vbi
   961
   962 39A0			start_sound_bat
   963 39A0 A9 0A		            lda #10
   964 39A2 85 8D		            sta volume_hit_bat
   965 39A4 60			            rts
   966
   967 39A5			play_sound_end_game
   968 39A5 20 60 32		            jsr music_off
   969
   970 39A8 A5 8F		            lda end_screen_delay
   971 39AA C9 C0		            cmp #192
   972 39AC 90 0F		            bcc silence_end
   973 39AE 4A			            lsr
   974 39AF 25 8F		            and end_screen_delay
   975 39B1 4A			            lsr
   976 39B2 09 20		            ora #$20
   977 39B4 8D 73 32		            sta SHADOW+4
   978 				            ;lda end_screen_delay
   979 39B7 A9 AA		            lda #$aa
   980 39B9 8D 74 32		            sta SHADOW+5
   981 39BC 60			            rts
   982 39BD			silence_end
   983 39BD A9 00		            lda #0
   984 39BF 8D 74 32		            sta SHADOW+5
   985 39C2 60			            rts
   986
   987 39C3			play_sound_bat
   988 39C3 A5 8D		            lda volume_hit_bat
   989 39C5 30 14		            bmi silenced_bat
   990
   991 39C7 A5 B5		            lda player_turn
   992 39C9 0A			            asl
   993 39CA 0A			            asl
   994 39CB 69 30		            adc #$30
   995 39CD E5 B3		            sbc angle_diff_bat
   996 39CF 8D 73 32		            sta SHADOW+4    ; $d204
   997 39D2 A5 8D		            lda volume_hit_bat
   998 39D4 09 A0		            ora #$a0
   999 39D6 8D 74 32		            sta SHADOW+5    ; $d205
  1000 39D9 C6 8D		            dec volume_hit_bat
  1001 39DB			silenced_bat
  1002 39DB 60			            rts
  1003
  1004 39DC			start_sound_edge
  1005 39DC A9 04		            lda #4
  1006 39DE 85 8E		            sta volume_hit_edge
  1007 39E0 60			            rts
  1008
  1009 39E1			play_sound_edge
  1010 39E1 A5 8E		            lda volume_hit_edge
  1011 39E3 30 16		            bmi silenced_edge
  1012 39E5 D0 06		            bne no_silenced_edge
  1013 39E7 8D 74 32		            sta SHADOW+5    ; $d205
  1014 39EA C6 8E		            dec volume_hit_edge
  1015 39EC 60			            rts            
  1016
  1017 39ED			no_silenced_edge
  1018 39ED A9 08		            lda #$08
  1019 39EF 8D 73 32		            sta SHADOW+4    ; $d204
  1020 39F2 A5 8E		            lda volume_hit_edge
  1021 39F4 09 26		            ora #$26
  1022 39F6 8D 74 32		            sta SHADOW+5    ; $d205
  1023 39F9 C6 8E		            dec volume_hit_edge
  1024 39FB			silenced_edge
  1025 39FB 60			            rts
  1026
  1027 				; Update score
  1028 				; Score > max score, then exit A = 1, otherwise A = 0
  1029
  1030 39FC			update_score
  1031 39FC A5 B5		            lda player_turn
  1032 39FE C9 01		            cmp #1
  1033 3A00 D0 12		            bne was_player2_turn
  1034 				; was player 1 turn, so player 2 gets a point
  1035 3A02 20 EB 3C		            jsr inc_score_p2
  1036 3A05 20 BD 3C		            jsr show_score_p2
  1037
  1038 3A08 AD 2F 51		            lda score_p2
  1039 3A0B C9 11		            cmp #MAX_SCORE
  1040 3A0D D0 17		            bne reset_edge_delay
  1041
  1042 3A0F A9 01		            lda #STATE_IN_MENU
  1043 3A11 85 8C		            sta game_state
  1044 3A13 60			            rts
  1045
  1046 3A14			was_player2_turn
  1047 3A14 20 DF 3C		            jsr inc_score_p1
  1048 3A17 20 A4 3C		            jsr show_score_p1
  1049
  1050 3A1A AD 2E 51		            lda score_p1
  1051 3A1D C9 11		            cmp #MAX_SCORE
  1052 3A1F D0 05		            bne reset_edge_delay
  1053
  1054 3A21 A9 01		            lda #STATE_IN_MENU
  1055 3A23 85 8C		            sta game_state
  1056 3A25 60			            rts
  1057
  1058 3A26			reset_edge_delay
  1059 3A26 A9 0A		            lda #10
  1060 3A28 85 A3		            sta edge_delay
  1061
  1062 3A2A			no_edge
  1063
  1064 3A2A A9 00		            lda #0      ; no end game
  1065 				; anything in A to clear collisions
  1066 3A2C 8D 1E D0		            sta HITCLR
  1067 3A2F 60			            rts
  1068
  1069 				; player 1
  1070 				; - wipe shape at previous y-position
  1071 				; - move player using controller
  1072 				; - set sprite positions
  1073
  1074 3A30			handle_player1
  1075 3A30 20 0C 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1076
  1077 3A33 A5 8A		            lda player_mode
  1078 3A35 C9 02		            cmp #2
  1079 3A37 F0 0C		            beq do_p1_is_computer
  1080
  1081 3A39 A2 00		            ldx #0              ; player 1
  1082 3A3B 20 76 34		            jsr main_driver
  1083 3A3E 20 C4 3A		            jsr move_player
  1084 				            
  1085 3A41 20 C0 3B		            jsr show_p1
  1086 3A44 60			            rts
  1087
  1088 				; p1 now controlled by computer
  1089 3A45			do_p1_is_computer
  1090 3A45 A5 8C		            lda game_state
  1091 3A47 D0 3A		            bne not_in_game
  1092
  1093 3A49 A2 00		            ldx #0              ; player 1
  1094
  1095 3A4B A5 B5		            lda player_turn
  1096 3A4D C9 01		            cmp #1
  1097 3A4F D0 03		            bne not_p1_turn
  1098
  1099 3A51 20 95 3A		            jsr cpu_controller
  1100 3A54			not_p1_turn
  1101
  1102 3A54 20 C4 3A		            jsr move_player
  1103 3A57 20 C0 3B		            jsr show_p1
  1104 3A5A 60			            rts
  1105
  1106 				; player 2
  1107 				; - wipe shape at previous y-position
  1108 				; - move player using controller
  1109 				; - set sprite positions
  1110
  1111 3A5B			handle_player2
  1112 3A5B 20 21 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1113
  1114 3A5E A5 8A		            lda player_mode
  1115 3A60 D0 0C		            bne do_p2_is_computer
  1116
  1117 3A62 A2 01		            ldx #1              ; player 2
  1118 3A64 20 76 34		            jsr main_driver
  1119 3A67 20 C4 3A		            jsr move_player
  1120 				                        
  1121 3A6A 20 E6 3B		            jsr show_p2
  1122 3A6D 60			            rts
  1123
  1124 				; p2 now controlled by computer
  1125 3A6E			do_p2_is_computer
  1126 3A6E A5 8C		            lda game_state
  1127 3A70 D0 11		            bne not_in_game
  1128
  1129 3A72 A2 01		            ldx #1              ; player 2
  1130
  1131 3A74 A5 B5		            lda player_turn
  1132 3A76 C9 02		            cmp #2
  1133 3A78 D0 03		            bne not_p2_turn
  1134
  1135 3A7A 20 95 3A		            jsr cpu_controller
  1136
  1137 3A7D			not_p2_turn
  1138 3A7D 20 C4 3A		            jsr move_player
  1139 3A80 20 E6 3B		            jsr show_p2
  1140
  1141 3A83			not_in_game
  1142 3A83 60			            rts
  1143
  1144 3A84			set_cpu_angle_end
  1145 3A84 A6 B5		            ldx player_turn
  1146 3A86 CA			            dex
  1147 3A87 AD 0A D2		            lda RANDOM
  1148 3A8A 29 07		            and #7
  1149 3A8C 18			            clc
  1150 3A8D 65 AB		            adc ball_angle_end
  1151 3A8F 38			            sec
  1152 3A90 E9 03		            sbc #3
  1153 3A92 95 BA		            sta cpu_angle_end,x
  1154 3A94 60			            rts
  1155
  1156 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1157
  1158 3A95			cpu_controller
  1159 				;            lda ball_angle_end  ; current ball end
  1160 3A95 B5 BA		            lda cpu_angle_end,x
  1161 3A97 85 B0		            sta tmp_angle1
  1162 3A99 B5 9C		            lda p1_angle,x
  1163 3A9B 85 B1		            sta tmp_angle2
  1164
  1165 3A9D 20 F7 3C		            jsr calc_angle_diff
  1166
  1167 3AA0 A5 B7		            lda tmp_angle_diff
  1168 3AA2 F0 1F		            beq comp_in_catch_position
  1169 3AA4 A5 B4		            lda tmp_angle_direction
  1170 3AA6 D0 0E		            bne move_comp_clockwise
  1171
  1172 3AA8 AD 0A D2		            lda RANDOM
  1173 3AAB 29 03		            and #3
  1174 3AAD D0 14		            bne comp_in_catch_position
  1175 3AAF B5 9C		            lda p1_angle,x
  1176 3AB1 65 88		            adc stick_slow_speed
  1177 3AB3 95 9C		            sta p1_angle,x
  1178 3AB5 60			            rts
  1179 3AB6			move_comp_clockwise
  1180
  1181 3AB6 AD 0A D2		            lda RANDOM
  1182 3AB9 29 03		            and #3
  1183 3ABB D0 06		            bne comp_in_catch_position
  1184
  1185 3ABD B5 9C		            lda p1_angle,x
  1186 3ABF E5 88		            sbc stick_slow_speed
  1187 3AC1 95 9C		            sta p1_angle,x
  1188 3AC3			comp_in_catch_position
  1189 3AC3 60			            rts
  1190
  1191 				; move player 1/2
  1192 				; right - clockwise, left = anti-clockwise
  1193
  1194 				; X = 0, player 1
  1195 				; X = 1, player 2
  1196
  1197 				; Y = driver mode:
  1198 				; 0 : stick
  1199 				; 1 : paddle
  1200 				; 2 : driving
  1201 				; 3 : computer
  1202 				            
  1203 3AC4			move_player
  1204 3AC4 B5 9C		            lda p1_angle,x
  1205 3AC6 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1206 3AC8 49 40		            eor #64                     ; perpendicular to the circle angle
  1207 3ACA 95 90		            sta p1_shape,x
  1208
  1209 3ACC B4 9C		            ldy p1_angle,x
  1210 3ACE B9 00 40		            lda inner_x_tab,y
  1211 3AD1 4A			            lsr
  1212 3AD2 69 20		            adc #inner_x_margin/2
  1213 3AD4 95 94		            sta player1_x,x
  1214 3AD6 B9 00 41		            lda inner_y_tab,y
  1215 3AD9 4A			            lsr
  1216 3ADA 95 98		            sta player1_y,x
  1217
  1218 3ADC B4 90		            ldy p1_shape,x
  1219 3ADE 20 5B 3C		            jsr shape_to_ptr
  1220
  1221 3AE1 60			            rts
  1222
  1223 				; Set ball at start position
  1224 				; - start angle current player
  1225 				; - start position by inner table
  1226 				; - collision delay set?
  1227
  1228 				; Set ball current position to start position
  1229 				; input:
  1230 				; X = angle of start position
  1231 				; output:
  1232 				; ball position: (ball_current_x, ball_current_y)
  1233 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1234 3AE2			ball_to_start_position
  1235 3AE2 BD 00 40		            lda inner_x_tab,x
  1236 3AE5 85 A6		            sta ball_current_x
  1237 3AE7 85 E6		            sta tmp_x1
  1238 3AE9 BD 00 41		            lda inner_y_tab,x
  1239 3AEC 85 A7		            sta ball_current_y
  1240 3AEE 85 E7		            sta tmp_y1
  1241 3AF0 60			            rts
  1242
  1243 				; Prepare ball end position
  1244 				; - end angle current player
  1245 				; - end position by outer table
  1246 				; - calculate step size x,y
  1247
  1248 				; Input:
  1249 				; - ball_angle_start
  1250 				; - ball speed
  1251 				; Output:
  1252 				; - ball_andle_end
  1253 				; - ball start position (tmp_x1, tmp_y1)
  1254 				; - ball end position (tmp_x2, tmp_y2)
  1255 				; - step size (step_x, step_y) for ball movement
  1256 3AF1			prepare_ball_end_position
  1257 3AF1 A5 AA		            lda ball_angle_start
  1258 3AF3 49 80		            eor #128        ; other side
  1259 3AF5 85 AB		            sta ball_angle_end
  1260 3AF7 AA			            tax
  1261 3AF8 20 7C 3B		            jsr angle_to_end_position
  1262 				                        
  1263 3AFB 20 BB 3D		            jsr init_current_xy
  1264 				            
  1265 				; move current a little bit            
  1266 3AFE 20 28 3E		            jsr move_current_xy
  1267 				; ignore end indicator, since we only just started
  1268
  1269
  1270 3B01 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1271 3B03 85 A4		            sta bat_collision_delay
  1272 3B05 60			            rts
  1273
  1274 				; x = angle 0..255
  1275 3B06			outer_angle_to_start_position
  1276 3B06 BD 00 10		            lda outer_x_256,x
  1277 3B09 85 A6		            sta ball_current_x
  1278 3B0B 85 E6		            sta tmp_x1
  1279 3B0D BD 00 11		            lda outer_y_256,x
  1280 3B10 85 A7		            sta ball_current_y
  1281 3B12 85 E7		            sta tmp_y1
  1282 3B14 60			            rts
  1283
  1284 3B15			ball_current_to_start_position
  1285 3B15 A5 A6		            lda ball_current_x
  1286 3B17 85 E6		            sta tmp_x1
  1287 3B19 A5 A7		            lda ball_current_y
  1288 3B1B 85 E7		            sta tmp_y1
  1289 3B1D 60			            rts
  1290
  1291 				; Ball collides with bat
  1292 				; - start ball angle = end ball angle
  1293 				; - calculate diff between bat and ball end angle
  1294 				; - calculate new end angle
  1295 				; - Set ball at start position
  1296 				; - Prepare ball end position
  1297
  1298 3B1E			bounce_bat_ball
  1299 				; set new start of ball
  1300 				; @todo check ball angles
  1301 				; set new ball start angle (= previous end angle)
  1302 3B1E A5 AB		            lda ball_angle_end
  1303 3B20 85 AA		            sta ball_angle_start
  1304 				            
  1305 				; alternative?
  1306 				            ;ldx ball_angle_start
  1307 				            ;jsr ball_to_start_position          
  1308 3B22 20 15 3B		            jsr ball_current_to_start_position
  1309
  1310 				; which player hit the ball?
  1311 				; collision bits:
  1312 				; xxxxx1x1 : 1 is player1 collision
  1313 				; xxxx1010 : 2 is player2 collision
  1314
  1315 3B25 A5 A0		            lda mp_collision
  1316 3B27 4A			            lsr
  1317 3B28 4A			            lsr
  1318 3B29 05 A0		            ora mp_collision
  1319 3B2B 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1320
  1321 				; who's turn is it and who bounced the ball?
  1322
  1323 3B2D 25 B5		            and player_turn
  1324 3B2F F0 06		            beq no_switch_turn
  1325
  1326 3B31 A5 B5		            lda player_turn
  1327 3B33 49 03		            eor #3              ; 1 => 2, 2 => 1
  1328 3B35 85 B5		            sta player_turn
  1329
  1330 3B37			no_switch_turn
  1331 3B37 20 3E 37		            jsr turn_color_ball
  1332
  1333 3B3A A5 B5		            lda player_turn
  1334 3B3C 49 03		            eor #3
  1335 3B3E AA			            tax
  1336 3B3F CA			            dex                 ; index 0,1 (player = 1,2)
  1337 3B40 B5 9C		            lda p1_angle,x
  1338
  1339 				; Calculate diff between bat angle position and new ball start position
  1340 3B42 85 B0		            sta tmp_angle1
  1341
  1342 3B44 A5 AA		            lda ball_angle_start
  1343 3B46 85 B1		            sta tmp_angle2
  1344
  1345 3B48 20 F7 3C		            jsr calc_angle_diff
  1346
  1347 3B4B 0A			            asl
  1348 3B4C 0A			            asl
  1349 3B4D 0A			            asl
  1350 3B4E 85 B3		            sta angle_diff_bat
  1351
  1352 3B50 A5 B0		            lda tmp_angle1
  1353 3B52 18			            clc
  1354 3B53 65 B2		            adc add_to_angle
  1355 3B55 49 80		            eor #128            ; other side
  1356 3B57 85 B0		            sta tmp_angle1
  1357 				            
  1358 3B59 A5 B4		            lda tmp_angle_direction
  1359 3B5B D0 0A		            bne diff_clockwise
  1360 				; diff counter clockwise
  1361 3B5D A5 B0		            lda tmp_angle1
  1362 3B5F 18			            clc
  1363 3B60 65 B3		            adc angle_diff_bat
  1364 3B62 85 B0		            sta tmp_angle1
  1365 3B64 4C 6E 3B		            jmp calc_done            
  1366
  1367 3B67			diff_clockwise
  1368 3B67 A5 B0		            lda tmp_angle1
  1369 3B69 38			            sec
  1370 3B6A E5 B3		            sbc angle_diff_bat
  1371 3B6C 85 B0		            sta tmp_angle1
  1372 				            
  1373 				; calculation done            
  1374 3B6E			calc_done
  1375 3B6E A5 B0		            lda tmp_angle1
  1376 3B70 85 AB		            sta ball_angle_end
  1377 3B72 AA			            tax
  1378 3B73 20 7C 3B		            jsr angle_to_end_position
  1379
  1380 3B76 20 84 3A		            jsr set_cpu_angle_end
  1381
  1382 3B79 4C BB 3D		            jmp init_current_xy
  1383
  1384 				; x = angle 0..255
  1385 3B7C			angle_to_end_position
  1386 3B7C BD 00 10		            lda outer_x_256,x
  1387 3B7F 85 E8		            sta tmp_x2
  1388 3B81 BD 00 11		            lda outer_y_256,x
  1389 3B84 85 E9		            sta tmp_y2
  1390 3B86 60			            rts
  1391
  1392 3B87			wipe_ball
  1393 3B87 A5 A7		            lda ball_current_y
  1394 3B89 4A			            lsr
  1395 3B8A 69 06		            adc #ball_top_margin
  1396 3B8C AA			            tax                 ; x = real y position on screen
  1397 3B8D A9 00		            lda #0
  1398 3B8F 9D 80 0D		            sta msl_area,x
  1399 3B92 9D 81 0D		            sta msl_area+1,x
  1400 3B95 9D 82 0D		            sta msl_area+2,x
  1401 3B98 9D 83 0D		            sta msl_area+3,x
  1402 3B9B 60			            rts
  1403
  1404 3B9C			show_ball
  1405 3B9C A5 A7		            lda ball_current_y
  1406 3B9E 4A			            lsr
  1407 3B9F 69 06		            adc #ball_top_margin
  1408 3BA1 AA			            tax                 ; x = real y position on screen
  1409
  1410 3BA2 A9 02		            lda #%00000010
  1411 3BA4 9D 80 0D		            sta msl_area,x
  1412 3BA7 9D 83 0D		            sta msl_area+3,x
  1413 3BAA A9 07		            lda #%00000111
  1414 3BAC 9D 81 0D		            sta msl_area+1,x
  1415 3BAF 9D 82 0D		            sta msl_area+2,x
  1416 				            
  1417 3BB2 A5 A6		            lda ball_current_x
  1418 3BB4 4A			            lsr
  1419 3BB5 69 45		            adc #ball_left_margin
  1420 3BB7 8D 05 D0		            sta HPOSM1
  1421 3BBA 69 02		            adc #2
  1422 3BBC 8D 04 D0		            sta HPOSM0
  1423 				                        
  1424 3BBF 60			            rts
  1425 				            
  1426 3BC0			show_p1
  1427 				; y position
  1428 3BC0 A5 98		            lda player1_y
  1429 3BC2 18			            clc
  1430 3BC3 69 01		            adc #upper_margin
  1431 3BC5 AA			            tax
  1432
  1433 3BC6 A0 00		            ldy #0
  1434 3BC8			show_shape1
  1435 3BC8 B1 84		            lda (shape_ptr),y
  1436 3BCA 9D 00 0E		            sta p0_area,x 
  1437 3BCD C8			            iny
  1438 3BCE B1 84		            lda (shape_ptr),y
  1439 3BD0 9D 00 0F		            sta p2_area,x
  1440 3BD3 E8			            inx
  1441 3BD4 C8			            iny
  1442 3BD5 C0 20		            cpy #32
  1443 3BD7 D0 EF		            bne show_shape1
  1444
  1445 				; x position
  1446 3BD9 A5 94		            lda player1_x
  1447 3BDB 18			            clc
  1448 3BDC 69 20		            adc #left_margin
  1449 3BDE 85 81		            sta shadow_HPOSP0
  1450 3BE0 69 08		            adc #8
  1451 3BE2 8D 02 D0		            sta HPOSP2
  1452 3BE5 60			            rts
  1453
  1454 3BE6			show_p2
  1455 				; y position
  1456 3BE6 A5 99		            lda player2_y
  1457 3BE8 18			            clc
  1458 3BE9 69 01		            adc #upper_margin
  1459 3BEB AA			            tax
  1460
  1461 3BEC A0 00		            ldy #0
  1462 3BEE			show_shape2
  1463 3BEE B1 84		            lda (shape_ptr),y
  1464 3BF0 9D 80 0E		            sta p1_area,x
  1465 3BF3 C8			            iny
  1466 3BF4 B1 84		            lda (shape_ptr),y
  1467 3BF6 9D 80 0F		            sta p3_area,x
  1468 3BF9 E8			            inx
  1469 3BFA C8			            iny
  1470 3BFB C0 20		            cpy #32
  1471 3BFD D0 EF		            bne show_shape2
  1472
  1473 				; x position
  1474 3BFF A5 95		            lda player2_x
  1475 3C01 18			            clc
  1476 3C02 69 20		            adc #left_margin
  1477 3C04 85 82		            sta shadow_HPOSP1
  1478 3C06 69 08		            adc #8
  1479 3C08 8D 03 D0		            sta HPOSP3
  1480 3C0B 60			            rts
  1481
  1482 3C0C			wipe_p1
  1483 3C0C A5 98		            lda player1_y
  1484 3C0E 18			            clc
  1485 3C0F 69 01		            adc #upper_margin
  1486 3C11 AA			            tax
  1487 				            
  1488 3C12 A0 10		            ldy #16
  1489 3C14 A9 00		            lda #0
  1490 3C16			wipe_it1            
  1491 3C16 9D 00 0E		            sta p0_area,x 
  1492 3C19 9D 00 0F		            sta p2_area,x
  1493 3C1C E8			            inx
  1494 3C1D 88			            dey
  1495 3C1E D0 F6		            bne wipe_it1 
  1496 3C20 60			            rts
  1497
  1498 3C21			wipe_p2
  1499 3C21 A5 99		            lda player2_y
  1500 3C23 18			            clc
  1501 3C24 69 01		            adc #upper_margin
  1502 3C26 AA			            tax
  1503 				            
  1504 3C27 A0 10		            ldy #16
  1505 3C29 A9 00		            lda #0
  1506 3C2B			wipe_it2            
  1507 3C2B 9D 80 0E		            sta p1_area,x
  1508 3C2E 9D 80 0F		            sta p3_area,x
  1509 3C31 E8			            inx
  1510 3C32 88			            dey
  1511 3C33 D0 F6		            bne wipe_it2 
  1512 3C35 60			            rts
  1513
  1514 3C36			make_shape_index
  1515 3C36 A9 00		            lda #<pm_shapes
  1516 3C38 85 84		            sta shape_ptr
  1517 3C3A A9 60		            lda #>pm_shapes
  1518 3C3C 85 85		            sta shape_ptr+1
  1519 				            
  1520 3C3E A2 00		            ldx #0
  1521 3C40			fill_pm_tab
  1522 3C40 A5 84		            lda shape_ptr
  1523 3C42 9D 00 14		            sta pm_shape_lo,x
  1524 3C45 A5 85		            lda shape_ptr+1
  1525 3C47 9D 80 14		            sta pm_shape_hi,x
  1526 				            
  1527 3C4A A5 84		            lda shape_ptr
  1528 3C4C 18			            clc
  1529 3C4D 69 20		            adc #32
  1530 3C4F 85 84		            sta shape_ptr
  1531 3C51 A5 85		            lda shape_ptr+1
  1532 3C53 69 00		            adc #0
  1533 3C55 85 85		            sta shape_ptr+1
  1534 				            
  1535 3C57 E8			            inx
  1536 3C58 10 E6		            bpl fill_pm_tab
  1537 				            
  1538 3C5A 60			            rts
  1539 				            
  1540 				; there are 128 shapes, each 32 bytes
  1541
  1542 				; y = shape index
  1543 3C5B			shape_to_ptr
  1544 3C5B B9 00 14		            lda pm_shape_lo,y
  1545 3C5E 85 84		            sta shape_ptr
  1546 3C60 B9 80 14		            lda pm_shape_hi,y
  1547 3C63 85 85		            sta shape_ptr+1
  1548
  1549 3C65 60			            rts
  1550
  1551 				; turn 1024 tables into 256 bytes for ball edge lookup
  1552 3C66			make_outer_256
  1553 3C66 A0 00		            ldy #0
  1554 3C68 A2 00		            ldx #0
  1555 3C6A			conv_256
  1556 3C6A BD 00 44		            lda outer_x_tab,x
  1557 3C6D 99 00 10		            sta outer_x_256,y
  1558 3C70 BD 00 45		            lda outer_x_tab+$100,x
  1559 3C73 99 40 10		            sta outer_x_256+64,y
  1560 3C76 BD 00 46		            lda outer_x_tab+$200,x
  1561 3C79 99 80 10		            sta outer_x_256+128,y
  1562 3C7C BD 00 47		            lda outer_x_tab+$300,x
  1563 3C7F 99 C0 10		            sta outer_x_256+192,y
  1564 				            
  1565 3C82 BD 00 48		            lda outer_y_tab,x
  1566 3C85 99 00 11		            sta outer_y_256,y
  1567 3C88 BD 00 49		            lda outer_y_tab+$100,x
  1568 3C8B 99 40 11		            sta outer_y_256+64,y
  1569 3C8E BD 00 4A		            lda outer_y_tab+$200,x
  1570 3C91 99 80 11		            sta outer_y_256+128,y
  1571 3C94 BD 00 4B		            lda outer_y_tab+$300,x
  1572 3C97 99 C0 11		            sta outer_y_256+192,y
  1573
  1574 3C9A E8			            inx
  1575 3C9B E8			            inx
  1576 3C9C E8			            inx
  1577 3C9D E8			            inx
  1578 3C9E C8			            iny
  1579 3C9F C0 40		            cpy #64
  1580 3CA1 D0 C7		            bne conv_256            
  1581 3CA3 60			            rts
  1582
  1583 3CA4			show_score_p1
  1584 3CA4 AD 2E 51		            lda score_p1
  1585 3CA7 4A			            lsr
  1586 3CA8 4A			            lsr
  1587 3CA9 4A			            lsr
  1588 3CAA 4A			            lsr
  1589 3CAB F0 02		            beq do_space1
  1590 3CAD 09 10		            ora #16
  1591 3CAF			do_space1
  1592 3CAF 8D 0B 51		            sta score_chars_p1
  1593 3CB2 AD 2E 51		            lda score_p1
  1594 3CB5 29 0F		            and #15
  1595 3CB7 09 10		            ora #16
  1596 3CB9 8D 0C 51		            sta score_chars_p1+1
  1597 3CBC 60			            rts
  1598
  1599 3CBD			show_score_p2
  1600 3CBD AD 2F 51		            lda score_p2
  1601 3CC0 4A			            lsr
  1602 3CC1 4A			            lsr
  1603 3CC2 4A			            lsr
  1604 3CC3 4A			            lsr
  1605 3CC4 F0 02		            beq do_space2
  1606 3CC6 09 10		            ora #16
  1607 3CC8			do_space2
  1608 3CC8 8D 2B 51		            sta score_chars_p2
  1609 3CCB AD 2F 51		            lda score_p2
  1610 3CCE 29 0F		            and #15
  1611 3CD0 09 10		            ora #16
  1612 3CD2 8D 2C 51		            sta score_chars_p2+1
  1613 3CD5 60			            rts
  1614 				                        
  1615 3CD6			reset_score
  1616 3CD6 A9 00		            lda #0
  1617 3CD8 8D 2E 51		            sta score_p1
  1618 3CDB 8D 2F 51		            sta score_p2
  1619 3CDE 60			            rts            
  1620 				         
  1621 3CDF			inc_score_p1
  1622 3CDF F8			            sed
  1623 3CE0 AD 2E 51		            lda score_p1
  1624 3CE3 18			            clc
  1625 3CE4 69 01		            adc #1
  1626 3CE6 8D 2E 51		            sta score_p1    
  1627 3CE9 D8			            cld
  1628 3CEA 60			            rts
  1629
  1630 3CEB			inc_score_p2
  1631 3CEB F8			            sed
  1632 3CEC AD 2F 51		            lda score_p2
  1633 3CEF 18			            clc
  1634 3CF0 69 01		            adc #1
  1635 3CF2 8D 2F 51		            sta score_p2
  1636 3CF5 D8			            cld
  1637 3CF6 60			            rts
  1638
  1639 				; calculate the difference between angle1 and angle2
  1640
  1641 				; input:
  1642 				; tmp_angle1 (0..255)
  1643 				; tmp_angle2 (0..255)
  1644
  1645 				; output:
  1646 				; tmp_angle_diff, A: difference between angle1 and angle2
  1647 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1648
  1649 3CF7			calc_angle_diff
  1650 3CF7 A9 00		            lda #0
  1651 3CF9 85 B2		            sta add_to_angle
  1652 3CFB 85 B4		            sta tmp_angle_direction
  1653
  1654 				; make sure we can compare angles, otherwise add $40 to angles
  1655 3CFD A5 B0		            lda tmp_angle1
  1656 3CFF C9 C0		            cmp #$c0
  1657 3D01 B0 06		            bcs too_large
  1658 3D03 A5 B1		            lda tmp_angle2
  1659 3D05 C9 C0		            cmp #$c0
  1660 3D07 90 12		            bcc not_too_large
  1661 3D09			too_large
  1662 3D09 A5 B0		            lda tmp_angle1
  1663 3D0B 38			            sec
  1664 3D0C E9 40		            sbc #$40
  1665 3D0E 85 B0		            sta tmp_angle1
  1666 				            
  1667 3D10 A5 B1		            lda tmp_angle2
  1668 3D12 38			            sec
  1669 3D13 E9 40		            sbc #$40
  1670 3D15 85 B1		            sta tmp_angle2
  1671 				            
  1672 3D17 A9 40		            lda #$40
  1673 3D19 85 B2		            sta add_to_angle
  1674
  1675 3D1B			not_too_large
  1676 3D1B A5 B1		            lda tmp_angle2
  1677 3D1D C5 B0		            cmp tmp_angle1
  1678 3D1F 90 0A		            bcc angle2_smaller_angle1
  1679 				; ball >= play
  1680 3D21 38			            sec
  1681 3D22 E5 B0		            sbc tmp_angle1
  1682 3D24 85 B7		            sta tmp_angle_diff
  1683 				            
  1684 3D26 E6 B4		            inc tmp_angle_direction
  1685 3D28 4C 32 3D		            jmp diff_calculated
  1686 				                        
  1687 3D2B			angle2_smaller_angle1
  1688 3D2B A5 B0		            lda tmp_angle1
  1689 3D2D 38			            sec
  1690 3D2E E5 B1		            sbc tmp_angle2
  1691 3D30 85 B7		            sta tmp_angle_diff
  1692
  1693 3D32			diff_calculated
  1694 3D32 A5 B7		            lda tmp_angle_diff           
  1695 3D34 60			            rts
  1696
  1697 				; X = angle
  1698 				; lookup magnitude of angle 0 to angle X
  1699 3D35			angle_to_magnitude
  1700 3D35 BD 00 4C		            lda magnitudes_lo,x
  1701 3D38 85 B8		            sta magnitude
  1702 3D3A BD 00 4D		            lda magnitudes_hi,x
  1703 3D3D 85 B9		            sta magnitude+1
  1704 3D3F 60			            rts
  1705
  1706 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1707 3D40			calc_abs_tmp_dx
  1708 3D40 A5 E8		            lda tmp_x2
  1709 3D42 38			            sec
  1710 3D43 E5 E6		            sbc tmp_x1
  1711 3D45 B0 05		            bcs x2_le
  1712 3D47 49 FF		            eor #255
  1713 3D49 18			            clc
  1714 3D4A 69 01		            adc #1
  1715 3D4C 85 F2		x2_le       sta tmp_dx
  1716
  1717 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1718 3D4E			calc_abs_tmp_dy
  1719 3D4E A5 E9		            lda tmp_y2
  1720 3D50 38			            sec
  1721 3D51 E5 E7		            sbc tmp_y1
  1722 3D53 B0 05		            bcs y2_le
  1723 3D55 49 FF		            eor #255
  1724 3D57 18			            clc
  1725 3D58 69 01		            adc #1
  1726 3D5A 85 F3		y2_le       sta tmp_dy
  1727 3D5C 60			            rts
  1728 				            
  1729 3D5D			calc_dx_div_magnitude
  1730 3D5D A9 00		            lda #0
  1731 3D5F 85 E2		            sta _dividend
  1732 3D61 A5 F2		            lda tmp_dx
  1733 3D63 85 E3		            sta _dividend+1
  1734
  1735 3D65 A5 B9		            lda magnitude+1
  1736 3D67 85 E0		            sta _divisor
  1737 3D69 A9 00		            lda #0
  1738 3D6B 85 E1		            sta _divisor+1
  1739 				            
  1740 3D6D 20 95 3D		            jsr _div16
  1741
  1742 				; todo multiply result with velocity            
  1743 3D70 A5 E2		            lda _result
  1744 3D72 85 EE		            sta step_x
  1745 3D74 A5 E3		            lda _result+1
  1746 3D76 85 EF		            sta step_x+1
  1747 				            
  1748 3D78 60			            rts
  1749 				            
  1750 3D79			calc_dy_div_magnitude
  1751 3D79 A9 00		            lda #0
  1752 3D7B 85 E2		            sta _dividend
  1753 3D7D A5 F3		            lda tmp_dy
  1754 3D7F 85 E3		            sta _dividend+1
  1755 				            
  1756 3D81 A5 B9		            lda magnitude+1
  1757 3D83 85 E0		            sta _divisor
  1758 3D85 A9 00		            lda #0
  1759 3D87 85 E1		            sta _divisor+1
  1760
  1761 3D89 20 95 3D		            jsr _div16
  1762 				            
  1763 				; todo multiply result with velocity
  1764 3D8C A5 E2		            lda _result
  1765 3D8E 85 F0		            sta step_y
  1766 3D90 A5 E3		            lda _result+1
  1767 3D92 85 F1		            sta step_y+1
  1768 				            
  1769 3D94 60			            rts
  1770
  1771 				; divide 16bit
  1772 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1773
  1774 				; _result = _dividend / divisor
  1775
  1776 3D95 A9 00		_div16      lda #0          ;preset remainder to 0
  1777 3D97 85 E4		            sta _remainder
  1778 3D99 85 E5		            sta _remainder+1
  1779 3D9B A2 10		            ldx #16         ;repeat for each bit: ...
  1780
  1781 3D9D 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1782 3D9F 26 E3		            rol _dividend+1  
  1783 3DA1 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1784 3DA3 26 E5		            rol _remainder+1
  1785 3DA5 A5 E4		            lda _remainder
  1786 3DA7 38			            sec
  1787 3DA8 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1788 3DAA A8			            tay         ;lb result -> Y, for we may need it later
  1789 3DAB A5 E5		            lda _remainder+1
  1790 3DAD E5 E1		            sbc _divisor+1
  1791 3DAF 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1792
  1793 3DB1 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1794 3DB3 84 E4		            sty _remainder   
  1795 3DB5 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1796
  1797 3DB7 CA			_div_skip   dex
  1798 3DB8 D0 E3		            bne _div_loop 
  1799 3DBA 60			            rts
  1800
  1801 				; Calculations for step size
  1802
  1803 				; not optimised for speed or size
  1804 				; step should be set according to the angle
  1805
  1806 				; move in straight line (x1,y1) to (x2,y2)
  1807
  1808 				; 1. set start/end of line
  1809 				; set (tmp_x1, tmp_y1)
  1810 				; set (tmp_x2, tmp_y2)
  1811
  1812 				; 2. init. current_x, current_y
  1813 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1814 				; - calculates step sizes for x,y
  1815 				; - calculated directions for x,y
  1816 				;            jsr init_current_xy
  1817
  1818 				; 3. use current_x, current_y to plot or set a position
  1819 				;            lda current_x+1
  1820 				;            sta x_position
  1821 				;            lda current_y+1
  1822 				;            sta y_position
  1823 				;            jsr plot_pixel
  1824
  1825 				; 4. move current_x, current_y to next position on line
  1826 				; A=0 still moving
  1827 				;           move_current_xy
  1828
  1829 3DBB			init_current_xy
  1830 3DBB A9 7F		            lda #$7f      ; was 128 for half pixel
  1831 3DBD 85 EA		            sta current_x
  1832 3DBF 85 EC		            sta current_y
  1833
  1834 3DC1 A5 E6		            lda tmp_x1
  1835 3DC3 85 EB		            sta current_x+1
  1836 				            
  1837 3DC5 A5 E7		            lda tmp_y1
  1838 3DC7 85 ED		            sta current_y+1
  1839
  1840 				; dx = abs(tmp_x1 - tmp_x2)
  1841 3DC9 20 40 3D		            jsr calc_abs_tmp_dx
  1842
  1843 				; dy = abs(tmp_y1 - tmp_y2)
  1844 3DCC 20 4E 3D		            jsr calc_abs_tmp_dy
  1845
  1846 				; set directions
  1847 3DCF A5 E6		            lda tmp_x1
  1848 3DD1 C5 E8		            cmp tmp_x2
  1849 3DD3 90 04		            bcc x1_smaller_x2
  1850 				; x1 >= x2
  1851 3DD5 A9 01		            lda #1
  1852 3DD7 D0 02		            bne set_dir_x
  1853 3DD9			x1_smaller_x2
  1854 3DD9 A9 00		            lda #0
  1855 3DDB			set_dir_x
  1856 3DDB 85 FA		            sta dir_x
  1857 				            
  1858 3DDD A5 E7		            lda tmp_y1
  1859 3DDF C5 E9		            cmp tmp_y2
  1860 3DE1 90 04		            bcc y1_smaller_y2
  1861 				; y1 >= y2
  1862 3DE3 A9 01		            lda #1
  1863 3DE5 D0 02		            bne set_dir_y
  1864 3DE7			y1_smaller_y2
  1865 3DE7 A9 00		            lda #0
  1866 3DE9			set_dir_y
  1867 3DE9 85 FB		            sta dir_y
  1868
  1869 				; Calculate diff between start angle and end angle
  1870
  1871 3DEB A5 AA		            lda ball_angle_start
  1872 3DED 85 B0		            sta tmp_angle1
  1873 3DEF A5 AB		            lda ball_angle_end
  1874 3DF1 85 B1		            sta tmp_angle2
  1875 				            
  1876 3DF3 20 F7 3C		            jsr calc_angle_diff
  1877
  1878 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1879 3DF6 A6 B7		            ldx tmp_angle_diff
  1880 3DF8 20 35 3D		            jsr angle_to_magnitude
  1881 				            
  1882 3DFB 20 5D 3D		            jsr calc_dx_div_magnitude
  1883 3DFE 20 79 3D		            jsr calc_dy_div_magnitude
  1884 				            
  1885 				; Calculate step size by ball speed
  1886 				            
  1887 				; step_x = step_x * speed
  1888 				            
  1889 3E01 A5 EE		            lda step_x
  1890 3E03 85 F6		            sta _multiplicand
  1891 3E05 A5 EF		            lda step_x+1
  1892 3E07 85 F7		            sta _multiplicand+1
  1893 3E09 A5 AC		            lda ball_speed
  1894 3E0B 85 F8		            sta _multiplier
  1895
  1896 3E0D 20 DA 35		            jsr _multi8
  1897 				;result in .A (low byte, also in .X) and .Y (high byte)
  1898 3E10 85 EE		            sta step_x
  1899 3E12 84 EF		            sty step_x+1
  1900 3E14			skip_step_x_hi
  1901 				            
  1902 				; step_y = step_y * speed
  1903
  1904 3E14 A5 F0		            lda step_y
  1905 3E16 85 F6		            sta _multiplicand
  1906 3E18 A5 F1		            lda step_y+1
  1907 3E1A 85 F7		            sta _multiplicand+1
  1908 3E1C A5 AC		            lda ball_speed
  1909 3E1E 85 F8		            sta _multiplier
  1910
  1911 3E20 20 DA 35		            jsr _multi8
  1912 				;result in .A (low byte, also in .X) and .Y (high byte)
  1913 3E23 85 F0		            sta step_y
  1914 3E25 84 F1		            sty step_y+1
  1915 3E27			skip_step_y_hi
  1916
  1917 3E27 60			            rts
  1918
  1919 				; Move ball position 
  1920 				; Add one step, until end reached
  1921 				; Input:
  1922 				; - step size (step_x, step_y)
  1923 				; - current ball position (current_x, current_y)
  1924 				; - end position (tmp_x2, tmp_y2)
  1925 				; Output:
  1926 				; A (0 = still moving, 1 = end reached)
  1927 3E28			move_current_xy
  1928 3E28 A9 00		            lda #0
  1929 3E2A 85 FC		            sta line_end_x
  1930 3E2C 85 FD		            sta line_end_y
  1931
  1932 				; sets line end indicators here
  1933 3E2E 20 4B 3E		            jsr move_current_x
  1934 3E31 20 8B 3E		            jsr move_current_y
  1935
  1936 3E34 A5 FC		            lda line_end_x
  1937 3E36 25 FD		            and line_end_y
  1938 3E38 F0 10		            beq no_end_reached
  1939 				            
  1940 				; set current to (x2,y2)
  1941 3E3A A5 E8		            lda tmp_x2
  1942 3E3C 85 EB		            sta current_x+1
  1943 3E3E A5 E9		            lda tmp_y2
  1944 3E40 85 ED		            sta current_y+1
  1945 				            
  1946 3E42 A9 00		            lda #0
  1947 3E44 85 EA		            sta current_x
  1948 3E46 85 EC		            sta current_y
  1949 				            
  1950 3E48 A9 01		            lda #1 ; end reached
  1951 				            
  1952 3E4A			no_end_reached  ; A = 0
  1953 3E4A 60			            rts
  1954
  1955 3E4B			move_current_x
  1956 3E4B A5 FA		            lda dir_x
  1957 3E4D D0 18		            bne move_current_left
  1958
  1959 				; move right, add
  1960 3E4F A5 EA		            lda current_x
  1961 3E51 18			            clc
  1962 3E52 65 EE		            adc step_x
  1963 3E54 85 EA		            sta current_x
  1964 3E56 A5 EB		            lda current_x+1
  1965 3E58 65 EF		            adc step_x+1
  1966 3E5A 85 EB		            sta current_x+1
  1967
  1968 3E5C A5 EB		            lda current_x+1
  1969 3E5E C5 E8		            cmp tmp_x2
  1970 3E60 90 04		            bcc no_line_end
  1971 3E62			exact_end_x
  1972 3E62 A9 01		            lda #1
  1973 3E64 85 FC		            sta line_end_x 
  1974 3E66			no_line_end
  1975 3E66 60			            rts
  1976 				            
  1977 3E67			move_current_left
  1978 3E67 A5 EA		            lda current_x
  1979 3E69 38			            sec
  1980 3E6A E5 EE		            sbc step_x
  1981 3E6C 90 01		            bcc clear_skip
  1982 3E6E EA			            nop
  1983 3E6F			clear_skip
  1984 3E6F 85 EA		            sta current_x
  1985 3E71 A5 EB		            lda current_x+1
  1986 3E73 E5 EF		            sbc step_x+1
  1987 3E75 85 EB		            sta current_x+1
  1988 3E77 90 0B		            bcc below_zero
  1989 				                        
  1990 3E79 A5 E8		            lda tmp_x2
  1991 3E7B C5 EB		            cmp current_x+1
  1992 3E7D 90 E7		            bcc no_line_end
  1993 3E7F A9 01		            lda #1
  1994 3E81 85 FC		            sta line_end_x            
  1995 3E83 60			            rts
  1996 3E84			below_zero            
  1997 3E84 A9 01		            lda #1
  1998 3E86 85 FC		            sta line_end_x
  1999 3E88 85 FD		            sta line_end_y
  2000 3E8A 60			            rts
  2001 3E8B			move_current_y
  2002 3E8B A5 FB		            lda dir_y
  2003 3E8D D0 18		            bne move_current_up
  2004
  2005 				; move down, add
  2006 3E8F A5 EC		            lda current_y
  2007 3E91 18			            clc
  2008 3E92 65 F0		            adc step_y
  2009 3E94 85 EC		            sta current_y
  2010 3E96 A5 ED		            lda current_y+1
  2011 3E98 65 F1		            adc step_y+1
  2012 3E9A 85 ED		            sta current_y+1
  2013 				            
  2014 3E9C A5 ED		            lda current_y+1
  2015 3E9E C5 E9		            cmp tmp_y2
  2016 3EA0 90 C4		            bcc no_line_end
  2017 3EA2			exact_end_y
  2018 3EA2 A9 01		            lda #1
  2019 3EA4 85 FD		            sta line_end_y
  2020 3EA6 60			            rts
  2021
  2022 3EA7			move_current_up
  2023 3EA7 A5 EC		            lda current_y
  2024 3EA9 38			            sec
  2025 3EAA E5 F0		            sbc step_y
  2026 3EAC 85 EC		            sta current_y
  2027 3EAE A5 ED		            lda current_y+1
  2028 3EB0 E5 F1		            sbc step_y+1
  2029 3EB2 90 D0		            bcc below_zero
  2030 3EB4 85 ED		            sta current_y+1
  2031 				            
  2032 3EB6 A5 E9		            lda tmp_y2
  2033 3EB8 C5 ED		            cmp current_y+1
  2034 3EBA 90 AA		            bcc no_line_end
  2035 3EBC A9 01		            lda #1
  2036 3EBE 85 FD		            sta line_end_y
  2037 3EC0 60			            rts                            
  2038 				            
  2039 3EC1			init_sprites
  2040 3EC1 A2 00		            ldx #0
  2041 3EC3 8A			            txa
  2042 3EC4			set_p
  2043 3EC4 9D 00 0E		            sta p0_area,x
  2044 3EC7 9D 80 0E		            sta p1_area,x
  2045 3ECA 9D 00 0F		            sta p2_area,x
  2046 3ECD 9D 80 0F		            sta p3_area,x
  2047 3ED0 E8			            inx
  2048 3ED1 10 F1		            bpl set_p
  2049
  2050 3ED3 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2051 3ED5 8D 6F 02		            sta GPRIOR
  2052
  2053 3ED8 A9 0C		            lda #>pm_area
  2054 3EDA 8D 07 D4		            sta PMBASE
  2055
  2056 3EDD A9 03		            lda #3          ; P/M both on
  2057 3EDF 8D 1D D0		            sta GRACTL
  2058
  2059 3EE2 A9 90		            lda #$90
  2060 3EE4 8D 02 D0		            sta HPOSP2
  2061 3EE7 A9 A0		            lda #$A0
  2062 3EE9 8D 03 D0		            sta HPOSP3  
  2063 3EEC 60			            rts
  2064
  2065 3EED			init_colors
  2066 3EED A9 5A		            lda #BASE_COLOR_P1+10
  2067 3EEF 8D C2 02		            sta PCOLR2
  2068 3EF2 A9 BA		            lda #BASE_COLOR_P2+10
  2069 3EF4 8D C3 02		            sta PCOLR3
  2070 				            
  2071 3EF7 A9 00		            lda #0
  2072 3EF9 8D C6 02		            sta COLOR2
  2073
  2074 3EFC A9 0E		            lda #HEADER_FG_COLOR
  2075 3EFE 8D C5 02		            sta COLOR1
  2076
  2077 3F01 A9 50		            lda #HEADER_P1_COLOR
  2078 3F03 8D C0 02		            sta PCOLR0
  2079 3F06 A9 B0		            lda #HEADER_P2_COLOR
  2080 3F08 8D C1 02		            sta PCOLR1
  2081
  2082 3F0B 60			            rts
  2083
  2084 3F0C			previous_consol
  2085 3F0C 00			            dta 0
  2086
  2087 3F0D			current_level_index
  2088 3F0D 00			            dta 0
  2089 = 0007			NR_OF_LEVELS = 7
  2090 = 0000			INIT_LEVEL_INDEX = 0
  2091 3F0E			level_speeds
  2092 3F0E 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2093 				;level_speeds_lo
  2094 				;            dta 128
  2095 3F15			stick_slow_speed_tab
  2096 3F15 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2097 3F1C			stick_fast_speed_tab
  2098 3F1C 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2099
  2100 				; X = level (0..NR_OF_LEVELS)
  2101 3F23			set_level_ball_speed
  2102 3F23 BD 15 3F		            lda stick_slow_speed_tab,x
  2103 3F26 85 88		            sta stick_slow_speed
  2104 3F28 BD 1C 3F		            lda stick_fast_speed_tab,x
  2105 3F2B 85 89		            sta stick_fast_speed
  2106
  2107 3F2D BD 0E 3F		            lda level_speeds,x
  2108 3F30 85 AC		            sta ball_speed
  2109 3F32 8A			            txa
  2110 3F33 18			            clc
  2111 3F34 69 01		            adc #1
  2112 3F36 09 10		            ora #16
  2113 3F38 8D AB 52		            sta level_char
  2114 3F3B 60			            rts
  2115 				            
  2116 3F3C			increase_level
  2117 3F3C EE 0D 3F		            inc current_level_index
  2118 3F3F AD 0D 3F		            lda current_level_index
  2119 3F42 C9 07		            cmp #NR_OF_LEVELS
  2120 3F44 D0 05		            bne ok_level
  2121 3F46 A9 00		            lda #INIT_LEVEL_INDEX
  2122 3F48 8D 0D 3F		            sta current_level_index
  2123 3F4B			ok_level           
  2124 3F4B 60			            rts
  2125
  2126 3F4C			increase_player_mode
  2127 3F4C E6 8A		            inc player_mode
  2128 3F4E A5 8A		            lda player_mode
  2129 3F50 C9 03		            cmp #NR_OF_PLAYER_MODES
  2130 3F52 D0 04		            bne ok_player_mode
  2131 3F54 A9 00		            lda #INIT_PLAYER_MODE
  2132 3F56 85 8A		            sta player_mode
  2133 3F58			ok_player_mode
  2134 3F58 60			            rts
  2135
  2136 3F59			show_player_mode
  2137 3F59 A6 8A		            ldx player_mode
  2138 3F5B BD 3F 53		            lda player_mode_lo,x
  2139 3F5E 8D F9 50		            sta menu_line2_ptr
  2140 3F61 BD 42 53		            lda player_mode_hi,x
  2141 3F64 8D FA 50		            sta menu_line2_ptr+1
  2142 3F67 60			            rts
  2143
  2144 3F68			            .align $100
  2145 4000			inner_x_tab
  2146 = 4100			inner_y_tab = *+$100
  2147 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2148 				      
  2149 4200			            .align $400            
  2150 				; outer circle 1024 plot points on 360 degrees
  2151 4400			outer_x_tab
  2152 = 4800			outer_y_tab = *+1024
  2153 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2154 				           
  2155 4C00			            .align $400
  2156 				; table of magnitudes (length) between angle 0 and 0..255
  2157 				; fixed point 8.8 : hi.lo
  2158 4C00			magnitudes_lo
  2159 = 4D00			magnitudes_hi = *+256
  2160 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2161
  2162 4E00			            .align $400
  2163 5000			display_list
  2164 5000-512F> C2		            dta $42+128         ; dli_header
  2165 5001 06 51		            dta a(score_line)
  2166
  2167 				; 102 x 40 = 4080 bytes            
  2168 5003 4F			            dta $4f
  2169 5004 00 70		            dta a(screen_mem1)
  2170 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2171 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2172 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2173 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2174
  2175 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2176 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2177 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2178 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2179
  2180 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2181 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2182 5055			menu_dl_hook
  2183 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2184 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2185
  2186 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2187
  2188 				; 42 + 60 = 102, 4080 bytes
  2189 506B 4F			            dta $4f
  2190 506C 00 80		            dta a(screen_mem2)
  2191 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2192
  2193 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2194 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2195 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2196 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2197
  2198 5095 0F 0F		            dta $0f,$0f
  2199
  2200 				; 60 lines
  2201 5097			menu_dl_end
  2202 5097 4F			            dta $4f
  2203 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2204 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2205 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2206 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2207 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2208
  2209 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2210 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2211 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2212 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2213
  2214 				; 20 x 40 = 800
  2215 50D5 4F			            dta $4f
  2216 50D6 00 90		            dta a(screen_mem3)       
  2217 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2218 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2219 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2220 				            
  2221 50EB 41			            dta $41
  2222 50EC 00 50		            dta a(display_list)
  2223
  2224 50EE			menu_dl_part
  2225 50EE 80			            dta 128 ; dli_menu
  2226 50EF 20			            dta $20
  2227 50F0 42			            dta $42
  2228 50F1 00 52		            dta a(rotor_logo_text)
  2229 50F3 02			            dta 2
  2230 50F4 30			            dta $30
  2231 50F5 46			            dta $46
  2232 50F6			menu_line1_ptr
  2233 50F6 50 52		            dta a(controller_text)
  2234 50F8 46			            dta $46
  2235 50F9			menu_line2_ptr
  2236 50F9 64 52		            dta a(two_player_text)
  2237 50FB 46			            dta $46
  2238 50FC			menu_line3_ptr
  2239 50FC 9F 52		            dta a(level_text)
  2240 50FE 30			            dta $30
  2241 50FF 42			            dta $42
  2242 5100 B3 52		            dta a(start_text)
  2243 5102 10			            dta $10
  2244 5103 01			            dta $01 ; jump
  2245 5104 97 50		            dta a(menu_dl_end)
  2246
  2247 5106			score_line  
  2248 5106 00 2F 2E 25 00	            dta d' ONE '
  2249 510B			score_chars_p1
  2250 510B 0D 0D 00		            dta d'-- '
  2251
  2252 510E 00 00 00 00 00 00 +             dta d'          '
  2253 5118 00 00 00 00 00 00 +             dta d'          '
  2254
  2255 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2256 512B			score_chars_p2
  2257 512B 0D 0D 00		            dta d'-- '
  2258
  2259 512E 00			score_p1    dta 0
  2260 512F 00			score_p2    dta 0
  2261
  2262 5130			            .align $100
  2263 5200			rotor_logo_text
  2264 5200-5344> 00 00 00 00 +             dta d'              '
  2265 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2266 521A 40			            dta $40
  2267 521B 00 00 00 00 00 00 +             dta d'             '
  2268 5228 00 00 00 00 00 00 +             dta d'              '
  2269 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2270 5242 00 00 00 00 00 00 +             dta d'              '
  2271
  2272 5250			controller_text
  2273 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2274 525A			driver_screen
  2275 525A 00 00 00 00 00 00 +             dta d'          '
  2276
  2277 5264			two_player_text
  2278 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2279
  2280 5278			one_player_text
  2281 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2282
  2283 528B			demo_player_text
  2284 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2285
  2286 529F			level_text
  2287 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2288 52AB			level_char            
  2289 52AB 11 00 00 00 00 00 +             dta d'1       '
  2290
  2291 52B3			start_text
  2292 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2293 52DB			stick_text
  2294 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2295 52E3			paddle_text
  2296 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2297 52EB			driving_text
  2298 52EB 24 32 29 36 29 2E +             dta d'DRIVING '
  2299 52F3			computer_text
  2300 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2301
  2302 52FB			empty_text
  2303 52FB 00 00 00 00 00 00 +             dta d'                    '
  2304 530F			winner_one_text
  2305 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2306 5323			winner_two_text
  2307 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2308
  2309 5337			driver_text_lo
  2310 5337 DB			            dta <stick_text
  2311 5338 E3			            dta <paddle_text
  2312 5339 EB			            dta <driving_text
  2313 533A F3			            dta <computer_text
  2314 				            
  2315 533B			driver_text_hi
  2316 533B 52			            dta >stick_text
  2317 533C 52			            dta >paddle_text
  2318 533D 52			            dta >driving_text
  2319 533E 52			            dta >computer_text
  2320
  2321 533F			player_mode_lo
  2322 533F 64			            dta <two_player_text
  2323 5340 78			            dta <one_player_text
  2324 5341 8B			            dta <demo_player_text
  2325
  2326 5342			player_mode_hi
  2327 5342 52			            dta >two_player_text
  2328 5343 52			            dta >one_player_text
  2329 5344 52			            dta >demo_player_text
  2330
  2331 				; 4 KB
  2332 				; 128 x 32 bytes shapes
  2333 5345			            .align $1000
  2334 6000			pm_shapes
  2335 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2336
  2337 				; 9 KB for backdrop image
  2338 7000			            .align $1000
  2339 = 7000			screen_mem1 = * ; 4K
  2340 				;            org screen_mem1
  2341 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2342
  2343 7FF0			            .align $1000
  2344 = 8000			screen_mem2 = * ; 4K
  2345 				;            org screen_mem2
  2346 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2347
  2348 8FF0			            .align $1000
  2349 = 9000			screen_mem3 = * ; 1K
  2350 				;            org screen_mem3
  2351 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2352
  2353 02E0-02E1> 47 35		            run main
