mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-16
     4 				; Version 2.5.1
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for Atari mouse
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D209			KBCODE      = $d209
   102
   103 = D20A			RANDOM      = $d20a
   104
   105 = D20F			SKSTAT      = $d20f
   106
   107 = D300			PORTA       = $d300
   108
   109 = D407			PMBASE      = $d407
   110 = D40A			WSYNC       = $d40a
   111 = D40E			NMIEN       = $d40e
    19
    20 				; color scheme
    21 = 0050			BASE_COLOR_P1   = $50   ; purple
    22 = 00B0			BASE_COLOR_P2   = $b0   ; green
    23
    24 = 000E			HEADER_FG_COLOR = 14
    25 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    26 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    27
    28 				; must be in decimal format, so $11 is 11
    29 = 0011			MAX_SCORE   = $11
    30
    31 = 0C00			pm_area     = $0c00
    32 = 0D80			msl_area    = pm_area+$180
    33 = 0E00			p0_area     = pm_area+$200
    34 = 0E80			p1_area     = pm_area+$280
    35 = 0F00			p2_area     = pm_area+$300
    36 = 0F80			p3_area     = pm_area+$380
    37
    38 				; outer tables 256 for 360 degrees
    39 = 1000			outer_x_256     = $1000
    40 = 1100			outer_y_256     = $1100
    41
    42 = 1200			screen_y_lo     = $1200
    43 = 1300			screen_y_hi     = $1300
    44
    45 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    46 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    47
    48 = 0140			WIDTH           = 320
    49 = 00C0			HEIGHT          = 192
    50
    51 = 0028			SCREEN_WIDTH    = 40
    52
    53 = 0030			outer_x_margin  = 48 ;47-32
    54 = 0040			inner_x_margin  = 64
    55
    56 = 00A0			circle_center_x = WIDTH/2
    57 = 0060			circle_center_y = HEIGHT/2
    58
    59 = 0006			ball_top_margin     = 6
    60 = 0045			ball_left_margin    = 64+5
    61
    62 				; pm upper margin
    63 = 0001			upper_margin    = 1
    64 = 0020			left_margin     = 32
    65
    66 = 0080			music_toggle    = $80
    67
    68 = 0081			shadow_HPOSP0   = $81
    69 = 0082			shadow_HPOSP1   = $82
    70
    71 = 0083			winner_color    = $83
    72
    73 = 0084			shape_ptr       = $84
    74 = 0086			tmp_screen      = $86
    75
    76 = 0088			stick_slow_speed = $88
    77 = 0089			stick_fast_speed = $89
    78
    79 = 008A			player_mode     = $8a
    80 = 0000			MODE_2_PLAYER   = 0
    81 = 0001			MODE_1_PLAYER   = 1
    82 = 0002			MODE_DEMO       = 2
    83 = 0003			NR_OF_PLAYER_MODES = 3
    84 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    85
    86 = 008B			player_mode_saved = $8b
    87
    88 = 008C			game_state      = $8c
    89 = 0000			STATE_IN_GAME   = 0
    90 = 0001			STATE_IN_MENU   = 1
    91 = 0002			STATE_IN_END    = 2
    92
    93 = 008D			volume_hit_bat  = $8d
    94 = 008E			volume_hit_edge = $8e
    95
    96 = 008F			end_screen_delay = $8f
    97
    98 				; player vars must be in sequence for zp,x indexing
    99
   100 = 0090			p1_shape        = $90
   101 = 0091			p2_shape        = $91
   102
   103 = 0094			player1_x       = $94
   104 = 0095			player2_x       = $95
   105
   106 = 0098			player1_y       = $98
   107 = 0099			player2_y       = $99
   108
   109 = 009C			p1_angle        = $9c
   110 = 009D			p2_angle        = $9d
   111
   112 = 00A0			mp_collision    = $a0
   113 = 00A1			in_collision    = $a1
   114 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   115 = 00A3			edge_delay      = $a3
   116 = 00A4			bat_collision_delay = $a4
   117
   118 				; ball vars
   119 = 00A6			ball_current_x      = $a6
   120 = 00A7			ball_current_y      = $a7
   121 = 00AA			ball_angle_start    = $aa
   122 = 00AB			ball_angle_end      = $ab
   123 = 00AC			ball_speed          = $ac
   124
   125 = 00AD			edge_collision      = $ad
   126 = 00AE			edge_hit_count      = $ae
   127
   128 = 00B0			tmp_angle1          = $b0
   129 = 00B1			tmp_angle2          = $b1
   130 = 00B2			add_to_angle        = $b2
   131 = 00B3			angle_diff_bat      = $b3
   132 = 00B4			tmp_angle_direction = $b4
   133 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   134 = 00B6			game_restart        = $b6
   135 = 00B7			tmp_angle_diff      = $b7
   136 = 00B8			magnitude           = $b8       ; word
   137
   138 = 00BA			robot_angle_end     = $ba       ; 2 bytes
   139 = 00BA			robot1_angle_end    = robot_angle_end
   140 = 00BB			robot2_angle_end    = robot_angle_end+1
   141
   142 				; $c0 - $df free for music
   143
   144 = 00E0			_divisor    = $e0   ; word
   145 = 00E2			_dividend   = $e2   ; word
   146 = 00E4			_remainder  = $e4   ; word
   147 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   148
   149 = 00E6			tmp_x1      = $e6   ; byte
   150 = 00E7			tmp_y1      = $e7   ; byte
   151 = 00E8			tmp_x2      = $e8   ; byte
   152 = 00E9			tmp_y2      = $e9   ; byte
   153
   154 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   155 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   156
   157 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   158 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   159
   160 = 00F2			tmp_dx      = $f2  ; byte
   161 = 00F3			tmp_dy      = $f3  ; byte
   162
   163 = 00F6			_multiplicand   = $f6   ; word
   164 = 00F8			_multiplier     = $f8   ; byte
   165
   166 				; direction:
   167 				; 0 : x1<x2 or y1<y2 = add
   168 				; 1 ; x1>=y2 or y1>=y2 = subtract
   169
   170 = 00FA			dir_x       = $fa  ; byte
   171 = 00FB			dir_y       = $fb  ; byte
   172
   173 = 00FC			line_end_x  = $fc  ; byte
   174 = 00FD			line_end_y  = $fd  ; byte
   175
   176 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   177
   178 				; real data is loaded at $2000 ($1700+$900)
   179 BE10			            org $1700
   180 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   181
   182 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 2
    17
    18 				; previous mouse value (player 1,2)
    19 3402			prev_mouse_value
    20 = 3402			            .ds 2
    21
    22 3404			driver_init
    23 3404-4066> A9 03		            lda #3  ; unknown
    24 3406 8D BE 32		            sta driver_mode
    25
    26 3409 8D 02 34		            sta prev_mouse_value
    27 340C 8D 03 34		            sta prev_mouse_value+1
    28
    29 340F AD 70 02		            lda PADDL0
    30 3412 8D 00 34		            sta prev_paddle_value
    31 3415 AD 71 02		            lda PADDL1
    32 3418 8D 01 34		            sta prev_paddle_value+1
    33
    34 341B A9 00		            lda #0
    35 341D 85 9C		            sta p1_angle
    36 341F A9 80		            lda #128
    37 3421 85 9D		            sta p2_angle
    38
    39 				; init paddle table
    40
    41 3423 A9 00		            lda #0
    42 3425 8D BC 32		            sta driver_tmp
    43 3428 8D BD 32		            sta driver_tmp+1
    44 				            
    45 342B A2 00		            ldx #0
    46 342D			store_pv
    47 342D AD BD 32		            lda driver_tmp+1
    48 3430 9D 00 33		            sta paddle_to_256,x
    49 				            
    50 3433 AD BC 32		            lda driver_tmp
    51 3436 18			            clc
    52 3437 69 1F		            adc #<paddle_add
    53 3439 8D BC 32		            sta driver_tmp
    54 343C AD BD 32		            lda driver_tmp+1
    55 343F 69 01		            adc #>paddle_add
    56 3441 8D BD 32		            sta driver_tmp+1
    57 3444 E8			            inx
    58 3445 E0 E5		            cpx #paddle_vals
    59 3447 D0 E4		            bne store_pv
    60 3449 60			            rts
    61
    62 344A			reset_driver_mode
    63 344A A9 03		            lda #3  ; unknown
    64 344C 8D BE 32		            sta driver_mode     ; reset driver mode
    65 344F 60			            rts
    66
    67 				; stick detect by using left/right
    68 				; paddle by connecting/rotate
    69 				; mouse controller by movement
    70
    71 				; return A = driver mode
    72 				; 0 = stick detected
    73 				; 1 = paddle detected
    74 				; 2 = mouse detected
    75
    76 3450			driver_detect
    77 3450 A2 00		            ldx #0
    78 3452 20 88 34		            jsr detect_paddle
    79 3455 D0 07		            bne paddle_detected
    80 3457 A2 01		            ldx #1
    81 3459 20 88 34		            jsr detect_paddle
    82 345C F0 06		            beq no_paddle_detected
    83
    84 345E			paddle_detected
    85 345E A9 01		            lda #1
    86 3460 8D BE 32		            sta driver_mode
    87 3463 60			            rts
    88
    89 3464			no_paddle_detected
    90
    91 3464 AD BE 32		            lda driver_mode
    92 3467 C9 02		            cmp #2
    93 3469 F0 11		            beq mouse_detected
    94
    95 				; not connected: mouse or stick?
    96
    97 346B			detect_mouse_or_stick
    98 346B AD 78 02		            lda STICK0
    99 346E C9 0F		            cmp #15
   100 3470 D0 04		            bne mouse_or_stick
   101
   102 3472 AD BE 32		            lda driver_mode
   103 3475 60			            rts
   104
   105 3476			mouse_or_stick
   106 3476 AA			            tax
   107 3477 BD 9E 35		            lda stick_detect_table,x
   108 347A D0 06		            bne stick_detected
   109
   110 347C			mouse_detected
   111 347C A9 02		            lda #2
   112 347E 8D BE 32		            sta driver_mode
   113 3481 60			            rts
   114
   115 3482			stick_detected
   116 3482 A9 00		            lda #0
   117 3484 8D BE 32		            sta driver_mode
   118 3487 60			            rts
   119
   120 = 0008			PADDLE_JITTER = 8
   121
   122 3488			detect_paddle
   123 3488 BD 70 02		            lda PADDL0,x
   124 348B C9 DC		            cmp #228-PADDLE_JITTER
   125 348D B0 27		            bcs paddle_not_detected
   126 348F C9 08		            cmp #PADDLE_JITTER
   127 3491 90 23		            bcc paddle_not_detected
   128
   129 				; paddle in range 0+jitter .. 228-jitter
   130
   131 3493 A9 E4		            lda #228    ; prev_paddle_value,x
   132 3495 38			            sec
   133 3496 E9 08		            sbc #PADDLE_JITTER
   134 3498 C9 E4		            cmp #228    ;PADDL0,x
   135 349A B0 0B		            bcs paddle_is_detected
   136
   137 349C BD 00 34		            lda prev_paddle_value,x
   138 349F 18			            clc
   139 34A0 69 08		            adc #8
   140 34A2 DD 70 02		            cmp PADDL0,x
   141 34A5 B0 09		            bcs paddle_value_within_bounds
   142
   143 34A7			paddle_is_detected
   144 34A7 BD 70 02		            lda PADDL0,x
   145 34AA 9D 00 34		            sta prev_paddle_value,x
   146 34AD A9 01		            lda #1
   147 34AF 60			            rts
   148
   149 34B0			paddle_value_within_bounds
   150 34B0 BD 70 02		            lda PADDL0,x
   151 34B3 9D 00 34		            sta prev_paddle_value,x
   152
   153 34B6			paddle_not_detected
   154 34B6 A9 00		            lda #0
   155 34B8 60			            rts
   156
   157 				; move player 1/2
   158 				; right - clockwise, left = anti-clockwise
   159
   160 				; X = 0, player 1
   161 				; X = 1, player 2
   162
   163 				; A = driver mode:
   164 				; 0 : stick
   165 				; 1 : paddle
   166 				; 2 : mouse
   167 				; 3 : unknown
   168
   169 34B9			main_driver
   170 34B9 AC BE 32		            ldy driver_mode
   171 34BC B9 CB 34		            lda driver_lo,y
   172 34BF 8D C9 34		            sta driver_ptr
   173 34C2 B9 CF 34		            lda driver_hi,y
   174 34C5 8D CA 34		            sta driver_ptr+1
   175
   176 = 34C9			driver_ptr = *+1
   177 34C8 4C FF FF		            jmp $ffff  
   178
   179 34CB			driver_lo
   180 34CB D3			            dta <driver_stick
   181 34CC 41			            dta <driver_paddle
   182 34CD 77			            dta <driver_mouse
   183 34CE 9D			            dta <driver_unknown
   184
   185 34CF			driver_hi
   186 34CF 34			            dta >driver_stick
   187 34D0 35			            dta >driver_paddle
   188 34D1 35			            dta >driver_mouse
   189 34D2 35			            dta >driver_unknown
   190
   191 				; joystick driver
   192
   193 34D3			driver_stick
   194 34D3 BD 78 02		            lda STICK0,x
   195 34D6 C9 0F		            cmp #15
   196 34D8 F0 31		            beq move_done
   197 34DA C9 0B		            cmp #11
   198 34DC D0 16		            bne no_left
   199
   200 34DE B5 9C		            lda p1_angle,x
   201 34E0 38			            sec
   202 34E1 E5 88		            sbc stick_slow_speed
   203 34E3 95 9C		            sta p1_angle,x
   204
   205 34E5 BD 84 02		            lda STRIG0,x
   206 34E8 D0 07		            bne no_fast
   207
   208 34EA B5 9C		            lda p1_angle,x
   209 34EC 38			            sec
   210 34ED E5 89		            sbc stick_fast_speed
   211 34EF 95 9C		            sta p1_angle,x
   212 34F1			no_fast
   213 				            
   214 34F1 4C 0B 35		            jmp move_done
   215 34F4 C9 07		no_left     cmp #7
   216 34F6 D0 13		            bne move_done
   217
   218 34F8 B5 9C		            lda p1_angle,x
   219 34FA 18			            clc
   220 34FB 65 88		            adc stick_slow_speed
   221 34FD 95 9C		            sta p1_angle,x
   222
   223 34FF BD 84 02		            lda STRIG0,x
   224 3502 D0 07		            bne no_fast_right
   225
   226 3504 B5 9C		            lda p1_angle,x
   227 3506 18			            clc
   228 3507 65 89		            adc stick_fast_speed
   229 3509 95 9C		            sta p1_angle,x
   230 350B			no_fast_right
   231 350B			move_done
   232 350B 60			            rts
   233
   234 				; check if player1 button is pressed
   235 				; A=0 not pressed, 1=pressed
   236
   237 350C			is_player1_button_pressed
   238 350C AD BE 32		            lda driver_mode
   239 350F C9 01		            cmp #1
   240 3511 F0 07		            beq check_player1_paddle_fire
   241
   242 3513 AD 84 02		            lda STRIG0
   243 3516 F0 1C		            beq fire_pressed
   244 3518 D0 24		            bne fire_not_pressed
   245
   246 351A			check_player1_paddle_fire
   247 351A AD 78 02		            lda STICK0
   248 351D C9 0B		            cmp #11
   249 351F F0 13		            beq fire_pressed
   250 3521 D0 1B		            bne fire_not_pressed
   251
   252 				; X=port number to check (paddle uses only port 1)
   253 				; check fire button (paddle uses left/right stick as fire button)
   254 				; A=0 not pressed, 1=pressed
   255
   256 3523			is_both_buttons
   257 3523 AD BE 32		            lda driver_mode
   258 3526 C9 01		            cmp #1
   259 3528 F0 0D		            beq check_paddle_fire
   260
   261 352A AD 84 02		            lda STRIG0
   262 352D D0 0F		            bne fire_not_pressed
   263 352F AD 85 02		            lda STRIG1
   264 3532 D0 0A		            bne fire_not_pressed
   265
   266 3534			fire_pressed
   267 3534 A9 01		            lda #1
   268 3536 60			            rts
   269
   270 3537			check_paddle_fire
   271 3537 AD 78 02		            lda STICK0
   272 353A C9 03		            cmp #3
   273 353C F0 F6		            beq fire_pressed
   274
   275 353E			fire_not_pressed
   276 353E A9 00		            lda #0
   277 3540 60			            rts
   278
   279 				; paddle driver
   280 				            
   281 3541			driver_paddle            
   282 3541 BD 70 02		            lda PADDL0,x
   283 3544 9D 00 34		            sta prev_paddle_value,x
   284 3547 A8			            tay
   285 3548 B9 00 33		            lda paddle_to_256,y
   286 354B 5D BE 35		            eor paddle_offsets,x
   287 354E 95 9C		            sta p1_angle,x
   288 3550 60			            rts
   289
   290 				; keyboard driver (always player1)
   291 				; not used here, but might come in handy sometime
   292
   293 3551			driver_keyboard
   294 3551 A2 00		            ldx #0          ; player 1
   295
   296 3553 AD 0F D2		            lda SKSTAT
   297 3556 29 04		            and #4
   298 3558 D0 1C		            bne key_done
   299
   300 355A			still_pressed
   301 355A AD 09 D2		            lda KBCODE
   302 355D C9 16		            cmp #$16        ; $56 including SHIFT
   303 355F D0 0A		            bne no_z_key
   304
   305 3561 B5 9C		            lda p1_angle,x
   306 3563 18			            clc
   307 3564 65 88		            adc stick_slow_speed
   308 3566 95 9C		            sta p1_angle,x
   309
   310 3568 4C 76 35		            jmp key_done
   311
   312 356B C9 17		no_z_key    cmp #$17        ; $57 including SHIFT
   313 356D D0 07		            bne key_done
   314
   315 356F B5 9C		            lda p1_angle,x
   316 3571 38			            sec
   317 3572 E5 88		            sbc stick_slow_speed
   318 3574 95 9C		            sta p1_angle,x
   319 3576			key_done
   320 3576 60			            rts
   321
   322 				; mouse driver (Atari ST compatible)
   323
   324 3577			driver_mouse
   325 3577 60			            rts
   326 				;            lda STICK0,x
   327 				;            eor #15
   328 				;            jmp driver_mouse_main
   329
   330 3578			driver_mouse_fast_p1
   331 3578 AD 00 D3		            lda PORTA
   332 357B A2 00		            ldx #0
   333 357D 4C 89 35		            jmp driver_mouse_main
   334
   335 3580			driver_mouse_fast_p2
   336 3580 AD 00 D3		            lda PORTA
   337 3583 4A			            lsr
   338 3584 4A			            lsr
   339 3585 4A			            lsr
   340 3586 4A			            lsr
   341 3587 A2 01		            ldx #1
   342 				; have to call this many times per frame for each player
   343 3589			driver_mouse_main
   344 3589 29 03		            and #%00000011
   345 358B 48			            pha
   346 358C 1D 02 34		            ora prev_mouse_value,x
   347 358F A8			            tay
   348 3590 68			            pla
   349 3591 0A			            asl
   350 3592 0A			            asl
   351 3593 9D 02 34		            sta prev_mouse_value,x  ; store previous bits at 0000AA00 position for next time
   352
   353 3596 B9 AE 35		            lda mouse_transitions,y
   354 3599 75 9C		            adc p1_angle,x
   355 359B 95 9C		            sta p1_angle,x
   356
   357 359D			driver_unknown
   358 359D 60			            rts
   359
   360 359E			stick_detect_table
   361 359E 00			            dta 0       ; 0  -
   362 359F 00			            dta 0       ; 1  -
   363 35A0 00			            dta 0       ; 2  -
   364 35A1 00			            dta 0       ; 3  -
   365 35A2 00			            dta 0       ; 4  -
   366 35A3 01			            dta 1       ; 5  RIGHT/DOWN
   367 35A4 01			            dta 1       ; 6  RIGHT/UP
   368 35A5 01			            dta 1       ; 7  RIGHT
   369 35A6 00			            dta 0       ; 8  -
   370 35A7 01			            dta 1       ; 9  LEFT/DOWN
   371 35A8 01			            dta 1       ; 10 LEFT/UP
   372 35A9 01			            dta 1       ; 11 LEFT
   373 35AA 00			            dta 0       ; 12 -
   374 35AB 01			            dta 1       ; 13 DOWN
   375 35AC 01			            dta 1       ; 14 UP
   376 35AD 01			            dta 1       ; 15 (not connected = default stick)
   377
   378 				; nibble coded transitions for mouse
   379 				; 15,13,12,14 = anti-clockwise
   380 				; 15,14,12,13 = clockwise
   381 				; only lowest 2 bits change, so we need 16 values for all transitions
   382
   383 				; index is the combined value of nibble AABB
   384 				; where AA is previous bits and BB current bits
   385 35AE			mouse_transitions
   386 35AE 00			            dta 0   ; 00 -> 00 (12 -> 12)
   387 35AF 02			            dta 2   ; 00 -> 01 (12 -> 13)
   388 35B0 FE			            dta 254 ; 00 -> 10 (12 -> 14)
   389 35B1 00			            dta 0   ; 00 -> 11 (12 -> 15)
   390 35B2 FE			            dta 254 ; 01 -> 00 (13 -> 12)
   391 35B3 00			            dta 0   ; 01 -> 01 (13 -> 13)
   392 35B4 00			            dta 0   ; 01 -> 10 (13 -> 14)
   393 35B5 02			            dta 2   ; 01 -> 11 (13 -> 15)
   394 35B6 02			            dta 2   ; 10 -> 00 (14 -> 12)
   395 35B7 00			            dta 0   ; 10 -> 01 (14 -> 13)
   396 35B8 00			            dta 0   ; 10 -> 10 (14 -> 14)
   397 35B9 FE			            dta 254 ; 10 -> 11 (14 -> 15)
   398 35BA 00			            dta 0   ; 11 -> 00 (15 -> 12)
   399 35BB FE			            dta 254 ; 11 -> 01 (15 -> 13)
   400 35BC 02			            dta 2   ; 11 -> 10 (15 -> 14)
   401 35BD 00			            dta 0   ; 11 -> 11 (15 -> 15)
   402
   403 35BE			paddle_offsets
   404 35BE 00 00		            dta 0,0
   183
   184 35C0			reset_pressed
   185 35C0 20 00 9C		            jsr intro_main
   186
   187 35C3			main
   188 35C3 A9 FF		            lda #255
   189 35C5 8D FC 02		            sta 764
   190
   191 				; for fast loaders, wait 10 seconds or continue with spacebar
   192 35C8			wait_a_sec
   193 35C8 AD FC 02		            lda 764
   194 35CB C9 FF		            cmp #255
   195 35CD D0 06		            bne any_key_pressed
   196
   197 35CF A5 13		            lda 19
   198 35D1 C9 02		            cmp #2
   199 35D3 90 F3		            bcc wait_a_sec
   200
   201 35D5			any_key_pressed
   202 35D5 A9 FF		            lda #255
   203 35D7 8D FC 02		            sta 764
   204
   205 				; start the game!
   206 				 
   207 35DA A9 00		            lda #0
   208 35DC 8D 2F 02		            sta SDMCTL
   209 35DF 85 B6		            sta game_restart
   210 35E1 85 8F		            sta end_screen_delay
   211 35E3 85 83		            sta winner_color
   212
   213 35E5 A9 80		            lda #128
   214 35E7 85 8D		            sta volume_hit_bat
   215 35E9 85 8E		            sta volume_hit_edge
   216 35EB 85 80		            sta music_toggle        ; 128 = on, 0 = off
   217
   218 35ED A9 01		            lda #1
   219 35EF 8D 44 02		            sta 580 ; coldstart
   220
   221 				;            lda #1
   222 				;            sta 9   ; boot
   223
   224 				;            lda #<reset_pressed
   225 				;            sta $0a
   226 				;            lda #>reset_pressed
   227 				;            sta $0b
   228
   229 35F2 20 04 34		            jsr driver_init
   230
   231 35F5 20 49 3D		            jsr make_shape_index
   232
   233 35F8 20 79 3D		            jsr make_outer_256
   234
   235 35FB 20 53 37		            jsr make_screen_y_tab
   236
   237 35FE 20 9E 37		            jsr invert_backdrop
   238 3601 A9 60		            lda #$60
   239 3603 8D 9E 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   240
   241 3606 20 E9 3D		            jsr reset_score
   242 3609 20 B7 3D		            jsr show_score_p1
   243 360C 20 D0 3D		            jsr show_score_p2
   244
   245 360F 20 BE 3F		            jsr init_sprites
   246 3612 20 EA 3F		            jsr init_colors
   247
   248 				; init. game vars
   249 3615 A2 00		            ldx #INIT_LEVEL_INDEX
   250 3617 8E 0A 40		            stx current_level_index
   251 361A 20 20 40		            jsr set_level_ball_speed
   252
   253 361D A9 00		            lda #INIT_PLAYER_MODE
   254 361F 85 8A		            sta player_mode
   255 3621 85 8B		            sta player_mode_saved
   256 3623 20 58 40		            jsr show_player_mode
   257
   258 3626 A9 01		            lda #STATE_IN_MENU
   259 3628 85 8C		            sta game_state           ; start with menu
   260
   261 362A 20 6E 31		            jsr music_init
   262
   263 362D 20 E3 37		            jsr show_menu_options
   264
   265 3630 20 EB 38		            jsr reset_autostart_demo
   266
   267 3633 A9 00		            lda #<display_list
   268 3635 8D 30 02		            sta SDLSTL
   269 3638 A9 50		            lda #>display_list
   270 363A 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 363D A9 C0		            lda #$c0
   275 363F 8D 0E D4		            sta NMIEN
   276
   277 3642 A9 07		            lda #7          ; sets VVBLKI
   278 3644 A0 35		            ldy #<vbi
   279 3646 A2 38		            ldx #>vbi
   280 3648 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 364B			wait_mouse
   283 364B AD BE 32		            lda driver_mode
   284 364E C9 02		            cmp #2
   285 3650 D0 F9		            bne wait_mouse
   286
   287 3652 A5 8A		            lda player_mode
   288 3654 C9 01		            cmp #MODE_1_PLAYER
   289 3656 F0 03		            beq single_driver
   290 3658 20 80 35		            jsr driver_mouse_fast_p2
   291 365B			single_driver
   292 365B 20 78 35		            jsr driver_mouse_fast_p1
   293
   294 365E 4C 4B 36		            jmp wait_mouse
   295
   296 				;------------------------
   297 				; 8bit * 8bit = 16bit multiply
   298 				; By White Flame
   299 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   300 				; uses extra zp var _multiplicand+1
   301
   302 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   303 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   304
   305 				; In this version, both inputs must be unsigned
   306 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   307
   308 3661			_multi8
   309 3661 A9 00		            lda #$00
   310 3663 A8			            tay
   311 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   312 3664 F0 0D		            beq _enter_loop
   313 3666			_do_add
   314 3666 18			            clc
   315 3667 65 F6		            adc _multiplicand
   316 3669 AA			            tax
   317
   318 366A 98			            tya
   319 366B 65 F7		            adc _multiplicand+1
   320 366D A8			            tay
   321 366E 8A			            txa
   322 366F			_mul_loop
   323 366F 06 F6		            asl _multiplicand
   324 3671 26 F7		            rol _multiplicand+1
   325 3673			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   326 3673 46 F8		            lsr _multiplier
   327 3675 B0 EF		            bcs _do_add
   328 3677 D0 F6		            bne _mul_loop
   329 3679 60			            rts
   330
   331 				; reset PM0/1 to playfield settings
   332 367A			dli_header
   333 367A 48			            pha
   334
   335 367B A9 08		            lda #8
   336 367D 8D 17 D0		            sta COLPF1
   337
   338 3680 A5 81		            lda shadow_HPOSP0
   339 3682 8D 00 D0		            sta HPOSP0
   340 3685 A5 82		            lda shadow_HPOSP1
   341 3687 8D 01 D0		            sta HPOSP1
   342
   343 368A A9 00		            lda #0
   344 368C 8D 08 D0		            sta SIZEP0
   345 368F 8D 09 D0		            sta SIZEP1
   346
   347 3692 A9 5A		            lda #BASE_COLOR_P1+10
   348 3694 8D 12 D0		            sta COLPM0
   349 3697 A9 BA		            lda #BASE_COLOR_P2+10
   350 3699 8D 13 D0		            sta COLPM1
   351
   352 369C A9 BA		            lda #<dli_menu
   353 369E 8D 00 02		            sta VDSLST
   354 36A1 A9 36		            lda #>dli_menu
   355 36A3 8D 01 02		            sta VDSLST+1
   356
   357 36A6 8A			            txa
   358 36A7 48			            pha
   359 36A8 98			            tya
   360 36A9 48			            pha
   361
   362 36AA 20 DC 31		            jsr copy_shadow
   363 36AD A5 80		            lda music_toggle
   364 36AF F0 03		            beq skip_music
   365 36B1 20 97 31		            jsr play_song
   366 36B4			skip_music
   367
   368 36B4 68			            pla
   369 36B5 A8			            tay
   370 36B6 68			            pla
   371 36B7 AA			            tax
   372
   373 36B8 68			            pla
   374 36B9 40			            rti
   375
   376 36BA			dli_menu
   377 36BA 48			            pha
   378 36BB 8A			            txa
   379 36BC 48			            pha
   380
   381 36BD A9 0E		            lda #$0e
   382 36BF 8D 0A D4		            sta WSYNC
   383 36C2 8D 1A D0		            sta COLBK
   384 36C5 A9 0A		            lda #$0a
   385 36C7 8D 0A D4		            sta WSYNC
   386 36CA 8D 1A D0		            sta COLBK
   387 36CD A9 00		            lda #0
   388 36CF 8D 0A D4		            sta WSYNC
   389 36D2 8D 1A D0		            sta COLBK
   390
   391 36D5 A2 00		            ldx #0
   392 36D7			color_it1
   393 36D7 BD 1B 37		            lda menu_colpf2,x
   394 36DA 8D 0A D4		            sta WSYNC
   395 36DD 8D 18 D0		            sta COLPF2
   396 36E0 E8			            inx
   397 36E1 E0 12		            cpx #18
   398 36E3 D0 F2		            bne color_it1
   399
   400 36E5 A2 00		            ldx #0
   401 36E7			color_it2
   402 36E7 BD 2D 37		            lda menu_colpf0,x
   403 36EA 05 83		            ora winner_color
   404 36EC 8D 0A D4		            sta WSYNC
   405 36EF 8D 16 D0		            sta COLPF0
   406 36F2 E8			            inx
   407 36F3 E0 26		            cpx #38
   408 36F5 D0 F0		            bne color_it2
   409
   410 36F7 A9 00		            lda #0
   411 36F9 8D 0A D4		            sta WSYNC
   412 36FC 8D 1A D0		            sta COLBK
   413 36FF A9 0A		            lda #$0a
   414 3701 8D 0A D4		            sta WSYNC
   415 3704 8D 1A D0		            sta COLBK
   416 3707 A9 0E		            lda #$0e
   417 3709 8D 0A D4		            sta WSYNC
   418 370C 8D 1A D0		            sta COLBK
   419 370F A9 00		            lda #0
   420 3711 8D 0A D4		            sta WSYNC
   421 3714 8D 1A D0		            sta COLBK
   422 				            
   423 3717 68			            pla
   424 3718 AA			            tax
   425 3719 68			            pla
   426 371A 40			            rti
   427
   428 371B			menu_colpf2
   429 371B 50			            dta BASE_COLOR_P1
   430 371C 50			            dta BASE_COLOR_P1
   431 371D 50			            dta BASE_COLOR_P1
   432 371E 50			            dta BASE_COLOR_P1
   433 371F 50			            dta BASE_COLOR_P1
   434 3720 50			            dta BASE_COLOR_P1
   435 3721 50			            dta BASE_COLOR_P1
   436 3722 50			            dta BASE_COLOR_P1
   437
   438 3723 B0			            dta BASE_COLOR_P2
   439 3724 B0			            dta BASE_COLOR_P2
   440 3725 B0			            dta BASE_COLOR_P2
   441 3726 B0			            dta BASE_COLOR_P2
   442 3727 B0			            dta BASE_COLOR_P2
   443 3728 B0			            dta BASE_COLOR_P2
   444 3729 B0			            dta BASE_COLOR_P2
   445 372A B0			            dta BASE_COLOR_P2
   446
   447 372B 00 00		            dta 0,0
   448
   449 372D			menu_colpf0
   450 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   451 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   452 372D 00 00		            dta 0,0
   453 372F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   454 3737 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   455 373F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   456 3747 00 00 00 00		            dta 0,0,0,0
   457 374B 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   458
   459 				; make pointers from y-position to screen memory
   460 				; screen memory is 3 blocks
   461 				; screen_mem1 : 102 lines, 4080 bytes
   462 				; screen_mem2 : 102 lines, 4080 bytes
   463 				; screen_mem3 :  20 lines,  800 bytes
   464
   465 3753			make_screen_y_tab
   466 3753 A9 00		            lda #<screen_mem1
   467 3755 85 86		            sta tmp_screen
   468 3757 A9 70		            lda #>screen_mem1
   469 3759 85 87		            sta tmp_screen+1
   470
   471 375B A2 00		            ldx #0
   472 375D			fill_y_tab1
   473 375D 20 86 37		            jsr store_y_line
   474 3760 E8			            inx
   475 3761 E0 66		            cpx #102
   476 3763 D0 F8		            bne fill_y_tab1
   477
   478 				; x = 102
   479 3765 A9 00		            lda #<screen_mem2
   480 3767 85 86		            sta tmp_screen
   481 3769 A9 80		            lda #>screen_mem2
   482 376B 85 87		            sta tmp_screen+1
   483
   484 376D			fill_y_tab2
   485 376D 20 86 37		            jsr store_y_line
   486 3770 E8			            inx
   487 3771 E0 CC		            cpx #204
   488 3773 D0 F8		            bne fill_y_tab2
   489
   490 3775 A9 00		            lda #<screen_mem3
   491 3777 85 86		            sta tmp_screen
   492 3779 A9 90		            lda #>screen_mem3
   493 377B 85 87		            sta tmp_screen+1
   494
   495 				; x = 204
   496 377D			fill_y_tab3
   497 377D 20 86 37		            jsr store_y_line
   498 3780 E8			            inx
   499 3781 E0 E0		            cpx #224
   500 3783 D0 F8		            bne fill_y_tab3
   501 3785 60			            rts
   502
   503 3786			store_y_line
   504 3786 A5 86		            lda tmp_screen
   505 3788 9D 00 12		            sta screen_y_lo,x
   506 378B A5 87		            lda tmp_screen+1
   507 378D 9D 00 13		            sta screen_y_hi,x
   508 				            
   509 3790 A5 86		            lda tmp_screen
   510 3792 18			            clc
   511 3793 69 28		            adc #SCREEN_WIDTH
   512 3795 85 86		            sta tmp_screen
   513 3797 A5 87		            lda tmp_screen+1
   514 3799 69 00		            adc #0
   515 379B 85 87		            sta tmp_screen+1
   516 379D 60			            rts
   517
   518 				; @todo invert backdrop image
   519 				; now we have to do it here :P
   520 379E			invert_backdrop
   521 379E A9 00		            lda #<screen_mem1
   522 37A0 85 86		            sta tmp_screen
   523 37A2 A9 70		            lda #>screen_mem1
   524 37A4 85 87		            sta tmp_screen+1
   525 				            
   526 37A6 A2 10		            ldx #16     ; 16 pages = 4K
   527 37A8 20 C6 37		            jsr do_x_pages
   528 				           
   529 37AB A9 00		            lda #<screen_mem2
   530 37AD 85 86		            sta tmp_screen
   531 37AF A9 80		            lda #>screen_mem2
   532 37B1 85 87		            sta tmp_screen+1
   533 				            
   534 37B3 A2 10		            ldx #16     ; 16 pages = 4K
   535 37B5 20 C6 37		            jsr do_x_pages
   536
   537 37B8 A9 00		            lda #<screen_mem3
   538 37BA 85 86		            sta tmp_screen
   539 37BC A9 90		            lda #>screen_mem3
   540 37BE 85 87		            sta tmp_screen+1
   541 				            
   542 37C0 A2 04		            ldx #4     ; 4 pages = 1K
   543 37C2 20 C6 37		            jsr do_x_pages
   544 37C5 60			            rts
   545
   546 				; invert x pages, starting from tmp_screen
   547
   548 37C6			do_x_pages
   549 37C6 A0 00		            ldy #0
   550 37C8			do_page
   551 37C8 B1 86		            lda (tmp_screen),y
   552 37CA 49 FF		            eor #$ff
   553 37CC 91 86		            sta (tmp_screen),y
   554 37CE C8			            iny
   555 37CF D0 F7		            bne do_page 
   556
   557 37D1 E6 87		            inc tmp_screen+1
   558 37D3 CA			            dex
   559 37D4 D0 F2		            bne do_page
   560 37D6 60			            rts
   561
   562 37D7			turn_color_ball
   563 37D7 A6 B5		            ldx player_turn
   564 37D9 BD E0 37		            lda color_turn,x
   565 37DC 8D C7 02		            sta COLOR3
   566 37DF 60			            rts
   567 				            
   568 37E0 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   569
   570 37E3			show_menu_options
   571 37E3 A9 50		            lda #<controller_text
   572 37E5 8D F6 50		            sta menu_line1_ptr
   573 37E8 A9 52		            lda #>controller_text
   574 37EA 8D F7 50		            sta menu_line1_ptr+1
   575
   576 37ED 20 58 40		            jsr show_player_mode
   577
   578 37F0 A9 9F		            lda #<level_text
   579 37F2 8D FC 50		            sta menu_line3_ptr
   580 37F5 A9 52		            lda #>level_text
   581 37F7 8D FD 50		            sta menu_line3_ptr+1
   582
   583 37FA A9 00		            lda #0
   584 37FC 85 83		            sta winner_color
   585 37FE 60			            rts
   586
   587 37FF			show_end_screen
   588 37FF A9 FB		            lda #<empty_text
   589 3801 8D F6 50		            sta menu_line1_ptr
   590 3804 8D FC 50		            sta menu_line3_ptr
   591 3807 A9 52		            lda #>empty_text
   592 3809 8D F7 50		            sta menu_line1_ptr+1
   593 380C 8D FD 50		            sta menu_line3_ptr+1
   594
   595 380F AD 2E 51		            lda score_p1
   596 3812 CD 2F 51		            cmp score_p2
   597 3815 90 0F		            bcc player_2_wins
   598
   599 3817 A9 0F		            lda #<winner_one_text
   600 3819 8D F9 50		            sta menu_line2_ptr
   601 381C A9 53		            lda #>winner_one_text
   602 381E 8D FA 50		            sta menu_line2_ptr+1
   603
   604 3821 A9 50		            lda #BASE_COLOR_P1
   605 3823 85 83		            sta winner_color
   606 3825 60			            rts
   607
   608 3826			player_2_wins
   609 3826 A9 23		            lda #<winner_two_text
   610 3828 8D F9 50		            sta menu_line2_ptr
   611 382B A9 53		            lda #>winner_two_text
   612 382D 8D FA 50		            sta menu_line2_ptr+1
   613
   614 3830 A9 B0		            lda #BASE_COLOR_P2
   615 3832 85 83		            sta winner_color
   616
   617 3834 60			            rts
   618
   619 				; A, X, Y are already saved by the OS
   620 3835			vbi
   621 				;            lda #$28
   622 				;            sta $d01a
   623
   624 				; toggle music on/off with spacebar
   625 3835 AD FC 02		            lda 764
   626 3838 C9 21		            cmp #$21
   627 383A D0 10		            bne no_spacebar
   628 383C A5 80		            lda music_toggle
   629 383E 49 80		            eor #128
   630 3840 85 80		            sta music_toggle
   631 3842 D0 03		            bne music_turned_on
   632 3844 20 60 32		            jsr music_off
   633
   634 3847			music_turned_on
   635 3847 A9 FF		            lda #255
   636 3849 8D FC 02		            sta 764
   637
   638 384C			no_spacebar
   639 384C 20 C8 3A		            jsr play_sound_bat
   640 384F 20 E6 3A		            jsr play_sound_edge
   641
   642 3852 A9 7A		            lda #<dli_header
   643 3854 8D 00 02		            sta VDSLST
   644 3857 A9 36		            lda #>dli_header
   645 3859 8D 01 02		            sta VDSLST+1
   646
   647 385C A9 2E		            lda #%00101110  ; enable P/M DMA
   648 385E 8D 2F 02		            sta SDMCTL
   649 3861 A9 00		            lda #0
   650 3863 85 4D		            sta 77      ; attract off
   651 3865 A9 98		            lda #>rotor_font
   652 3867 8D F4 02		            sta 756
   653
   654 386A A9 30		            lda #$30
   655 386C 8D 00 D0		            sta HPOSP0
   656 386F A9 B0		            lda #$b0
   657 3871 8D 01 D0		            sta HPOSP1
   658
   659 				; menu switching thingy
   660
   661 3874 AD 1F D0		            lda CONSOL
   662 3877 C9 03		            cmp #3  ; option button
   663 3879 D0 17		            bne no_option_pressed
   664 387B A5 8C		            lda game_state
   665 387D C9 01		            cmp #STATE_IN_MENU
   666 387F F0 35		            beq check_game_state
   667
   668 				; prevent menu option directly after leaving in-game state
   669 3881 A9 03		            lda #3
   670 3883 8D 09 40		            sta previous_consol
   671
   672 3886			go_menu_mode
   673 3886 20 9A 3C		            jsr wipe_ball
   674
   675 3889 20 FA 31		            jsr music_normal_volume
   676
   677 388C 20 D9 38		            jsr switch_to_menu
   678
   679 388F 4C B6 38		            jmp check_game_state
   680
   681 3892			no_option_pressed
   682 3892 C9 06		            cmp #6  ; start pressed
   683 3894 D0 07		            bne check_autostart
   684 3896 20 19 39		            jsr is_driver_unknown
   685 3899 F0 02		            beq check_autostart
   686 389B D0 05		            bne reset_game
   687
   688 389D			check_autostart
   689 				; check autostart state
   690
   691 389D AD E8 38		            lda autostart_demo
   692 38A0 F0 14		            beq check_game_state
   693
   694 				; reset game
   695
   696 38A2			reset_game
   697 38A2 20 05 32		            jsr music_low_volume
   698
   699 38A5 20 9A 3C		            jsr wipe_ball
   700
   701 38A8 20 79 3B		            jsr reset_robot_angle_end
   702
   703 38AB A9 01		            lda #1
   704 38AD 85 B6		            sta game_restart
   705
   706 38AF 20 EB 38		            jsr reset_autostart_demo
   707
   708 38B2 A9 00		            lda #STATE_IN_GAME
   709 38B4 85 8C		            sta game_state
   710
   711 38B6			check_game_state
   712 38B6 A5 8C		            lda game_state
   713 38B8 D0 03		            bne no_main_game_state
   714 38BA 4C C4 39		            jmp main_game_vbi
   715
   716 38BD			no_main_game_state
   717 38BD C9 02		            cmp #STATE_IN_END
   718 38BF D0 5E		            bne menu_vbi
   719
   720 				; end screen vbi
   721 38C1 A5 8F		            lda end_screen_delay
   722 38C3 D0 0C		            bne stay_in_end_screen
   723
   724 38C5 20 A6 31		            jsr restart_music
   725 38C8 20 FA 31		            jsr music_normal_volume
   726
   727 38CB 20 D9 38		            jsr switch_to_menu
   728
   729 38CE 4C 1F 39		            jmp menu_vbi
   730
   731 38D1			stay_in_end_screen
   732 38D1 20 AA 3A		            jsr play_sound_end_game
   733 38D4 C6 8F		            dec end_screen_delay
   734 38D6 4C 75 39		            jmp wait_depressed
   735
   736 38D9			switch_to_menu
   737 38D9 A5 8B		            lda player_mode_saved
   738 38DB 85 8A		            sta player_mode
   739
   740 38DD 20 E3 37		            jsr show_menu_options
   741
   742 38E0 20 4A 34		            jsr reset_driver_mode
   743
   744 38E3 A9 01		            lda #STATE_IN_MENU
   745 38E5 85 8C		            sta game_state
   746 38E7 60			            rts
   747
   748 				; demo autostart
   749
   750 38E8 00			autostart_demo  dta 0
   751 38E9 00 00		autostart_timer dta 0,0
   752
   753 38EB			reset_autostart_demo
   754 38EB A9 00		            lda #0
   755 38ED 8D E8 38		            sta autostart_demo      ; do not start again
   756 38F0 8D E9 38		            sta autostart_timer
   757 38F3 A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   758 38F5 8D EA 38		            sta autostart_timer+1
   759 38F8 60			            rts
   760
   761 38F9			handle_autostart_timer
   762 38F9 AD E9 38		            lda autostart_timer
   763 38FC 0D EA 38		            ora autostart_timer+1
   764 38FF F0 17		            beq idle_timer
   765 3901 CE E9 38		            dec autostart_timer
   766 3904 D0 12		            bne running_timer
   767 3906 CE EA 38		            dec autostart_timer+1
   768 3909 D0 0D		            bne running_timer
   769
   770 				; timer reached zero
   771 390B A9 01		            lda #1
   772 390D 8D E8 38		            sta autostart_demo
   773 3910 A5 8A		            lda player_mode
   774 3912 85 8B		            sta player_mode_saved
   775 3914 A9 02		            lda #2
   776 3916 85 8A		            sta player_mode
   777
   778 3918			running_timer
   779 3918			idle_timer
   780 3918 60			            rts
   781
   782 3919			is_driver_unknown
   783 3919 AD BE 32		            lda driver_mode
   784 391C C9 03		            cmp #3
   785 391E 60			            rts
   786
   787 				; within menu vbi
   788
   789 391F			menu_vbi
   790 391F 20 F9 38		            jsr handle_autostart_timer
   791
   792 3922 A5 8A		            lda player_mode
   793 3924 F0 0D		            beq check_human_buttons
   794
   795 3926 20 0C 35		            jsr is_player1_button_pressed
   796 3929 F0 15		            beq check_consol_buttons
   797 392B 20 19 39		            jsr is_driver_unknown
   798 392E F0 10		            beq check_consol_buttons
   799 3930 4C A2 38		            jmp reset_game
   800
   801 3933			check_human_buttons
   802 3933 20 23 35		            jsr is_both_buttons
   803 3936 F0 08		            beq check_consol_buttons
   804 3938 20 19 39		            jsr is_driver_unknown
   805 393B F0 03		            beq check_consol_buttons
   806 393D 4C A2 38		            jmp reset_game
   807
   808 3940			check_consol_buttons
   809 3940 AD 1F D0		            lda CONSOL
   810 3943 C9 05		            cmp #5          ; select
   811 3945 D0 18		            bne no_level_select
   812 				            
   813 3947 AD 09 40		            lda previous_consol
   814 394A C9 05		            cmp #5
   815 394C F0 27		            beq wait_depressed
   816
   817 394E 20 39 40		            jsr increase_level
   818 3951 AE 0A 40		            ldx current_level_index
   819 3954 20 20 40		            jsr set_level_ball_speed
   820
   821 3957 A9 05		            lda #5
   822 3959 8D 09 40		            sta previous_consol
   823 395C 4C 75 39		            jmp wait_depressed
   824
   825 395F			no_level_select
   826 395F C9 03		            cmp #3          ; option
   827 3961 D0 0F		            bne no_player_mode_select
   828
   829 3963 AD 09 40		            lda previous_consol
   830 3966 C9 03		            cmp #3
   831 3968 F0 0B		            beq wait_depressed
   832
   833 396A 20 49 40		            jsr increase_player_mode
   834 396D 20 58 40		            jsr show_player_mode
   835
   836 3970 A9 03		            lda #3
   837 3972			no_player_mode_select
   838 3972 8D 09 40		            sta previous_consol
   839
   840 3975			wait_depressed
   841 3975 A9 01		            lda #1      ; dl jump
   842 3977 8D 55 50		            sta menu_dl_hook
   843 397A A9 EE		            lda #<menu_dl_part
   844 397C 8D 56 50		            sta menu_dl_hook+1
   845 397F A9 50		            lda #>menu_dl_part
   846 3981 8D 57 50		            sta menu_dl_hook+2
   847
   848 				; detect/show controller type (used for both players)
   849 3984 20 AB 39		            jsr detect_show_driver
   850
   851 3987 A5 8A		            lda player_mode
   852 3989 C9 00		            cmp #MODE_2_PLAYER
   853 398B F0 15		            beq no_robot_in_menu
   854
   855 398D C9 01		            cmp #MODE_1_PLAYER
   856 398F F0 0B		            beq one_robot_in_menu
   857 				; demo mode, both robots in menu
   858 3991 A5 9C		            lda p1_angle
   859 3993 C5 BA		            cmp robot1_angle_end
   860 3995 D0 05		            bne robot1_moves_to_goal
   861
   862 3997 AD 0A D2		            lda RANDOM
   863 399A 85 BA		            sta robot1_angle_end
   864
   865 399C			robot1_moves_to_goal
   866 399C			one_robot_in_menu
   867 399C A5 9C		            lda p1_angle
   868 399E 49 80		            eor #128
   869 39A0 85 BB		            sta robot2_angle_end
   870
   871 39A2			no_robot_in_menu
   872 39A2 20 35 3B		            jsr handle_player1
   873 39A5 20 58 3B		            jsr handle_player2
   874
   875 39A8 4C 7F 3A		            jmp exit_vbi
   876
   877 				; X = port/driver to detect
   878 39AB			detect_show_driver
   879 39AB 20 50 34		            jsr driver_detect
   880 39AE A8			            tay
   881 39AF B9 37 53		            lda driver_text_lo,y
   882 39B2 85 86		            sta tmp_screen
   883 39B4 B9 3B 53		            lda driver_text_hi,y
   884 39B7 85 87		            sta tmp_screen+1
   885
   886 39B9 A0 07		            ldy #7
   887 39BB			show_driv
   888 39BB B1 86		            lda (tmp_screen),y
   889 39BD 99 5A 52		            sta driver_screen,y
   890 39C0 88			            dey
   891 39C1 10 F8		            bpl show_driv
   892 39C3 60			            rts
   893
   894 				; main game vbi
   895 39C4			main_game_vbi
   896 39C4 A5 B6		            lda game_restart
   897 39C6 F0 33		            beq no_restart
   898
   899 				; restart game
   900
   901 39C8 20 C2 3A		            jsr silence_end
   902
   903 39CB A9 00		            lda #0
   904 39CD 85 B6		            sta game_restart
   905 				            
   906 39CF 20 E9 3D		            jsr reset_score
   907 39D2 20 B7 3D		            jsr show_score_p1
   908 39D5 20 D0 3D		            jsr show_score_p2
   909
   910 39D8 A6 9C		            ldx p1_angle
   911 39DA 86 AA		            stx ball_angle_start
   912 39DC 20 F5 3B		            jsr ball_to_start_position
   913 39DF 20 04 3C		            jsr prepare_ball_end_position
   914
   915 39E2 A9 00		            lda #0
   916 39E4 85 A0		            sta mp_collision
   917 39E6 85 A1		            sta in_collision
   918 39E8 85 A3		            sta edge_delay
   919 39EA 85 AD		            sta edge_collision
   920 39EC 85 AE		            sta edge_hit_count
   921 39EE 8D 1E D0		            sta HITCLR
   922
   923 39F1 A9 02		            lda #2
   924 39F3 85 B5		            sta player_turn
   925
   926 39F5 20 D7 37		            jsr turn_color_ball
   927 39F8 4C 7F 3A		            jmp exit_vbi
   928
   929 39FB			no_restart
   930 				; remove menu hook
   931 39FB A9 0F		            lda #$0f        ; dl gfx 8
   932 39FD 8D 55 50		            sta menu_dl_hook
   933 3A00 8D 56 50		            sta menu_dl_hook+1
   934 3A03 8D 57 50		            sta menu_dl_hook+2
   935
   936 3A06 AD 08 D0		            lda M0PL
   937 3A09 85 A0		            sta mp_collision
   938 3A0B AD 09 D0		            lda M1PL
   939 3A0E 05 A0		            ora mp_collision
   940 3A10 85 A0		            sta mp_collision
   941
   942 3A12 AD 00 D0		            lda M0PF
   943 3A15 85 AD		            sta edge_collision
   944 3A17 AD 01 D0		            lda M1PF
   945 3A1A 05 AD		            ora edge_collision
   946 3A1C 85 AD		            sta edge_collision
   947 				;           beq no_edge_collision
   948
   949 				;            inc edge_hit_count
   950 				;            lda edge_hit_count
   951 				;            cmp #2
   952 				;            bcc edge_hit_counting
   953
   954 				;            sei
   955 				;lalala      jmp lalala
   956
   957 				;no_edge_collision
   958 				;            lda #0
   959 				;            sta edge_hit_count
   960
   961 3A1E			edge_hit_counting
   962 3A1E 20 35 3B		            jsr handle_player1
   963 3A21 20 58 3B		            jsr handle_player2
   964
   965 				; handle ball
   966
   967 3A24 20 9A 3C		            jsr wipe_ball         
   968
   969 				; Check ball collision with bat
   970
   971 3A27 A5 A4		            lda bat_collision_delay
   972 3A29 F0 05		            beq check_allowed
   973 3A2B C6 A4		            dec bat_collision_delay
   974 3A2D 4C 47 3A		            jmp move_one
   975
   976 3A30			check_allowed
   977 3A30 A5 A0		            lda mp_collision
   978 3A32 F0 0F		            beq reset_in_collision
   979
   980 3A34 A5 A1		            lda in_collision
   981 3A36 D0 0F		            bne no_first_hit
   982
   983 3A38 E6 A1		            inc in_collision            
   984 3A3A 20 31 3C		            jsr bounce_bat_ball 
   985 				            
   986 3A3D 20 A5 3A		            jsr start_sound_bat          
   987 				            
   988 3A40 4C 47 3A		            jmp move_one
   989 				            
   990 3A43			reset_in_collision
   991 3A43 A9 00		            lda #0
   992 3A45 85 A1		            sta in_collision        
   993
   994 3A47			move_one
   995 3A47			no_first_hit
   996 3A47 20 3B 3F		            jsr move_current_xy
   997
   998 3A4A A5 AD		            lda edge_collision
   999 3A4C F0 1E		            beq still_moving
  1000
  1001 				; edge detected
  1002
  1003 3A4E			edge_detected
  1004 3A4E 20 E1 3A		            jsr start_sound_edge
  1005
  1006 3A51 A5 AB		            lda ball_angle_end
  1007 3A53 85 AA		            sta ball_angle_start
  1008
  1009 3A55 20 28 3C		            jsr ball_current_to_start_position
  1010 3A58 20 04 3C		            jsr prepare_ball_end_position
  1011
  1012 3A5B 20 01 3B		            jsr update_score
  1013 3A5E D0 37		            bne game_ends
  1014
  1015 				; switch turns
  1016 3A60 A5 B5		            lda player_turn
  1017 3A62 49 03		            eor #3              ; 1 => 2, 2 => 1
  1018 3A64 85 B5		            sta player_turn
  1019 3A66 20 D7 37		            jsr turn_color_ball
  1020 3A69 20 82 3B		            jsr set_robot_angle_end
  1021
  1022 3A6C			still_moving
  1023 3A6C A5 EB		            lda current_x+1
  1024 3A6E 85 A6		            sta ball_current_x
  1025 3A70 A5 ED		            lda current_y+1
  1026 3A72 85 A7		            sta ball_current_y
  1027
  1028 3A74 20 AF 3C		            jsr show_ball
  1029
  1030 3A77 A9 00		            lda #0
  1031 3A79 8D 18 D0		            sta $d018           
  1032
  1033 				; anything in A to clear collisions
  1034 3A7C 8D 1E D0		            sta HITCLR
  1035
  1036 3A7F			exit_vbi
  1037
  1038 				; always set header stuff
  1039 3A7F A9 03		            lda #3
  1040 3A81 8D 08 D0		            sta SIZEP0
  1041 3A84 8D 09 D0		            sta SIZEP1
  1042
  1043 				; background in PM0/1 for header
  1044 3A87 A9 FF		            lda #255
  1045 3A89 A2 07		            ldx #7
  1046 3A8B			fill_pm_header
  1047 3A8B 9D 00 0E		            sta p0_area,x
  1048 3A8E 9D 80 0E		            sta p1_area,x
  1049 3A91 CA			            dex
  1050 3A92 10 F7		            bpl fill_pm_header
  1051
  1052 				;            lda #$04
  1053 				;            sta $d01a
  1054 3A94 4C 62 E4		            jmp $e462
  1055
  1056 3A97			game_ends
  1057 3A97 A9 FF		            lda #255
  1058 3A99 85 8F		            sta end_screen_delay
  1059
  1060 3A9B 20 FF 37		            jsr show_end_screen
  1061
  1062 3A9E A9 02		            lda #STATE_IN_END
  1063 3AA0 85 8C		            sta game_state
  1064
  1065 3AA2 4C 7F 3A		            jmp exit_vbi
  1066
  1067 3AA5			start_sound_bat
  1068 3AA5 A9 0A		            lda #10
  1069 3AA7 85 8D		            sta volume_hit_bat
  1070 3AA9 60			            rts
  1071
  1072 3AAA			play_sound_end_game
  1073 3AAA 20 60 32		            jsr music_off
  1074
  1075 3AAD A5 8F		            lda end_screen_delay
  1076 3AAF C9 C0		            cmp #192
  1077 3AB1 90 0F		            bcc silence_end
  1078 3AB3 4A			            lsr
  1079 3AB4 25 8F		            and end_screen_delay
  1080 3AB6 4A			            lsr
  1081 3AB7 09 20		            ora #$20
  1082 3AB9 8D 73 32		            sta SHADOW+4
  1083 				            ;lda end_screen_delay
  1084 3ABC A9 AA		            lda #$aa
  1085 3ABE 8D 74 32		            sta SHADOW+5
  1086 3AC1 60			            rts
  1087 3AC2			silence_end
  1088 3AC2 A9 00		            lda #0
  1089 3AC4 8D 74 32		            sta SHADOW+5
  1090 3AC7 60			            rts
  1091
  1092 3AC8			play_sound_bat
  1093 3AC8 A5 8D		            lda volume_hit_bat
  1094 3ACA 30 14		            bmi silenced_bat
  1095
  1096 3ACC A5 B5		            lda player_turn
  1097 3ACE 0A			            asl
  1098 3ACF 0A			            asl
  1099 3AD0 69 30		            adc #$30
  1100 3AD2 E5 B3		            sbc angle_diff_bat
  1101 3AD4 8D 73 32		            sta SHADOW+4    ; $d204
  1102 3AD7 A5 8D		            lda volume_hit_bat
  1103 3AD9 09 A0		            ora #$a0
  1104 3ADB 8D 74 32		            sta SHADOW+5    ; $d205
  1105 3ADE C6 8D		            dec volume_hit_bat
  1106 3AE0			silenced_bat
  1107 3AE0 60			            rts
  1108
  1109 3AE1			start_sound_edge
  1110 3AE1 A9 04		            lda #4
  1111 3AE3 85 8E		            sta volume_hit_edge
  1112 3AE5 60			            rts
  1113
  1114 3AE6			play_sound_edge
  1115 3AE6 A5 8E		            lda volume_hit_edge
  1116 3AE8 30 16		            bmi silenced_edge
  1117 3AEA D0 06		            bne no_silenced_edge
  1118 3AEC 8D 74 32		            sta SHADOW+5    ; $d205
  1119 3AEF C6 8E		            dec volume_hit_edge
  1120 3AF1 60			            rts            
  1121
  1122 3AF2			no_silenced_edge
  1123 3AF2 A9 08		            lda #$08
  1124 3AF4 8D 73 32		            sta SHADOW+4    ; $d204
  1125 3AF7 A5 8E		            lda volume_hit_edge
  1126 3AF9 09 26		            ora #$26
  1127 3AFB 8D 74 32		            sta SHADOW+5    ; $d205
  1128 3AFE C6 8E		            dec volume_hit_edge
  1129 3B00			silenced_edge
  1130 3B00 60			            rts
  1131
  1132 				; Update score
  1133 				; Score > max score, then exit A = 1, otherwise A = 0
  1134
  1135 3B01			update_score
  1136 3B01 A5 B5		            lda player_turn
  1137 3B03 C9 01		            cmp #1
  1138 3B05 D0 12		            bne was_player2_turn
  1139 				; was player 1 turn, so player 2 gets a point
  1140 3B07 20 FE 3D		            jsr inc_score_p2
  1141 3B0A 20 D0 3D		            jsr show_score_p2
  1142
  1143 3B0D AD 2F 51		            lda score_p2
  1144 3B10 C9 11		            cmp #MAX_SCORE
  1145 3B12 D0 17		            bne reset_edge_delay
  1146
  1147 3B14 A9 01		            lda #STATE_IN_MENU
  1148 3B16 85 8C		            sta game_state
  1149 3B18 60			            rts
  1150
  1151 3B19			was_player2_turn
  1152 3B19 20 F2 3D		            jsr inc_score_p1
  1153 3B1C 20 B7 3D		            jsr show_score_p1
  1154
  1155 3B1F AD 2E 51		            lda score_p1
  1156 3B22 C9 11		            cmp #MAX_SCORE
  1157 3B24 D0 05		            bne reset_edge_delay
  1158
  1159 3B26 A9 01		            lda #STATE_IN_MENU
  1160 3B28 85 8C		            sta game_state
  1161 3B2A 60			            rts
  1162
  1163 3B2B			reset_edge_delay
  1164 3B2B A9 0A		            lda #10
  1165 3B2D 85 A3		            sta edge_delay
  1166
  1167 3B2F			no_edge
  1168
  1169 3B2F A9 00		            lda #0      ; no end game
  1170 				; anything in A to clear collisions
  1171 3B31 8D 1E D0		            sta HITCLR
  1172 3B34 60			            rts
  1173
  1174 				; player 1
  1175 				; - wipe shape at previous y-position
  1176 				; - move player using controller
  1177 				; - set sprite positions
  1178
  1179 3B35			handle_player1
  1180 3B35 20 1F 3D		            jsr wipe_p1         ; wipe previous shape player 1
  1181
  1182 3B38 A5 8A		            lda player_mode
  1183 3B3A C9 02		            cmp #2
  1184 3B3C F0 0C		            beq do_p1_is_computer
  1185
  1186 3B3E A2 00		            ldx #0              ; player 1
  1187 3B40 20 B9 34		            jsr main_driver
  1188 3B43 20 D7 3B		            jsr move_player
  1189 				            
  1190 3B46 20 D3 3C		            jsr show_p1
  1191 3B49 60			            rts
  1192
  1193 				; p1 now controlled by computer
  1194 3B4A			do_p1_is_computer
  1195 3B4A A5 8C		            lda game_state
  1196
  1197 3B4C A2 00		            ldx #0              ; player 1
  1198 3B4E 20 A8 3B		            jsr robot_controller
  1199
  1200 3B51 20 D7 3B		            jsr move_player
  1201
  1202 3B54 20 D3 3C		            jsr show_p1
  1203 3B57 60			            rts
  1204
  1205 				; player 2
  1206 				; - wipe shape at previous y-position
  1207 				; - move player using controller
  1208 				; - set sprite positions
  1209
  1210 3B58			handle_player2
  1211 3B58 20 34 3D		            jsr wipe_p2         ; wipe previous shape player 2
  1212
  1213 3B5B A5 8A		            lda player_mode
  1214 3B5D D0 0C		            bne do_p2_is_computer
  1215
  1216 3B5F A2 01		            ldx #1              ; player 2
  1217 3B61 20 B9 34		            jsr main_driver
  1218
  1219 3B64 20 D7 3B		            jsr move_player
  1220 3B67 20 F9 3C		            jsr show_p2
  1221 3B6A 60			            rts
  1222
  1223 				; p2 now controlled by computer
  1224 3B6B			do_p2_is_computer
  1225 3B6B A5 8C		            lda game_state
  1226
  1227 3B6D A2 01		            ldx #1              ; player 2
  1228 3B6F 20 A8 3B		            jsr robot_controller
  1229
  1230 3B72 20 D7 3B		            jsr move_player
  1231 3B75 20 F9 3C		            jsr show_p2
  1232
  1233 3B78			not_in_game
  1234 3B78 60			            rts
  1235
  1236 3B79			reset_robot_angle_end
  1237 3B79 A9 00		            lda #0
  1238 3B7B 85 BA		            sta robot1_angle_end
  1239 3B7D A9 80		            lda #128
  1240 3B7F 85 BB		            sta robot2_angle_end
  1241 3B81 60			            rts
  1242
  1243 3B82			set_robot_angle_end
  1244 3B82 A6 B5		            ldx player_turn
  1245 3B84 CA			            dex
  1246 3B85 AD 0A D2		            lda RANDOM
  1247 3B88 29 07		            and #7
  1248 3B8A 18			            clc
  1249 3B8B 65 AB		            adc ball_angle_end
  1250 3B8D 38			            sec
  1251 3B8E E9 03		            sbc #3
  1252 3B90 95 BA		            sta robot_angle_end,x
  1253
  1254 				; other robot (not your turn)
  1255 3B92 A5 B5		            lda player_turn
  1256 3B94 49 03		            eor #3
  1257 3B96 AA			            tax
  1258 3B97 CA			            dex
  1259
  1260 3B98 AD 0A D2		            lda RANDOM
  1261 3B9B 29 0F		            and #15
  1262 3B9D 18			            clc
  1263 3B9E 65 AB		            adc ball_angle_end
  1264 3BA0 38			            sec
  1265 3BA1 E9 07		            sbc #7
  1266 3BA3 49 80		            eor #128            ; other side
  1267 3BA5 95 BA		            sta robot_angle_end,x
  1268
  1269 3BA7 60			            rts
  1270
  1271 				; x = 0 (robot 1), x = 1 (robot 2)
  1272
  1273 3BA8			robot_controller
  1274 				;            lda ball_angle_end  ; current ball end
  1275 3BA8 B5 BA		            lda robot_angle_end,x
  1276 3BAA 85 B0		            sta tmp_angle1
  1277 3BAC B5 9C		            lda p1_angle,x
  1278 3BAE 85 B1		            sta tmp_angle2
  1279
  1280 3BB0 20 0A 3E		            jsr calc_angle_diff
  1281
  1282 3BB3 A5 B7		            lda tmp_angle_diff
  1283 3BB5 F0 1F		            beq comp_in_catch_position
  1284 3BB7 A5 B4		            lda tmp_angle_direction
  1285 3BB9 D0 0E		            bne move_comp_clockwise
  1286
  1287 3BBB AD 0A D2		            lda RANDOM
  1288 3BBE 29 03		            and #3
  1289 3BC0 D0 14		            bne comp_in_catch_position
  1290 3BC2 B5 9C		            lda p1_angle,x
  1291 3BC4 65 88		            adc stick_slow_speed
  1292 3BC6 95 9C		            sta p1_angle,x
  1293 3BC8 60			            rts
  1294 3BC9			move_comp_clockwise
  1295
  1296 3BC9 AD 0A D2		            lda RANDOM
  1297 3BCC 29 03		            and #3
  1298 3BCE D0 06		            bne comp_in_catch_position
  1299
  1300 3BD0 B5 9C		            lda p1_angle,x
  1301 3BD2 E5 88		            sbc stick_slow_speed
  1302 3BD4 95 9C		            sta p1_angle,x
  1303 3BD6			comp_in_catch_position
  1304 3BD6 60			            rts
  1305
  1306 				; move player 1/2
  1307 				; right - clockwise, left = anti-clockwise
  1308
  1309 				; X = 0, player 1
  1310 				; X = 1, player 2
  1311
  1312 				; Y = driver mode:
  1313 				; 0 : stick
  1314 				; 1 : paddle
  1315 				; 2 : mouse
  1316 				; 3 : computer
  1317 				            
  1318 3BD7			move_player
  1319 3BD7 B5 9C		            lda p1_angle,x
  1320 3BD9 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1321 3BDB 49 40		            eor #64                     ; perpendicular to the circle angle
  1322 3BDD 95 90		            sta p1_shape,x
  1323
  1324 3BDF B4 9C		            ldy p1_angle,x
  1325 3BE1 B9 00 41		            lda inner_x_tab,y
  1326 3BE4 4A			            lsr
  1327 3BE5 69 20		            adc #inner_x_margin/2
  1328 3BE7 95 94		            sta player1_x,x
  1329 3BE9 B9 00 42		            lda inner_y_tab,y
  1330 3BEC 4A			            lsr
  1331 3BED 95 98		            sta player1_y,x
  1332
  1333 3BEF B4 90		            ldy p1_shape,x
  1334 3BF1 20 6E 3D		            jsr shape_to_ptr
  1335
  1336 3BF4 60			            rts
  1337
  1338 				; Set ball at start position
  1339 				; - start angle current player
  1340 				; - start position by inner table
  1341 				; - collision delay set?
  1342
  1343 				; Set ball current position to start position
  1344 				; input:
  1345 				; X = angle of start position
  1346 				; output:
  1347 				; ball position: (ball_current_x, ball_current_y)
  1348 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1349 3BF5			ball_to_start_position
  1350 3BF5 BD 00 41		            lda inner_x_tab,x
  1351 3BF8 85 A6		            sta ball_current_x
  1352 3BFA 85 E6		            sta tmp_x1
  1353 3BFC BD 00 42		            lda inner_y_tab,x
  1354 3BFF 85 A7		            sta ball_current_y
  1355 3C01 85 E7		            sta tmp_y1
  1356 3C03 60			            rts
  1357
  1358 				; Prepare ball end position
  1359 				; - end angle current player
  1360 				; - end position by outer table
  1361 				; - calculate step size x,y
  1362
  1363 				; Input:
  1364 				; - ball_angle_start
  1365 				; - ball speed
  1366 				; Output:
  1367 				; - ball_andle_end
  1368 				; - ball start position (tmp_x1, tmp_y1)
  1369 				; - ball end position (tmp_x2, tmp_y2)
  1370 				; - step size (step_x, step_y) for ball movement
  1371 3C04			prepare_ball_end_position
  1372 3C04 A5 AA		            lda ball_angle_start
  1373 3C06 49 80		            eor #128        ; other side
  1374 3C08 85 AB		            sta ball_angle_end
  1375 3C0A AA			            tax
  1376 3C0B 20 8F 3C		            jsr angle_to_end_position
  1377 				                        
  1378 3C0E 20 CE 3E		            jsr init_current_xy
  1379 				            
  1380 				; move current a little bit            
  1381 3C11 20 3B 3F		            jsr move_current_xy
  1382 				; ignore end indicator, since we only just started
  1383
  1384 3C14 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1385 3C16 85 A4		            sta bat_collision_delay
  1386 3C18 60			            rts
  1387
  1388 				; x = angle 0..255
  1389 3C19			outer_angle_to_start_position
  1390 3C19 BD 00 10		            lda outer_x_256,x
  1391 3C1C 85 A6		            sta ball_current_x
  1392 3C1E 85 E6		            sta tmp_x1
  1393 3C20 BD 00 11		            lda outer_y_256,x
  1394 3C23 85 A7		            sta ball_current_y
  1395 3C25 85 E7		            sta tmp_y1
  1396 3C27 60			            rts
  1397
  1398 3C28			ball_current_to_start_position
  1399 3C28 A5 A6		            lda ball_current_x
  1400 3C2A 85 E6		            sta tmp_x1
  1401 3C2C A5 A7		            lda ball_current_y
  1402 3C2E 85 E7		            sta tmp_y1
  1403 3C30 60			            rts
  1404
  1405 				; Ball collides with bat
  1406 				; - start ball angle = end ball angle
  1407 				; - calculate diff between bat and ball end angle
  1408 				; - calculate new end angle
  1409 				; - Set ball at start position
  1410 				; - Prepare ball end position
  1411
  1412 3C31			bounce_bat_ball
  1413 				; set new start of ball
  1414 				; @todo check ball angles
  1415 				; set new ball start angle (= previous end angle)
  1416 3C31 A5 AB		            lda ball_angle_end
  1417 3C33 85 AA		            sta ball_angle_start
  1418 				            
  1419 				; alternative?
  1420 				            ;ldx ball_angle_start
  1421 				            ;jsr ball_to_start_position          
  1422 3C35 20 28 3C		            jsr ball_current_to_start_position
  1423
  1424 				; which player hit the ball?
  1425 				; collision bits:
  1426 				; xxxxx1x1 : 1 is player1 collision
  1427 				; xxxx1010 : 2 is player2 collision
  1428
  1429 3C38 A5 A0		            lda mp_collision
  1430 3C3A 4A			            lsr
  1431 3C3B 4A			            lsr
  1432 3C3C 05 A0		            ora mp_collision
  1433 3C3E 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1434
  1435 				; who's turn is it and who bounced the ball?
  1436
  1437 3C40 25 B5		            and player_turn
  1438 3C42 F0 06		            beq no_switch_turn
  1439
  1440 3C44 A5 B5		            lda player_turn
  1441 3C46 49 03		            eor #3              ; 1 => 2, 2 => 1
  1442 3C48 85 B5		            sta player_turn
  1443
  1444 3C4A			no_switch_turn
  1445 3C4A 20 D7 37		            jsr turn_color_ball
  1446
  1447 3C4D A5 B5		            lda player_turn
  1448 3C4F 49 03		            eor #3
  1449 3C51 AA			            tax
  1450 3C52 CA			            dex                 ; index 0,1 (player = 1,2)
  1451 3C53 B5 9C		            lda p1_angle,x
  1452
  1453 				; Calculate diff between bat angle position and new ball start position
  1454 3C55 85 B0		            sta tmp_angle1
  1455
  1456 3C57 A5 AA		            lda ball_angle_start
  1457 3C59 85 B1		            sta tmp_angle2
  1458
  1459 3C5B 20 0A 3E		            jsr calc_angle_diff
  1460
  1461 3C5E 0A			            asl
  1462 3C5F 0A			            asl
  1463 3C60 0A			            asl
  1464 3C61 85 B3		            sta angle_diff_bat
  1465
  1466 3C63 A5 B0		            lda tmp_angle1
  1467 3C65 18			            clc
  1468 3C66 65 B2		            adc add_to_angle
  1469 3C68 49 80		            eor #128            ; other side
  1470 3C6A 85 B0		            sta tmp_angle1
  1471 				            
  1472 3C6C A5 B4		            lda tmp_angle_direction
  1473 3C6E D0 0A		            bne diff_clockwise
  1474 				; diff counter clockwise
  1475 3C70 A5 B0		            lda tmp_angle1
  1476 3C72 18			            clc
  1477 3C73 65 B3		            adc angle_diff_bat
  1478 3C75 85 B0		            sta tmp_angle1
  1479 3C77 4C 81 3C		            jmp calc_done            
  1480
  1481 3C7A			diff_clockwise
  1482 3C7A A5 B0		            lda tmp_angle1
  1483 3C7C 38			            sec
  1484 3C7D E5 B3		            sbc angle_diff_bat
  1485 3C7F 85 B0		            sta tmp_angle1
  1486 				            
  1487 				; calculation done            
  1488 3C81			calc_done
  1489 3C81 A5 B0		            lda tmp_angle1
  1490 3C83 85 AB		            sta ball_angle_end
  1491 3C85 AA			            tax
  1492 3C86 20 8F 3C		            jsr angle_to_end_position
  1493
  1494 3C89 20 82 3B		            jsr set_robot_angle_end
  1495
  1496 3C8C 4C CE 3E		            jmp init_current_xy
  1497
  1498 				; x = angle 0..255
  1499 3C8F			angle_to_end_position
  1500 3C8F BD 00 10		            lda outer_x_256,x
  1501 3C92 85 E8		            sta tmp_x2
  1502 3C94 BD 00 11		            lda outer_y_256,x
  1503 3C97 85 E9		            sta tmp_y2
  1504 3C99 60			            rts
  1505
  1506 3C9A			wipe_ball
  1507 3C9A A5 A7		            lda ball_current_y
  1508 3C9C 4A			            lsr
  1509 3C9D 69 06		            adc #ball_top_margin
  1510 3C9F AA			            tax                 ; x = real y position on screen
  1511 3CA0 A9 00		            lda #0
  1512 3CA2 9D 80 0D		            sta msl_area,x
  1513 3CA5 9D 81 0D		            sta msl_area+1,x
  1514 3CA8 9D 82 0D		            sta msl_area+2,x
  1515 3CAB 9D 83 0D		            sta msl_area+3,x
  1516 3CAE 60			            rts
  1517
  1518 3CAF			show_ball
  1519 3CAF A5 A7		            lda ball_current_y
  1520 3CB1 4A			            lsr
  1521 3CB2 69 06		            adc #ball_top_margin
  1522 3CB4 AA			            tax                 ; x = real y position on screen
  1523
  1524 3CB5 A9 02		            lda #%00000010
  1525 3CB7 9D 80 0D		            sta msl_area,x
  1526 3CBA 9D 83 0D		            sta msl_area+3,x
  1527 3CBD A9 07		            lda #%00000111
  1528 3CBF 9D 81 0D		            sta msl_area+1,x
  1529 3CC2 9D 82 0D		            sta msl_area+2,x
  1530
  1531 3CC5 A5 A6		            lda ball_current_x
  1532 3CC7 4A			            lsr
  1533 3CC8 69 45		            adc #ball_left_margin
  1534 3CCA 8D 05 D0		            sta HPOSM1
  1535 3CCD 69 02		            adc #2
  1536 3CCF 8D 04 D0		            sta HPOSM0
  1537
  1538 3CD2 60			            rts
  1539
  1540 3CD3			show_p1
  1541 				; y position
  1542 3CD3 A5 98		            lda player1_y
  1543 3CD5 18			            clc
  1544 3CD6 69 01		            adc #upper_margin
  1545 3CD8 AA			            tax
  1546
  1547 3CD9 A0 00		            ldy #0
  1548 3CDB			show_shape1
  1549 3CDB B1 84		            lda (shape_ptr),y
  1550 3CDD 9D 00 0E		            sta p0_area,x 
  1551 3CE0 C8			            iny
  1552 3CE1 B1 84		            lda (shape_ptr),y
  1553 3CE3 9D 00 0F		            sta p2_area,x
  1554 3CE6 E8			            inx
  1555 3CE7 C8			            iny
  1556 3CE8 C0 20		            cpy #32
  1557 3CEA D0 EF		            bne show_shape1
  1558
  1559 				; x position
  1560 3CEC A5 94		            lda player1_x
  1561 3CEE 18			            clc
  1562 3CEF 69 20		            adc #left_margin
  1563 3CF1 85 81		            sta shadow_HPOSP0
  1564 3CF3 69 08		            adc #8
  1565 3CF5 8D 02 D0		            sta HPOSP2
  1566 3CF8 60			            rts
  1567
  1568 3CF9			show_p2
  1569 				; y position
  1570 3CF9 A5 99		            lda player2_y
  1571 3CFB 18			            clc
  1572 3CFC 69 01		            adc #upper_margin
  1573 3CFE AA			            tax
  1574
  1575 3CFF A0 00		            ldy #0
  1576 3D01			show_shape2
  1577 3D01 B1 84		            lda (shape_ptr),y
  1578 3D03 9D 80 0E		            sta p1_area,x
  1579 3D06 C8			            iny
  1580 3D07 B1 84		            lda (shape_ptr),y
  1581 3D09 9D 80 0F		            sta p3_area,x
  1582 3D0C E8			            inx
  1583 3D0D C8			            iny
  1584 3D0E C0 20		            cpy #32
  1585 3D10 D0 EF		            bne show_shape2
  1586
  1587 				; x position
  1588 3D12 A5 95		            lda player2_x
  1589 3D14 18			            clc
  1590 3D15 69 20		            adc #left_margin
  1591 3D17 85 82		            sta shadow_HPOSP1
  1592 3D19 69 08		            adc #8
  1593 3D1B 8D 03 D0		            sta HPOSP3
  1594 3D1E 60			            rts
  1595
  1596 3D1F			wipe_p1
  1597 3D1F A5 98		            lda player1_y
  1598 3D21 18			            clc
  1599 3D22 69 01		            adc #upper_margin
  1600 3D24 AA			            tax
  1601
  1602 3D25 A0 10		            ldy #16
  1603 3D27 A9 00		            lda #0
  1604 3D29			wipe_it1            
  1605 3D29 9D 00 0E		            sta p0_area,x 
  1606 3D2C 9D 00 0F		            sta p2_area,x
  1607 3D2F E8			            inx
  1608 3D30 88			            dey
  1609 3D31 D0 F6		            bne wipe_it1 
  1610 3D33 60			            rts
  1611
  1612 3D34			wipe_p2
  1613 3D34 A5 99		            lda player2_y
  1614 3D36 18			            clc
  1615 3D37 69 01		            adc #upper_margin
  1616 3D39 AA			            tax
  1617 				            
  1618 3D3A A0 10		            ldy #16
  1619 3D3C A9 00		            lda #0
  1620 3D3E			wipe_it2            
  1621 3D3E 9D 80 0E		            sta p1_area,x
  1622 3D41 9D 80 0F		            sta p3_area,x
  1623 3D44 E8			            inx
  1624 3D45 88			            dey
  1625 3D46 D0 F6		            bne wipe_it2 
  1626 3D48 60			            rts
  1627
  1628 3D49			make_shape_index
  1629 3D49 A9 00		            lda #<pm_shapes
  1630 3D4B 85 84		            sta shape_ptr
  1631 3D4D A9 60		            lda #>pm_shapes
  1632 3D4F 85 85		            sta shape_ptr+1
  1633 				            
  1634 3D51 A2 00		            ldx #0
  1635 3D53			fill_pm_tab
  1636 3D53 A5 84		            lda shape_ptr
  1637 3D55 9D 00 14		            sta pm_shape_lo,x
  1638 3D58 A5 85		            lda shape_ptr+1
  1639 3D5A 9D 80 14		            sta pm_shape_hi,x
  1640 				            
  1641 3D5D A5 84		            lda shape_ptr
  1642 3D5F 18			            clc
  1643 3D60 69 20		            adc #32
  1644 3D62 85 84		            sta shape_ptr
  1645 3D64 A5 85		            lda shape_ptr+1
  1646 3D66 69 00		            adc #0
  1647 3D68 85 85		            sta shape_ptr+1
  1648 				            
  1649 3D6A E8			            inx
  1650 3D6B 10 E6		            bpl fill_pm_tab
  1651 				            
  1652 3D6D 60			            rts
  1653 				            
  1654 				; there are 128 shapes, each 32 bytes
  1655
  1656 				; y = shape index
  1657 3D6E			shape_to_ptr
  1658 3D6E B9 00 14		            lda pm_shape_lo,y
  1659 3D71 85 84		            sta shape_ptr
  1660 3D73 B9 80 14		            lda pm_shape_hi,y
  1661 3D76 85 85		            sta shape_ptr+1
  1662
  1663 3D78 60			            rts
  1664
  1665 				; turn 1024 tables into 256 bytes for ball edge lookup
  1666 3D79			make_outer_256
  1667 3D79 A0 00		            ldy #0
  1668 3D7B A2 00		            ldx #0
  1669 3D7D			conv_256
  1670 3D7D BD 00 44		            lda outer_x_tab,x
  1671 3D80 99 00 10		            sta outer_x_256,y
  1672 3D83 BD 00 45		            lda outer_x_tab+$100,x
  1673 3D86 99 40 10		            sta outer_x_256+64,y
  1674 3D89 BD 00 46		            lda outer_x_tab+$200,x
  1675 3D8C 99 80 10		            sta outer_x_256+128,y
  1676 3D8F BD 00 47		            lda outer_x_tab+$300,x
  1677 3D92 99 C0 10		            sta outer_x_256+192,y
  1678 				            
  1679 3D95 BD 00 48		            lda outer_y_tab,x
  1680 3D98 99 00 11		            sta outer_y_256,y
  1681 3D9B BD 00 49		            lda outer_y_tab+$100,x
  1682 3D9E 99 40 11		            sta outer_y_256+64,y
  1683 3DA1 BD 00 4A		            lda outer_y_tab+$200,x
  1684 3DA4 99 80 11		            sta outer_y_256+128,y
  1685 3DA7 BD 00 4B		            lda outer_y_tab+$300,x
  1686 3DAA 99 C0 11		            sta outer_y_256+192,y
  1687
  1688 3DAD E8			            inx
  1689 3DAE E8			            inx
  1690 3DAF E8			            inx
  1691 3DB0 E8			            inx
  1692 3DB1 C8			            iny
  1693 3DB2 C0 40		            cpy #64
  1694 3DB4 D0 C7		            bne conv_256            
  1695 3DB6 60			            rts
  1696
  1697 3DB7			show_score_p1
  1698 3DB7 AD 2E 51		            lda score_p1
  1699 3DBA 4A			            lsr
  1700 3DBB 4A			            lsr
  1701 3DBC 4A			            lsr
  1702 3DBD 4A			            lsr
  1703 3DBE F0 02		            beq do_space1
  1704 3DC0 09 10		            ora #16
  1705 3DC2			do_space1
  1706 3DC2 8D 0B 51		            sta score_chars_p1
  1707 3DC5 AD 2E 51		            lda score_p1
  1708 3DC8 29 0F		            and #15
  1709 3DCA 09 10		            ora #16
  1710 3DCC 8D 0C 51		            sta score_chars_p1+1
  1711 3DCF 60			            rts
  1712
  1713 3DD0			show_score_p2
  1714 3DD0 AD 2F 51		            lda score_p2
  1715 3DD3 4A			            lsr
  1716 3DD4 4A			            lsr
  1717 3DD5 4A			            lsr
  1718 3DD6 4A			            lsr
  1719 3DD7 F0 02		            beq do_space2
  1720 3DD9 09 10		            ora #16
  1721 3DDB			do_space2
  1722 3DDB 8D 2B 51		            sta score_chars_p2
  1723 3DDE AD 2F 51		            lda score_p2
  1724 3DE1 29 0F		            and #15
  1725 3DE3 09 10		            ora #16
  1726 3DE5 8D 2C 51		            sta score_chars_p2+1
  1727 3DE8 60			            rts
  1728 				                        
  1729 3DE9			reset_score
  1730 3DE9 A9 00		            lda #0
  1731 3DEB 8D 2E 51		            sta score_p1
  1732 3DEE 8D 2F 51		            sta score_p2
  1733 3DF1 60			            rts            
  1734 				         
  1735 3DF2			inc_score_p1
  1736 3DF2 F8			            sed
  1737 3DF3 AD 2E 51		            lda score_p1
  1738 3DF6 18			            clc
  1739 3DF7 69 01		            adc #1
  1740 3DF9 8D 2E 51		            sta score_p1    
  1741 3DFC D8			            cld
  1742 3DFD 60			            rts
  1743
  1744 3DFE			inc_score_p2
  1745 3DFE F8			            sed
  1746 3DFF AD 2F 51		            lda score_p2
  1747 3E02 18			            clc
  1748 3E03 69 01		            adc #1
  1749 3E05 8D 2F 51		            sta score_p2
  1750 3E08 D8			            cld
  1751 3E09 60			            rts
  1752
  1753 				; calculate the difference between angle1 and angle2
  1754
  1755 				; input:
  1756 				; tmp_angle1 (0..255)
  1757 				; tmp_angle2 (0..255)
  1758
  1759 				; output:
  1760 				; tmp_angle_diff, A: difference between angle1 and angle2
  1761 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1762
  1763 3E0A			calc_angle_diff
  1764 3E0A A9 00		            lda #0
  1765 3E0C 85 B2		            sta add_to_angle
  1766 3E0E 85 B4		            sta tmp_angle_direction
  1767
  1768 				; make sure we can compare angles, otherwise add $40 to angles
  1769 3E10 A5 B0		            lda tmp_angle1
  1770 3E12 C9 C0		            cmp #$c0
  1771 3E14 B0 06		            bcs too_large
  1772 3E16 A5 B1		            lda tmp_angle2
  1773 3E18 C9 C0		            cmp #$c0
  1774 3E1A 90 12		            bcc not_too_large
  1775 3E1C			too_large
  1776 3E1C A5 B0		            lda tmp_angle1
  1777 3E1E 38			            sec
  1778 3E1F E9 40		            sbc #$40
  1779 3E21 85 B0		            sta tmp_angle1
  1780 				            
  1781 3E23 A5 B1		            lda tmp_angle2
  1782 3E25 38			            sec
  1783 3E26 E9 40		            sbc #$40
  1784 3E28 85 B1		            sta tmp_angle2
  1785 				            
  1786 3E2A A9 40		            lda #$40
  1787 3E2C 85 B2		            sta add_to_angle
  1788
  1789 3E2E			not_too_large
  1790 3E2E A5 B1		            lda tmp_angle2
  1791 3E30 C5 B0		            cmp tmp_angle1
  1792 3E32 90 0A		            bcc angle2_smaller_angle1
  1793 				; ball >= play
  1794 3E34 38			            sec
  1795 3E35 E5 B0		            sbc tmp_angle1
  1796 3E37 85 B7		            sta tmp_angle_diff
  1797 				            
  1798 3E39 E6 B4		            inc tmp_angle_direction
  1799 3E3B 4C 45 3E		            jmp diff_calculated
  1800 				                        
  1801 3E3E			angle2_smaller_angle1
  1802 3E3E A5 B0		            lda tmp_angle1
  1803 3E40 38			            sec
  1804 3E41 E5 B1		            sbc tmp_angle2
  1805 3E43 85 B7		            sta tmp_angle_diff
  1806
  1807 3E45			diff_calculated
  1808 3E45 A5 B7		            lda tmp_angle_diff           
  1809 3E47 60			            rts
  1810
  1811 				; X = angle
  1812 				; lookup magnitude of angle 0 to angle X
  1813 3E48			angle_to_magnitude
  1814 3E48 BD 00 4C		            lda magnitudes_lo,x
  1815 3E4B 85 B8		            sta magnitude
  1816 3E4D BD 00 4D		            lda magnitudes_hi,x
  1817 3E50 85 B9		            sta magnitude+1
  1818 3E52 60			            rts
  1819
  1820 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1821 3E53			calc_abs_tmp_dx
  1822 3E53 A5 E8		            lda tmp_x2
  1823 3E55 38			            sec
  1824 3E56 E5 E6		            sbc tmp_x1
  1825 3E58 B0 05		            bcs x2_le
  1826 3E5A 49 FF		            eor #255
  1827 3E5C 18			            clc
  1828 3E5D 69 01		            adc #1
  1829 3E5F 85 F2		x2_le       sta tmp_dx
  1830
  1831 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1832 3E61			calc_abs_tmp_dy
  1833 3E61 A5 E9		            lda tmp_y2
  1834 3E63 38			            sec
  1835 3E64 E5 E7		            sbc tmp_y1
  1836 3E66 B0 05		            bcs y2_le
  1837 3E68 49 FF		            eor #255
  1838 3E6A 18			            clc
  1839 3E6B 69 01		            adc #1
  1840 3E6D 85 F3		y2_le       sta tmp_dy
  1841 3E6F 60			            rts
  1842 				            
  1843 3E70			calc_dx_div_magnitude
  1844 3E70 A9 00		            lda #0
  1845 3E72 85 E2		            sta _dividend
  1846 3E74 A5 F2		            lda tmp_dx
  1847 3E76 85 E3		            sta _dividend+1
  1848
  1849 3E78 A5 B9		            lda magnitude+1
  1850 3E7A 85 E0		            sta _divisor
  1851 3E7C A9 00		            lda #0
  1852 3E7E 85 E1		            sta _divisor+1
  1853 				            
  1854 3E80 20 A8 3E		            jsr _div16
  1855
  1856 				; todo multiply result with velocity            
  1857 3E83 A5 E2		            lda _result
  1858 3E85 85 EE		            sta step_x
  1859 3E87 A5 E3		            lda _result+1
  1860 3E89 85 EF		            sta step_x+1
  1861 				            
  1862 3E8B 60			            rts
  1863 				            
  1864 3E8C			calc_dy_div_magnitude
  1865 3E8C A9 00		            lda #0
  1866 3E8E 85 E2		            sta _dividend
  1867 3E90 A5 F3		            lda tmp_dy
  1868 3E92 85 E3		            sta _dividend+1
  1869 				            
  1870 3E94 A5 B9		            lda magnitude+1
  1871 3E96 85 E0		            sta _divisor
  1872 3E98 A9 00		            lda #0
  1873 3E9A 85 E1		            sta _divisor+1
  1874
  1875 3E9C 20 A8 3E		            jsr _div16
  1876 				            
  1877 				; todo multiply result with velocity
  1878 3E9F A5 E2		            lda _result
  1879 3EA1 85 F0		            sta step_y
  1880 3EA3 A5 E3		            lda _result+1
  1881 3EA5 85 F1		            sta step_y+1
  1882 				            
  1883 3EA7 60			            rts
  1884
  1885 				; divide 16bit
  1886 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1887
  1888 				; _result = _dividend / divisor
  1889
  1890 3EA8 A9 00		_div16      lda #0          ;preset remainder to 0
  1891 3EAA 85 E4		            sta _remainder
  1892 3EAC 85 E5		            sta _remainder+1
  1893 3EAE A2 10		            ldx #16         ;repeat for each bit: ...
  1894
  1895 3EB0 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1896 3EB2 26 E3		            rol _dividend+1  
  1897 3EB4 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1898 3EB6 26 E5		            rol _remainder+1
  1899 3EB8 A5 E4		            lda _remainder
  1900 3EBA 38			            sec
  1901 3EBB E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1902 3EBD A8			            tay         ;lb result -> Y, for we may need it later
  1903 3EBE A5 E5		            lda _remainder+1
  1904 3EC0 E5 E1		            sbc _divisor+1
  1905 3EC2 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1906
  1907 3EC4 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1908 3EC6 84 E4		            sty _remainder   
  1909 3EC8 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1910
  1911 3ECA CA			_div_skip   dex
  1912 3ECB D0 E3		            bne _div_loop 
  1913 3ECD 60			            rts
  1914
  1915 				; Calculations for step size
  1916
  1917 				; not optimised for speed or size
  1918 				; step should be set according to the angle
  1919
  1920 				; move in straight line (x1,y1) to (x2,y2)
  1921
  1922 				; 1. set start/end of line
  1923 				; set (tmp_x1, tmp_y1)
  1924 				; set (tmp_x2, tmp_y2)
  1925
  1926 				; 2. init. current_x, current_y
  1927 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1928 				; - calculates step sizes for x,y
  1929 				; - calculated directions for x,y
  1930 				;            jsr init_current_xy
  1931
  1932 				; 3. use current_x, current_y to plot or set a position
  1933 				;            lda current_x+1
  1934 				;            sta x_position
  1935 				;            lda current_y+1
  1936 				;            sta y_position
  1937 				;            jsr plot_pixel
  1938
  1939 				; 4. move current_x, current_y to next position on line
  1940 				; A=0 still moving
  1941 				;           move_current_xy
  1942
  1943 3ECE			init_current_xy
  1944 3ECE A9 7F		            lda #$7f      ; was 128 for half pixel
  1945 3ED0 85 EA		            sta current_x
  1946 3ED2 85 EC		            sta current_y
  1947
  1948 3ED4 A5 E6		            lda tmp_x1
  1949 3ED6 85 EB		            sta current_x+1
  1950 				            
  1951 3ED8 A5 E7		            lda tmp_y1
  1952 3EDA 85 ED		            sta current_y+1
  1953
  1954 				; dx = abs(tmp_x1 - tmp_x2)
  1955 3EDC 20 53 3E		            jsr calc_abs_tmp_dx
  1956
  1957 				; dy = abs(tmp_y1 - tmp_y2)
  1958 3EDF 20 61 3E		            jsr calc_abs_tmp_dy
  1959
  1960 				; set directions
  1961 3EE2 A5 E6		            lda tmp_x1
  1962 3EE4 C5 E8		            cmp tmp_x2
  1963 3EE6 90 04		            bcc x1_smaller_x2
  1964 				; x1 >= x2
  1965 3EE8 A9 01		            lda #1
  1966 3EEA D0 02		            bne set_dir_x
  1967 3EEC			x1_smaller_x2
  1968 3EEC A9 00		            lda #0
  1969 3EEE			set_dir_x
  1970 3EEE 85 FA		            sta dir_x
  1971 				            
  1972 3EF0 A5 E7		            lda tmp_y1
  1973 3EF2 C5 E9		            cmp tmp_y2
  1974 3EF4 90 04		            bcc y1_smaller_y2
  1975 				; y1 >= y2
  1976 3EF6 A9 01		            lda #1
  1977 3EF8 D0 02		            bne set_dir_y
  1978 3EFA			y1_smaller_y2
  1979 3EFA A9 00		            lda #0
  1980 3EFC			set_dir_y
  1981 3EFC 85 FB		            sta dir_y
  1982
  1983 				; Calculate diff between start angle and end angle
  1984
  1985 3EFE A5 AA		            lda ball_angle_start
  1986 3F00 85 B0		            sta tmp_angle1
  1987 3F02 A5 AB		            lda ball_angle_end
  1988 3F04 85 B1		            sta tmp_angle2
  1989 				            
  1990 3F06 20 0A 3E		            jsr calc_angle_diff
  1991
  1992 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1993 3F09 A6 B7		            ldx tmp_angle_diff
  1994 3F0B 20 48 3E		            jsr angle_to_magnitude
  1995 				            
  1996 3F0E 20 70 3E		            jsr calc_dx_div_magnitude
  1997 3F11 20 8C 3E		            jsr calc_dy_div_magnitude
  1998 				            
  1999 				; Calculate step size by ball speed
  2000 				            
  2001 				; step_x = step_x * speed
  2002 				            
  2003 3F14 A5 EE		            lda step_x
  2004 3F16 85 F6		            sta _multiplicand
  2005 3F18 A5 EF		            lda step_x+1
  2006 3F1A 85 F7		            sta _multiplicand+1
  2007 3F1C A5 AC		            lda ball_speed
  2008 3F1E 85 F8		            sta _multiplier
  2009
  2010 3F20 20 61 36		            jsr _multi8
  2011 				;result in .A (low byte, also in .X) and .Y (high byte)
  2012 3F23 85 EE		            sta step_x
  2013 3F25 84 EF		            sty step_x+1
  2014 3F27			skip_step_x_hi
  2015 				            
  2016 				; step_y = step_y * speed
  2017
  2018 3F27 A5 F0		            lda step_y
  2019 3F29 85 F6		            sta _multiplicand
  2020 3F2B A5 F1		            lda step_y+1
  2021 3F2D 85 F7		            sta _multiplicand+1
  2022 3F2F A5 AC		            lda ball_speed
  2023 3F31 85 F8		            sta _multiplier
  2024
  2025 3F33 20 61 36		            jsr _multi8
  2026 				;result in .A (low byte, also in .X) and .Y (high byte)
  2027 3F36 85 F0		            sta step_y
  2028 3F38 84 F1		            sty step_y+1
  2029 3F3A			skip_step_y_hi
  2030
  2031 3F3A 60			            rts
  2032
  2033 				; Move ball position 
  2034 				; Add one step, until end reached
  2035 				; Input:
  2036 				; - step size (step_x, step_y)
  2037 				; - current ball position (current_x, current_y)
  2038 				; - end position (tmp_x2, tmp_y2)
  2039 				; Output:
  2040 				; A (0 = still moving, 1 = end reached)
  2041 3F3B			move_current_xy
  2042 3F3B A9 00		            lda #0
  2043 3F3D 85 FC		            sta line_end_x
  2044 3F3F 85 FD		            sta line_end_y
  2045
  2046 				; sets line end indicators here
  2047 3F41 20 5E 3F		            jsr move_current_x
  2048 3F44 20 90 3F		            jsr move_current_y
  2049
  2050 3F47 A5 FC		            lda line_end_x
  2051 3F49 25 FD		            and line_end_y
  2052 3F4B F0 10		            beq no_end_reached
  2053
  2054 3F4D			end_reached
  2055 				; set current to (x2,y2)
  2056 3F4D A5 E8		            lda tmp_x2
  2057 3F4F 85 EB		            sta current_x+1
  2058 3F51 A5 E9		            lda tmp_y2
  2059 3F53 85 ED		            sta current_y+1
  2060 				            
  2061 3F55 A9 00		            lda #0
  2062 3F57 85 EA		            sta current_x
  2063 3F59 85 EC		            sta current_y
  2064 				            
  2065 3F5B A9 01		            lda #1 ; end reached
  2066 				            
  2067 3F5D			no_end_reached  ; A = 0
  2068 3F5D 60			            rts
  2069
  2070 3F5E			move_current_x
  2071 3F5E A5 FA		            lda dir_x
  2072 3F60 D0 14		            bne move_current_left
  2073
  2074 				; move right, add
  2075 3F62 A5 EA		            lda current_x
  2076 3F64 18			            clc
  2077 3F65 65 EE		            adc step_x
  2078 3F67 85 EA		            sta current_x
  2079 3F69 A5 EB		            lda current_x+1
  2080 3F6B 65 EF		            adc step_x+1
  2081 3F6D 85 EB		            sta current_x+1
  2082
  2083 3F6F A5 EB		            lda current_x+1
  2084 3F71 C5 E8		            cmp tmp_x2
  2085 3F73 90 00		            bcc no_line_end
  2086 3F75			exact_end_x
  2087 				;            lda #1
  2088 				;            sta line_end_x
  2089 3F75			no_line_end
  2090 3F75 60			            rts
  2091 				            
  2092 3F76			move_current_left
  2093 3F76 A5 EA		            lda current_x
  2094 3F78 38			            sec
  2095 3F79 E5 EE		            sbc step_x
  2096 3F7B 90 01		            bcc clear_skip
  2097 3F7D EA			            nop
  2098 3F7E			clear_skip
  2099 3F7E 85 EA		            sta current_x
  2100 3F80 A5 EB		            lda current_x+1
  2101 3F82 E5 EF		            sbc step_x+1
  2102 3F84 85 EB		            sta current_x+1
  2103 3F86 90 07		            bcc below_zero
  2104 				                        
  2105 3F88 A5 E8		            lda tmp_x2
  2106 3F8A C5 EB		            cmp current_x+1
  2107 3F8C 90 E7		            bcc no_line_end
  2108 				;            lda #1
  2109 				;            sta line_end_x
  2110 3F8E 60			            rts
  2111 3F8F			below_zero            
  2112 				;            lda #1
  2113 				;            sta line_end_x
  2114 				;            sta line_end_y
  2115 3F8F 60			            rts
  2116 3F90			move_current_y
  2117 3F90 A5 FB		            lda dir_y
  2118 3F92 D0 14		            bne move_current_up
  2119
  2120 				; move down, add
  2121 3F94 A5 EC		            lda current_y
  2122 3F96 18			            clc
  2123 3F97 65 F0		            adc step_y
  2124 3F99 85 EC		            sta current_y
  2125 3F9B A5 ED		            lda current_y+1
  2126 3F9D 65 F1		            adc step_y+1
  2127 3F9F 85 ED		            sta current_y+1
  2128 				            
  2129 3FA1 A5 ED		            lda current_y+1
  2130 3FA3 C5 E9		            cmp tmp_y2
  2131 3FA5 90 CE		            bcc no_line_end
  2132 3FA7			exact_end_y
  2133 				;            lda #1
  2134 				;            sta line_end_y
  2135 3FA7 60			            rts
  2136
  2137 3FA8			move_current_up
  2138 3FA8 A5 EC		            lda current_y
  2139 3FAA 38			            sec
  2140 3FAB E5 F0		            sbc step_y
  2141 3FAD 85 EC		            sta current_y
  2142 3FAF A5 ED		            lda current_y+1
  2143 3FB1 E5 F1		            sbc step_y+1
  2144 3FB3 90 DA		            bcc below_zero
  2145 3FB5 85 ED		            sta current_y+1
  2146 				            
  2147 3FB7 A5 E9		            lda tmp_y2
  2148 3FB9 C5 ED		            cmp current_y+1
  2149 3FBB 90 B8		            bcc no_line_end
  2150 				;            lda #1
  2151 				;            sta line_end_y
  2152 3FBD 60			            rts                            
  2153 				            
  2154 3FBE			init_sprites
  2155 3FBE A2 00		            ldx #0
  2156 3FC0 8A			            txa
  2157 3FC1			set_p
  2158 3FC1 9D 00 0E		            sta p0_area,x
  2159 3FC4 9D 80 0E		            sta p1_area,x
  2160 3FC7 9D 00 0F		            sta p2_area,x
  2161 3FCA 9D 80 0F		            sta p3_area,x
  2162 3FCD E8			            inx
  2163 3FCE 10 F1		            bpl set_p
  2164
  2165 3FD0 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2166 3FD2 8D 6F 02		            sta GPRIOR
  2167
  2168 3FD5 A9 0C		            lda #>pm_area
  2169 3FD7 8D 07 D4		            sta PMBASE
  2170
  2171 3FDA A9 03		            lda #3          ; P/M both on
  2172 3FDC 8D 1D D0		            sta GRACTL
  2173
  2174 3FDF A9 90		            lda #$90
  2175 3FE1 8D 02 D0		            sta HPOSP2
  2176 3FE4 A9 A0		            lda #$A0
  2177 3FE6 8D 03 D0		            sta HPOSP3  
  2178 3FE9 60			            rts
  2179
  2180 3FEA			init_colors
  2181 3FEA A9 5A		            lda #BASE_COLOR_P1+10
  2182 3FEC 8D C2 02		            sta PCOLR2
  2183 3FEF A9 BA		            lda #BASE_COLOR_P2+10
  2184 3FF1 8D C3 02		            sta PCOLR3
  2185 				            
  2186 3FF4 A9 00		            lda #0
  2187 3FF6 8D C6 02		            sta COLOR2
  2188
  2189 3FF9 A9 0E		            lda #HEADER_FG_COLOR
  2190 3FFB 8D C5 02		            sta COLOR1
  2191
  2192 3FFE A9 50		            lda #HEADER_P1_COLOR
  2193 4000 8D C0 02		            sta PCOLR0
  2194 4003 A9 B0		            lda #HEADER_P2_COLOR
  2195 4005 8D C1 02		            sta PCOLR1
  2196
  2197 4008 60			            rts
  2198
  2199 4009			previous_consol
  2200 4009 00			            dta 0
  2201
  2202 400A			current_level_index
  2203 400A 00			            dta 0
  2204 = 0007			NR_OF_LEVELS = 7
  2205 = 0000			INIT_LEVEL_INDEX = 0
  2206 400B			level_speeds
  2207 400B 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2208 				;level_speeds_lo
  2209 				;            dta 128
  2210 4012			stick_slow_speed_tab
  2211 4012 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2212 4019			stick_fast_speed_tab
  2213 4019 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2214
  2215 				; X = level (0..NR_OF_LEVELS)
  2216 4020			set_level_ball_speed
  2217 4020 BD 12 40		            lda stick_slow_speed_tab,x
  2218 4023 85 88		            sta stick_slow_speed
  2219 4025 BD 19 40		            lda stick_fast_speed_tab,x
  2220 4028 85 89		            sta stick_fast_speed
  2221
  2222 402A BD 0B 40		            lda level_speeds,x
  2223 402D 85 AC		            sta ball_speed
  2224 402F 8A			            txa
  2225 4030 18			            clc
  2226 4031 69 01		            adc #1
  2227 4033 09 10		            ora #16
  2228 4035 8D AB 52		            sta level_char
  2229 4038 60			            rts
  2230 				            
  2231 4039			increase_level
  2232 4039 EE 0A 40		            inc current_level_index
  2233 403C AD 0A 40		            lda current_level_index
  2234 403F C9 07		            cmp #NR_OF_LEVELS
  2235 4041 D0 05		            bne ok_level
  2236 4043 A9 00		            lda #INIT_LEVEL_INDEX
  2237 4045 8D 0A 40		            sta current_level_index
  2238 4048			ok_level           
  2239 4048 60			            rts
  2240
  2241 4049			increase_player_mode
  2242 4049 E6 8A		            inc player_mode
  2243 404B A5 8A		            lda player_mode
  2244 404D C9 03		            cmp #NR_OF_PLAYER_MODES
  2245 404F D0 04		            bne ok_player_mode
  2246 4051 A9 00		            lda #INIT_PLAYER_MODE
  2247 4053 85 8A		            sta player_mode
  2248 4055			ok_player_mode
  2249 4055 85 8B		            sta player_mode_saved
  2250 4057 60			            rts
  2251
  2252 4058			show_player_mode
  2253 4058 A6 8A		            ldx player_mode
  2254 405A BD 3F 53		            lda player_mode_lo,x
  2255 405D 8D F9 50		            sta menu_line2_ptr
  2256 4060 BD 42 53		            lda player_mode_hi,x
  2257 4063 8D FA 50		            sta menu_line2_ptr+1
  2258 4066 60			            rts
  2259
  2260 4067			            .align $100
  2261 4100			inner_x_tab
  2262 = 4200			inner_y_tab = *+$100
  2263 4100-42FF> 70 72 75 77 +             ins 'data\in210.dat'
  2264 				      
  2265 4300			            .align $400            
  2266 				; outer circle 1024 plot points on 360 degrees
  2267 4400			outer_x_tab
  2268 = 4800			outer_y_tab = *+1024
  2269 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2270 				           
  2271 4C00			            .align $400
  2272 				; table of magnitudes (length) between angle 0 and 0..255
  2273 				; fixed point 8.8 : hi.lo
  2274 4C00			magnitudes_lo
  2275 = 4D00			magnitudes_hi = *+256
  2276 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2277
  2278 4E00			            .align $400
  2279 5000			display_list
  2280 5000-512F> C2		            dta $42+128         ; dli_header
  2281 5001 06 51		            dta a(score_line)
  2282
  2283 				; 102 x 40 = 4080 bytes            
  2284 5003 4F			            dta $4f
  2285 5004 00 70		            dta a(screen_mem1)
  2286 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2287 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2288 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2289 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2290
  2291 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2292 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2293 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2294 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2295
  2296 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2297 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2298 5055			menu_dl_hook
  2299 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2300 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2301
  2302 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2303
  2304 				; 42 + 60 = 102, 4080 bytes
  2305 506B 4F			            dta $4f
  2306 506C 00 80		            dta a(screen_mem2)
  2307 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2308
  2309 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2310 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2311 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2312 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2313
  2314 5095 0F 0F		            dta $0f,$0f
  2315
  2316 				; 60 lines
  2317 5097			menu_dl_end
  2318 5097 4F			            dta $4f
  2319 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2320 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2321 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2322 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2323 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2324
  2325 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2326 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2327 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2328 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2329
  2330 				; 20 x 40 = 800
  2331 50D5 4F			            dta $4f
  2332 50D6 00 90		            dta a(screen_mem3)       
  2333 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2334 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2335 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2336 				            
  2337 50EB 41			            dta $41
  2338 50EC 00 50		            dta a(display_list)
  2339
  2340 50EE			menu_dl_part
  2341 50EE 80			            dta 128 ; dli_menu
  2342 50EF 20			            dta $20
  2343 50F0 42			            dta $42
  2344 50F1 00 52		            dta a(rotor_logo_text)
  2345 50F3 02			            dta 2
  2346 50F4 30			            dta $30
  2347 50F5 46			            dta $46
  2348 50F6			menu_line1_ptr
  2349 50F6 50 52		            dta a(controller_text)
  2350 50F8 46			            dta $46
  2351 50F9			menu_line2_ptr
  2352 50F9 64 52		            dta a(two_player_text)
  2353 50FB 46			            dta $46
  2354 50FC			menu_line3_ptr
  2355 50FC 9F 52		            dta a(level_text)
  2356 50FE 30			            dta $30
  2357 50FF 42			            dta $42
  2358 5100 B3 52		            dta a(start_text)
  2359 5102 10			            dta $10
  2360 5103 01			            dta $01 ; jump
  2361 5104 97 50		            dta a(menu_dl_end)
  2362
  2363 5106			score_line  
  2364 5106 00 2F 2E 25 00	            dta d' ONE '
  2365 510B			score_chars_p1
  2366 510B 0D 0D 00		            dta d'-- '
  2367
  2368 510E 00 00 00 00 00 00 +             dta d'          '
  2369 5118 00 00 00 00 00 00 +             dta d'          '
  2370
  2371 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2372 512B			score_chars_p2
  2373 512B 0D 0D 00		            dta d'-- '
  2374
  2375 512E 00			score_p1    dta 0
  2376 512F 00			score_p2    dta 0
  2377
  2378 5130			            .align $100
  2379 5200			rotor_logo_text
  2380 5200-5344> 00 00 00 00 +             dta d'              '
  2381 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2382 521A 40			            dta $40
  2383 521B 00 00 00 00 00 00 +             dta d'             '
  2384 5228 00 00 00 00 00 00 +             dta d'              '
  2385 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2386 5242 00 00 00 00 00 00 +             dta d'              '
  2387
  2388 5250			controller_text
  2389 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2390 525A			driver_screen
  2391 525A 00 00 00 00 00 00 +             dta d'          '
  2392
  2393 5264			two_player_text
  2394 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2395
  2396 5278			one_player_text
  2397 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2398
  2399 528B			demo_player_text
  2400 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2401
  2402 529F			level_text
  2403 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2404 52AB			level_char            
  2405 52AB 11 00 00 00 00 00 +             dta d'1       '
  2406
  2407 52B3			start_text
  2408 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2409 52DB			stick_text
  2410 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2411 52E3			paddle_text
  2412 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2413 52EB			mouse_text
  2414 52EB 2D 2F 35 33 25 00 +             dta d'MOUSE   '
  2415 52F3			unknown_text
  2416 52F3 35 2E 2B 2E 2F 37 +             dta d'UNKNOWN '
  2417
  2418 52FB			empty_text
  2419 52FB 00 00 00 00 00 00 +             dta d'                    '
  2420 530F			winner_one_text
  2421 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2422 5323			winner_two_text
  2423 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2424
  2425 5337			driver_text_lo
  2426 5337 DB			            dta <stick_text
  2427 5338 E3			            dta <paddle_text
  2428 5339 EB			            dta <mouse_text
  2429 533A F3			            dta <unknown_text
  2430 				            
  2431 533B			driver_text_hi
  2432 533B 52			            dta >stick_text
  2433 533C 52			            dta >paddle_text
  2434 533D 52			            dta >mouse_text
  2435 533E 52			            dta >unknown_text
  2436
  2437 533F			player_mode_lo
  2438 533F 64			            dta <two_player_text
  2439 5340 78			            dta <one_player_text
  2440 5341 8B			            dta <demo_player_text
  2441
  2442 5342			player_mode_hi
  2443 5342 52			            dta >two_player_text
  2444 5343 52			            dta >one_player_text
  2445 5344 52			            dta >demo_player_text
  2446
  2447 				; 4 KB
  2448 				; 128 x 32 bytes shapes
  2449 5345			            .align $1000
  2450 6000			pm_shapes
  2451 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2452
  2453 				; 9 KB for backdrop image
  2454 7000			            .align $1000
  2455 = 7000			screen_mem1 = * ; 4K
  2456 				;            org screen_mem1
  2457 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2458
  2459 7FF0			            .align $1000
  2460 = 8000			screen_mem2 = * ; 4K
  2461 				;            org screen_mem2
  2462 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2463
  2464 8FF0			            .align $1000
  2465 = 9000			screen_mem3 = * ; 1K
  2466 				;            org screen_mem3
  2467 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2468
  2469 02E0-02E1> C3 35		            run main
