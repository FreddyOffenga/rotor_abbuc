mads 1.9.9
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\rotor.asm
     1 				; R O T O R (II)
     2
     3 				; F#READY, 2023-10-04
     4 				; Version 2.4.3
     5 				; For cartridge release
     6
     7 				; - added more gradual levels (level 1 - 7)
     8 				; - added single player support (against robot)
     9 				; - added demo mode
    10 				; - added support for driving controllers
    11 				; - added autostart demo after about 2 minutes
    12
    13 				; Main idea:
    14 				; - two players ONE and TWO move in a circle
    15 				; - the ball gets color of player to indicate who should catch it
    16 				; - when the ball hits the circle, the other player gets a point
    17
    18 				; TODO
    19 				; - new score system; ball hit = point?
    20
    21 				            icl 'lib/labels.inc'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\labels.inc
     1 				; labels for OS and hardware
     2
     3 = 0055			x_position  = $55
     4 = 0054			y_position  = $54
     5
     6 = 0058			SAVMSC      = $58       ; screen memory pointer
     7
     8 = F1D8			plot_pixel  = $f1d8
     9
    10 = 0200			VDSLST      = $200
    11
    12 = 02FB			ATACHR      = $2fb      ; drawing color
    13 = 02FB			draw_color  = ATACHR    ; alias
    14
    15 = 026F			GPRIOR      = $026f
    16
    17 = 0270			PADDL0      = $0270
    18 = 0271			PADDL1      = $0271
    19
    20 = 0278			STICK0      = $0278
    21 = 0279			STICK1      = $0279
    22
    23 = 0284			STRIG0      = $0284
    24 = 0285			STRIG1      = $0285
    25
    26 = 022F			SDMCTL      = $022f
    27 = 0230			SDLSTL      = $0230
    28 = 0231			SDLSTH      = $0231
    29
    30 = 02C0			PCOLR0      = $02c0
    31 = 02C1			PCOLR1      = $02c1
    32 = 02C2			PCOLR2      = $02c2
    33 = 02C3			PCOLR3      = $02c3
    34
    35 = 02C4			COLOR0      = $02c4
    36 = 02C5			COLOR1      = $02c5
    37 = 02C6			COLOR2      = $02c6
    38 = 02C7			COLOR3      = $02c7
    39
    40 = D000			HPOSP0      = $d000
    41 = D001			HPOSP1      = $d001
    42 = D002			HPOSP2      = $d002
    43 = D003			HPOSP3      = $d003
    44 = D004			HPOSM0      = $d004
    45 = D005			HPOSM1      = $d005
    46 = D006			HPOSM2      = $d006
    47 = D007			HPOSM3      = $d007
    48
    49 = D008			SIZEP0      = $d008
    50 = D009			SIZEP1      = $d009
    51 = D00A			SIZEP2      = $d00a
    52 = D00B			SIZEP3      = $d00b
    53 = D00C			SIZEM       = $d00c
    54
    55 				; collision
    56 = D000			M0PF        = $d000
    57 = D001			M1PF        = $d001
    58 = D002			M2PF        = $d002
    59 = D003			M3PF        = $d003
    60
    61 = D004			P0PF        = $d004
    62 = D005			P1PF        = $d005
    63 = D006			P2PF        = $d006
    64 = D007			P3PF        = $d007
    65
    66 = D008			M0PL        = $d008
    67 = D009			M1PL        = $d009
    68 = D00A			M2PL        = $d00a
    69 = D00B			M3PL        = $d00b
    70
    71 = D00C			P0PL        = $d00c
    72 = D00D			P1PL        = $d00d
    73 = D00E			P2PL        = $d00e
    74 = D00F			P3PL        = $d00f
    75
    76 = D012			COLPM0      = $d012
    77 = D013			COLPM1      = $d013
    78 = D014			COLPM2      = $d014
    79 = D015			COLPM3      = $d015
    80
    81 = D016			COLPF0      = $d016
    82 = D017			COLPF1      = $d017
    83 = D018			COLPF2      = $d018
    84 = D019			COLPF3      = $d019
    85 = D01A			COLBK       = $d01a
    86
    87 = D01D			GRACTL      = $d01d
    88 = D01E			HITCLR      = $d01e
    89 = D01F			CONSOL      = $d01f
    90
    91 = D200			AUDF1       = $d200
    92 = D201			AUDC1       = $d201
    93 = D202			AUDF2       = $d202
    94 = D203			AUDC2       = $d203
    95 = D204			AUDF3       = $d204
    96 = D205			AUDC3       = $d205
    97 = D206			AUDF4       = $d206
    98 = D207			AUDC4       = $d207
    99 = D208			AUDCTL      = $d208
   100
   101 = D20A			RANDOM      = $d20a
   102
   103 = D300			PORTA       = $d300
   104
   105 = D407			PMBASE      = $d407
   106 = D40A			WSYNC       = $d40a
   107 = D40E			NMIEN       = $d40e
    22
    23 				; color scheme
    24 = 0050			BASE_COLOR_P1   = $50   ; purple
    25 = 00B0			BASE_COLOR_P2   = $b0   ; green
    26
    27 = 000E			HEADER_FG_COLOR = 14
    28 = 0050			HEADER_P1_COLOR = BASE_COLOR_P1
    29 = 00B0			HEADER_P2_COLOR = BASE_COLOR_P2
    30
    31 				; must be in decimal format, so $11 is 11
    32 = 0011			MAX_SCORE   = $11
    33
    34 = 0C00			pm_area     = $0c00
    35 = 0D80			msl_area    = pm_area+$180
    36 = 0E00			p0_area     = pm_area+$200
    37 = 0E80			p1_area     = pm_area+$280
    38 = 0F00			p2_area     = pm_area+$300
    39 = 0F80			p3_area     = pm_area+$380
    40
    41 				; outer tables 256 for 360 degrees
    42 = 1000			outer_x_256     = $1000
    43 = 1100			outer_y_256     = $1100
    44
    45 = 1200			screen_y_lo     = $1200
    46 = 1300			screen_y_hi     = $1300
    47
    48 = 1400			pm_shape_lo     = $1400 ; 128 bytes
    49 = 1480			pm_shape_hi     = $1480 ; 128 bytes
    50
    51 = 0140			WIDTH           = 320
    52 = 00C0			HEIGHT          = 192
    53
    54 = 0028			SCREEN_WIDTH    = 40
    55
    56 = 0030			outer_x_margin  = 48 ;47-32
    57 = 0040			inner_x_margin  = 64
    58
    59 = 00A0			circle_center_x = WIDTH/2
    60 = 0060			circle_center_y = HEIGHT/2
    61
    62 = 0006			ball_top_margin     = 6
    63 = 0045			ball_left_margin    = 64+5
    64
    65 				; pm upper margin
    66 = 0001			upper_margin    = 1
    67 = 0020			left_margin     = 32
    68
    69 = 0080			music_toggle    = $80
    70
    71 = 0081			shadow_HPOSP0   = $81
    72 = 0082			shadow_HPOSP1   = $82
    73
    74 = 0083			winner_color    = $83
    75
    76 = 0084			shape_ptr       = $84
    77 = 0086			tmp_screen      = $86
    78
    79 = 0088			stick_slow_speed = $88
    80 = 0089			stick_fast_speed = $89
    81
    82 = 008A			player_mode     = $8a
    83 = 0000			MODE_2_PLAYER   = 0
    84 = 0001			MODE_1_PLAYER   = 1
    85 = 0002			MODE_DEMO       = 2
    86 = 0003			NR_OF_PLAYER_MODES = 3
    87 = 0000			INIT_PLAYER_MODE = MODE_2_PLAYER
    88
    89 = 008C			game_state      = $8c
    90 = 0000			STATE_IN_GAME   = 0
    91 = 0001			STATE_IN_MENU   = 1
    92 = 0002			STATE_IN_END    = 2
    93
    94 = 008D			volume_hit_bat  = $8d
    95 = 008E			volume_hit_edge = $8e
    96
    97 = 008F			end_screen_delay = $8f
    98
    99 				; player vars must be in sequence for zp,x indexing
   100
   101 = 0090			p1_shape        = $90
   102 = 0091			p2_shape        = $91
   103
   104 = 0094			player1_x       = $94
   105 = 0095			player2_x       = $95
   106
   107 = 0098			player1_y       = $98
   108 = 0099			player2_y       = $99
   109
   110 = 009C			p1_angle        = $9c
   111 = 009D			p2_angle        = $9d
   112
   113 = 00A0			mp_collision    = $a0
   114 = 00A1			in_collision    = $a1
   115 = 00A2			player_nr_hit   = $a2       ; which player hit the ball? 1=player1, 2=player2
   116 = 00A3			edge_delay      = $a3
   117 = 00A4			bat_collision_delay = $a4
   118
   119 				; ball vars
   120 = 00A6			ball_current_x      = $a6
   121 = 00A7			ball_current_y      = $a7
   122 = 00AA			ball_angle_start    = $aa
   123 = 00AB			ball_angle_end      = $ab
   124 = 00AC			ball_speed          = $ac
   125
   126 = 00AD			edge_collision      = $ad
   127 = 00AE			edge_hit_count      = $ae
   128
   129 = 00B0			tmp_angle1          = $b0
   130 = 00B1			tmp_angle2          = $b1
   131 = 00B2			add_to_angle        = $b2
   132 = 00B3			angle_diff_bat      = $b3
   133 = 00B4			tmp_angle_direction = $b4
   134 = 00B5			player_turn         = $b5       ; who's turn to hit ball? 1=player1, 2=player2
   135 = 00B6			game_restart        = $b6
   136 = 00B7			tmp_angle_diff      = $b7
   137 = 00B8			magnitude           = $b8       ; word
   138
   139 = 00BA			cpu_angle_end       = $ba       ; 2 bytes
   140 = 00BA			cpu1_angle_end      = cpu_angle_end
   141 = 00BB			cpu2_angle_end      = cpu_angle_end+1
   142
   143 				; $c0 - $df free for music
   144
   145 = 00E0			_divisor    = $e0   ; word
   146 = 00E2			_dividend   = $e2   ; word
   147 = 00E4			_remainder  = $e4   ; word
   148 = 00E2			_result     = _dividend         ; save memory by reusing divident to store the result
   149
   150 = 00E6			tmp_x1      = $e6   ; byte
   151 = 00E7			tmp_y1      = $e7   ; byte
   152 = 00E8			tmp_x2      = $e8   ; byte
   153 = 00E9			tmp_y2      = $e9   ; byte
   154
   155 = 00EA			current_x   = $ea  ; word  8.8 fixed point
   156 = 00EC			current_y   = $ec  ; word  8.8 fixed point
   157
   158 = 00EE			step_x      = $ee  ; word  8.8 fixed point
   159 = 00F0			step_y      = $f0  ; word  8.8 fixed point
   160
   161 = 00F2			tmp_dx      = $f2  ; byte
   162 = 00F3			tmp_dy      = $f3  ; byte
   163
   164 = 00F6			_multiplicand   = $f6   ; word
   165 = 00F8			_multiplier     = $f8   ; byte
   166
   167 				; direction:
   168 				; 0 : x1<x2 or y1<y2 = add
   169 				; 1 ; x1>=y2 or y1>=y2 = subtract
   170
   171 = 00FA			dir_x       = $fa  ; byte
   172 = 00FB			dir_y       = $fb  ; byte
   173
   174 = 00FC			line_end_x  = $fc  ; byte
   175 = 00FD			line_end_y  = $fd  ; byte
   176
   177 				            icl 'intro.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\intro.asm
     1 				; rotor intro 
     2
     3 				            org $0600
     4
     5 				first_screen_off
     6 FFFF> 0600-0618> A9 00	            lda #0
     7 0602 8D 2F 02		            sta 559
     8 0605 A5 14		            lda 20
     9 0607			wait_black
    10 0607 C5 14		            cmp 20
    11 0609 F0 FC		            beq wait_black
    12
    13 				; BASIC off
    14 060B AD 01 D3		            lda $d301
    15 060E 09 02		            ora #2
    16 0610 8D 01 D3		            sta $d301
    17
    18 0613 A9 01		            lda #1
    19 0615 8D 44 02		            sta 580
    20 0618 60			            rts
    21
    22 02E2-02E3> 00 06		            ini first_screen_off
    23
    24 0619			            org $9800
    25 9800			rotor_font
    26 9800-9D15> 00 00 00 00 +             ins 'font\rotor.fnt'
    27
    28 9C00			intro_main
    29 9C00 A9 48		            lda #<dl_intro
    30 9C02 8D 30 02		            sta $230
    31 9C05 A9 9C		            lda #>dl_intro
    32 9C07 8D 31 02		            sta $231
    33
    34 9C0A A9 98		            lda #>rotor_font
    35 9C0C 8D F4 02		            sta 756
    36
    37 9C0F A9 00		            lda #0
    38 9C11 8D C6 02		            sta 710
    39
    40 9C14 A9 22		            lda #34
    41 9C16 8D 2F 02		            sta 559
    42
    43 				; reset clock
    44 9C19 A9 00		            lda #0
    45 9C1B 85 14		            sta 20
    46 9C1D 85 13		            sta 19
    47 				            
    48 9C1F 60			            rts
    49
    50 9C20			footer_intro
    51 9C20 2B 6F 64 1A 26 03 +             dta d'Kod:F#READY  Music:IvoP  Gfx:IvoP,Fred_M'
    52
    53 9C48			dl_intro
    54 9C48 70 70 70		            dta $70,$70,$70
    55
    56 9C4B 4F			            dta $4f
    57 9C4C 10 A0		            dta a(intro_image)
    58 9C4E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    59 9C55 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    60 9C5D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    61 9C65 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    62
    63 9C6D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    64 9C75 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    65 9C7D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    66 9C85 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    67
    68 9C8D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    69 9C95 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    70 9C9D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    71 9CA5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    72
    73 9CAD 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
    74
    75 9CB3 4F			            dta $4f
    76 9CB4 00 B0		            dta a(intro_image+$ff0)
    77 9CB6 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
    78 9CBD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    79 9CC5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    80 9CCD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    81
    82 9CD5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    83 9CDD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    84 9CE5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    85 9CED 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    86
    87 9CF5 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    88 9CFD 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f            
    89 9D05 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
    90 9D0D 0F 0F		            dta $0f,$0f
    91 				            
    92 9D0F 20			            dta $20
    93 9D10 42			            dta $42
    94 9D11 20 9C		            dta a(footer_intro)
    95
    96 9D13 41			            dta $41
    97 9D14 48 9C		            dta a(dl_intro)
    98 				            
    99 9D16			            org $a010
   100 A010			intro_image
   101 				            ;ins 'gfx\intro\intro_v6_gr8_inverted.gr8'
   102 A010-BE0F> 10 82 84 42 +             ins 'gfx\intro\intro_rotor2_v2.gr8'
   103
   104 02E2-02E3> 00 9C		            ini intro_main
   178
   179 				; real data is loaded at $2000 ($1700+$900)
   180 BE10			            org $1700
   181 1700			            icl 'music\rotor_music\rotor_music.asm'
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\music\rotor_music\rotor_music.asm
     1 				;
     2 				; LZSS Compressed SAP player for 16 match bits
     3 				; --------------------------------------------
     4 				;
     5 				; (c) 2020 DMSC
     6 				; Code under MIT license, see LICENSE file.
     7 				;
     8 				; This player uses:
     9 				;  Match length: 8 bits  (1 to 256)
    10 				;  Match offset: 8 bits  (1 to 256)
    11 				;  Min length: 2
    12 				;  Total match bits: 16 bits
    13 				;
    14 				; Compress using:
    15 				;  lzss -b 16 -o 8 -m 1 input.rsap test.lz16
    16 				;
    17 				; Assemble this file with MADS assembler, the compressed song is expected in
    18 				; the `test.lz16` file at assembly time.
    19 				;
    20 				; The plater needs 256 bytes of buffer for each pokey register stored, for a
    21 				; full SAP file this is 2304 bytes.
    22 				;
    23
    24 = 0232			SSKCTL = $0232
    25 				;RANDOM = $d20a
    26 = D20F			SKCTL  = $d20f
    27
    28 = 00C0			zp_music    = $c0
    29 = 00C0			chn_copy    = zp_music    ; .ds     9
    30 = 00C9			chn_pos     = zp_music+9  ; .ds     9
    31 = 00D2			bptr        = zp_music+18 ; .ds     2
    32 = 00D4			cur_pos     = zp_music+20 ; .ds     1
    33 = 00D5			chn_bits    = zp_music+21 ; .ds     1
    34 = 00D6			bit_data    = zp_music+22 ; .byte   1
    35
    36 = 00D7			newsong     = zp_music+23 ; .ds     1       ; IVO
    37
    38 = 00D8			stereo_pokey    = zp_music+24 ;.ds     1
    39
    40 = D200			POKEY = $D200
    41
    42 				    ;org $9800
    43 1700			buffers
    44 = 1700			    .ds 256 * 9
    45
    46 2000			intro_data
    47 2000-3277> 01 01 A1 34 +         ins     'intro.lz16'
    48 22D8			intro_end
    49
    50 22D8			loop_data
    51 22D8 01 01 A1 34 00 10 +         ins     'loop.lz16'
    52 30D7			loop_end
    53
    54 30D7			.proc get_byte
    55 30D7 AD 34 12		    lda $1234
    56 30DA EE D8 30		    inc song_ptr
    57 30DD D0 03		    bne skip
    58 30DF EE D9 30		    inc song_ptr+1
    59 30E2			skip
    60 30E2 60			    rts
    61 				.endp
    62 = 30D8			song_ptr = get_byte + 1
    63
    64 30E3			start
    65
    66 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67 				; Song Initialization - this runs in the first tick:
    68 				;
    69 30E3			.proc play_first_frame
    70
    71 30E3 20 D7 30		    jsr get_byte                    ; IVO START move init here
    72 30E6 8D 22 31		    sta play_frame.init_chn_bits
    73 30E9 A9 01		    lda #1                          ; IVO set to 1 at init(!)
    74 30EB 85 D6		    sta bit_data
    75 30ED A9 17		    lda #>buffers                   ; IVO reset cbuf+1 pointer
    76 30EF 8D 02 31		    sta cbuf+2                      ; IVO END
    77
    78 				    ; Init all channels:
    79 30F2 A2 08		    ldx #8
    80 30F4 A0 00		    ldy #0
    81 30F6 84 D7		    sty newsong                     ; IVO signal first frame is played
    82 30F8			clear
    83 				    ; Read just init value and store into buffer and POKEY
    84 30F8 20 D7 30		    jsr get_byte
    85 30FB 9D 6F 32		    sta SHADOW, x
    86 30FE 94 C0		    sty chn_copy, x
    87 3100			cbuf
    88 3100 8D FF 17		    sta buffers + 255
    89 3103 EE 02 31		    inc cbuf + 2
    90 3106 CA			    dex
    91 3107 10 EF		    bpl clear
    92
    93 				    ; Initialize buffer pointer:
    94 3109 84 D2		    sty bptr
    95 310B 84 D4		    sty cur_pos
    96 310D 60			    rts                     ; IVO turn into subroutine
    97 				.endp
    98
    99 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100 				; Wait for next frame
   101 				;
   102 310E			.proc wait_frame
   103
   104 310E A5 14		    lda 20
   105 3110			delay
   106 3110 C5 14		    cmp 20
   107 3112 F0 FC		    beq delay
   108 3114 60			    rts                     ; IVO turn into subroutine
   109 				.endp
   110
   111 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   112 				; Play one frame of the song
   113 				;
   114 3115			.proc play_frame
   115 3115 A5 D7		    lda newsong
   116 3117 F0 02		    beq continue
   117 3119 D0 C8		    bne play_first_frame
   118
   119 311B			continue
   120 311B A4 D4		    ldy cur_pos                 ; IVO
   121
   122 311D A9 17		    lda #>buffers
   123 311F 85 D3		    sta bptr+1
   124
   125 = 3122			init_chn_bits=*+1
   126 3121 A9 00		    lda #0              ; IVO: 8 bits, but 9 streams. bug?
   127 3123 85 D5		    sta chn_bits
   128 3125 A2 08		    ldx #8
   129
   130 				    ; Loop through all "channels", one for each POKEY register
   131 3127			chn_loop:
   132 3127 46 D5		    lsr chn_bits
   133 3129 B0 29		    bcs skip_chn       ; C=1 : skip this channel
   134
   135 312B B5 C0		    lda chn_copy, x    ; Get status of this stream
   136 312D D0 16		    bne do_copy_byte   ; If > 0 we are copying bytes
   137
   138 				    ; We are decoding a new match/literal
   139 312F 46 D6		    lsr bit_data       ; Get next bit
   140 3131 D0 06		    bne got_bit
   141 3133 20 D7 30		    jsr get_byte       ; Not enough bits, refill!
   142 3136 6A			    ror                ; Extract a new bit and add a 1 at the high bit (from C set above)
   143 3137 85 D6		    sta bit_data       ;
   144 3139			got_bit:
   145 3139 20 D7 30		    jsr get_byte       ; Always read a byte, it could mean "match size/offset" or "literal byte"
   146 313C B0 0F		    bcs store          ; Bit = 1 is "literal", bit = 0 is "match"
   147
   148 313E 95 C9		    sta chn_pos, x     ; Store in "copy pos"
   149
   150 3140 20 D7 30		    jsr get_byte
   151 3143 95 C0		    sta chn_copy, x    ; Store in "copy length"
   152
   153 				                        ; And start copying first byte
   154 3145			do_copy_byte:
   155 3145 D6 C0		    dec chn_copy, x     ; Decrease match length, increase match position
   156 3147 F6 C9		    inc chn_pos, x
   157 3149 B4 C9		    ldy chn_pos, x
   158
   159 				    ; Now, read old data, jump to data store
   160 314B B1 D2		    lda (bptr), y
   161
   162 314D			store:
   163 314D A4 D4		    ldy cur_pos
   164 314F 9D 6F 32		    sta SHADOW, x        ; Store to output and buffer
   165 3152 91 D2		    sta (bptr), y
   166
   167 3154			skip_chn:
   168 				    ; Increment channel buffer pointer
   169 3154 E6 D3		    inc bptr+1
   170
   171 3156 CA			    dex
   172 3157 10 CE		    bpl chn_loop        ; Next channel
   173
   174 3159 E6 D4		    inc cur_pos
   175 315B 60			    rts                 ; IVO once per frame
   176 				.endp
   177
   178 				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   179 				; Check for ending of song and jump to the next frame
   180 				;
   181 315C			.proc check_end_song
   182 315C AD D9 30		    lda song_ptr + 1
   183 = 3160			song_end_high=*+1
   184 315F C9 00		    cmp #>0
   185 3161 D0 09		    bne not_equal           ; IVO turn into subroutine
   186 3163 AD D8 30		    lda song_ptr
   187 = 3167			song_end_low=*+1
   188 3166 C9 00		    cmp #<0
   189 3168 D0 02		    bne not_equal           ; IVO turn intro subroutine
   190
   191 316A 38			    sec                     ; IVO....
   192 316B 60			    rts
   193 316C			not_equal
   194 316C 18			    clc
   195 316D 60			    rts
   196 				.endp
   197
   198 				; IVO everything below
   199
   200 316E			.proc music_init
   201 316E 20 10 32		    jsr detect_2nd_pokey
   202 3171 20 49 32		    jsr clear_echo
   203
   204 3174 A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   205 				;    mwa #half_volume adjust_volume.volume
   206 				;    mwa #quarter_volume adjust_volume.volume
   207
   208 317E A9 D8		    lda #<intro_end
   209 3180 8D 67 31		    sta check_end_song.song_end_low
   210 3183 A9 22		    lda #>intro_end
   211 3185 8D 60 31		    sta check_end_song.song_end_high
   212 3188 A9 00		    lda #<(intro_data)
   213 318A 8D D8 30		    sta song_ptr
   214 318D A9 20		    lda #>(intro_data)
   215 318F 8D D9 30		    sta song_ptr+1
   216 3192 A9 01		    lda #1
   217 3194 85 D7		    sta newsong
   218 3196 60			    rts
   219 				.endp
   220
   221 3197			.proc play_song
   222 3197			playloop
   223 3197 20 15 31		    jsr play_frame      ; generates tick two and beyond
   224 319A 20 BF 31		    jsr adjust_volume
   225
   226 319D 20 5C 31		    jsr check_end_song
   227 31A0 90 03		    bcc no_end_song
   228 31A2 20 A6 31		    jsr restart_music
   229 31A5			no_end_song
   230 31A5 60			    rts
   231 				.endp
   232
   233 31A6			.proc restart_music
   234 31A6 A9 D7		    lda #<loop_end
   235 31A8 8D 67 31		    sta check_end_song.song_end_low
   236 31AB A9 30		    lda #>loop_end
   237 31AD 8D 60 31		    sta check_end_song.song_end_high
   238 31B0 A9 D8		    lda #<(loop_data)
   239 31B2 8D D8 30		    sta song_ptr
   240 31B5 A9 22		    lda #>(loop_data)
   241 31B7 8D D9 30		    sta song_ptr+1
   242 31BA A9 01		    lda #1
   243 31BC 85 D7		    sta newsong
   244 31BE 60			    rts
   245 				.endp
   246
   247 31BF			.proc adjust_volume
   248 31BF A0 06		    ldy #6
   249 31C1			adjust
   250 31C1 B9 70 32		    lda SHADOW+1,y
   251 31C4 AA			    tax
   252 31C5 29 F0		    and #$f0
   253 31C7 99 70 32		    sta SHADOW+1,y
   254 31CA 8A			    txa
   255 31CB 29 0F		    and #$0f
   256 31CD AA			    tax
   257 = 31CF			volume=*+1
   258 31CE BD 34 12		    lda $1234,x
   259 31D1 19 70 32		    ora SHADOW+1,y
   260 31D4 99 70 32		    sta SHADOW+1,y
   261 31D7 88			    dey
   262 31D8 88			    dey
   263 31D9 10 E6		    bpl adjust
   264 				    
   265 31DB 60			    rts
   266 				.endp
   267
   268 31DC			.proc copy_shadow
   269 31DC A2 08		    ldx #8
   270 31DE			copy
   271 31DE BD 6F 32		    lda SHADOW,x
   272 31E1 9D 00 D2		    sta POKEY,x
   273 31E4 CA			    dex
   274 31E5 10 F7		    bpl copy
   275
   276 31E7 A5 D8		    lda stereo_pokey
   277 31E9 F0 0E		    beq end_copy
   278
   279 31EB A2 08		    ldx #8
   280 31ED			copy2
   281 31ED BD 81 32		    lda ECHO,x
   282 31F0 9D 10 D2		    sta POKEY+$10,x
   283 31F3 CA			    dex
   284 31F4 10 F7		    bpl copy2
   285
   286 31F6 20 54 32		    jsr shift_echo
   287
   288 31F9			end_copy
   289 31F9 60			    rts
   290 				.endp
   291
   292 31FA			.proc music_normal_volume
   293 31FA A9 8A 8D CF 31 A9 +     mwa #normal_volume adjust_volume.volume
   294 3204 60			    rts
   295 				.endp
   296
   297 3205			.proc music_low_volume
   298 3205 A9 AA 8D CF 31 A9 +     mwa #quarter_volume adjust_volume.volume
   299 320F 60			    rts
   300 				.endp
   301
   302 3210			.proc detect_2nd_pokey
   303 3210 20 0E 31		    jsr wait_frame
   304
   305 3213 A9 00 8D 32 02	    mva #0 SSKCTL
   306 3218 A9 00 8D 0F D2	    mva #0 SKCTL
   307 321D A9 00 8D 1F D2	    mva #0 SKCTL+$10        ; make sure a potential 2nd pokey is cleared
   308
   309 3222 20 0E 31		    jsr wait_frame
   310
   311 				    ; Restart SKCTL. This starts all the poly counters
   312
   313 3225 A9 03 8D 32 02	    mva #3 SSKCTL
   314 322A A9 03 8D 0F D2	    mva #3 SKCTL
   315
   316 322F 20 0E 31		    jsr wait_frame
   317
   318 				    ; Except when there's a seconds pokey!! Its counters are not restarted.
   319 				    ; Its RANDOM should not change.
   320
   321 3232 AD 1A D2		    lda RANDOM+$10
   322 3235 CD 1A D2		    cmp RANDOM+$10
   323 3238 F0 05		    beq detected_stereo         ; so equal means there's a 2nd pokey
   324
   325 323A			detected_mono
   326 323A A9 00 85 D8		    mva #0 stereo_pokey
   327 323E 60			    rts
   328
   329 323F			detected_stereo
   330 323F A9 01 85 D8		    mva #1 stereo_pokey
   331 3243 A9 03 8D 1F D2	    mva #3 SKCTL+$10            ; start second pokey here
   332 3248 60			    rts
   333 				.endp
   334
   335 3249			.proc clear_echo
   336 3249 A0 11		    ldy #(endecho-echobuffer)-1
   337 324B			clear_echo_loop
   338 324B A9 00 99 78 32	    mva #0 echobuffer,y
   339 3250 88 10 F8		    dey:bpl clear_echo_loop
   340 3253 60			    rts
   341 				.endp
   342
   343 3254			.proc shift_echo
   344 3254 A0 11		    ldy #(ECHO-echobuffer)-1+9
   345 3256			shift_loop
   346 3256 B9 6F 32 99 78 32	    mva SHADOW,y SHADOW+9,y
   347 325C 88 10 F7		    dey:bpl shift_loop
   348 325F 60			    rts
   349 				.endp
   350
   351 3260			.proc music_off
   352 3260 A9 00		    lda #0
   353 3262 8D 70 32		    sta shadow+1
   354 3265 8D 72 32		    sta shadow+3
   355 3268 8D 74 32		    sta shadow+5
   356 326B 8D 76 32		    sta shadow+7
   357 326E 60			    rts
   358 				.endp
   359
   360 326F			SHADOW              ; shadow pokey
   361 326F 00 00 00 00 00 00 + :9 .byte 0
   362
   363 				                    ; fake stereo effect:
   364 				                    ; 0*9 = small
   365 				                    ; 1*9 = medium
   366 				                    ; 2*9 = big
   367 				                    ; >3 too big imho
   368
   369 3278			echobuffer
   370 = 3278			    .ds 1*9        ; total of echobuffer+ECHO MUST NOT exceed 128 bytes
   371
   372 3281			ECHO
   373 = 3281			    .ds 9
   374 328A			endecho
   375
   376 328A			normal_volume
   377 328A-32BB> 00 01 02 03 +     dta 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
   378 329A			half_volume
   379 329A 00 01 01 02 02 03 +     dta 0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,7
   380 32AA			quarter_volume
   381 32AA 00 01 01 01 01 02 +     dta 0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4
   182
   183 32BC			            icl 'lib/drivers.inc'       
Source: C:\Users\Freddy\Documents\Projects\wudsn\Freddy\2023\2023 ROTOR\rotor_abbuc\lib\drivers.inc
     1
     2 				; F#READY
     3
     4 = 32BC			driver_tmp      .ds 2
     5 = 32BE			driver_mode     .ds 1
     6
     7 = 00E5			paddle_vals = 229
     8 = 011F			paddle_add  = 287       ; 65536 / 229
     9
    10 32BF			            .align $100
    11 3300			paddle_to_256
    12 = 3300			            .ds $100
    13
    14 				; paddle initial value
    15 3400			prev_paddle_value
    16 = 3400			            .ds 1
    17
    18 				; previous driving controller value (player 1,2)
    19 3401			prev_driving_value
    20 = 3401			            .ds 2
    21
    22 3403			driver_init
    23 3403-3FA8> A9 00		            lda #0  ; stick
    24 3405 8D BE 32		            sta driver_mode
    25
    26 3408 8D 01 34		            sta prev_driving_value
    27 340B 8D 02 34		            sta prev_driving_value+1
    28
    29 340E AD 70 02		            lda PADDL0
    30 3411 8D 00 34		            sta prev_paddle_value
    31
    32 3414 A9 00		            lda #0
    33 3416 85 9C		            sta p1_angle
    34 3418 A9 80		            lda #128
    35 341A 85 9D		            sta p2_angle
    36
    37 				; init paddle table
    38
    39 341C A9 00		            lda #0
    40 341E 8D BC 32		            sta driver_tmp
    41 3421 8D BD 32		            sta driver_tmp+1
    42 				            
    43 3424 A2 00		            ldx #0
    44 3426			store_pv
    45 3426 AD BD 32		            lda driver_tmp+1
    46 3429 9D 00 33		            sta paddle_to_256,x
    47 				            
    48 342C AD BC 32		            lda driver_tmp
    49 342F 18			            clc
    50 3430 69 1F		            adc #<paddle_add
    51 3432 8D BC 32		            sta driver_tmp
    52 3435 AD BD 32		            lda driver_tmp+1
    53 3438 69 01		            adc #>paddle_add
    54 343A 8D BD 32		            sta driver_tmp+1
    55 343D E8			            inx
    56 343E E0 E5		            cpx #paddle_vals
    57 3440 D0 E4		            bne store_pv
    58 3442 60			            rts
    59
    60 				; stick detect by using left/right
    61 				; paddle by connecting/rotate
    62 				; driving controller by rotate
    63
    64 				; return A = driver mode
    65 				; 0 = stick detected
    66 				; 1 = paddle detected
    67 				; 2 = driving detected
    68
    69 3443			driver_detect
    70 3443 AD 70 02		            lda PADDL0
    71 3446 C9 E4		            cmp #228
    72 3448 D0 07		            bne paddle_detect
    73 344A AD 71 02		            lda PADDL1
    74 344D C9 E4		            cmp #228
    75 344F F0 06		            beq no_paddle_detect
    76 3451			paddle_detect
    77 3451 A9 01		            lda #1
    78 3453 8D BE 32		            sta driver_mode
    79 3456 60			            rts
    80
    81 3457			no_paddle_detect
    82 3457 AD 78 02		            lda STICK0
    83 345A C9 0C		            cmp #12
    84 345C D0 06		            bne no_driving_detect
    85 345E A9 02		            lda #2
    86 3460 8D BE 32		            sta driver_mode
    87 3463 60			            rts
    88
    89 3464			no_driving_detect
    90 3464 C9 07		            cmp #7      ; paddle button also gives this
    91 3466 F0 04		            beq stick_detect    
    92 3468 C9 0B		            cmp #11     ; paddle button also gives this
    93 346A D0 06		            bne no_stick_detect
    94 346C			stick_detect
    95 346C A9 00		            lda #0
    96 346E 8D BE 32		            sta driver_mode
    97 3471 60			            rts
    98
    99 3472			no_stick_detect
   100 				; default is the last value
   101 3472 AD BE 32		            lda driver_mode
   102 3475 60			            rts
   103
   104 				; move player 1/2
   105 				; right - clockwise, left = anti-clockwise
   106
   107 				; X = 0, player 1
   108 				; X = 1, player 2
   109
   110 				; A = driver mode:
   111 				; 0 : stick
   112 				; 1 : paddle
   113 				; 2 : driving
   114 				; 3 : computer
   115
   116 3476			main_driver
   117 3476 AC BE 32		            ldy driver_mode
   118 3479 B9 88 34		            lda driver_lo,y
   119 347C 8D 86 34		            sta driver_ptr
   120 347F B9 8C 34		            lda driver_hi,y
   121 3482 8D 87 34		            sta driver_ptr+1
   122
   123 = 3486			driver_ptr = *+1
   124 3485 4C FF FF		            jmp $ffff  
   125
   126 3488			driver_lo
   127 3488 90			            dta <driver_stick
   128 3489 FE			            dta <driver_paddle
   129 348A 0B			            dta <driver_driving
   130 348B 90			            dta <driver_stick
   131
   132 348C			driver_hi
   133 348C 34			            dta >driver_stick
   134 348D 34			            dta >driver_paddle
   135 348E 35			            dta >driver_driving
   136 348F 34			            dta >driver_stick
   137
   138 				; joystick driver
   139
   140 3490			driver_stick
   141 3490 BD 78 02		            lda STICK0,x
   142 3493 C9 0F		            cmp #15
   143 3495 F0 31		            beq move_done
   144 3497 C9 0B		            cmp #11
   145 3499 D0 16		            bne no_left
   146
   147 349B B5 9C		            lda p1_angle,x
   148 349D 38			            sec
   149 349E E5 88		            sbc stick_slow_speed
   150 34A0 95 9C		            sta p1_angle,x
   151
   152 34A2 BD 84 02		            lda STRIG0,x
   153 34A5 D0 07		            bne no_fast
   154
   155 34A7 B5 9C		            lda p1_angle,x
   156 34A9 38			            sec
   157 34AA E5 89		            sbc stick_fast_speed
   158 34AC 95 9C		            sta p1_angle,x
   159 34AE			no_fast
   160 				            
   161 34AE 4C C8 34		            jmp move_done
   162 34B1 C9 07		no_left     cmp #7
   163 34B3 D0 13		            bne move_done
   164
   165 34B5 B5 9C		            lda p1_angle,x
   166 34B7 18			            clc
   167 34B8 65 88		            adc stick_slow_speed
   168 34BA 95 9C		            sta p1_angle,x
   169
   170 34BC BD 84 02		            lda STRIG0,x
   171 34BF D0 07		            bne no_fast_right
   172
   173 34C1 B5 9C		            lda p1_angle,x
   174 34C3 18			            clc
   175 34C4 65 89		            adc stick_fast_speed
   176 34C6 95 9C		            sta p1_angle,x
   177 34C8			no_fast_right
   178 34C8			move_done
   179 34C8 60			            rts
   180
   181 				; check if player1 button is pressed
   182 				; A=0 not pressed, 1=pressed
   183
   184 34C9			is_player1_button_pressed
   185 34C9 AD BE 32		            lda driver_mode
   186 34CC C9 01		            cmp #1
   187 34CE F0 07		            beq check_player1_paddle_fire
   188
   189 34D0 AD 84 02		            lda STRIG0
   190 34D3 F0 1C		            beq fire_pressed
   191 34D5 D0 24		            bne fire_not_pressed
   192
   193 34D7			check_player1_paddle_fire
   194 34D7 AD 78 02		            lda STICK0
   195 34DA C9 0B		            cmp #11
   196 34DC F0 13		            beq fire_pressed
   197 34DE D0 1B		            bne fire_not_pressed
   198
   199 				; X=port number to check (paddle uses only port 1)
   200 				; check fire button (paddle uses left/right stick as fire button)
   201 				; A=0 not pressed, 1=pressed
   202
   203 34E0			is_both_buttons
   204 34E0 AD BE 32		            lda driver_mode
   205 34E3 C9 01		            cmp #1
   206 34E5 F0 0D		            beq check_paddle_fire
   207
   208 34E7 AD 84 02		            lda STRIG0
   209 34EA D0 0F		            bne fire_not_pressed
   210 34EC AD 85 02		            lda STRIG1
   211 34EF D0 0A		            bne fire_not_pressed
   212
   213 34F1			fire_pressed
   214 34F1 A9 01		            lda #1
   215 34F3 60			            rts
   216
   217 34F4			check_paddle_fire
   218 34F4 AD 78 02		            lda STICK0
   219 34F7 C9 03		            cmp #3
   220 34F9 F0 F6		            beq fire_pressed
   221
   222 34FB			fire_not_pressed
   223 34FB A9 00		            lda #0
   224 34FD 60			            rts
   225
   226 				; paddle driver
   227 				            
   228 34FE			driver_paddle            
   229 34FE BD 70 02		            lda PADDL0,x
   230 3501 A8			            tay
   231 3502 B9 00 33		            lda paddle_to_256,y
   232 3505 5D 42 35		            eor paddle_offsets,x
   233 3508 95 9C		            sta p1_angle,x
   234 350A 60			            rts
   235
   236 				; driving controller driver
   237
   238 350B			driver_driving
   239 350B 60			            rts
   240 				;            lda STICK0,x
   241 				;            eor #15
   242 				;            jmp driver_driving_main
   243
   244 350C			driver_driving_fast_p1
   245 350C AD 00 D3		            lda PORTA
   246 350F A2 00		            ldx #0
   247 3511 4C 1D 35		            jmp driver_driving_main
   248
   249 3514			driver_driving_fast_p2
   250 3514 AD 00 D3		            lda PORTA
   251 3517 4A			            lsr
   252 3518 4A			            lsr
   253 3519 4A			            lsr
   254 351A 4A			            lsr
   255 351B A2 01		            ldx #1
   256 				; have to call this many times per frame for each player
   257 351D			driver_driving_main
   258 351D 29 03		            and #%00000011
   259 351F 48			            pha
   260 3520 1D 01 34		            ora prev_driving_value,x
   261 3523 A8			            tay
   262 3524 68			            pla
   263 3525 0A			            asl
   264 3526 0A			            asl
   265 3527 9D 01 34		            sta prev_driving_value,x  ; store previous bits at 0000AA00 position for next time
   266
   267 352A B9 32 35		            lda driving_transitions,y
   268 352D 75 9C		            adc p1_angle,x
   269 352F 95 9C		            sta p1_angle,x
   270 3531 60			            rts
   271
   272 				; nibble coded transitions for driving controller
   273 				; 15,13,12,14 = anti-clockwise
   274 				; 15,14,12,13 = clockwise
   275 				; only lowest 2 bits change, so we need 16 values for all transitions
   276
   277 				; index is the combined value of nibble AABB
   278 				; where AA is previous bits and BB current bits
   279 3532			driving_transitions
   280 3532 00			            dta 0   ; 00 -> 00 (12 -> 12)
   281 3533 02			            dta 2   ; 00 -> 01 (12 -> 13)
   282 3534 FE			            dta 254 ; 00 -> 10 (12 -> 14)
   283 3535 00			            dta 0   ; 00 -> 11 (12 -> 15)
   284 3536 FE			            dta 254 ; 01 -> 00 (13 -> 12)
   285 3537 00			            dta 0   ; 01 -> 01 (13 -> 13)
   286 3538 00			            dta 0   ; 01 -> 10 (13 -> 14)
   287 3539 02			            dta 2   ; 01 -> 11 (13 -> 15)
   288 353A 02			            dta 2   ; 10 -> 00 (14 -> 12)
   289 353B 00			            dta 0   ; 10 -> 01 (14 -> 13)
   290 353C 00			            dta 0   ; 10 -> 10 (14 -> 14)
   291 353D FE			            dta 254 ; 10 -> 11 (14 -> 15)
   292 353E 00			            dta 0   ; 11 -> 00 (15 -> 12)
   293 353F FE			            dta 254 ; 11 -> 01 (15 -> 13)
   294 3540 02			            dta 2   ; 11 -> 10 (15 -> 14)
   295 3541 00			            dta 0   ; 11 -> 11 (15 -> 15)
   296
   297 				;            dta 0   ; 00 -> 00 (12 -> 12)
   298 				;            dta 3   ; 00 -> 01 (12 -> 13)
   299 				;            dta 253 ; 00 -> 10 (12 -> 14)
   300 				;            dta 0   ; 00 -> 11 (12 -> 15)
   301 				;            dta 251 ; 01 -> 00 (13 -> 12)
   302 				;            dta 0   ; 01 -> 01 (13 -> 13)
   303 				;            dta 0   ; 01 -> 10 (13 -> 14)
   304 				;            dta 5   ; 01 -> 11 (13 -> 15)
   305 				;            dta 5   ; 10 -> 00 (14 -> 12)
   306 				;            dta 0   ; 10 -> 01 (14 -> 13)
   307 				;            dta 0   ; 10 -> 10 (14 -> 14)
   308 				;            dta 251 ; 10 -> 11 (14 -> 15)
   309 				;            dta 0   ; 11 -> 00 (15 -> 12)
   310 				;            dta 253 ; 11 -> 01 (15 -> 13)
   311 				;            dta 3   ; 11 -> 10 (15 -> 14)
   312 				;            dta 0   ; 11 -> 11 (15 -> 15)
   313
   314 3542			paddle_offsets
   315 3542 00 00		            dta 0,0
   184
   185 3544			reset_pressed
   186 3544 20 00 9C		            jsr intro_main
   187
   188 3547			main
   189 3547 A9 FF		            lda #255
   190 3549 8D FC 02		            sta 764
   191
   192 				; for fast loaders, wait 10 seconds or continue with spacebar
   193 354C			wait_a_sec
   194 354C AD FC 02		            lda 764
   195 354F C9 FF		            cmp #255
   196 3551 D0 06		            bne any_key_pressed
   197
   198 3553 A5 13		            lda 19
   199 3555 C9 02		            cmp #2
   200 3557 90 F3		            bcc wait_a_sec
   201
   202 3559			any_key_pressed
   203 3559 A9 FF		            lda #255
   204 355B 8D FC 02		            sta 764
   205
   206 				; start the game!
   207 				 
   208 355E A9 00		            lda #0
   209 3560 8D 2F 02		            sta SDMCTL
   210 3563 85 B6		            sta game_restart
   211 3565 85 8F		            sta end_screen_delay
   212 3567 85 83		            sta winner_color
   213
   214 3569 A9 80		            lda #128
   215 356B 85 8D		            sta volume_hit_bat
   216 356D 85 8E		            sta volume_hit_edge
   217 356F 85 80		            sta music_toggle        ; 128 = on, 0 = off
   218
   219 3571 A9 01		            lda #1
   220 3573 8D 44 02		            sta 580 ; coldstart
   221
   222 				;            lda #1
   223 				;            sta 9   ; boot
   224
   225 				;            lda #<reset_pressed
   226 				;            sta $0a
   227 				;            lda #>reset_pressed
   228 				;            sta $0b
   229
   230 3576 20 03 34		            jsr driver_init
   231
   232 3579 20 77 3C		            jsr make_shape_index
   233
   234 357C 20 A7 3C		            jsr make_outer_256
   235
   236 357F 20 C3 36		            jsr make_screen_y_tab
   237
   238 3582 20 0E 37		            jsr invert_backdrop
   239 3585 A9 60		            lda #$60
   240 3587 8D 0E 37		            sta invert_backdrop ; dirty hack to fix warm reset :P
   241
   242 358A 20 17 3D		            jsr reset_score
   243 358D 20 E5 3C		            jsr show_score_p1
   244 3590 20 FE 3C		            jsr show_score_p2
   245
   246 3593 20 02 3F		            jsr init_sprites
   247 3596 20 2E 3F		            jsr init_colors
   248
   249 				; init. game vars
   250 3599 A2 00		            ldx #INIT_LEVEL_INDEX
   251 359B 8E 4E 3F		            stx current_level_index
   252 359E 20 64 3F		            jsr set_level_ball_speed
   253
   254 35A1 A9 00		            lda #INIT_PLAYER_MODE
   255 35A3 85 8A		            sta player_mode
   256 35A5 20 9A 3F		            jsr show_player_mode
   257
   258 35A8 A9 01		            lda #STATE_IN_MENU
   259 35AA 85 8C		            sta game_state           ; start with menu
   260
   261 35AC 20 6E 31		            jsr music_init
   262
   263 35AF 20 53 37		            jsr show_menu_options
   264
   265 35B2 20 5C 38		            jsr reset_autostart_demo
   266
   267 35B5 A9 00		            lda #<display_list
   268 35B7 8D 30 02		            sta SDLSTL
   269 35BA A9 50		            lda #>display_list
   270 35BC 8D 31 02		            sta SDLSTH
   271
   272 				; start vbi
   273
   274 35BF A9 C0		            lda #$c0
   275 35C1 8D 0E D4		            sta NMIEN
   276
   277 35C4 A9 07		            lda #7          ; sets VVBLKI
   278 35C6 A0 A5		            ldy #<vbi
   279 35C8 A2 37		            ldx #>vbi
   280 35CA 20 5C E4		            jsr $e45c       ; SETVBV
   281
   282 35CD			wait_driving_controller
   283
   284 35CD AD BE 32		            lda driver_mode
   285 35D0 C9 02		            cmp #2
   286 35D2 D0 F9		            bne wait_driving_controller
   287
   288 35D4 A5 8A		            lda player_mode
   289 35D6 C9 01		            cmp #MODE_1_PLAYER
   290 35D8 F0 03		            beq single_driver
   291 35DA 20 14 35		            jsr driver_driving_fast_p2
   292 35DD			single_driver            
   293 35DD 20 0C 35		            jsr driver_driving_fast_p1
   294
   295 35E0 4C CD 35		            jmp wait_driving_controller
   296
   297 				;------------------------
   298 				; 8bit * 8bit = 16bit multiply
   299 				; By White Flame
   300 				; Multiplies _multiplicand by _multiplier and stores result in .A (low byte, also in .X) and .Y (high byte)
   301 				; uses extra zp var _multiplicand+1
   302
   303 				; .X and .Y get clobbered.  Change the tax/txa and tay/tya to stack or zp storage if this is an issue.
   304 				;  idea to store 16-bit accumulator in .X and .Y instead of zp from bogax
   305
   306 				; In this version, both inputs must be unsigned
   307 				; Remove the noted line to turn this into a 16bit(either) * 8bit(unsigned) = 16bit multiply.
   308
   309 35E3			_multi8
   310 35E3 A9 00		            lda #$00
   311 35E5 A8			            tay
   312 				            ;sty _multiplicand+1          ; remove this line for 16*8=16bit multiply
   313 35E6 F0 0D		            beq _enter_loop
   314 35E8			_do_add
   315 35E8 18			            clc
   316 35E9 65 F6		            adc _multiplicand
   317 35EB AA			            tax
   318
   319 35EC 98			            tya
   320 35ED 65 F7		            adc _multiplicand+1
   321 35EF A8			            tay
   322 35F0 8A			            txa
   323 35F1			_mul_loop
   324 35F1 06 F6		            asl _multiplicand
   325 35F3 26 F7		            rol _multiplicand+1
   326 35F5			_enter_loop                     ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
   327 35F5 46 F8		            lsr _multiplier
   328 35F7 B0 EF		            bcs _do_add
   329 35F9 D0 F6		            bne _mul_loop
   330 35FB 60			            rts
   331
   332 				; reset PM0/1 to playfield settings
   333 35FC			dli_header
   334 35FC 48			            pha
   335
   336 35FD A9 08		            lda #8
   337 35FF 8D 17 D0		            sta COLPF1
   338
   339 3602 A5 81		            lda shadow_HPOSP0
   340 3604 8D 00 D0		            sta HPOSP0
   341 3607 A5 82		            lda shadow_HPOSP1
   342 3609 8D 01 D0		            sta HPOSP1
   343
   344 360C A9 00		            lda #0
   345 360E 8D 08 D0		            sta SIZEP0
   346 3611 8D 09 D0		            sta SIZEP1
   347
   348 3614 A9 5A		            lda #BASE_COLOR_P1+10
   349 3616 8D 12 D0		            sta COLPM0
   350 3619 A9 BA		            lda #BASE_COLOR_P2+10
   351 361B 8D 13 D0		            sta COLPM1
   352
   353 361E A9 2A		            lda #<dli_menu
   354 3620 8D 00 02		            sta VDSLST
   355 3623 A9 36		            lda #>dli_menu
   356 3625 8D 01 02		            sta VDSLST+1
   357
   358 3628 68			            pla
   359 3629 40			            rti
   360
   361 362A			dli_menu
   362 362A 48			            pha
   363 362B 8A			            txa
   364 362C 48			            pha
   365
   366 362D A9 0E		            lda #$0e
   367 362F 8D 0A D4		            sta WSYNC
   368 3632 8D 1A D0		            sta COLBK
   369 3635 A9 0A		            lda #$0a
   370 3637 8D 0A D4		            sta WSYNC
   371 363A 8D 1A D0		            sta COLBK
   372 363D A9 00		            lda #0
   373 363F 8D 0A D4		            sta WSYNC
   374 3642 8D 1A D0		            sta COLBK
   375
   376 3645 A2 00		            ldx #0
   377 3647			color_it1
   378 3647 BD 8B 36		            lda menu_colpf2,x
   379 364A 8D 0A D4		            sta WSYNC
   380 364D 8D 18 D0		            sta COLPF2
   381 3650 E8			            inx
   382 3651 E0 12		            cpx #18
   383 3653 D0 F2		            bne color_it1
   384
   385 3655 A2 00		            ldx #0
   386 3657			color_it2
   387 3657 BD 9D 36		            lda menu_colpf0,x
   388 365A 05 83		            ora winner_color
   389 365C 8D 0A D4		            sta WSYNC
   390 365F 8D 16 D0		            sta COLPF0
   391 3662 E8			            inx
   392 3663 E0 26		            cpx #38
   393 3665 D0 F0		            bne color_it2
   394
   395 3667 A9 00		            lda #0
   396 3669 8D 0A D4		            sta WSYNC
   397 366C 8D 1A D0		            sta COLBK
   398 366F A9 0A		            lda #$0a
   399 3671 8D 0A D4		            sta WSYNC
   400 3674 8D 1A D0		            sta COLBK
   401 3677 A9 0E		            lda #$0e
   402 3679 8D 0A D4		            sta WSYNC
   403 367C 8D 1A D0		            sta COLBK
   404 367F A9 00		            lda #0
   405 3681 8D 0A D4		            sta WSYNC
   406 3684 8D 1A D0		            sta COLBK
   407 				            
   408 3687 68			            pla
   409 3688 AA			            tax
   410 3689 68			            pla
   411 368A 40			            rti
   412
   413 368B			menu_colpf2
   414 368B 50			            dta BASE_COLOR_P1
   415 368C 50			            dta BASE_COLOR_P1
   416 368D 50			            dta BASE_COLOR_P1
   417 368E 50			            dta BASE_COLOR_P1
   418 368F 50			            dta BASE_COLOR_P1
   419 3690 50			            dta BASE_COLOR_P1
   420 3691 50			            dta BASE_COLOR_P1
   421 3692 50			            dta BASE_COLOR_P1
   422
   423 3693 B0			            dta BASE_COLOR_P2
   424 3694 B0			            dta BASE_COLOR_P2
   425 3695 B0			            dta BASE_COLOR_P2
   426 3696 B0			            dta BASE_COLOR_P2
   427 3697 B0			            dta BASE_COLOR_P2
   428 3698 B0			            dta BASE_COLOR_P2
   429 3699 B0			            dta BASE_COLOR_P2
   430 369A B0			            dta BASE_COLOR_P2
   431
   432 369B 00 00		            dta 0,0
   433
   434 369D			menu_colpf0
   435 				;            dta 0,0,$28,$28,$2a,$2a,$2c,$2c
   436 				;            dta $7c,$7c,$7a,$7a,$78,$78,0,0
   437 369D 00 00		            dta 0,0
   438 369F 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   439 36A7 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   440 36AF 00 0E 0E 0C 0A 08 +             dta 0,14,14,12,10,8,6,0
   441 36B7 00 00 00 00		            dta 0,0,0,0
   442 36BB 00 00 00 00 00 00 +             dta 0,0,0,0,0,0,0,0
   443
   444 				; make pointers from y-position to screen memory
   445 				; screen memory is 3 blocks
   446 				; screen_mem1 : 102 lines, 4080 bytes
   447 				; screen_mem2 : 102 lines, 4080 bytes
   448 				; screen_mem3 :  20 lines,  800 bytes
   449
   450 36C3			make_screen_y_tab
   451 36C3 A9 00		            lda #<screen_mem1
   452 36C5 85 86		            sta tmp_screen
   453 36C7 A9 70		            lda #>screen_mem1
   454 36C9 85 87		            sta tmp_screen+1
   455
   456 36CB A2 00		            ldx #0
   457 36CD			fill_y_tab1
   458 36CD 20 F6 36		            jsr store_y_line
   459 36D0 E8			            inx
   460 36D1 E0 66		            cpx #102
   461 36D3 D0 F8		            bne fill_y_tab1
   462
   463 				; x = 102
   464 36D5 A9 00		            lda #<screen_mem2
   465 36D7 85 86		            sta tmp_screen
   466 36D9 A9 80		            lda #>screen_mem2
   467 36DB 85 87		            sta tmp_screen+1
   468
   469 36DD			fill_y_tab2
   470 36DD 20 F6 36		            jsr store_y_line
   471 36E0 E8			            inx
   472 36E1 E0 CC		            cpx #204
   473 36E3 D0 F8		            bne fill_y_tab2
   474
   475 36E5 A9 00		            lda #<screen_mem3
   476 36E7 85 86		            sta tmp_screen
   477 36E9 A9 90		            lda #>screen_mem3
   478 36EB 85 87		            sta tmp_screen+1
   479
   480 				; x = 204
   481 36ED			fill_y_tab3
   482 36ED 20 F6 36		            jsr store_y_line
   483 36F0 E8			            inx
   484 36F1 E0 E0		            cpx #224
   485 36F3 D0 F8		            bne fill_y_tab3
   486 36F5 60			            rts
   487
   488 36F6			store_y_line
   489 36F6 A5 86		            lda tmp_screen
   490 36F8 9D 00 12		            sta screen_y_lo,x
   491 36FB A5 87		            lda tmp_screen+1
   492 36FD 9D 00 13		            sta screen_y_hi,x
   493 				            
   494 3700 A5 86		            lda tmp_screen
   495 3702 18			            clc
   496 3703 69 28		            adc #SCREEN_WIDTH
   497 3705 85 86		            sta tmp_screen
   498 3707 A5 87		            lda tmp_screen+1
   499 3709 69 00		            adc #0
   500 370B 85 87		            sta tmp_screen+1
   501 370D 60			            rts
   502
   503 				; @todo invert backdrop image
   504 				; now we have to do it here :P
   505 370E			invert_backdrop
   506 370E A9 00		            lda #<screen_mem1
   507 3710 85 86		            sta tmp_screen
   508 3712 A9 70		            lda #>screen_mem1
   509 3714 85 87		            sta tmp_screen+1
   510 				            
   511 3716 A2 10		            ldx #16     ; 16 pages = 4K
   512 3718 20 36 37		            jsr do_x_pages
   513 				           
   514 371B A9 00		            lda #<screen_mem2
   515 371D 85 86		            sta tmp_screen
   516 371F A9 80		            lda #>screen_mem2
   517 3721 85 87		            sta tmp_screen+1
   518 				            
   519 3723 A2 10		            ldx #16     ; 16 pages = 4K
   520 3725 20 36 37		            jsr do_x_pages
   521
   522 3728 A9 00		            lda #<screen_mem3
   523 372A 85 86		            sta tmp_screen
   524 372C A9 90		            lda #>screen_mem3
   525 372E 85 87		            sta tmp_screen+1
   526 				            
   527 3730 A2 04		            ldx #4     ; 4 pages = 1K
   528 3732 20 36 37		            jsr do_x_pages
   529 3735 60			            rts
   530
   531 				; invert x pages, starting from tmp_screen
   532
   533 3736			do_x_pages
   534 3736 A0 00		            ldy #0
   535 3738			do_page
   536 3738 B1 86		            lda (tmp_screen),y
   537 373A 49 FF		            eor #$ff
   538 373C 91 86		            sta (tmp_screen),y
   539 373E C8			            iny
   540 373F D0 F7		            bne do_page 
   541
   542 3741 E6 87		            inc tmp_screen+1
   543 3743 CA			            dex
   544 3744 D0 F2		            bne do_page
   545 3746 60			            rts
   546
   547 3747			turn_color_ball
   548 3747 A6 B5		            ldx player_turn
   549 3749 BD 50 37		            lda color_turn,x
   550 374C 8D C7 02		            sta COLOR3
   551 374F 60			            rts
   552 				            
   553 3750 00 56 B6		color_turn  dta 0,BASE_COLOR_P1+6,BASE_COLOR_P2+6                           
   554
   555 3753			show_menu_options
   556 3753 A9 50		            lda #<controller_text
   557 3755 8D F6 50		            sta menu_line1_ptr
   558 3758 A9 52		            lda #>controller_text
   559 375A 8D F7 50		            sta menu_line1_ptr+1
   560
   561 375D 20 9A 3F		            jsr show_player_mode
   562
   563 3760 A9 9F		            lda #<level_text
   564 3762 8D FC 50		            sta menu_line3_ptr
   565 3765 A9 52		            lda #>level_text
   566 3767 8D FD 50		            sta menu_line3_ptr+1
   567
   568 376A A9 00		            lda #0
   569 376C 85 83		            sta winner_color
   570 376E 60			            rts
   571
   572 376F			show_end_screen
   573 376F A9 FB		            lda #<empty_text
   574 3771 8D F6 50		            sta menu_line1_ptr
   575 3774 8D FC 50		            sta menu_line3_ptr
   576 3777 A9 52		            lda #>empty_text
   577 3779 8D F7 50		            sta menu_line1_ptr+1
   578 377C 8D FD 50		            sta menu_line3_ptr+1
   579
   580 377F AD 2E 51		            lda score_p1
   581 3782 CD 2F 51		            cmp score_p2
   582 3785 90 0F		            bcc player_2_wins
   583
   584 3787 A9 0F		            lda #<winner_one_text
   585 3789 8D F9 50		            sta menu_line2_ptr
   586 378C A9 53		            lda #>winner_one_text
   587 378E 8D FA 50		            sta menu_line2_ptr+1
   588
   589 3791 A9 50		            lda #BASE_COLOR_P1
   590 3793 85 83		            sta winner_color
   591 3795 60			            rts
   592
   593 3796			player_2_wins
   594 3796 A9 23		            lda #<winner_two_text
   595 3798 8D F9 50		            sta menu_line2_ptr
   596 379B A9 53		            lda #>winner_two_text
   597 379D 8D FA 50		            sta menu_line2_ptr+1
   598
   599 37A0 A9 B0		            lda #BASE_COLOR_P2
   600 37A2 85 83		            sta winner_color
   601
   602 37A4 60			            rts
   603
   604 				; A, X, Y are already saved by the OS
   605 37A5			vbi
   606 37A5 20 DC 31		            jsr copy_shadow
   607
   608 37A8 A5 80		            lda music_toggle
   609 37AA F0 03		            beq skip_music
   610 37AC 20 97 31		            jsr play_song
   611 37AF			skip_music
   612
   613 				; toggle music on/off with spacebar
   614 37AF AD FC 02		            lda 764
   615 37B2 C9 21		            cmp #$21
   616 37B4 D0 10		            bne no_spacebar
   617 37B6 A5 80		            lda music_toggle
   618 37B8 49 80		            eor #128
   619 37BA 85 80		            sta music_toggle
   620 37BC D0 03		            bne music_turned_on
   621 37BE 20 60 32		            jsr music_off
   622
   623 37C1			music_turned_on
   624 37C1 A9 FF		            lda #255
   625 37C3 8D FC 02		            sta 764
   626
   627 37C6			no_spacebar
   628 37C6 20 04 3A		            jsr play_sound_bat
   629 37C9 20 22 3A		            jsr play_sound_edge
   630
   631 37CC A9 FC		            lda #<dli_header
   632 37CE 8D 00 02		            sta VDSLST
   633 37D1 A9 35		            lda #>dli_header
   634 37D3 8D 01 02		            sta VDSLST+1
   635
   636 37D6 A9 2E		            lda #%00101110  ; enable P/M DMA
   637 37D8 8D 2F 02		            sta SDMCTL
   638 37DB A9 00		            lda #0
   639 37DD 85 4D		            sta 77      ; attract off
   640 37DF A9 98		            lda #>rotor_font
   641 37E1 8D F4 02		            sta 756
   642
   643 37E4 A9 30		            lda #$30
   644 37E6 8D 00 D0		            sta HPOSP0
   645 37E9 A9 B0		            lda #$b0
   646 37EB 8D 01 D0		            sta HPOSP1
   647
   648 				; menu switching thingy
   649
   650 37EE AD 1F D0		            lda CONSOL
   651 37F1 C9 03		            cmp #3  ; option button
   652 37F3 D0 1B		            bne no_option_pressed
   653 37F5 A5 8C		            lda game_state
   654 37F7 C9 01		            cmp #STATE_IN_MENU
   655 37F9 F0 37		            beq check_game_state
   656
   657 				; prevent menu option directly after leaving in-game state
   658 37FB A9 03		            lda #3
   659 37FD 8D 4D 3F		            sta previous_consol
   660
   661 3800			go_menu_mode
   662 3800 20 C8 3B		            jsr wipe_ball
   663
   664 3803 20 FA 31		            jsr music_normal_volume
   665
   666 3806 20 53 37		            jsr show_menu_options
   667
   668 3809 A9 01		            lda #STATE_IN_MENU
   669 380B 85 8C		            sta game_state
   670 380D 4C 32 38		            jmp check_game_state
   671
   672 3810			no_option_pressed
   673 3810 C9 06		            cmp #6  ; start pressed
   674 3812 F0 05		            beq reset_game
   675
   676 				; check autostart state
   677
   678 3814 AD 59 38		            lda autostart_demo
   679 3817 F0 19		            beq check_game_state
   680
   681 				; reset game
   682
   683 3819			reset_game
   684 3819 20 05 32		            jsr music_low_volume
   685
   686 381C 20 C8 3B		            jsr wipe_ball
   687
   688 381F A9 00		            lda #0
   689 3821 85 BA		            sta cpu1_angle_end
   690 3823 A9 80		            lda #128
   691 3825 85 BB		            sta cpu2_angle_end
   692
   693 3827 A9 01		            lda #1
   694 3829 85 B6		            sta game_restart
   695
   696 382B 20 5C 38		            jsr reset_autostart_demo
   697
   698 382E A9 00		            lda #STATE_IN_GAME
   699 3830 85 8C		            sta game_state
   700
   701 3832			check_game_state
   702 3832 A5 8C		            lda game_state
   703 3834 D0 03		            bne no_main_game_state
   704 3836 4C 02 39		            jmp main_game_vbi
   705
   706 3839			no_main_game_state
   707 3839 C9 02		            cmp #STATE_IN_END
   708 383B D0 49		            bne menu_vbi
   709
   710 				; end screen vbi
   711 383D A5 8F		            lda end_screen_delay
   712 383F D0 10		            bne stay_in_end_screen
   713
   714 3841 20 A6 31		            jsr restart_music
   715 3844 20 FA 31		            jsr music_normal_volume
   716
   717 				; here we show the menu again
   718 3847 20 53 37		            jsr show_menu_options
   719
   720 384A A9 01		            lda #STATE_IN_MENU
   721 384C 85 8C		            sta game_state
   722 384E 4C 86 38		            jmp menu_vbi
   723
   724 3851			stay_in_end_screen
   725 3851 20 E6 39		            jsr play_sound_end_game
   726 3854 C6 8F		            dec end_screen_delay
   727 3856 4C CE 38		            jmp wait_depressed
   728
   729 				; demo autostart
   730
   731 3859 00			autostart_demo  dta 0
   732 385A 00 00		autostart_timer dta 0,0
   733
   734 385C			reset_autostart_demo
   735 385C A9 00		            lda #0
   736 385E 8D 59 38		            sta autostart_demo      ; do not start again
   737 3861 8D 5A 38		            sta autostart_timer
   738 3864 A9 1E		            lda #30                 ; N * 5 seconds (roughly)
   739 3866 8D 5B 38		            sta autostart_timer+1
   740 3869 60			            rts
   741
   742 386A			handle_autostart_timer
   743 386A AD 5A 38		            lda autostart_timer
   744 386D 0D 5B 38		            ora autostart_timer+1
   745 3870 F0 13		            beq idle_timer
   746 3872 CE 5A 38		            dec autostart_timer
   747 3875 D0 0E		            bne running_timer
   748 3877 CE 5B 38		            dec autostart_timer+1
   749 387A D0 09		            bne running_timer
   750
   751 				; timer reached zero
   752 387C A9 01		            lda #1
   753 387E 8D 59 38		            sta autostart_demo
   754 3881 A9 02		            lda #2
   755 3883 85 8A		            sta player_mode
   756
   757 3885			running_timer
   758 3885			idle_timer
   759 3885 60			            rts
   760
   761 				; within menu vbi
   762
   763 3886			menu_vbi
   764 3886 20 6A 38		            jsr handle_autostart_timer
   765
   766 3889 A5 8A		            lda player_mode
   767 388B F0 07		            beq check_human_buttons
   768
   769 388D 20 C9 34		            jsr is_player1_button_pressed
   770 3890 D0 87		            bne reset_game
   771 3892 F0 05		            beq check_consol_buttons
   772
   773 3894			check_human_buttons
   774 3894 20 E0 34		            jsr is_both_buttons
   775 3897 D0 80		            bne reset_game
   776
   777 3899			check_consol_buttons
   778 3899 AD 1F D0		            lda CONSOL
   779 389C C9 05		            cmp #5          ; select
   780 389E D0 18		            bne no_level_select
   781 				            
   782 38A0 AD 4D 3F		            lda previous_consol
   783 38A3 C9 05		            cmp #5
   784 38A5 F0 27		            beq wait_depressed
   785
   786 38A7 20 7D 3F		            jsr increase_level
   787 38AA AE 4E 3F		            ldx current_level_index
   788 38AD 20 64 3F		            jsr set_level_ball_speed
   789
   790 38B0 A9 05		            lda #5
   791 38B2 8D 4D 3F		            sta previous_consol
   792 38B5 4C CE 38		            jmp wait_depressed
   793
   794 38B8			no_level_select
   795 38B8 C9 03		            cmp #3          ; option
   796 38BA D0 0F		            bne no_player_mode_select
   797
   798 38BC AD 4D 3F		            lda previous_consol
   799 38BF C9 03		            cmp #3
   800 38C1 F0 0B		            beq wait_depressed
   801
   802 38C3 20 8D 3F		            jsr increase_player_mode
   803 38C6 20 9A 3F		            jsr show_player_mode
   804
   805 38C9 A9 03		            lda #3
   806 38CB			no_player_mode_select
   807 38CB 8D 4D 3F		            sta previous_consol
   808
   809 38CE			wait_depressed
   810 38CE A9 01		            lda #1      ; dl jump
   811 38D0 8D 55 50		            sta menu_dl_hook
   812 38D3 A9 EE		            lda #<menu_dl_part
   813 38D5 8D 56 50		            sta menu_dl_hook+1
   814 38D8 A9 50		            lda #>menu_dl_part
   815 38DA 8D 57 50		            sta menu_dl_hook+2
   816
   817 				; detect/show controller type (used for both players)
   818 38DD 20 E9 38		            jsr detect_show_driver
   819
   820 38E0 20 71 3A		            jsr handle_player1
   821 38E3 20 9C 3A		            jsr handle_player2
   822
   823 38E6 4C BB 39		            jmp exit_vbi
   824
   825 				; X = port/driver to detect
   826 38E9			detect_show_driver
   827 38E9 20 43 34		            jsr driver_detect
   828 38EC A8			            tay
   829 38ED B9 37 53		            lda driver_text_lo,y
   830 38F0 85 86		            sta tmp_screen
   831 38F2 B9 3B 53		            lda driver_text_hi,y
   832 38F5 85 87		            sta tmp_screen+1
   833
   834 38F7 A0 07		            ldy #7
   835 38F9			show_driv
   836 38F9 B1 86		            lda (tmp_screen),y
   837 38FB 99 5A 52		            sta driver_screen,y
   838 38FE 88			            dey
   839 38FF 10 F8		            bpl show_driv
   840 3901 60			            rts
   841
   842 				; main game vbi
   843 3902			main_game_vbi
   844 3902 A5 B6		            lda game_restart
   845 3904 F0 33		            beq no_restart
   846
   847 				; restart game
   848
   849 3906 20 FE 39		            jsr silence_end
   850
   851 3909 A9 00		            lda #0
   852 390B 85 B6		            sta game_restart
   853 				            
   854 390D 20 17 3D		            jsr reset_score
   855 3910 20 E5 3C		            jsr show_score_p1
   856 3913 20 FE 3C		            jsr show_score_p2
   857
   858 3916 A6 9C		            ldx p1_angle
   859 3918 86 AA		            stx ball_angle_start
   860 391A 20 23 3B		            jsr ball_to_start_position
   861 391D 20 32 3B		            jsr prepare_ball_end_position
   862
   863 3920 A9 00		            lda #0
   864 3922 85 A0		            sta mp_collision
   865 3924 85 A1		            sta in_collision
   866 3926 85 A3		            sta edge_delay
   867 3928 85 AD		            sta edge_collision
   868 392A 85 AE		            sta edge_hit_count
   869 392C 8D 1E D0		            sta HITCLR
   870
   871 392F A9 02		            lda #2
   872 3931 85 B5		            sta player_turn
   873
   874 3933 20 47 37		            jsr turn_color_ball
   875 3936 4C BB 39		            jmp exit_vbi
   876
   877 3939			no_restart
   878 				; remove menu hook
   879 3939 A9 0F		            lda #$0f        ; dl gfx 8
   880 393B 8D 55 50		            sta menu_dl_hook
   881 393E 8D 56 50		            sta menu_dl_hook+1
   882 3941 8D 57 50		            sta menu_dl_hook+2
   883
   884 3944 AD 08 D0		            lda M0PL
   885 3947 85 A0		            sta mp_collision
   886 3949 AD 09 D0		            lda M1PL
   887 394C 05 A0		            ora mp_collision
   888 394E 85 A0		            sta mp_collision
   889
   890 3950 AD 00 D0		            lda M0PF
   891 3953 85 AD		            sta edge_collision
   892 3955 AD 01 D0		            lda M1PF
   893 3958 05 AD		            ora edge_collision
   894 395A 85 AD		            sta edge_collision
   895 				;           beq no_edge_collision
   896
   897 				;            inc edge_hit_count
   898 				;            lda edge_hit_count
   899 				;            cmp #2
   900 				;            bcc edge_hit_counting
   901
   902 				;            sei
   903 				;lalala      jmp lalala
   904
   905 				;no_edge_collision
   906 				;            lda #0
   907 				;            sta edge_hit_count
   908
   909 395C			edge_hit_counting
   910 395C 20 71 3A		            jsr handle_player1
   911 395F 20 9C 3A		            jsr handle_player2
   912
   913 				; handle ball
   914
   915 3962 20 C8 3B		            jsr wipe_ball         
   916
   917 				; Check ball collision with bat
   918
   919 3965 A5 A4		            lda bat_collision_delay
   920 3967 F0 05		            beq check_allowed
   921 3969 C6 A4		            dec bat_collision_delay
   922 396B 4C 85 39		            jmp move_one
   923
   924 396E			check_allowed
   925 396E A5 A0		            lda mp_collision
   926 3970 F0 0F		            beq reset_in_collision
   927
   928 3972 A5 A1		            lda in_collision
   929 3974 D0 0F		            bne no_first_hit
   930
   931 3976 E6 A1		            inc in_collision            
   932 3978 20 5F 3B		            jsr bounce_bat_ball 
   933 				            
   934 397B 20 E1 39		            jsr start_sound_bat          
   935 				            
   936 397E 4C 85 39		            jmp move_one
   937 				            
   938 3981			reset_in_collision
   939 3981 A9 00		            lda #0
   940 3983 85 A1		            sta in_collision        
   941
   942 3985			move_one
   943 3985			no_first_hit
   944 3985 20 69 3E		            jsr move_current_xy
   945 3988 F0 1E		            beq still_moving
   946
   947 				; edge detected
   948
   949 398A 20 1D 3A		            jsr start_sound_edge
   950
   951 398D A5 AB		            lda ball_angle_end
   952 398F 85 AA		            sta ball_angle_start
   953
   954 3991 20 56 3B		            jsr ball_current_to_start_position
   955 3994 20 32 3B		            jsr prepare_ball_end_position
   956
   957 3997 20 3D 3A		            jsr update_score
   958 399A D0 37		            bne game_ends
   959
   960 				; switch turns
   961 399C A5 B5		            lda player_turn
   962 399E 49 03		            eor #3              ; 1 => 2, 2 => 1
   963 39A0 85 B5		            sta player_turn
   964 39A2 20 47 37		            jsr turn_color_ball
   965 39A5 20 C5 3A		            jsr set_cpu_angle_end
   966
   967 39A8			still_moving
   968 39A8 A5 EB		            lda current_x+1
   969 39AA 85 A6		            sta ball_current_x
   970 39AC A5 ED		            lda current_y+1
   971 39AE 85 A7		            sta ball_current_y
   972
   973 39B0 20 DD 3B		            jsr show_ball
   974
   975 39B3 A9 00		            lda #0
   976 39B5 8D 18 D0		            sta $d018           
   977
   978 				; anything in A to clear collisions
   979 39B8 8D 1E D0		            sta HITCLR
   980
   981 39BB			exit_vbi
   982
   983 				; always set header stuff
   984 39BB A9 03		            lda #3
   985 39BD 8D 08 D0		            sta SIZEP0
   986 39C0 8D 09 D0		            sta SIZEP1
   987
   988 				; background in PM0/1 for header
   989 39C3 A9 FF		            lda #255
   990 39C5 A2 07		            ldx #7
   991 39C7			fill_pm_header
   992 39C7 9D 00 0E		            sta p0_area,x
   993 39CA 9D 80 0E		            sta p1_area,x
   994 39CD CA			            dex
   995 39CE 10 F7		            bpl fill_pm_header
   996
   997 39D0 4C 62 E4		            jmp $e462
   998
   999 39D3			game_ends
  1000 39D3 A9 FF		            lda #255
  1001 39D5 85 8F		            sta end_screen_delay
  1002
  1003 39D7 20 6F 37		            jsr show_end_screen
  1004
  1005 39DA A9 02		            lda #STATE_IN_END
  1006 39DC 85 8C		            sta game_state
  1007
  1008 39DE 4C BB 39		            jmp exit_vbi
  1009
  1010 39E1			start_sound_bat
  1011 39E1 A9 0A		            lda #10
  1012 39E3 85 8D		            sta volume_hit_bat
  1013 39E5 60			            rts
  1014
  1015 39E6			play_sound_end_game
  1016 39E6 20 60 32		            jsr music_off
  1017
  1018 39E9 A5 8F		            lda end_screen_delay
  1019 39EB C9 C0		            cmp #192
  1020 39ED 90 0F		            bcc silence_end
  1021 39EF 4A			            lsr
  1022 39F0 25 8F		            and end_screen_delay
  1023 39F2 4A			            lsr
  1024 39F3 09 20		            ora #$20
  1025 39F5 8D 73 32		            sta SHADOW+4
  1026 				            ;lda end_screen_delay
  1027 39F8 A9 AA		            lda #$aa
  1028 39FA 8D 74 32		            sta SHADOW+5
  1029 39FD 60			            rts
  1030 39FE			silence_end
  1031 39FE A9 00		            lda #0
  1032 3A00 8D 74 32		            sta SHADOW+5
  1033 3A03 60			            rts
  1034
  1035 3A04			play_sound_bat
  1036 3A04 A5 8D		            lda volume_hit_bat
  1037 3A06 30 14		            bmi silenced_bat
  1038
  1039 3A08 A5 B5		            lda player_turn
  1040 3A0A 0A			            asl
  1041 3A0B 0A			            asl
  1042 3A0C 69 30		            adc #$30
  1043 3A0E E5 B3		            sbc angle_diff_bat
  1044 3A10 8D 73 32		            sta SHADOW+4    ; $d204
  1045 3A13 A5 8D		            lda volume_hit_bat
  1046 3A15 09 A0		            ora #$a0
  1047 3A17 8D 74 32		            sta SHADOW+5    ; $d205
  1048 3A1A C6 8D		            dec volume_hit_bat
  1049 3A1C			silenced_bat
  1050 3A1C 60			            rts
  1051
  1052 3A1D			start_sound_edge
  1053 3A1D A9 04		            lda #4
  1054 3A1F 85 8E		            sta volume_hit_edge
  1055 3A21 60			            rts
  1056
  1057 3A22			play_sound_edge
  1058 3A22 A5 8E		            lda volume_hit_edge
  1059 3A24 30 16		            bmi silenced_edge
  1060 3A26 D0 06		            bne no_silenced_edge
  1061 3A28 8D 74 32		            sta SHADOW+5    ; $d205
  1062 3A2B C6 8E		            dec volume_hit_edge
  1063 3A2D 60			            rts            
  1064
  1065 3A2E			no_silenced_edge
  1066 3A2E A9 08		            lda #$08
  1067 3A30 8D 73 32		            sta SHADOW+4    ; $d204
  1068 3A33 A5 8E		            lda volume_hit_edge
  1069 3A35 09 26		            ora #$26
  1070 3A37 8D 74 32		            sta SHADOW+5    ; $d205
  1071 3A3A C6 8E		            dec volume_hit_edge
  1072 3A3C			silenced_edge
  1073 3A3C 60			            rts
  1074
  1075 				; Update score
  1076 				; Score > max score, then exit A = 1, otherwise A = 0
  1077
  1078 3A3D			update_score
  1079 3A3D A5 B5		            lda player_turn
  1080 3A3F C9 01		            cmp #1
  1081 3A41 D0 12		            bne was_player2_turn
  1082 				; was player 1 turn, so player 2 gets a point
  1083 3A43 20 2C 3D		            jsr inc_score_p2
  1084 3A46 20 FE 3C		            jsr show_score_p2
  1085
  1086 3A49 AD 2F 51		            lda score_p2
  1087 3A4C C9 11		            cmp #MAX_SCORE
  1088 3A4E D0 17		            bne reset_edge_delay
  1089
  1090 3A50 A9 01		            lda #STATE_IN_MENU
  1091 3A52 85 8C		            sta game_state
  1092 3A54 60			            rts
  1093
  1094 3A55			was_player2_turn
  1095 3A55 20 20 3D		            jsr inc_score_p1
  1096 3A58 20 E5 3C		            jsr show_score_p1
  1097
  1098 3A5B AD 2E 51		            lda score_p1
  1099 3A5E C9 11		            cmp #MAX_SCORE
  1100 3A60 D0 05		            bne reset_edge_delay
  1101
  1102 3A62 A9 01		            lda #STATE_IN_MENU
  1103 3A64 85 8C		            sta game_state
  1104 3A66 60			            rts
  1105
  1106 3A67			reset_edge_delay
  1107 3A67 A9 0A		            lda #10
  1108 3A69 85 A3		            sta edge_delay
  1109
  1110 3A6B			no_edge
  1111
  1112 3A6B A9 00		            lda #0      ; no end game
  1113 				; anything in A to clear collisions
  1114 3A6D 8D 1E D0		            sta HITCLR
  1115 3A70 60			            rts
  1116
  1117 				; player 1
  1118 				; - wipe shape at previous y-position
  1119 				; - move player using controller
  1120 				; - set sprite positions
  1121
  1122 3A71			handle_player1
  1123 3A71 20 4D 3C		            jsr wipe_p1         ; wipe previous shape player 1
  1124
  1125 3A74 A5 8A		            lda player_mode
  1126 3A76 C9 02		            cmp #2
  1127 3A78 F0 0C		            beq do_p1_is_computer
  1128
  1129 3A7A A2 00		            ldx #0              ; player 1
  1130 3A7C 20 76 34		            jsr main_driver
  1131 3A7F 20 05 3B		            jsr move_player
  1132 				            
  1133 3A82 20 01 3C		            jsr show_p1
  1134 3A85 60			            rts
  1135
  1136 				; p1 now controlled by computer
  1137 3A86			do_p1_is_computer
  1138 3A86 A5 8C		            lda game_state
  1139 3A88 D0 3A		            bne not_in_game
  1140
  1141 3A8A A2 00		            ldx #0              ; player 1
  1142
  1143 3A8C A5 B5		            lda player_turn
  1144 3A8E C9 01		            cmp #1
  1145 3A90 D0 03		            bne not_p1_turn
  1146
  1147 3A92 20 D6 3A		            jsr cpu_controller
  1148 3A95			not_p1_turn
  1149
  1150 3A95 20 05 3B		            jsr move_player
  1151 3A98 20 01 3C		            jsr show_p1
  1152 3A9B 60			            rts
  1153
  1154 				; player 2
  1155 				; - wipe shape at previous y-position
  1156 				; - move player using controller
  1157 				; - set sprite positions
  1158
  1159 3A9C			handle_player2
  1160 3A9C 20 62 3C		            jsr wipe_p2         ; wipe previous shape player 2
  1161
  1162 3A9F A5 8A		            lda player_mode
  1163 3AA1 D0 0C		            bne do_p2_is_computer
  1164
  1165 3AA3 A2 01		            ldx #1              ; player 2
  1166 3AA5 20 76 34		            jsr main_driver
  1167 3AA8 20 05 3B		            jsr move_player
  1168 				                        
  1169 3AAB 20 27 3C		            jsr show_p2
  1170 3AAE 60			            rts
  1171
  1172 				; p2 now controlled by computer
  1173 3AAF			do_p2_is_computer
  1174 3AAF A5 8C		            lda game_state
  1175 3AB1 D0 11		            bne not_in_game
  1176
  1177 3AB3 A2 01		            ldx #1              ; player 2
  1178
  1179 3AB5 A5 B5		            lda player_turn
  1180 3AB7 C9 02		            cmp #2
  1181 3AB9 D0 03		            bne not_p2_turn
  1182
  1183 3ABB 20 D6 3A		            jsr cpu_controller
  1184
  1185 3ABE			not_p2_turn
  1186 3ABE 20 05 3B		            jsr move_player
  1187 3AC1 20 27 3C		            jsr show_p2
  1188
  1189 3AC4			not_in_game
  1190 3AC4 60			            rts
  1191
  1192 3AC5			set_cpu_angle_end
  1193 3AC5 A6 B5		            ldx player_turn
  1194 3AC7 CA			            dex
  1195 3AC8 AD 0A D2		            lda RANDOM
  1196 3ACB 29 07		            and #7
  1197 3ACD 18			            clc
  1198 3ACE 65 AB		            adc ball_angle_end
  1199 3AD0 38			            sec
  1200 3AD1 E9 03		            sbc #3
  1201 3AD3 95 BA		            sta cpu_angle_end,x
  1202 3AD5 60			            rts
  1203
  1204 				; x = 0 (cpu 1), x = 1 (cpu 2)
  1205
  1206 3AD6			cpu_controller
  1207 				;            lda ball_angle_end  ; current ball end
  1208 3AD6 B5 BA		            lda cpu_angle_end,x
  1209 3AD8 85 B0		            sta tmp_angle1
  1210 3ADA B5 9C		            lda p1_angle,x
  1211 3ADC 85 B1		            sta tmp_angle2
  1212
  1213 3ADE 20 38 3D		            jsr calc_angle_diff
  1214
  1215 3AE1 A5 B7		            lda tmp_angle_diff
  1216 3AE3 F0 1F		            beq comp_in_catch_position
  1217 3AE5 A5 B4		            lda tmp_angle_direction
  1218 3AE7 D0 0E		            bne move_comp_clockwise
  1219
  1220 3AE9 AD 0A D2		            lda RANDOM
  1221 3AEC 29 03		            and #3
  1222 3AEE D0 14		            bne comp_in_catch_position
  1223 3AF0 B5 9C		            lda p1_angle,x
  1224 3AF2 65 88		            adc stick_slow_speed
  1225 3AF4 95 9C		            sta p1_angle,x
  1226 3AF6 60			            rts
  1227 3AF7			move_comp_clockwise
  1228
  1229 3AF7 AD 0A D2		            lda RANDOM
  1230 3AFA 29 03		            and #3
  1231 3AFC D0 06		            bne comp_in_catch_position
  1232
  1233 3AFE B5 9C		            lda p1_angle,x
  1234 3B00 E5 88		            sbc stick_slow_speed
  1235 3B02 95 9C		            sta p1_angle,x
  1236 3B04			comp_in_catch_position
  1237 3B04 60			            rts
  1238
  1239 				; move player 1/2
  1240 				; right - clockwise, left = anti-clockwise
  1241
  1242 				; X = 0, player 1
  1243 				; X = 1, player 2
  1244
  1245 				; Y = driver mode:
  1246 				; 0 : stick
  1247 				; 1 : paddle
  1248 				; 2 : driving
  1249 				; 3 : computer
  1250 				            
  1251 3B05			move_player
  1252 3B05 B5 9C		            lda p1_angle,x
  1253 3B07 29 7F		            and #127                    ; restrict angle to 0..179 degrees
  1254 3B09 49 40		            eor #64                     ; perpendicular to the circle angle
  1255 3B0B 95 90		            sta p1_shape,x
  1256
  1257 3B0D B4 9C		            ldy p1_angle,x
  1258 3B0F B9 00 40		            lda inner_x_tab,y
  1259 3B12 4A			            lsr
  1260 3B13 69 20		            adc #inner_x_margin/2
  1261 3B15 95 94		            sta player1_x,x
  1262 3B17 B9 00 41		            lda inner_y_tab,y
  1263 3B1A 4A			            lsr
  1264 3B1B 95 98		            sta player1_y,x
  1265
  1266 3B1D B4 90		            ldy p1_shape,x
  1267 3B1F 20 9C 3C		            jsr shape_to_ptr
  1268
  1269 3B22 60			            rts
  1270
  1271 				; Set ball at start position
  1272 				; - start angle current player
  1273 				; - start position by inner table
  1274 				; - collision delay set?
  1275
  1276 				; Set ball current position to start position
  1277 				; input:
  1278 				; X = angle of start position
  1279 				; output:
  1280 				; ball position: (ball_current_x, ball_current_y)
  1281 				; (tmp_x1, tmp_y1) = (ball_current_x, ball_current_y)
  1282 3B23			ball_to_start_position
  1283 3B23 BD 00 40		            lda inner_x_tab,x
  1284 3B26 85 A6		            sta ball_current_x
  1285 3B28 85 E6		            sta tmp_x1
  1286 3B2A BD 00 41		            lda inner_y_tab,x
  1287 3B2D 85 A7		            sta ball_current_y
  1288 3B2F 85 E7		            sta tmp_y1
  1289 3B31 60			            rts
  1290
  1291 				; Prepare ball end position
  1292 				; - end angle current player
  1293 				; - end position by outer table
  1294 				; - calculate step size x,y
  1295
  1296 				; Input:
  1297 				; - ball_angle_start
  1298 				; - ball speed
  1299 				; Output:
  1300 				; - ball_andle_end
  1301 				; - ball start position (tmp_x1, tmp_y1)
  1302 				; - ball end position (tmp_x2, tmp_y2)
  1303 				; - step size (step_x, step_y) for ball movement
  1304 3B32			prepare_ball_end_position
  1305 3B32 A5 AA		            lda ball_angle_start
  1306 3B34 49 80		            eor #128        ; other side
  1307 3B36 85 AB		            sta ball_angle_end
  1308 3B38 AA			            tax
  1309 3B39 20 BD 3B		            jsr angle_to_end_position
  1310 				                        
  1311 3B3C 20 FC 3D		            jsr init_current_xy
  1312 				            
  1313 				; move current a little bit            
  1314 3B3F 20 69 3E		            jsr move_current_xy
  1315 				; ignore end indicator, since we only just started
  1316
  1317
  1318 3B42 A9 0A		            lda #10         ; ball can touch bat at start position, so use this delay
  1319 3B44 85 A4		            sta bat_collision_delay
  1320 3B46 60			            rts
  1321
  1322 				; x = angle 0..255
  1323 3B47			outer_angle_to_start_position
  1324 3B47 BD 00 10		            lda outer_x_256,x
  1325 3B4A 85 A6		            sta ball_current_x
  1326 3B4C 85 E6		            sta tmp_x1
  1327 3B4E BD 00 11		            lda outer_y_256,x
  1328 3B51 85 A7		            sta ball_current_y
  1329 3B53 85 E7		            sta tmp_y1
  1330 3B55 60			            rts
  1331
  1332 3B56			ball_current_to_start_position
  1333 3B56 A5 A6		            lda ball_current_x
  1334 3B58 85 E6		            sta tmp_x1
  1335 3B5A A5 A7		            lda ball_current_y
  1336 3B5C 85 E7		            sta tmp_y1
  1337 3B5E 60			            rts
  1338
  1339 				; Ball collides with bat
  1340 				; - start ball angle = end ball angle
  1341 				; - calculate diff between bat and ball end angle
  1342 				; - calculate new end angle
  1343 				; - Set ball at start position
  1344 				; - Prepare ball end position
  1345
  1346 3B5F			bounce_bat_ball
  1347 				; set new start of ball
  1348 				; @todo check ball angles
  1349 				; set new ball start angle (= previous end angle)
  1350 3B5F A5 AB		            lda ball_angle_end
  1351 3B61 85 AA		            sta ball_angle_start
  1352 				            
  1353 				; alternative?
  1354 				            ;ldx ball_angle_start
  1355 				            ;jsr ball_to_start_position          
  1356 3B63 20 56 3B		            jsr ball_current_to_start_position
  1357
  1358 				; which player hit the ball?
  1359 				; collision bits:
  1360 				; xxxxx1x1 : 1 is player1 collision
  1361 				; xxxx1010 : 2 is player2 collision
  1362
  1363 3B66 A5 A0		            lda mp_collision
  1364 3B68 4A			            lsr
  1365 3B69 4A			            lsr
  1366 3B6A 05 A0		            ora mp_collision
  1367 3B6C 29 03		            and #%00000011      ; 01 = player1, 10 = player2, 11 = both
  1368
  1369 				; who's turn is it and who bounced the ball?
  1370
  1371 3B6E 25 B5		            and player_turn
  1372 3B70 F0 06		            beq no_switch_turn
  1373
  1374 3B72 A5 B5		            lda player_turn
  1375 3B74 49 03		            eor #3              ; 1 => 2, 2 => 1
  1376 3B76 85 B5		            sta player_turn
  1377
  1378 3B78			no_switch_turn
  1379 3B78 20 47 37		            jsr turn_color_ball
  1380
  1381 3B7B A5 B5		            lda player_turn
  1382 3B7D 49 03		            eor #3
  1383 3B7F AA			            tax
  1384 3B80 CA			            dex                 ; index 0,1 (player = 1,2)
  1385 3B81 B5 9C		            lda p1_angle,x
  1386
  1387 				; Calculate diff between bat angle position and new ball start position
  1388 3B83 85 B0		            sta tmp_angle1
  1389
  1390 3B85 A5 AA		            lda ball_angle_start
  1391 3B87 85 B1		            sta tmp_angle2
  1392
  1393 3B89 20 38 3D		            jsr calc_angle_diff
  1394
  1395 3B8C 0A			            asl
  1396 3B8D 0A			            asl
  1397 3B8E 0A			            asl
  1398 3B8F 85 B3		            sta angle_diff_bat
  1399
  1400 3B91 A5 B0		            lda tmp_angle1
  1401 3B93 18			            clc
  1402 3B94 65 B2		            adc add_to_angle
  1403 3B96 49 80		            eor #128            ; other side
  1404 3B98 85 B0		            sta tmp_angle1
  1405 				            
  1406 3B9A A5 B4		            lda tmp_angle_direction
  1407 3B9C D0 0A		            bne diff_clockwise
  1408 				; diff counter clockwise
  1409 3B9E A5 B0		            lda tmp_angle1
  1410 3BA0 18			            clc
  1411 3BA1 65 B3		            adc angle_diff_bat
  1412 3BA3 85 B0		            sta tmp_angle1
  1413 3BA5 4C AF 3B		            jmp calc_done            
  1414
  1415 3BA8			diff_clockwise
  1416 3BA8 A5 B0		            lda tmp_angle1
  1417 3BAA 38			            sec
  1418 3BAB E5 B3		            sbc angle_diff_bat
  1419 3BAD 85 B0		            sta tmp_angle1
  1420 				            
  1421 				; calculation done            
  1422 3BAF			calc_done
  1423 3BAF A5 B0		            lda tmp_angle1
  1424 3BB1 85 AB		            sta ball_angle_end
  1425 3BB3 AA			            tax
  1426 3BB4 20 BD 3B		            jsr angle_to_end_position
  1427
  1428 3BB7 20 C5 3A		            jsr set_cpu_angle_end
  1429
  1430 3BBA 4C FC 3D		            jmp init_current_xy
  1431
  1432 				; x = angle 0..255
  1433 3BBD			angle_to_end_position
  1434 3BBD BD 00 10		            lda outer_x_256,x
  1435 3BC0 85 E8		            sta tmp_x2
  1436 3BC2 BD 00 11		            lda outer_y_256,x
  1437 3BC5 85 E9		            sta tmp_y2
  1438 3BC7 60			            rts
  1439
  1440 3BC8			wipe_ball
  1441 3BC8 A5 A7		            lda ball_current_y
  1442 3BCA 4A			            lsr
  1443 3BCB 69 06		            adc #ball_top_margin
  1444 3BCD AA			            tax                 ; x = real y position on screen
  1445 3BCE A9 00		            lda #0
  1446 3BD0 9D 80 0D		            sta msl_area,x
  1447 3BD3 9D 81 0D		            sta msl_area+1,x
  1448 3BD6 9D 82 0D		            sta msl_area+2,x
  1449 3BD9 9D 83 0D		            sta msl_area+3,x
  1450 3BDC 60			            rts
  1451
  1452 3BDD			show_ball
  1453 3BDD A5 A7		            lda ball_current_y
  1454 3BDF 4A			            lsr
  1455 3BE0 69 06		            adc #ball_top_margin
  1456 3BE2 AA			            tax                 ; x = real y position on screen
  1457
  1458 3BE3 A9 02		            lda #%00000010
  1459 3BE5 9D 80 0D		            sta msl_area,x
  1460 3BE8 9D 83 0D		            sta msl_area+3,x
  1461 3BEB A9 07		            lda #%00000111
  1462 3BED 9D 81 0D		            sta msl_area+1,x
  1463 3BF0 9D 82 0D		            sta msl_area+2,x
  1464 				            
  1465 3BF3 A5 A6		            lda ball_current_x
  1466 3BF5 4A			            lsr
  1467 3BF6 69 45		            adc #ball_left_margin
  1468 3BF8 8D 05 D0		            sta HPOSM1
  1469 3BFB 69 02		            adc #2
  1470 3BFD 8D 04 D0		            sta HPOSM0
  1471 				                        
  1472 3C00 60			            rts
  1473 				            
  1474 3C01			show_p1
  1475 				; y position
  1476 3C01 A5 98		            lda player1_y
  1477 3C03 18			            clc
  1478 3C04 69 01		            adc #upper_margin
  1479 3C06 AA			            tax
  1480
  1481 3C07 A0 00		            ldy #0
  1482 3C09			show_shape1
  1483 3C09 B1 84		            lda (shape_ptr),y
  1484 3C0B 9D 00 0E		            sta p0_area,x 
  1485 3C0E C8			            iny
  1486 3C0F B1 84		            lda (shape_ptr),y
  1487 3C11 9D 00 0F		            sta p2_area,x
  1488 3C14 E8			            inx
  1489 3C15 C8			            iny
  1490 3C16 C0 20		            cpy #32
  1491 3C18 D0 EF		            bne show_shape1
  1492
  1493 				; x position
  1494 3C1A A5 94		            lda player1_x
  1495 3C1C 18			            clc
  1496 3C1D 69 20		            adc #left_margin
  1497 3C1F 85 81		            sta shadow_HPOSP0
  1498 3C21 69 08		            adc #8
  1499 3C23 8D 02 D0		            sta HPOSP2
  1500 3C26 60			            rts
  1501
  1502 3C27			show_p2
  1503 				; y position
  1504 3C27 A5 99		            lda player2_y
  1505 3C29 18			            clc
  1506 3C2A 69 01		            adc #upper_margin
  1507 3C2C AA			            tax
  1508
  1509 3C2D A0 00		            ldy #0
  1510 3C2F			show_shape2
  1511 3C2F B1 84		            lda (shape_ptr),y
  1512 3C31 9D 80 0E		            sta p1_area,x
  1513 3C34 C8			            iny
  1514 3C35 B1 84		            lda (shape_ptr),y
  1515 3C37 9D 80 0F		            sta p3_area,x
  1516 3C3A E8			            inx
  1517 3C3B C8			            iny
  1518 3C3C C0 20		            cpy #32
  1519 3C3E D0 EF		            bne show_shape2
  1520
  1521 				; x position
  1522 3C40 A5 95		            lda player2_x
  1523 3C42 18			            clc
  1524 3C43 69 20		            adc #left_margin
  1525 3C45 85 82		            sta shadow_HPOSP1
  1526 3C47 69 08		            adc #8
  1527 3C49 8D 03 D0		            sta HPOSP3
  1528 3C4C 60			            rts
  1529
  1530 3C4D			wipe_p1
  1531 3C4D A5 98		            lda player1_y
  1532 3C4F 18			            clc
  1533 3C50 69 01		            adc #upper_margin
  1534 3C52 AA			            tax
  1535 				            
  1536 3C53 A0 10		            ldy #16
  1537 3C55 A9 00		            lda #0
  1538 3C57			wipe_it1            
  1539 3C57 9D 00 0E		            sta p0_area,x 
  1540 3C5A 9D 00 0F		            sta p2_area,x
  1541 3C5D E8			            inx
  1542 3C5E 88			            dey
  1543 3C5F D0 F6		            bne wipe_it1 
  1544 3C61 60			            rts
  1545
  1546 3C62			wipe_p2
  1547 3C62 A5 99		            lda player2_y
  1548 3C64 18			            clc
  1549 3C65 69 01		            adc #upper_margin
  1550 3C67 AA			            tax
  1551 				            
  1552 3C68 A0 10		            ldy #16
  1553 3C6A A9 00		            lda #0
  1554 3C6C			wipe_it2            
  1555 3C6C 9D 80 0E		            sta p1_area,x
  1556 3C6F 9D 80 0F		            sta p3_area,x
  1557 3C72 E8			            inx
  1558 3C73 88			            dey
  1559 3C74 D0 F6		            bne wipe_it2 
  1560 3C76 60			            rts
  1561
  1562 3C77			make_shape_index
  1563 3C77 A9 00		            lda #<pm_shapes
  1564 3C79 85 84		            sta shape_ptr
  1565 3C7B A9 60		            lda #>pm_shapes
  1566 3C7D 85 85		            sta shape_ptr+1
  1567 				            
  1568 3C7F A2 00		            ldx #0
  1569 3C81			fill_pm_tab
  1570 3C81 A5 84		            lda shape_ptr
  1571 3C83 9D 00 14		            sta pm_shape_lo,x
  1572 3C86 A5 85		            lda shape_ptr+1
  1573 3C88 9D 80 14		            sta pm_shape_hi,x
  1574 				            
  1575 3C8B A5 84		            lda shape_ptr
  1576 3C8D 18			            clc
  1577 3C8E 69 20		            adc #32
  1578 3C90 85 84		            sta shape_ptr
  1579 3C92 A5 85		            lda shape_ptr+1
  1580 3C94 69 00		            adc #0
  1581 3C96 85 85		            sta shape_ptr+1
  1582 				            
  1583 3C98 E8			            inx
  1584 3C99 10 E6		            bpl fill_pm_tab
  1585 				            
  1586 3C9B 60			            rts
  1587 				            
  1588 				; there are 128 shapes, each 32 bytes
  1589
  1590 				; y = shape index
  1591 3C9C			shape_to_ptr
  1592 3C9C B9 00 14		            lda pm_shape_lo,y
  1593 3C9F 85 84		            sta shape_ptr
  1594 3CA1 B9 80 14		            lda pm_shape_hi,y
  1595 3CA4 85 85		            sta shape_ptr+1
  1596
  1597 3CA6 60			            rts
  1598
  1599 				; turn 1024 tables into 256 bytes for ball edge lookup
  1600 3CA7			make_outer_256
  1601 3CA7 A0 00		            ldy #0
  1602 3CA9 A2 00		            ldx #0
  1603 3CAB			conv_256
  1604 3CAB BD 00 44		            lda outer_x_tab,x
  1605 3CAE 99 00 10		            sta outer_x_256,y
  1606 3CB1 BD 00 45		            lda outer_x_tab+$100,x
  1607 3CB4 99 40 10		            sta outer_x_256+64,y
  1608 3CB7 BD 00 46		            lda outer_x_tab+$200,x
  1609 3CBA 99 80 10		            sta outer_x_256+128,y
  1610 3CBD BD 00 47		            lda outer_x_tab+$300,x
  1611 3CC0 99 C0 10		            sta outer_x_256+192,y
  1612 				            
  1613 3CC3 BD 00 48		            lda outer_y_tab,x
  1614 3CC6 99 00 11		            sta outer_y_256,y
  1615 3CC9 BD 00 49		            lda outer_y_tab+$100,x
  1616 3CCC 99 40 11		            sta outer_y_256+64,y
  1617 3CCF BD 00 4A		            lda outer_y_tab+$200,x
  1618 3CD2 99 80 11		            sta outer_y_256+128,y
  1619 3CD5 BD 00 4B		            lda outer_y_tab+$300,x
  1620 3CD8 99 C0 11		            sta outer_y_256+192,y
  1621
  1622 3CDB E8			            inx
  1623 3CDC E8			            inx
  1624 3CDD E8			            inx
  1625 3CDE E8			            inx
  1626 3CDF C8			            iny
  1627 3CE0 C0 40		            cpy #64
  1628 3CE2 D0 C7		            bne conv_256            
  1629 3CE4 60			            rts
  1630
  1631 3CE5			show_score_p1
  1632 3CE5 AD 2E 51		            lda score_p1
  1633 3CE8 4A			            lsr
  1634 3CE9 4A			            lsr
  1635 3CEA 4A			            lsr
  1636 3CEB 4A			            lsr
  1637 3CEC F0 02		            beq do_space1
  1638 3CEE 09 10		            ora #16
  1639 3CF0			do_space1
  1640 3CF0 8D 0B 51		            sta score_chars_p1
  1641 3CF3 AD 2E 51		            lda score_p1
  1642 3CF6 29 0F		            and #15
  1643 3CF8 09 10		            ora #16
  1644 3CFA 8D 0C 51		            sta score_chars_p1+1
  1645 3CFD 60			            rts
  1646
  1647 3CFE			show_score_p2
  1648 3CFE AD 2F 51		            lda score_p2
  1649 3D01 4A			            lsr
  1650 3D02 4A			            lsr
  1651 3D03 4A			            lsr
  1652 3D04 4A			            lsr
  1653 3D05 F0 02		            beq do_space2
  1654 3D07 09 10		            ora #16
  1655 3D09			do_space2
  1656 3D09 8D 2B 51		            sta score_chars_p2
  1657 3D0C AD 2F 51		            lda score_p2
  1658 3D0F 29 0F		            and #15
  1659 3D11 09 10		            ora #16
  1660 3D13 8D 2C 51		            sta score_chars_p2+1
  1661 3D16 60			            rts
  1662 				                        
  1663 3D17			reset_score
  1664 3D17 A9 00		            lda #0
  1665 3D19 8D 2E 51		            sta score_p1
  1666 3D1C 8D 2F 51		            sta score_p2
  1667 3D1F 60			            rts            
  1668 				         
  1669 3D20			inc_score_p1
  1670 3D20 F8			            sed
  1671 3D21 AD 2E 51		            lda score_p1
  1672 3D24 18			            clc
  1673 3D25 69 01		            adc #1
  1674 3D27 8D 2E 51		            sta score_p1    
  1675 3D2A D8			            cld
  1676 3D2B 60			            rts
  1677
  1678 3D2C			inc_score_p2
  1679 3D2C F8			            sed
  1680 3D2D AD 2F 51		            lda score_p2
  1681 3D30 18			            clc
  1682 3D31 69 01		            adc #1
  1683 3D33 8D 2F 51		            sta score_p2
  1684 3D36 D8			            cld
  1685 3D37 60			            rts
  1686
  1687 				; calculate the difference between angle1 and angle2
  1688
  1689 				; input:
  1690 				; tmp_angle1 (0..255)
  1691 				; tmp_angle2 (0..255)
  1692
  1693 				; output:
  1694 				; tmp_angle_diff, A: difference between angle1 and angle2
  1695 				; tmp_angle_direction: 0 = anti-clockwise, 1 = clockwise
  1696
  1697 3D38			calc_angle_diff
  1698 3D38 A9 00		            lda #0
  1699 3D3A 85 B2		            sta add_to_angle
  1700 3D3C 85 B4		            sta tmp_angle_direction
  1701
  1702 				; make sure we can compare angles, otherwise add $40 to angles
  1703 3D3E A5 B0		            lda tmp_angle1
  1704 3D40 C9 C0		            cmp #$c0
  1705 3D42 B0 06		            bcs too_large
  1706 3D44 A5 B1		            lda tmp_angle2
  1707 3D46 C9 C0		            cmp #$c0
  1708 3D48 90 12		            bcc not_too_large
  1709 3D4A			too_large
  1710 3D4A A5 B0		            lda tmp_angle1
  1711 3D4C 38			            sec
  1712 3D4D E9 40		            sbc #$40
  1713 3D4F 85 B0		            sta tmp_angle1
  1714 				            
  1715 3D51 A5 B1		            lda tmp_angle2
  1716 3D53 38			            sec
  1717 3D54 E9 40		            sbc #$40
  1718 3D56 85 B1		            sta tmp_angle2
  1719 				            
  1720 3D58 A9 40		            lda #$40
  1721 3D5A 85 B2		            sta add_to_angle
  1722
  1723 3D5C			not_too_large
  1724 3D5C A5 B1		            lda tmp_angle2
  1725 3D5E C5 B0		            cmp tmp_angle1
  1726 3D60 90 0A		            bcc angle2_smaller_angle1
  1727 				; ball >= play
  1728 3D62 38			            sec
  1729 3D63 E5 B0		            sbc tmp_angle1
  1730 3D65 85 B7		            sta tmp_angle_diff
  1731 				            
  1732 3D67 E6 B4		            inc tmp_angle_direction
  1733 3D69 4C 73 3D		            jmp diff_calculated
  1734 				                        
  1735 3D6C			angle2_smaller_angle1
  1736 3D6C A5 B0		            lda tmp_angle1
  1737 3D6E 38			            sec
  1738 3D6F E5 B1		            sbc tmp_angle2
  1739 3D71 85 B7		            sta tmp_angle_diff
  1740
  1741 3D73			diff_calculated
  1742 3D73 A5 B7		            lda tmp_angle_diff           
  1743 3D75 60			            rts
  1744
  1745 				; X = angle
  1746 				; lookup magnitude of angle 0 to angle X
  1747 3D76			angle_to_magnitude
  1748 3D76 BD 00 4C		            lda magnitudes_lo,x
  1749 3D79 85 B8		            sta magnitude
  1750 3D7B BD 00 4D		            lda magnitudes_hi,x
  1751 3D7E 85 B9		            sta magnitude+1
  1752 3D80 60			            rts
  1753
  1754 				; tmp_dx = abs(tmp_x2 - tmp_x1)
  1755 3D81			calc_abs_tmp_dx
  1756 3D81 A5 E8		            lda tmp_x2
  1757 3D83 38			            sec
  1758 3D84 E5 E6		            sbc tmp_x1
  1759 3D86 B0 05		            bcs x2_le
  1760 3D88 49 FF		            eor #255
  1761 3D8A 18			            clc
  1762 3D8B 69 01		            adc #1
  1763 3D8D 85 F2		x2_le       sta tmp_dx
  1764
  1765 				; tmp_dy = abs(tmp_y2 - tmp_y1)
  1766 3D8F			calc_abs_tmp_dy
  1767 3D8F A5 E9		            lda tmp_y2
  1768 3D91 38			            sec
  1769 3D92 E5 E7		            sbc tmp_y1
  1770 3D94 B0 05		            bcs y2_le
  1771 3D96 49 FF		            eor #255
  1772 3D98 18			            clc
  1773 3D99 69 01		            adc #1
  1774 3D9B 85 F3		y2_le       sta tmp_dy
  1775 3D9D 60			            rts
  1776 				            
  1777 3D9E			calc_dx_div_magnitude
  1778 3D9E A9 00		            lda #0
  1779 3DA0 85 E2		            sta _dividend
  1780 3DA2 A5 F2		            lda tmp_dx
  1781 3DA4 85 E3		            sta _dividend+1
  1782
  1783 3DA6 A5 B9		            lda magnitude+1
  1784 3DA8 85 E0		            sta _divisor
  1785 3DAA A9 00		            lda #0
  1786 3DAC 85 E1		            sta _divisor+1
  1787 				            
  1788 3DAE 20 D6 3D		            jsr _div16
  1789
  1790 				; todo multiply result with velocity            
  1791 3DB1 A5 E2		            lda _result
  1792 3DB3 85 EE		            sta step_x
  1793 3DB5 A5 E3		            lda _result+1
  1794 3DB7 85 EF		            sta step_x+1
  1795 				            
  1796 3DB9 60			            rts
  1797 				            
  1798 3DBA			calc_dy_div_magnitude
  1799 3DBA A9 00		            lda #0
  1800 3DBC 85 E2		            sta _dividend
  1801 3DBE A5 F3		            lda tmp_dy
  1802 3DC0 85 E3		            sta _dividend+1
  1803 				            
  1804 3DC2 A5 B9		            lda magnitude+1
  1805 3DC4 85 E0		            sta _divisor
  1806 3DC6 A9 00		            lda #0
  1807 3DC8 85 E1		            sta _divisor+1
  1808
  1809 3DCA 20 D6 3D		            jsr _div16
  1810 				            
  1811 				; todo multiply result with velocity
  1812 3DCD A5 E2		            lda _result
  1813 3DCF 85 F0		            sta step_y
  1814 3DD1 A5 E3		            lda _result+1
  1815 3DD3 85 F1		            sta step_y+1
  1816 				            
  1817 3DD5 60			            rts
  1818
  1819 				; divide 16bit
  1820 				; https://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
  1821
  1822 				; _result = _dividend / divisor
  1823
  1824 3DD6 A9 00		_div16      lda #0          ;preset remainder to 0
  1825 3DD8 85 E4		            sta _remainder
  1826 3DDA 85 E5		            sta _remainder+1
  1827 3DDC A2 10		            ldx #16         ;repeat for each bit: ...
  1828
  1829 3DDE 06 E2		_div_loop   asl _dividend    ;dividend lb & hb*2, msb -> Carry
  1830 3DE0 26 E3		            rol _dividend+1  
  1831 3DE2 26 E4		            rol _remainder   ;remainder lb & hb * 2 + msb from carry
  1832 3DE4 26 E5		            rol _remainder+1
  1833 3DE6 A5 E4		            lda _remainder
  1834 3DE8 38			            sec
  1835 3DE9 E5 E0		            sbc _divisor ;substract divisor to see if it fits in
  1836 3DEB A8			            tay         ;lb result -> Y, for we may need it later
  1837 3DEC A5 E5		            lda _remainder+1
  1838 3DEE E5 E1		            sbc _divisor+1
  1839 3DF0 90 06		            bcc _div_skip    ;if carry=0 then divisor didn't fit in yet
  1840
  1841 3DF2 85 E5		            sta _remainder+1 ;else save substraction result as new remainder,
  1842 3DF4 84 E4		            sty _remainder   
  1843 3DF6 E6 E2		            inc _result  ;and INCrement result cause divisor fit in 1 times
  1844
  1845 3DF8 CA			_div_skip   dex
  1846 3DF9 D0 E3		            bne _div_loop 
  1847 3DFB 60			            rts
  1848
  1849 				; Calculations for step size
  1850
  1851 				; not optimised for speed or size
  1852 				; step should be set according to the angle
  1853
  1854 				; move in straight line (x1,y1) to (x2,y2)
  1855
  1856 				; 1. set start/end of line
  1857 				; set (tmp_x1, tmp_y1)
  1858 				; set (tmp_x2, tmp_y2)
  1859
  1860 				; 2. init. current_x, current_y
  1861 				; - set current x,y to start of line (tmp_x1, tmp_y2)
  1862 				; - calculates step sizes for x,y
  1863 				; - calculated directions for x,y
  1864 				;            jsr init_current_xy
  1865
  1866 				; 3. use current_x, current_y to plot or set a position
  1867 				;            lda current_x+1
  1868 				;            sta x_position
  1869 				;            lda current_y+1
  1870 				;            sta y_position
  1871 				;            jsr plot_pixel
  1872
  1873 				; 4. move current_x, current_y to next position on line
  1874 				; A=0 still moving
  1875 				;           move_current_xy
  1876
  1877 3DFC			init_current_xy
  1878 3DFC A9 7F		            lda #$7f      ; was 128 for half pixel
  1879 3DFE 85 EA		            sta current_x
  1880 3E00 85 EC		            sta current_y
  1881
  1882 3E02 A5 E6		            lda tmp_x1
  1883 3E04 85 EB		            sta current_x+1
  1884 				            
  1885 3E06 A5 E7		            lda tmp_y1
  1886 3E08 85 ED		            sta current_y+1
  1887
  1888 				; dx = abs(tmp_x1 - tmp_x2)
  1889 3E0A 20 81 3D		            jsr calc_abs_tmp_dx
  1890
  1891 				; dy = abs(tmp_y1 - tmp_y2)
  1892 3E0D 20 8F 3D		            jsr calc_abs_tmp_dy
  1893
  1894 				; set directions
  1895 3E10 A5 E6		            lda tmp_x1
  1896 3E12 C5 E8		            cmp tmp_x2
  1897 3E14 90 04		            bcc x1_smaller_x2
  1898 				; x1 >= x2
  1899 3E16 A9 01		            lda #1
  1900 3E18 D0 02		            bne set_dir_x
  1901 3E1A			x1_smaller_x2
  1902 3E1A A9 00		            lda #0
  1903 3E1C			set_dir_x
  1904 3E1C 85 FA		            sta dir_x
  1905 				            
  1906 3E1E A5 E7		            lda tmp_y1
  1907 3E20 C5 E9		            cmp tmp_y2
  1908 3E22 90 04		            bcc y1_smaller_y2
  1909 				; y1 >= y2
  1910 3E24 A9 01		            lda #1
  1911 3E26 D0 02		            bne set_dir_y
  1912 3E28			y1_smaller_y2
  1913 3E28 A9 00		            lda #0
  1914 3E2A			set_dir_y
  1915 3E2A 85 FB		            sta dir_y
  1916
  1917 				; Calculate diff between start angle and end angle
  1918
  1919 3E2C A5 AA		            lda ball_angle_start
  1920 3E2E 85 B0		            sta tmp_angle1
  1921 3E30 A5 AB		            lda ball_angle_end
  1922 3E32 85 B1		            sta tmp_angle2
  1923 				            
  1924 3E34 20 38 3D		            jsr calc_angle_diff
  1925
  1926 				; lookup magnitude of vector (tmp_x1, tmp_y1), (tmp_x2, tmp_y2)
  1927 3E37 A6 B7		            ldx tmp_angle_diff
  1928 3E39 20 76 3D		            jsr angle_to_magnitude
  1929 				            
  1930 3E3C 20 9E 3D		            jsr calc_dx_div_magnitude
  1931 3E3F 20 BA 3D		            jsr calc_dy_div_magnitude
  1932 				            
  1933 				; Calculate step size by ball speed
  1934 				            
  1935 				; step_x = step_x * speed
  1936 				            
  1937 3E42 A5 EE		            lda step_x
  1938 3E44 85 F6		            sta _multiplicand
  1939 3E46 A5 EF		            lda step_x+1
  1940 3E48 85 F7		            sta _multiplicand+1
  1941 3E4A A5 AC		            lda ball_speed
  1942 3E4C 85 F8		            sta _multiplier
  1943
  1944 3E4E 20 E3 35		            jsr _multi8
  1945 				;result in .A (low byte, also in .X) and .Y (high byte)
  1946 3E51 85 EE		            sta step_x
  1947 3E53 84 EF		            sty step_x+1
  1948 3E55			skip_step_x_hi
  1949 				            
  1950 				; step_y = step_y * speed
  1951
  1952 3E55 A5 F0		            lda step_y
  1953 3E57 85 F6		            sta _multiplicand
  1954 3E59 A5 F1		            lda step_y+1
  1955 3E5B 85 F7		            sta _multiplicand+1
  1956 3E5D A5 AC		            lda ball_speed
  1957 3E5F 85 F8		            sta _multiplier
  1958
  1959 3E61 20 E3 35		            jsr _multi8
  1960 				;result in .A (low byte, also in .X) and .Y (high byte)
  1961 3E64 85 F0		            sta step_y
  1962 3E66 84 F1		            sty step_y+1
  1963 3E68			skip_step_y_hi
  1964
  1965 3E68 60			            rts
  1966
  1967 				; Move ball position 
  1968 				; Add one step, until end reached
  1969 				; Input:
  1970 				; - step size (step_x, step_y)
  1971 				; - current ball position (current_x, current_y)
  1972 				; - end position (tmp_x2, tmp_y2)
  1973 				; Output:
  1974 				; A (0 = still moving, 1 = end reached)
  1975 3E69			move_current_xy
  1976 3E69 A9 00		            lda #0
  1977 3E6B 85 FC		            sta line_end_x
  1978 3E6D 85 FD		            sta line_end_y
  1979
  1980 				; sets line end indicators here
  1981 3E6F 20 8C 3E		            jsr move_current_x
  1982 3E72 20 CC 3E		            jsr move_current_y
  1983
  1984 3E75 A5 FC		            lda line_end_x
  1985 3E77 25 FD		            and line_end_y
  1986 3E79 F0 10		            beq no_end_reached
  1987 				            
  1988 				; set current to (x2,y2)
  1989 3E7B A5 E8		            lda tmp_x2
  1990 3E7D 85 EB		            sta current_x+1
  1991 3E7F A5 E9		            lda tmp_y2
  1992 3E81 85 ED		            sta current_y+1
  1993 				            
  1994 3E83 A9 00		            lda #0
  1995 3E85 85 EA		            sta current_x
  1996 3E87 85 EC		            sta current_y
  1997 				            
  1998 3E89 A9 01		            lda #1 ; end reached
  1999 				            
  2000 3E8B			no_end_reached  ; A = 0
  2001 3E8B 60			            rts
  2002
  2003 3E8C			move_current_x
  2004 3E8C A5 FA		            lda dir_x
  2005 3E8E D0 18		            bne move_current_left
  2006
  2007 				; move right, add
  2008 3E90 A5 EA		            lda current_x
  2009 3E92 18			            clc
  2010 3E93 65 EE		            adc step_x
  2011 3E95 85 EA		            sta current_x
  2012 3E97 A5 EB		            lda current_x+1
  2013 3E99 65 EF		            adc step_x+1
  2014 3E9B 85 EB		            sta current_x+1
  2015
  2016 3E9D A5 EB		            lda current_x+1
  2017 3E9F C5 E8		            cmp tmp_x2
  2018 3EA1 90 04		            bcc no_line_end
  2019 3EA3			exact_end_x
  2020 3EA3 A9 01		            lda #1
  2021 3EA5 85 FC		            sta line_end_x 
  2022 3EA7			no_line_end
  2023 3EA7 60			            rts
  2024 				            
  2025 3EA8			move_current_left
  2026 3EA8 A5 EA		            lda current_x
  2027 3EAA 38			            sec
  2028 3EAB E5 EE		            sbc step_x
  2029 3EAD 90 01		            bcc clear_skip
  2030 3EAF EA			            nop
  2031 3EB0			clear_skip
  2032 3EB0 85 EA		            sta current_x
  2033 3EB2 A5 EB		            lda current_x+1
  2034 3EB4 E5 EF		            sbc step_x+1
  2035 3EB6 85 EB		            sta current_x+1
  2036 3EB8 90 0B		            bcc below_zero
  2037 				                        
  2038 3EBA A5 E8		            lda tmp_x2
  2039 3EBC C5 EB		            cmp current_x+1
  2040 3EBE 90 E7		            bcc no_line_end
  2041 3EC0 A9 01		            lda #1
  2042 3EC2 85 FC		            sta line_end_x            
  2043 3EC4 60			            rts
  2044 3EC5			below_zero            
  2045 3EC5 A9 01		            lda #1
  2046 3EC7 85 FC		            sta line_end_x
  2047 3EC9 85 FD		            sta line_end_y
  2048 3ECB 60			            rts
  2049 3ECC			move_current_y
  2050 3ECC A5 FB		            lda dir_y
  2051 3ECE D0 18		            bne move_current_up
  2052
  2053 				; move down, add
  2054 3ED0 A5 EC		            lda current_y
  2055 3ED2 18			            clc
  2056 3ED3 65 F0		            adc step_y
  2057 3ED5 85 EC		            sta current_y
  2058 3ED7 A5 ED		            lda current_y+1
  2059 3ED9 65 F1		            adc step_y+1
  2060 3EDB 85 ED		            sta current_y+1
  2061 				            
  2062 3EDD A5 ED		            lda current_y+1
  2063 3EDF C5 E9		            cmp tmp_y2
  2064 3EE1 90 C4		            bcc no_line_end
  2065 3EE3			exact_end_y
  2066 3EE3 A9 01		            lda #1
  2067 3EE5 85 FD		            sta line_end_y
  2068 3EE7 60			            rts
  2069
  2070 3EE8			move_current_up
  2071 3EE8 A5 EC		            lda current_y
  2072 3EEA 38			            sec
  2073 3EEB E5 F0		            sbc step_y
  2074 3EED 85 EC		            sta current_y
  2075 3EEF A5 ED		            lda current_y+1
  2076 3EF1 E5 F1		            sbc step_y+1
  2077 3EF3 90 D0		            bcc below_zero
  2078 3EF5 85 ED		            sta current_y+1
  2079 				            
  2080 3EF7 A5 E9		            lda tmp_y2
  2081 3EF9 C5 ED		            cmp current_y+1
  2082 3EFB 90 AA		            bcc no_line_end
  2083 3EFD A9 01		            lda #1
  2084 3EFF 85 FD		            sta line_end_y
  2085 3F01 60			            rts                            
  2086 				            
  2087 3F02			init_sprites
  2088 3F02 A2 00		            ldx #0
  2089 3F04 8A			            txa
  2090 3F05			set_p
  2091 3F05 9D 00 0E		            sta p0_area,x
  2092 3F08 9D 80 0E		            sta p1_area,x
  2093 3F0B 9D 00 0F		            sta p2_area,x
  2094 3F0E 9D 80 0F		            sta p3_area,x
  2095 3F11 E8			            inx
  2096 3F12 10 F1		            bpl set_p
  2097
  2098 3F14 A9 31		            lda #%0110001  ; overlap OR colors, missile = 5th player, prio player 0..3
  2099 3F16 8D 6F 02		            sta GPRIOR
  2100
  2101 3F19 A9 0C		            lda #>pm_area
  2102 3F1B 8D 07 D4		            sta PMBASE
  2103
  2104 3F1E A9 03		            lda #3          ; P/M both on
  2105 3F20 8D 1D D0		            sta GRACTL
  2106
  2107 3F23 A9 90		            lda #$90
  2108 3F25 8D 02 D0		            sta HPOSP2
  2109 3F28 A9 A0		            lda #$A0
  2110 3F2A 8D 03 D0		            sta HPOSP3  
  2111 3F2D 60			            rts
  2112
  2113 3F2E			init_colors
  2114 3F2E A9 5A		            lda #BASE_COLOR_P1+10
  2115 3F30 8D C2 02		            sta PCOLR2
  2116 3F33 A9 BA		            lda #BASE_COLOR_P2+10
  2117 3F35 8D C3 02		            sta PCOLR3
  2118 				            
  2119 3F38 A9 00		            lda #0
  2120 3F3A 8D C6 02		            sta COLOR2
  2121
  2122 3F3D A9 0E		            lda #HEADER_FG_COLOR
  2123 3F3F 8D C5 02		            sta COLOR1
  2124
  2125 3F42 A9 50		            lda #HEADER_P1_COLOR
  2126 3F44 8D C0 02		            sta PCOLR0
  2127 3F47 A9 B0		            lda #HEADER_P2_COLOR
  2128 3F49 8D C1 02		            sta PCOLR1
  2129
  2130 3F4C 60			            rts
  2131
  2132 3F4D			previous_consol
  2133 3F4D 00			            dta 0
  2134
  2135 3F4E			current_level_index
  2136 3F4E 00			            dta 0
  2137 = 0007			NR_OF_LEVELS = 7
  2138 = 0000			INIT_LEVEL_INDEX = 0
  2139 3F4F			level_speeds
  2140 3F4F 02 03 04 05 06 07 +             dta 2,3,4,5,6,7,8
  2141 				;level_speeds_lo
  2142 				;            dta 128
  2143 3F56			stick_slow_speed_tab
  2144 3F56 01 02 02 02 03 03 +             dta 1,2,2,2,3,3,3
  2145 3F5D			stick_fast_speed_tab
  2146 3F5D 02 02 03 03 04 04 +             dta 2,2,3,3,4,4,4
  2147
  2148 				; X = level (0..NR_OF_LEVELS)
  2149 3F64			set_level_ball_speed
  2150 3F64 BD 56 3F		            lda stick_slow_speed_tab,x
  2151 3F67 85 88		            sta stick_slow_speed
  2152 3F69 BD 5D 3F		            lda stick_fast_speed_tab,x
  2153 3F6C 85 89		            sta stick_fast_speed
  2154
  2155 3F6E BD 4F 3F		            lda level_speeds,x
  2156 3F71 85 AC		            sta ball_speed
  2157 3F73 8A			            txa
  2158 3F74 18			            clc
  2159 3F75 69 01		            adc #1
  2160 3F77 09 10		            ora #16
  2161 3F79 8D AB 52		            sta level_char
  2162 3F7C 60			            rts
  2163 				            
  2164 3F7D			increase_level
  2165 3F7D EE 4E 3F		            inc current_level_index
  2166 3F80 AD 4E 3F		            lda current_level_index
  2167 3F83 C9 07		            cmp #NR_OF_LEVELS
  2168 3F85 D0 05		            bne ok_level
  2169 3F87 A9 00		            lda #INIT_LEVEL_INDEX
  2170 3F89 8D 4E 3F		            sta current_level_index
  2171 3F8C			ok_level           
  2172 3F8C 60			            rts
  2173
  2174 3F8D			increase_player_mode
  2175 3F8D E6 8A		            inc player_mode
  2176 3F8F A5 8A		            lda player_mode
  2177 3F91 C9 03		            cmp #NR_OF_PLAYER_MODES
  2178 3F93 D0 04		            bne ok_player_mode
  2179 3F95 A9 00		            lda #INIT_PLAYER_MODE
  2180 3F97 85 8A		            sta player_mode
  2181 3F99			ok_player_mode
  2182 3F99 60			            rts
  2183
  2184 3F9A			show_player_mode
  2185 3F9A A6 8A		            ldx player_mode
  2186 3F9C BD 3F 53		            lda player_mode_lo,x
  2187 3F9F 8D F9 50		            sta menu_line2_ptr
  2188 3FA2 BD 42 53		            lda player_mode_hi,x
  2189 3FA5 8D FA 50		            sta menu_line2_ptr+1
  2190 3FA8 60			            rts
  2191
  2192 3FA9			            .align $100
  2193 4000			inner_x_tab
  2194 = 4100			inner_y_tab = *+$100
  2195 4000-41FF> 70 72 75 77 +             ins 'data\in210.dat'
  2196 				      
  2197 4200			            .align $400            
  2198 				; outer circle 1024 plot points on 360 degrees
  2199 4400			outer_x_tab
  2200 = 4800			outer_y_tab = *+1024
  2201 4400-4DFF> 70 70 71 72 +             ins 'data\out224.dat'
  2202 				           
  2203 4C00			            .align $400
  2204 				; table of magnitudes (length) between angle 0 and 0..255
  2205 				; fixed point 8.8 : hi.lo
  2206 4C00			magnitudes_lo
  2207 = 4D00			magnitudes_hi = *+256
  2208 4C00 00 BC 79 35 F1 AC +             ins 'data\magnitud.dat'
  2209
  2210 4E00			            .align $400
  2211 5000			display_list
  2212 5000-512F> C2		            dta $42+128         ; dli_header
  2213 5001 06 51		            dta a(score_line)
  2214
  2215 				; 102 x 40 = 4080 bytes            
  2216 5003 4F			            dta $4f
  2217 5004 00 70		            dta a(screen_mem1)
  2218 5006 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2219 500D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2220 5015 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2221 501D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2222
  2223 5025 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2224 502D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2225 5035 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2226 503D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2227
  2228 5045 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2229 504D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2230 5055			menu_dl_hook
  2231 5055 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2232 505D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2233
  2234 5065 0F 0F 0F 0F 0F 0F	            dta $0f,$0f,$0f,$0f,$0f,$0f
  2235
  2236 				; 42 + 60 = 102, 4080 bytes
  2237 506B 4F			            dta $4f
  2238 506C 00 80		            dta a(screen_mem2)
  2239 506E 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2240
  2241 5075 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2242 507D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2243 5085 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2244 508D 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2245
  2246 5095 0F 0F		            dta $0f,$0f
  2247
  2248 				; 60 lines
  2249 5097			menu_dl_end
  2250 5097 4F			            dta $4f
  2251 5098 90 86		            dta a(screen_mem2+(42*SCREEN_WIDTH))
  2252 509A 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f
  2253 50A1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2254 50A9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2255 50B1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2256
  2257 50B9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2258 50C1 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2259 50C9 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2260 50D1 0F 0F 0F 0F		            dta $0f,$0f,$0f,$0f
  2261
  2262 				; 20 x 40 = 800
  2263 50D5 4F			            dta $4f
  2264 50D6 00 90		            dta a(screen_mem3)       
  2265 50D8 0F 0F 0F		            dta $0f,$0f,$0f
  2266 50DB 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2267 50E3 0F 0F 0F 0F 0F 0F +             dta $0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
  2268 				            
  2269 50EB 41			            dta $41
  2270 50EC 00 50		            dta a(display_list)
  2271
  2272 50EE			menu_dl_part
  2273 50EE 80			            dta 128 ; dli_menu
  2274 50EF 20			            dta $20
  2275 50F0 42			            dta $42
  2276 50F1 00 52		            dta a(rotor_logo_text)
  2277 50F3 02			            dta 2
  2278 50F4 30			            dta $30
  2279 50F5 46			            dta $46
  2280 50F6			menu_line1_ptr
  2281 50F6 50 52		            dta a(controller_text)
  2282 50F8 46			            dta $46
  2283 50F9			menu_line2_ptr
  2284 50F9 64 52		            dta a(two_player_text)
  2285 50FB 46			            dta $46
  2286 50FC			menu_line3_ptr
  2287 50FC 9F 52		            dta a(level_text)
  2288 50FE 30			            dta $30
  2289 50FF 42			            dta $42
  2290 5100 B3 52		            dta a(start_text)
  2291 5102 10			            dta $10
  2292 5103 01			            dta $01 ; jump
  2293 5104 97 50		            dta a(menu_dl_end)
  2294
  2295 5106			score_line  
  2296 5106 00 2F 2E 25 00	            dta d' ONE '
  2297 510B			score_chars_p1
  2298 510B 0D 0D 00		            dta d'-- '
  2299
  2300 510E 00 00 00 00 00 00 +             dta d'          '
  2301 5118 00 00 00 00 00 00 +             dta d'          '
  2302
  2303 5122 00 00 00 00 00 34 +             dta d'     TWO '
  2304 512B			score_chars_p2
  2305 512B 0D 0D 00		            dta d'-- '
  2306
  2307 512E 00			score_p1    dta 0
  2308 512F 00			score_p2    dta 0
  2309
  2310 5130			            .align $100
  2311 5200			rotor_logo_text
  2312 5200-5344> 00 00 00 00 +             dta d'              '
  2313 520E 45 46 47 48 49 4A +             dta $45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50
  2314 521A 40			            dta $40
  2315 521B 00 00 00 00 00 00 +             dta d'             '
  2316 5228 00 00 00 00 00 00 +             dta d'              '
  2317 5236 51 52 53 54 55 56 +             dta $51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c
  2318 5242 00 00 00 00 00 00 +             dta d'              '
  2319
  2320 5250			controller_text
  2321 5250 00 00 23 2F 2E 34 +             dta d'  CONTROL:'
  2322 525A			driver_screen
  2323 525A 00 00 00 00 00 00 +             dta d'          '
  2324
  2325 5264			two_player_text
  2326 5264 00 00 00 28 35 2D +             dta d'   HUMAN VS HUMAN   '
  2327
  2328 5278			one_player_text
  2329 5278 00 00 00 28 35 2D +             dta d'   HUMAN VS ROBOT  '
  2330
  2331 528B			demo_player_text
  2332 528B 00 00 00 00 00 00 +             dta d'        DEMO        '
  2333
  2334 529F			level_text
  2335 529F 00 00 00 00 00 00 +             dta d'      LEVEL '
  2336 52AB			level_char            
  2337 52AB 11 00 00 00 00 00 +             dta d'1       '
  2338
  2339 52B3			start_text
  2340 52B3 80 80 80 80 80 B3 +             dta d'     START or FIRE buttons to play!     '*
  2341 52DB			stick_text
  2342 52DB 33 34 29 23 2B 00 +             dta d'STICK   '
  2343 52E3			paddle_text
  2344 52E3 30 21 24 24 2C 25 +             dta d'PADDLE  '
  2345 52EB			driving_text
  2346 52EB 24 32 29 36 29 2E +             dta d'DRIVING '
  2347 52F3			computer_text
  2348 52F3 23 2F 2D 30 35 34 +             dta d'COMPUTER'
  2349
  2350 52FB			empty_text
  2351 52FB 00 00 00 00 00 00 +             dta d'                    '
  2352 530F			winner_one_text
  2353 530F 00 00 30 2C 21 39 +             dta d'  PLAYER ONE WINS!  '
  2354 5323			winner_two_text
  2355 5323 00 00 30 2C 21 39 +             dta d'  PLAYER TWO WINS!  '
  2356
  2357 5337			driver_text_lo
  2358 5337 DB			            dta <stick_text
  2359 5338 E3			            dta <paddle_text
  2360 5339 EB			            dta <driving_text
  2361 533A F3			            dta <computer_text
  2362 				            
  2363 533B			driver_text_hi
  2364 533B 52			            dta >stick_text
  2365 533C 52			            dta >paddle_text
  2366 533D 52			            dta >driving_text
  2367 533E 52			            dta >computer_text
  2368
  2369 533F			player_mode_lo
  2370 533F 64			            dta <two_player_text
  2371 5340 78			            dta <one_player_text
  2372 5341 8B			            dta <demo_player_text
  2373
  2374 5342			player_mode_hi
  2375 5342 52			            dta >two_player_text
  2376 5343 52			            dta >one_player_text
  2377 5344 52			            dta >demo_player_text
  2378
  2379 				; 4 KB
  2380 				; 128 x 32 bytes shapes
  2381 5345			            .align $1000
  2382 6000			pm_shapes
  2383 6000-7FEF> 01 00 01 00 +             ins 'data\pm_128_x_32.dat'
  2384
  2385 				; 9 KB for backdrop image
  2386 7000			            .align $1000
  2387 = 7000			screen_mem1 = * ; 4K
  2388 				;            org screen_mem1
  2389 7000 FF FF F1 07 D0 00 +             ins 'gfx\backdrop2.gr8',0,102*SCREEN_WIDTH
  2390
  2391 7FF0			            .align $1000
  2392 = 8000			screen_mem2 = * ; 4K
  2393 				;            org screen_mem2
  2394 8000-8FEF> A1 55 7F E0 +             ins 'gfx\backdrop2.gr8',102*SCREEN_WIDTH,102*SCREEN_WIDTH
  2395
  2396 8FF0			            .align $1000
  2397 = 9000			screen_mem3 = * ; 1K
  2398 				;            org screen_mem3
  2399 9000-931F> EE 2A AB 52 +             ins 'gfx\backdrop2.gr8',204*SCREEN_WIDTH,20*SCREEN_WIDTH
  2400
  2401 02E0-02E1> 47 35		            run main
